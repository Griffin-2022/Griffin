PRAGMA foreign_keys = on 
;PRAGMA foreign_keys = on;
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c REFERENCES t1(a)  , d);
;CREATE TABLE t3(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t4(c REFERENCES t3 , d);
;CREATE TABLE t7(a, b INT PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE t8(c REFERENCES t7 , d);
;CREATE TABLE t9(a REFERENCES nosuchtable, b);
;CREATE TABLE t10(a REFERENCES t9(c) , b);
;
;INSERT INTO t2 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t1 VALUES(1, 2)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(2, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(NULL, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=2 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=NULL WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;DELETE FROM t1 WHERE a=1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t1 SET a = 2
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t1 SET a = 1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t4 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t3 VALUES(1, 2)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t4 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t7 VALUES(2, 1)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(2, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(NULL, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=2 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=NULL WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;DELETE FROM t7 WHERE b=1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 2
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES('a', 'b')
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 5
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET a = 10
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t9 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t10 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;DROP table "t3"
;DROP table "t4"
;DROP table "t7"
;DROP table "t8"
;DROP table "t9"
;DROP table "t10"
;PRAGMA foreign_keys = 1
;PRAGMA foreign_keys = on;
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c REFERENCES t1(a) DEFERRABLE INITIALLY DEFERRED , d);
;CREATE TABLE t3(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t4(c REFERENCES t3 DEFERRABLE INITIALLY DEFERRED, d);
;CREATE TABLE t7(a, b INT PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE t8(c REFERENCES t7 DEFERRABLE INITIALLY DEFERRED, d);
;CREATE TABLE t9(a REFERENCES nosuchtable, b);
;CREATE TABLE t10(a REFERENCES t9(c) DEFERRABLE INITIALLY DEFERRED, b);
;
;INSERT INTO t2 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t1 VALUES(1, 2)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(2, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(NULL, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=2 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=NULL WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;DELETE FROM t1 WHERE a=1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t1 SET a = 2
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t1 SET a = 1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t4 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t3 VALUES(1, 2)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t4 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t7 VALUES(2, 1)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(2, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(NULL, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=2 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=NULL WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;DELETE FROM t7 WHERE b=1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 2
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES('a', 'b')
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 5
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET a = 10
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t9 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t10 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;DROP table "t3"
;DROP table "t4"
;DROP table "t7"
;DROP table "t8"
;DROP table "t9"
;DROP table "t10"
;PRAGMA foreign_keys = 1
;PRAGMA foreign_keys = on;
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c REFERENCES t1(a)  , d);
;CREATE TABLE t3(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t4(c REFERENCES t3 , d);
;CREATE TABLE t7(a, b INT PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE t8(c REFERENCES t7 , d);
;CREATE TABLE t9(a REFERENCES nosuchtable, b);
;CREATE TABLE t10(a REFERENCES t9(c) , b);
;
;PRAGMA count_changes = 1 
;INSERT INTO t2 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t1 VALUES(1, 2)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(2, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t2 VALUES(NULL, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=2 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t2 SET c=NULL WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;DELETE FROM t1 WHERE a=1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t1 SET a = 2
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t1 SET a = 1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t4 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t3 VALUES(1, 2)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t4 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t7 VALUES(2, 1)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(2, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES(NULL, 4)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=2 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=1 WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t8 SET c=NULL WHERE d=4
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;DELETE FROM t7 WHERE b=1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 2
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 1
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t8 VALUES('a', 'b')
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET b = 5
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;UPDATE t7 SET a = 10
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t9 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;INSERT INTO t10 VALUES(1, 3)
;PRAGMA foreign_key_check(t1)
;PRAGMA foreign_key_check(t2)
;PRAGMA foreign_key_check(t3)
;PRAGMA foreign_key_check(t4)
;PRAGMA foreign_key_check(t7)
;PRAGMA foreign_key_check(t8)
;PRAGMA count_changes = 0 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;DROP table "t3"
;DROP table "t4"
;DROP table "t7"
;DROP table "t8"
;DROP table "t9"
;DROP table "t10"
;PRAGMA foreign_keys = 1
;PRAGMA foreign_keys = on;
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c REFERENCES t1(a)  , d);
;CREATE TABLE t3(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t4(c REFERENCES t3 , d);
;CREATE TABLE t7(a, b INT PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE t8(c REFERENCES t7 , d);
;CREATE TABLE t9(a REFERENCES nosuchtable, b);
;CREATE TABLE t10(a REFERENCES t9(c) , b);
;
;PRAGMA count_changes = 1 
;BEGIN
;INSERT INTO t2 VALUES(1, 3)
;COMMIT
;INSERT INTO t1 VALUES(1, 2)
;INSERT INTO t2 VALUES(1, 3)
;INSERT INTO t2 VALUES(2, 4)
;INSERT INTO t2 VALUES(NULL, 4)
;UPDATE t2 SET c=2 WHERE d=4
;UPDATE t2 SET c=1 WHERE d=4
;UPDATE t2 SET c=NULL WHERE d=4
;DELETE FROM t1 WHERE a=1
;UPDATE t1 SET a = 2
;UPDATE t1 SET a = 1
;INSERT INTO t4 VALUES(1, 3)
;INSERT INTO t3 VALUES(1, 2)
;INSERT INTO t4 VALUES(1, 3)
;INSERT INTO t8 VALUES(1, 3)
;INSERT INTO t7 VALUES(2, 1)
;INSERT INTO t8 VALUES(1, 3)
;INSERT INTO t8 VALUES(2, 4)
;INSERT INTO t8 VALUES(NULL, 4)
;UPDATE t8 SET c=2 WHERE d=4
;UPDATE t8 SET c=1 WHERE d=4
;UPDATE t8 SET c=NULL WHERE d=4
;DELETE FROM t7 WHERE b=1
;UPDATE t7 SET b = 2
;UPDATE t7 SET b = 1
;INSERT INTO t8 VALUES('a', 'b')
;UPDATE t7 SET b = 5
;UPDATE t7 SET a = 10
;INSERT INTO t9 VALUES(1, 3)
;INSERT INTO t10 VALUES(1, 3)
;PRAGMA count_changes = 0 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;DROP table "t3"
;DROP table "t4"
;DROP table "t7"
;DROP table "t8"
;DROP table "t9"
;DROP table "t10"
;PRAGMA foreign_keys = 1
;CREATE TABLE i(i INT PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE j(j REFERENCES i);
;INSERT INTO i VALUES(35);
;INSERT INTO j VALUES('35.0');
;SELECT j, typeof(j) FROM j;
;
;DELETE FROM i 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "i"
;DROP table "j"
;PRAGMA foreign_keys = 1
;CREATE TABLE i(i INT UNIQUE);
;CREATE TABLE j(j REFERENCES i(i));
;INSERT INTO i VALUES('35.0');
;INSERT INTO j VALUES('35.0');
;SELECT j, typeof(j) FROM j;
;SELECT i, typeof(i) FROM i;
;
;DELETE FROM i 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "i"
;DROP table "j"
;PRAGMA foreign_keys = 1
;CREATE TABLE i(i TEXT COLLATE nocase PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE j(j TEXT COLLATE binary REFERENCES i(i));
;INSERT INTO i VALUES('SQLite');
;INSERT INTO j VALUES('sqlite');
;
;DELETE FROM i 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "i"
;DROP table "j"
;PRAGMA foreign_keys = 1
;CREATE TABLE i(i TEXT PRIMARY KEY) WITHOUT rowid;
;-- Colseq is "BINARY"
    CREATE TABLE j(j TEXT COLLATE nocase REFERENCES i(i));
;INSERT INTO i VALUES('SQLite');
;
;INSERT INTO j VALUES('sqlite') 
;INSERT INTO i VALUES('sqlite');
;INSERT INTO j VALUES('sqlite');
;DELETE FROM i WHERE i = 'SQLite';
;
;DELETE FROM i WHERE i = 'sqlite' 
;CREATE TABLE node(
    nodeid PRIMARY KEY,
    parent REFERENCES node DEFERRABLE INITIALLY DEFERRED
  ) WITHOUT rowid;
;CREATE TABLE leaf(
    cellid PRIMARY KEY,
    parent REFERENCES node DEFERRABLE INITIALLY DEFERRED
  ) WITHOUT rowid;
;
;INSERT INTO node VALUES(1, 0)
;BEGIN
;INSERT INTO node VALUES(1, 0)
;COMMIT
;UPDATE node SET parent = NULL
;COMMIT
;SELECT * FROM node
;BEGIN
;INSERT INTO leaf VALUES('a', 2)
;COMMIT
;INSERT INTO node VALUES(2, 0)
;COMMIT
;UPDATE node SET parent = 1 WHERE nodeid = 2
;COMMIT
;SELECT * FROM node
;SELECT * FROM leaf
;BEGIN
;DELETE FROM node WHERE nodeid = 2
;COMMIT
;INSERT INTO node VALUES(2, NULL)
;COMMIT
;SELECT * FROM node
;SELECT * FROM leaf
;BEGIN
;INSERT INTO leaf VALUES('b', 1)
;SAVEPOINT save
;DELETE FROM node WHERE nodeid = 1
;ROLLBACK TO save
;COMMIT
;SELECT * FROM node
;SELECT * FROM leaf
;BEGIN
;INSERT INTO leaf VALUES('c', 1)
;SAVEPOINT save
;DELETE FROM node WHERE nodeid = 1
;RELEASE save
;COMMIT
;DELETE FROM leaf WHERE cellid = 'b'
;COMMIT
;DELETE FROM leaf WHERE cellid = 'c'
;COMMIT
;SELECT * FROM node
;SELECT * FROM leaf
;SAVEPOINT outer
;INSERT INTO leaf VALUES('d', 3)
;COMMIT
;RELEASE outer
;COMMIT
;INSERT INTO leaf VALUES('e', 3)
;COMMIT
;INSERT INTO node VALUES(3, 2)
;RELEASE outer
;SAVEPOINT outer
;DELETE FROM node WHERE nodeid=3
;COMMIT
;INSERT INTO node VALUES(3, 2)
;ROLLBACK TO outer
;RELEASE outer
;SAVEPOINT outer
;INSERT INTO leaf VALUES('f', 4)
;COMMIT
;SAVEPOINT inner
;COMMIT
;INSERT INTO leaf VALUES('g', 4)
;COMMIT
;RELEASE outer
;COMMIT
;ROLLBACK TO inner
;COMMIT
;COMMIT
;INSERT INTO node VALUES(4, NULL)
;RELEASE outer
;SELECT * FROM node
;SELECT * FROM leaf
;BEGIN
;DELETE FROM leaf
;DELETE FROM node
;INSERT INTO leaf VALUES('a', 1)
;COMMIT
;INSERT INTO leaf VALUES('b', 2)
;COMMIT
;INSERT INTO leaf VALUES('c', 1)
;COMMIT
;INSERT INTO node SELECT parent, 3 FROM leaf
;COMMIT
;INSERT INTO node VALUES(1, NULL)
;COMMIT
;INSERT INTO node VALUES(2, NULL)
;COMMIT
;BEGIN
;DELETE FROM node
;INSERT INTO node(nodeid) SELECT DISTINCT parent FROM leaf
;COMMIT
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "i"
;DROP table "j"
;DROP table "node"
;DROP table "leaf"
;PRAGMA foreign_keys = 1
;CREATE TABLE ab(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE cd(
      c PRIMARY KEY REFERENCES ab ON UPDATE CASCADE ON DELETE CASCADE, 
      d
    ) WITHOUT rowid;
;CREATE TABLE ef(
      e REFERENCES cd ON UPDATE CASCADE, 
      f, CHECK (e!=5)
    );
;
;INSERT INTO ab VALUES(1, 'b');
;INSERT INTO cd VALUES(1, 'd');
;INSERT INTO ef VALUES(1, 'e');
;
;UPDATE ab SET a = 5 
;SELECT * FROM ab 
;BEGIN
;UPDATE ab SET a = 5 
;COMMIT
;SELECT * FROM ab;
;SELECT * FROM cd;
;SELECT * FROM ef 
;BEGIN
;DELETE FROM ab 
;COMMIT
;SELECT * FROM ab;
;SELECT * FROM cd;
;SELECT * FROM ef 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "ab"
;DROP table "cd"
;DROP table "ef"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(
      node PRIMARY KEY, 
      parent REFERENCES t1 ON DELETE CASCADE
    ) WITHOUT rowid;
;CREATE TABLE t2(node PRIMARY KEY, parent) WITHOUT rowid;
;CREATE TRIGGER t2t AFTER DELETE ON t2 BEGIN
      DELETE FROM t2 WHERE parent = old.node;
    END;
;INSERT INTO t1 VALUES(1, NULL);
;INSERT INTO t1 VALUES(2, 1);
;INSERT INTO t1 VALUES(3, 1);
;INSERT INTO t1 VALUES(4, 2);
;INSERT INTO t1 VALUES(5, 2);
;INSERT INTO t1 VALUES(6, 3);
;INSERT INTO t1 VALUES(7, 3);
;INSERT INTO t2 SELECT * FROM t1;
;
;PRAGMA recursive_triggers = off 
;BEGIN;
;DELETE FROM t1 WHERE node = 1;
;SELECT node FROM t1;
;
;DELETE FROM t2 WHERE node = 1;
;SELECT node FROM t2;
;ROLLBACK;
;
;PRAGMA recursive_triggers = on 
;BEGIN;
;DELETE FROM t1 WHERE node = 1;
;SELECT node FROM t1;
;
;DELETE FROM t2 WHERE node = 1;
;SELECT node FROM t2;
;ROLLBACK;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(a PRIMARY KEY, b REFERENCES t1(a)) WITHOUT rowid;
;INSERT INTO t1 VALUES('hello', 'world');
;INSERT INTO t2 VALUES('key', 'hello');
;
;PRAGMA foreign_keys = on 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a REFERENCES t2(c), b);
;CREATE TABLE t2(c UNIQUE, b);
;INSERT INTO t2 VALUES(1, 2);
;INSERT INTO t1 VALUES(1, 2);
;VACUUM;
;ATTACH '' AS vacuum_db
;SELECT*FROM"vacuum_db".sqlite_master ORDER BY rowid
;SELECT*FROM"vacuum_db".sqlite_master ORDER BY rowid
;BEGIN
;SELECT sql FROM "main".sqlite_schema WHERE type='table'AND name<>'sqlite_sequence' AND coalesce(rootpage,1)>0
;CREATE TABLE t1(a REFERENCES t2(c), b)
;SELECT*FROM"vacuum_db".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"vacuum_db".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;CREATE TABLE t2(c UNIQUE, b)
;SELECT*FROM"vacuum_db".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"vacuum_db".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;SELECT sql FROM "main".sqlite_schema WHERE type='index'
;SELECT'INSERT INTO vacuum_db.'||quote(name)||' SELECT*FROM"main".'||quote(name)FROM vacuum_db.sqlite_schema WHERE type='table'AND coalesce(rootpage,1)>0
;INSERT INTO vacuum_db.'t1' SELECT*FROM"main".'t1'
;INSERT INTO vacuum_db.'t2' SELECT*FROM"main".'t2'
;INSERT INTO vacuum_db.sqlite_schema SELECT*FROM "main".sqlite_schema WHERE type IN('view','trigger') OR(type='table'AND rootpage=0)
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c INT PRIMARY KEY REFERENCES t1, b) WITHOUT rowid;
;
;INSERT INTO t2 VALUES(1, 'A');
;INSERT INTO t1 VALUES(1, 2);
;INSERT INTO t1 VALUES(2, 3);
;INSERT INTO t2 VALUES(1, 'A');
;
;UPDATE t2 SET c = 2 
;UPDATE t2 SET c = 3 
;DELETE FROM t1 WHERE a = 2 
;DELETE FROM t1 WHERE a = 1 
;UPDATE t1 SET a = 3 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;PRAGMA foreign_keys = 0     
;PRAGMA foreign_keys
;PRAGMA foreign_keys = 1     
;BEGIN                       
;PRAGMA foreign_keys = 0     
;COMMIT                      
;BEGIN                       
;PRAGMA foreign_keys = 1     
;COMMIT                      
;PRAGMA foreign_keys = off   
;PRAGMA foreign_keys = on    
;PRAGMA foreign_keys = no    
;PRAGMA foreign_keys = yes   
;PRAGMA foreign_keys = false 
;PRAGMA foreign_keys = true  
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a INT PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(
      c INT PRIMARY KEY,
      d INTEGER DEFAULT 1 REFERENCES t1 ON DELETE SET DEFAULT
    ) WITHOUT rowid;
;DELETE FROM t1;
;
;INSERT INTO t1 VALUES(1, 'one');
;INSERT INTO t1 VALUES(2, 'two');
;INSERT INTO t2 VALUES(1, 2);
;SELECT * FROM t2;
;DELETE FROM t1 WHERE a = 2;
;
;INSERT INTO t1 VALUES(2, 'two');
;UPDATE t2 SET d = 2;
;DELETE FROM t1 WHERE a = 1;
;SELECT * FROM t2;
;
;SELECT * FROM t1 
;DELETE FROM t1 
;CREATE TABLE pp(a, b, c, PRIMARY KEY(b, c)) WITHOUT rowid;
;CREATE TABLE cc(d DEFAULT 3, e DEFAULT 1, f DEFAULT 2,
        FOREIGN KEY(f, d) REFERENCES pp 
        ON UPDATE SET DEFAULT 
        ON DELETE SET NULL
    );
;INSERT INTO pp VALUES(1, 2, 3);
;INSERT INTO pp VALUES(4, 5, 6);
;INSERT INTO pp VALUES(7, 8, 9);
;
;INSERT INTO cc VALUES(6, 'A', 5);
;INSERT INTO cc VALUES(6, 'B', 5);
;INSERT INTO cc VALUES(9, 'A', 8);
;INSERT INTO cc VALUES(9, 'B', 8);
;UPDATE pp SET b = 1 WHERE a = 7;
;SELECT * FROM cc;
;
;DELETE FROM pp WHERE a = 4;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;DROP table "pp"
;DROP table "cc"
;PRAGMA foreign_keys = 1
;CREATE TABLE p(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE c(x REFERENCES p(c));
;
;INSERT INTO c DEFAULT VALUES 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "p"
;DROP table "c"
;PRAGMA foreign_keys = 1
;CREATE TABLE c(x REFERENCES v(y));
;CREATE VIEW v AS SELECT x AS y FROM c;
;
;INSERT INTO c DEFAULT VALUES 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "c"
;DROP view "v"
;PRAGMA foreign_keys = 1
;CREATE TABLE p(a, b, PRIMARY KEY(a, b)) WITHOUT rowid;
;CREATE TABLE c(x REFERENCES p);
;
;INSERT INTO c DEFAULT VALUES 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "p"
;DROP table "c"
;PRAGMA foreign_keys = 1
;CREATE TABLE p(a COLLATE binary, b);
;CREATE UNIQUE INDEX i ON p(a COLLATE nocase);
;CREATE TABLE c(x REFERENCES p(a));
;
;INSERT INTO c DEFAULT VALUES 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "p"
;DROP table "c"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c, d, FOREIGN KEY(rowid) REFERENCES t1(a))
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(rowid, d, FOREIGN KEY(rowid) REFERENCES t1(a));
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a, b);
;CREATE TABLE t2(c, d, FOREIGN KEY(c) REFERENCES t1(rowid));
;INSERT INTO t1(rowid, a, b) VALUES(1, 1, 1);
;INSERT INTO t2 VALUES(1, 1);
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(rowid PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c, d, FOREIGN KEY(c) REFERENCES t1(rowid));
;INSERT INTO t1(rowid, b) VALUES(1, 1);
;INSERT INTO t2 VALUES(1, 1);
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a INT PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE t2(c, d, FOREIGN KEY(c) REFERENCES t1(a) ON UPDATE CASCADE);
;INSERT INTO t1 VALUES(10, 100);
;INSERT INTO t2 VALUES(10, 100);
;UPDATE t1 SET a = 15;
;SELECT * FROM t2;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a, b PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE t2(
      x REFERENCES t1 ON UPDATE RESTRICT DEFERRABLE INITIALLY DEFERRED 
    );
;INSERT INTO t1 VALUES(1, 'one');
;INSERT INTO t1 VALUES(2, 'two');
;INSERT INTO t1 VALUES(3, 'three');
;
;BEGIN
;INSERT INTO t2 VALUES('two')
;UPDATE t1 SET b = 'four' WHERE b = 'one'
;UPDATE t1 SET b = 'five' WHERE b = 'two'
;DELETE FROM t1 WHERE b = 'two'
;COMMIT
;INSERT INTO t1 VALUES(2, 'two');
;COMMIT;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(x COLLATE NOCASE PRIMARY KEY) WITHOUT rowid;
;CREATE TRIGGER tt1 AFTER DELETE ON t1 
      WHEN EXISTS ( SELECT 1 FROM t2 WHERE old.x = y )
    BEGIN
      INSERT INTO t1 VALUES(old.x);
    END;
;CREATE TABLE t2(y REFERENCES t1);
;INSERT INTO t1 VALUES('A');
;INSERT INTO t1 VALUES('B');
;INSERT INTO t2 VALUES('a');
;INSERT INTO t2 VALUES('b');
;SELECT * FROM t1;
;SELECT * FROM t2;
;
;DELETE FROM t1 
;
;DROP TABLE t2;
;CREATE TABLE t2(y REFERENCES t1 ON DELETE RESTRICT);
;INSERT INTO t2 VALUES('a');
;INSERT INTO t2 VALUES('b');
;
;DELETE FROM t1 
;SELECT * FROM t1;
;SELECT * FROM t2;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE up(
      c00, c01, c02, c03, c04, c05, c06, c07, c08, c09,
      c10, c11, c12, c13, c14, c15, c16, c17, c18, c19,
      c20, c21, c22, c23, c24, c25, c26, c27, c28, c29,
      c30, c31, c32, c33, c34, c35, c36, c37, c38, c39,
      PRIMARY KEY(c34, c35)
    ) WITHOUT rowid;
;CREATE TABLE down(
      c00, c01, c02, c03, c04, c05, c06, c07, c08, c09,
      c10, c11, c12, c13, c14, c15, c16, c17, c18, c19,
      c20, c21, c22, c23, c24, c25, c26, c27, c28, c29,
      c30, c31, c32, c33, c34, c35, c36, c37, c38, c39,
      FOREIGN KEY(c39, c38) REFERENCES up ON UPDATE CASCADE
    );
;
;INSERT INTO up(c34, c35) VALUES('yes', 'no');
;INSERT INTO down(c39, c38) VALUES('yes', 'no');
;UPDATE up SET c34 = 'possibly';
;SELECT c38, c39 FROM down;
;DELETE FROM down;
;
;INSERT INTO down(c39, c38) VALUES('yes', 'no') 
;INSERT INTO up(c34, c35) VALUES('yes', 'no');
;INSERT INTO down(c39, c38) VALUES('yes', 'no');
;
;DELETE FROM up WHERE c34 = 'yes' 
;DELETE FROM up WHERE c34 = 'possibly';
;SELECT c34, c35 FROM up;
;SELECT c39, c38 FROM down;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "up"
;DROP table "down"
;PRAGMA foreign_keys = 1
;CREATE TABLE pp(a UNIQUE, b, c, PRIMARY KEY(b, c)) WITHOUT rowid;
;CREATE TABLE cc(d, e, f UNIQUE, FOREIGN KEY(d, e) REFERENCES pp);
;INSERT INTO pp VALUES(1, 2, 3);
;INSERT INTO cc VALUES(2, 3, 1);
;
;REPLACE INTO pp VALUES(1, 4, 5)
;SELECT * FROM pp;
;SELECT * FROM cc;
;
;BEGIN
;REPLACE INTO pp VALUES(1, 4, 5)
;COMMIT;
;SELECT * FROM pp;
;SELECT * FROM cc;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "pp"
;DROP table "cc"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE t2(a, b);
;INSERT INTO t2(a,b) VALUES(1,2);
;
;ALTER TABLE t2 ADD COLUMN c REFERENCES t1 
;ALTER TABLE t2 ADD COLUMN d DEFAULT NULL REFERENCES t1 
;ALTER TABLE t2 ADD COLUMN e REFERENCES t1 DEFAULT NULL
;ALTER TABLE t2 ADD COLUMN f REFERENCES t1 DEFAULT 'text'
;ALTER TABLE t2 ADD COLUMN g DEFAULT CURRENT_TIME REFERENCES t1 
;PRAGMA foreign_keys = off;
;ALTER TABLE t2 ADD COLUMN h DEFAULT 'text' REFERENCES t1;
;PRAGMA foreign_keys = on;
;SELECT sql FROM sqlite_schema WHERE name='t2';
;
;SELECT sqlite_rename_table(
        'main', 'table', 't1', $zCreate, $zOld, $zNew, 0
    )
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a PRIMARY KEY, b REFERENCES t1) WITHOUT rowid;
;CREATE TABLE t2(a PRIMARY KEY, b REFERENCES t1, c REFERENCES t2)
            WITHOUT rowid;
;CREATE TABLE t3(a REFERENCES t1, b REFERENCES t2, c REFERENCES t1);
;
;SELECT sql FROM sqlite_schema WHERE type = 'table'
;ALTER TABLE t1 RENAME TO t4 
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;INSERT INTO t3 VALUES(1, 2, 3) 
;INSERT INTO t4 VALUES(1, NULL) 
;UPDATE t4 SET b = 5 
;UPDATE t4 SET b = 1 
;INSERT INTO t3 VALUES(1, NULL, 1) 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t4"
;DROP table "t2"
;DROP table "t3"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TEMP TABLE t1(a PRIMARY KEY) WITHOUT rowid;
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;CREATE TEMP TABLE t2(a, b);
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;INSERT INTO temp.t2(a,b) VALUES(1,2);
;
;ALTER TABLE t2 ADD COLUMN c REFERENCES t1 
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;ALTER TABLE t2 ADD COLUMN d DEFAULT NULL REFERENCES t1 
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;ALTER TABLE t2 ADD COLUMN e REFERENCES t1 DEFAULT NULL
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;ALTER TABLE t2 ADD COLUMN f REFERENCES t1 DEFAULT 'text'
;ALTER TABLE t2 ADD COLUMN g DEFAULT CURRENT_TIME REFERENCES t1 
;PRAGMA foreign_keys = off;
;ALTER TABLE t2 ADD COLUMN h DEFAULT 'text' REFERENCES t1;
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;PRAGMA foreign_keys = on;
;SELECT sql FROM temp.sqlite_schema WHERE name='t2';
;
;SELECT sqlite_rename_table(
        'main', 'table', 't1', $zCreate, $zOld, $zNew, 0
    )
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TEMP TABLE t1(a PRIMARY KEY, b REFERENCES t1) WITHOUT rowid;
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;CREATE TEMP TABLE t2(a PRIMARY KEY, b REFERENCES t1, c REFERENCES t2)
            WITHOUT rowid;
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;CREATE TEMP TABLE t3(a REFERENCES t1, b REFERENCES t2, c REFERENCES t1);
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t3' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"temp".sqlite_master WHERE tbl_name='t3' AND type!='trigger' ORDER BY rowid
;
;SELECT sql FROM sqlite_temp_schema WHERE type = 'table'
;ALTER TABLE t1 RENAME TO t4 
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT sql FROM temp.sqlite_schema WHERE type = 'table'
;INSERT INTO t3 VALUES(1, 2, 3) 
;INSERT INTO t4 VALUES(1, NULL) 
;UPDATE t4 SET b = 5 
;UPDATE t4 SET b = 1 
;INSERT INTO t3 VALUES(1, NULL, 1) 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t4"
;DROP table "t2"
;DROP table "t3"
;PRAGMA foreign_keys = 1
;ATTACH ':memory:' AS aux;
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;CREATE TABLE aux.t1(a PRIMARY KEY) WITHOUT rowid;
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;CREATE TABLE aux.t2(a, b);
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;INSERT INTO aux.t2(a,b) VALUES(1,2);
;
;ALTER TABLE t2 ADD COLUMN c REFERENCES t1 
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;ALTER TABLE t2 ADD COLUMN d DEFAULT NULL REFERENCES t1 
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;ALTER TABLE t2 ADD COLUMN e REFERENCES t1 DEFAULT NULL
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;ALTER TABLE t2 ADD COLUMN f REFERENCES t1 DEFAULT 'text'
;ALTER TABLE t2 ADD COLUMN g DEFAULT CURRENT_TIME REFERENCES t1 
;PRAGMA foreign_keys = off;
;ALTER TABLE t2 ADD COLUMN h DEFAULT 'text' REFERENCES t1;
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;PRAGMA foreign_keys = on;
;SELECT sql FROM aux.sqlite_schema WHERE name='t2';
;
;SELECT sqlite_rename_table(
        'main', 'table', 't1', $zCreate, $zOld, $zNew, 0
    )
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;PRAGMA foreign_keys = 1
;CREATE TABLE aux.t1(a PRIMARY KEY, b REFERENCES t1) WITHOUT rowid;
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid
;CREATE TABLE aux.t2(a PRIMARY KEY, b REFERENCES t1, c REFERENCES t2)
            WITHOUT rowid;
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;CREATE TABLE aux.t3(a REFERENCES t1, b REFERENCES t2, c REFERENCES t1);
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t3' AND type!='trigger' ORDER BY rowid
;SELECT*FROM"aux".sqlite_master WHERE tbl_name='t3' AND type!='trigger' ORDER BY rowid
;
;SELECT sql FROM aux.sqlite_schema WHERE type = 'table'
;ALTER TABLE t1 RENAME TO t4 
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"aux".sqlite_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;INSERT INTO t3 VALUES(1, 2, 3) 
;INSERT INTO t4 VALUES(1, NULL) 
;UPDATE t4 SET b = 5 
;UPDATE t4 SET b = 1 
;INSERT INTO t3 VALUES(1, NULL, 1) 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t4"
;DROP table "t2"
;DROP table "t3"
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a, b REFERENCES nosuchtable);
;DROP TABLE t1;
;
;CREATE TABLE t1(a PRIMARY KEY, b) WITHOUT rowid;
;INSERT INTO t1 VALUES('a', 1);
;CREATE TABLE t2(x REFERENCES t1);
;INSERT INTO t2 VALUES('a');
;
;DROP TABLE t1 
;DELETE FROM t2;
;DROP TABLE t1;
;
;INSERT INTO t2 VALUES('x') 
;CREATE TABLE t1(x PRIMARY KEY) WITHOUT rowid;
;INSERT INTO t1 VALUES('x');
;
;INSERT INTO t2 VALUES('x') 
;DROP TABLE t1 
;DROP TABLE t2;
;DROP TABLE t1;
;
;CREATE TABLE pp(x, y, PRIMARY KEY(x, y)) WITHOUT ROWID;
;CREATE TABLE cc(a, b, FOREIGN KEY(a, b) REFERENCES pp(x, z));
;
;INSERT INTO cc VALUES(1, 2) 
;DROP TABLE cc 
;CREATE TABLE cc(a, b, 
      FOREIGN KEY(a, b) REFERENCES pp DEFERRABLE INITIALLY DEFERRED
    );
;
;INSERT INTO pp VALUES('a', 'b');
;INSERT INTO cc VALUES('a', 'b');
;BEGIN;
;DROP TABLE pp;
;CREATE TABLE pp(a, b, c, PRIMARY KEY(b, c)) WITHOUT rowid;
;INSERT INTO pp VALUES(1, 'a', 'b');
;COMMIT;
;
;BEGIN;
;DROP TABLE cc;
;DROP TABLE pp;
;COMMIT;
;
;CREATE TABLE b1(a, b);
;CREATE TABLE b2(a, b REFERENCES b1);
;DROP TABLE b1;
;
;CREATE TABLE b3(a, b REFERENCES b2 DEFERRABLE INITIALLY DEFERRED);
;DROP TABLE b2;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "b3"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(x REFERENCES v);
;CREATE VIEW v AS SELECT * FROM t1;
;
;DROP VIEW v;
;
;CREATE VIRTUAL TABLE v USING echo(t1) 
;SELECT sql FROM sqlite_schema WHERE type = 'table' AND name = ?
;SELECT * FROM 't1'
;PRAGMA index_list(t1)
;DROP TABLE v;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE pp(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE cc(x, y REFERENCES pp DEFERRABLE INITIALLY DEFERRED);
;INSERT INTO pp VALUES(1, 'one');
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES('neung', 1);
;INSERT INTO cc VALUES('song', 2);
;
;INSERT INTO pp VALUES(3, 'three') 
;BEGIN;
;INSERT INTO cc VALUES('see', 4);
;-- Violates deferred constraint
  
;INSERT INTO pp VALUES(5, 'five') 
;DELETE FROM cc WHERE x = 'see' 
;INSERT INTO pp VALUES(6, 'six') 
;COMMIT
;BEGIN
;DELETE FROM cc WHERE x = 'neung';
;ROLLBACK;
;
;BEGIN;
;DELETE FROM pp WHERE a = 2;
;
;DELETE FROM cc WHERE x = 'neung';
;ROLLBACK;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "pp"
;DROP table "cc"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE self(a INTEGER PRIMARY KEY, b REFERENCES self(a))
             WITHOUT rowid 
;INSERT INTO self VALUES(13, 13) 
;UPDATE self SET a = 14, b = 14 
;UPDATE self SET b = 15 
;UPDATE self SET a = 15 
;UPDATE self SET a = 15, b = 16 
;UPDATE self SET a = 17, b = 17 
;DELETE FROM self 
;INSERT INTO self VALUES(20, 21) 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "self"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE self(a PRIMARY KEY, b REFERENCES self(a)) WITHOUT rowid 
;INSERT INTO self VALUES(13, 13) 
;UPDATE self SET a = 14, b = 14 
;UPDATE self SET b = 15 
;UPDATE self SET a = 15 
;UPDATE self SET a = 15, b = 16 
;UPDATE self SET a = 17, b = 17 
;DELETE FROM self 
;INSERT INTO self VALUES(20, 21) 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "self"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE self(a UNIQUE, b INT PRIMARY KEY REFERENCES self(a))
             WITHOUT rowid 
;INSERT INTO self VALUES(13, 13) 
;UPDATE self SET a = 14, b = 14 
;UPDATE self SET b = 15 
;UPDATE self SET a = 15 
;UPDATE self SET a = 15, b = 16 
;UPDATE self SET a = 17, b = 17 
;DELETE FROM self 
;INSERT INTO self VALUES(20, 21) 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "self"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;PRAGMA foreign_keys=ON;
;CREATE TABLE t1(a,b,c,d,e,f,
     UNIQUE (a,b),
     PRIMARY KEY (e,c),
     FOREIGN KEY (d,f) REFERENCES t1(e,c)
  ) WITHOUT rowid;
;INSERT INTO t1 VALUES(1,2,3,5,5,3);
;INSERT INTO t1 VALUES(2,3,4,6,6,4);
;INSERT INTO t1 VALUES('x','y',1.5,'fizzle','fizzle',1.5);
;SELECT *, '|' FROM t1 ORDER BY a, b;
;
;UPDATE t1 SET c=99, f=99 WHERE a=1;
;
;UPDATE t1 SET e=876, d=876 WHERE a=2;
;
;UPDATE t1 SET c=11, e=22 WHERE a=1;
;UPDATE t1 SET d=11, f=22 WHERE a=1;
;DELETE FROM t1 WHERE a=1;
;
;DROP TABLE t1;
;CREATE TABLE t1(a,b,c,d,e,f,
     PRIMARY KEY (a,b),
     UNIQUE (e,c),
     FOREIGN KEY (d,f) REFERENCES t1(e,c)
  ) WITHOUT rowid;
;INSERT INTO t1 VALUES(1,2,3,5,5,3);
;INSERT INTO t1 VALUES(2,3,4,6,6,4);
;INSERT INTO t1 VALUES('x','y',1.5,'fizzle','fizzle',1.5);
;SELECT *, '|' FROM t1 ORDER BY a, b;
;
;UPDATE t1 SET c=99, f=99 WHERE a=1;
;
;UPDATE t1 SET e=876, d=876 WHERE a=2;
;
;UPDATE t1 SET c=11, e=22 WHERE a=1;
;UPDATE t1 SET d=11, f=22 WHERE a=1;
;DELETE FROM t1 WHERE a=1;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;PRAGMA count_changes = 1 
;CREATE TABLE one(a, b, c, UNIQUE(b, c));
;CREATE TABLE two(d, e, f, FOREIGN KEY(e, f) REFERENCES one(b, c));
;INSERT INTO one VALUES(1, 2, 3);
;
;INSERT INTO two VALUES(4, 5, 6)
;INSERT INTO one VALUES(2, 3, 4);
;INSERT INTO one VALUES(3, 4, 5);
;INSERT INTO two VALUES(1, 2, 3);
;INSERT INTO two VALUES(2, 3, 4);
;INSERT INTO two VALUES(3, 4, 5);
;
;BEGIN;
;INSERT INTO one VALUES(0, 0, 0);
;UPDATE two SET e=e+1, f=f+1;
;SELECT * FROM one 
;SELECT * FROM two 
;COMMIT
;CREATE TABLE three(
      g, h, i, 
      FOREIGN KEY(h, i) REFERENCES one(b, c) DEFERRABLE INITIALLY DEFERRED
    );
;
;INSERT INTO three VALUES(7, 8, 9)
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "one"
;DROP table "two"
;DROP table "three"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE high("a'b!" PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE low(
      c, 
      "d&6" REFERENCES high ON UPDATE CASCADE ON DELETE CASCADE
    );
;
;INSERT INTO high VALUES('a', 'b');
;INSERT INTO low VALUES('b', 'a');
;
;UPDATE high SET "a'b!" = 'c' 
;SELECT * FROM high ;
;SELECT * FROM low 
;DELETE FROM high 
;PRAGMA count_changes = 0 
;CREATE TABLE long(a, b PRIMARY KEY, c) WITHOUT rowid;
;CREATE TABLE short(d, e, f REFERENCES long);
;CREATE TABLE mid(g, h, i REFERENCES long DEFERRABLE INITIALLY DEFERRED);
;
;INSERT INTO long VALUES(1, 2, 3) 
;INSERT INTO short VALUES(1, 3, 2) 
;INSERT INTO mid VALUES(1, 3, 2) 
;CREATE TABLE nought(a, b PRIMARY KEY, c) WITHOUT rowid;
;CREATE TABLE cross(d, e, f,
        FOREIGN KEY(e) REFERENCES nought(b) ON UPDATE CASCADE
      );
;
;INSERT INTO nought VALUES(2, 1, 2) 
;INSERT INTO cross VALUES(0, 1, 0) 
;UPDATE nought SET b = 5 
;SELECT * FROM cross
;CREATE TABLE one(a INT PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE two(b, c REFERENCES one);
;INSERT INTO one VALUES(101, 102);
;
;INSERT INTO two VALUES(100, 101);
;
;INSERT INTO short VALUES(1, 3, 2) 
;INSERT INTO short VALUES(1, 3, NULL) 
;SELECT * FROM short 
;UPDATE short SET f = 2 WHERE f IS NULL 
;CREATE TABLE main(id INT PRIMARY KEY) WITHOUT rowid;
;CREATE TABLE sub(id INT REFERENCES main(id));
;INSERT INTO main VALUES(1);
;INSERT INTO main VALUES(2);
;INSERT INTO sub VALUES(2);
;
;DELETE FROM main WHERE id = ?
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "high"
;DROP table "low"
;DROP table "long"
;DROP table "short"
;DROP table "mid"
;DROP table "nought"
;DROP table "cross"
;DROP table "one"
;DROP table "two"
;DROP table "main"
;DROP table "sub"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE pp(a PRIMARY KEY, b) WITHOUT rowid;
;CREATE TABLE cc(c PRIMARY KEY, d REFERENCES pp) WITHOUT rowid;
;
;INSERT INTO cc VALUES(1, 2)
;SELECT * FROM cc 
;BEGIN;
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;INSERT INTO cc VALUES(3, 4)
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT OR IGNORE INTO cc VALUES(1, 2)
;BEGIN;
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;INSERT OR IGNORE INTO cc VALUES(3, 4)
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT OR ABORT INTO cc VALUES(1, 2)
;BEGIN;
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;INSERT OR ABORT INTO cc VALUES(3, 4)
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT OR ROLLBACK INTO cc VALUES(1, 2)
;BEGIN;
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;INSERT OR ROLLBACK INTO cc VALUES(3, 4)
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT OR REPLACE INTO cc VALUES(1, 2)
;BEGIN;
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;INSERT OR REPLACE INTO cc VALUES(3, 4)
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT OR FAIL INTO cc VALUES(1, 2)
;BEGIN;
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;INSERT OR FAIL INTO cc VALUES(3, 4)
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;UPDATE pp SET a = 1
;SELECT * FROM pp 
;UPDATE cc SET d = 1
;SELECT * FROM cc 
;BEGIN;
;INSERT INTO pp VALUES(3, 'three');
;
;UPDATE pp SET a = 1 WHERE a = 2
;COMMIT ;
;SELECT * FROM pp 
;BEGIN;
;INSERT INTO cc VALUES(2, 2);
;
;UPDATE cc SET d = 1 WHERE c = 1
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;UPDATE OR IGNORE pp SET a = 1
;SELECT * FROM pp 
;UPDATE OR IGNORE cc SET d = 1
;SELECT * FROM cc 
;BEGIN;
;INSERT INTO pp VALUES(3, 'three');
;
;UPDATE OR IGNORE pp SET a = 1 WHERE a = 2
;COMMIT ;
;SELECT * FROM pp 
;BEGIN;
;INSERT INTO cc VALUES(2, 2);
;
;UPDATE OR IGNORE cc SET d = 1 WHERE c = 1
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;UPDATE OR ABORT pp SET a = 1
;SELECT * FROM pp 
;UPDATE OR ABORT cc SET d = 1
;SELECT * FROM cc 
;BEGIN;
;INSERT INTO pp VALUES(3, 'three');
;
;UPDATE OR ABORT pp SET a = 1 WHERE a = 2
;COMMIT ;
;SELECT * FROM pp 
;BEGIN;
;INSERT INTO cc VALUES(2, 2);
;
;UPDATE OR ABORT cc SET d = 1 WHERE c = 1
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;UPDATE OR ROLLBACK pp SET a = 1
;SELECT * FROM pp 
;UPDATE OR ROLLBACK cc SET d = 1
;SELECT * FROM cc 
;BEGIN;
;INSERT INTO pp VALUES(3, 'three');
;
;UPDATE OR ROLLBACK pp SET a = 1 WHERE a = 2
;COMMIT ;
;SELECT * FROM pp 
;BEGIN;
;INSERT INTO cc VALUES(2, 2);
;
;UPDATE OR ROLLBACK cc SET d = 1 WHERE c = 1
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;UPDATE OR REPLACE pp SET a = 1
;SELECT * FROM pp 
;UPDATE OR REPLACE cc SET d = 1
;SELECT * FROM cc 
;BEGIN;
;INSERT INTO pp VALUES(3, 'three');
;
;UPDATE OR REPLACE pp SET a = 1 WHERE a = 2
;COMMIT ;
;SELECT * FROM pp 
;BEGIN;
;INSERT INTO cc VALUES(2, 2);
;
;UPDATE OR REPLACE cc SET d = 1 WHERE c = 1
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;INSERT INTO pp VALUES(2, 'two');
;INSERT INTO cc VALUES(1, 2);
;
;UPDATE OR FAIL pp SET a = 1
;SELECT * FROM pp 
;UPDATE OR FAIL cc SET d = 1
;SELECT * FROM cc 
;BEGIN;
;INSERT INTO pp VALUES(3, 'three');
;
;UPDATE OR FAIL pp SET a = 1 WHERE a = 2
;COMMIT ;
;SELECT * FROM pp 
;BEGIN;
;INSERT INTO cc VALUES(2, 2);
;
;UPDATE OR FAIL cc SET d = 1 WHERE c = 1
;COMMIT ;
;SELECT * FROM cc 
;DELETE FROM cc ;
;DELETE FROM pp 
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "pp"
;DROP table "cc"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a INT PRIMARY KEY, b, c, UNIQUE(b, c)) WITHOUT rowid;
;CREATE TABLE t2(e REFERENCES t1, f);
;CREATE TABLE t3(g, h, i, FOREIGN KEY (h, i) REFERENCES t1(b, c));
;
;INSERT INTO t2 VALUES(1, 2) 
;INSERT INTO t1 VALUES(1, 2, 3);
;INSERT INTO t2 VALUES(1, 2);
;
;INSERT INTO t2 VALUES(NULL, 3) 
;UPDATE t2 SET e = 5 WHERE e IS NULL 
;UPDATE t2 SET e = 1 WHERE e IS NULL 
;UPDATE t2 SET e = NULL WHERE f = 3 
;UPDATE t1 SET a = 10 
;UPDATE t1 SET a = NULL 
;DELETE FROM t1 
;UPDATE t2 SET e = NULL 
;UPDATE t1 SET a = 10;
;DELETE FROM t1;
;DELETE FROM t2;
;
;INSERT INTO t3 VALUES(1, NULL, NULL);
;INSERT INTO t3 VALUES(1, 2, NULL);
;INSERT INTO t3 VALUES(1, NULL, 3);
;
;INSERT INTO t3 VALUES(3, 1, 4) 
;INSERT INTO t1 VALUES(1, 1, 4);
;INSERT INTO t3 VALUES(3, 1, 4);
;
;DELETE FROM t1 
;UPDATE t1 SET b = 10
;UPDATE t1 SET a = 10
;UPDATE t3 SET h = 'hello' WHERE i = 3
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;DROP table "t3"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a INT PRIMARY KEY, b, c, UNIQUE(b, c)) WITHOUT rowid;
;CREATE TABLE t2(e REFERENCES t1 ON UPDATE CASCADE ON DELETE CASCADE, f);
;CREATE TABLE t3(g, h, i, 
        FOREIGN KEY (h, i) 
        REFERENCES t1(b, c) ON UPDATE CASCADE ON DELETE CASCADE
    );
;
;INSERT INTO t1 VALUES(1, 2, 3);
;INSERT INTO t1 VALUES(4, 5, 6);
;INSERT INTO t2 VALUES(1, 'one');
;INSERT INTO t2 VALUES(4, 'four');
;
;UPDATE t1 SET a = 2 WHERE a = 1;
;SELECT * FROM t2;
;
;DELETE FROM t1 WHERE a = 4;
;
;INSERT INTO t3 VALUES('hello', 2, 3);
;UPDATE t1 SET c = 2;
;SELECT * FROM t3;
;
;DELETE FROM t1;
;
;PRAGMA foreign_keys
;PRAGMA foreign_keys = OFF
;PRAGMA database_list
;SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;DROP table "t1"
;DROP table "t2"
;DROP table "t3"
;SELECT name, type FROM sqlite_temp_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;SELECT name, type FROM aux.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    
;PRAGMA foreign_keys = 1
;CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c, UNIQUE(c, b)) WITHOUT rowid;
;CREATE TABLE t2(e REFERENCES t1 ON UPDATE SET NULL ON DELETE SET NULL, f);
;CREATE TABLE t3(g, h, i, 
        FOREIGN KEY (h, i) 
        REFERENCES t1(b, c) ON UPDATE SET NULL ON DELETE SET NULL
    );
;
;INSERT INTO t1 VALUES(1, 2, 3);
;INSERT INTO t1 VALUES(4, 5, 6);
;INSERT INTO t2 VALUES(1, 'one');
;INSERT INTO t2 VALUES(4, 'four');
;
;UPDATE t1 SET a = 2 WHERE a = 1;
;SELECT * FROM t2;
;
;DELETE FROM t1 WHERE a = 4;
;
;INSERT INTO t3 VALUES('hello', 2, 3);
;UPDATE t1 SET c = 2;
;SELECT * FROM t3;
;
;UPDATE t3 SET h = 2, i = 2;
;DELETE FROM t1;
;
;PRAGMA foreign_keys=ON;
;CREATE TABLE tdd08(a INTEGER PRIMARY KEY, b) WITHOUT rowid;
;CREATE UNIQUE INDEX idd08 ON tdd08(a,b);
;INSERT INTO tdd08 VALUES(200,300);
;CREATE TABLE tdd08_b(w,x,y, FOREIGN KEY(x,y) REFERENCES tdd08(a,b));
;INSERT INTO tdd08_b VALUES(100,200,300);
;
;DELETE FROM tdd08;
;SELECT * FROM tdd08;
;
;INSERT INTO tdd08_b VALUES(400,500,300);
;UPDATE tdd08_b SET x=x+1;
;UPDATE tdd08 SET a=a+1;
;CREATE TABLE tce71(a INTEGER PRIMARY KEY, b) WITHOUT rowid;
;CREATE UNIQUE INDEX ice71 ON tce71(a,b);
;INSERT INTO tce71 VALUES(100,200);
;CREATE TABLE tce72(w, x, y, FOREIGN KEY(x,y) REFERENCES tce71(a,b));
;INSERT INTO tce72 VALUES(300,100,200);
;UPDATE tce71 set b = 200 where a = 100;
;SELECT * FROM tce71, tce72;
;
;UPDATE tce71 set b = 201 where a = 100;
;UPDATE tce71 set a = 101 where a = 100;
;CREATE TABLE tce73(a INTEGER PRIMARY KEY, b, UNIQUE(a,b)) WITHOUT rowid;
;INSERT INTO tce73 VALUES(100,200);
;CREATE TABLE tce74(w, x, y, FOREIGN KEY(x,y) REFERENCES tce73(a,b));
;INSERT INTO tce74 VALUES(300,100,200);
;UPDATE tce73 set b = 200 where a = 100;
;SELECT * FROM tce73, tce74;
;
;UPDATE tce73 set b = 201 where a = 100;
;UPDATE tce73 set a = 101 where a = 100;
;