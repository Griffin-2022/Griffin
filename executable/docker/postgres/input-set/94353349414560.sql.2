SET SESSION AUTHORIZATION regress_testrol1;
;SET ROLE regress_testrol2;
;ALTER AGGREGATE testagg1(int2) OWNER TO CURRENT_USER;
;ALTER AGGREGATE testagg2(int2) OWNER TO "current_user";
;ALTER AGGREGATE testagg3(int2) OWNER TO CURRENT_ROLE;
;ALTER AGGREGATE testagg4(int2) OWNER TO SESSION_USER;
;ALTER AGGREGATE testagg5(int2) OWNER TO regress_testrolx;
;ALTER AGGREGATE testagg6(int2) OWNER TO "Public";
;ALTER AGGREGATE testagg6(int2) OWNER TO USER;
;ALTER AGGREGATE testagg6(int2) OWNER TO PUBLIC;
;ALTER AGGREGATE testagg6(int2) OWNER TO "public";
;ALTER AGGREGATE testagg6(int2) OWNER TO nonexistent;
;SELECT p.proname, r.rolname
 FROM pg_proc p JOIN pg_roles r ON (r.oid = p.proowner)
 WHERE proname LIKE 'testagg_'
 ORDER BY 1;
;CREATE FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv1 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv2 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv3 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv4 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv5 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv6 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv7 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv8 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv9 FOREIGN DATA WRAPPER test_wrapper;
;CREATE SERVER sv10 FOREIGN DATA WRAPPER test_wrapper;
;CREATE USER MAPPING FOR CURRENT_USER SERVER sv1 OPTIONS (user 'CURRENT_USER');
;CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"');
;CREATE USER MAPPING FOR CURRENT_ROLE SERVER sv3 OPTIONS (user 'CURRENT_ROLE');
;CREATE USER MAPPING FOR USER SERVER sv4 OPTIONS (user 'USER');
;CREATE USER MAPPING FOR "user" SERVER sv5 OPTIONS (user '"USER"');
;CREATE USER MAPPING FOR SESSION_USER SERVER sv6 OPTIONS (user 'SESSION_USER');
;CREATE USER MAPPING FOR PUBLIC SERVER sv7 OPTIONS (user 'PUBLIC');
;CREATE USER MAPPING FOR "Public" SERVER sv8 OPTIONS (user '"Public"');
;CREATE USER MAPPING FOR regress_testrolx SERVER sv9 OPTIONS (user 'regress_testrolx');
;CREATE USER MAPPING FOR nonexistent SERVER sv10 OPTIONS (user 'nonexistent');
;SELECT * FROM chkumapping();
;ALTER USER MAPPING FOR CURRENT_USER SERVER sv1
 OPTIONS (SET user 'CURRENT_USER_alt');
;ALTER USER MAPPING FOR "current_user" SERVER sv2
 OPTIONS (SET user '"current_user"_alt');
;ALTER USER MAPPING FOR CURRENT_ROLE SERVER sv3
 OPTIONS (SET user 'CURRENT_ROLE_alt');
;ALTER USER MAPPING FOR USER SERVER sv4
 OPTIONS (SET user 'USER_alt');
;ALTER USER MAPPING FOR "user" SERVER sv5
 OPTIONS (SET user '"user"_alt');
;ALTER USER MAPPING FOR SESSION_USER SERVER sv6
 OPTIONS (SET user 'SESSION_USER_alt');
;ALTER USER MAPPING FOR PUBLIC SERVER sv7
 OPTIONS (SET user 'public_alt');
;ALTER USER MAPPING FOR "Public" SERVER sv8
 OPTIONS (SET user '"Public"_alt');
;ALTER USER MAPPING FOR regress_testrolx SERVER sv9
 OPTIONS (SET user 'regress_testrolx_alt');
;ALTER USER MAPPING FOR nonexistent SERVER sv10
 OPTIONS (SET user 'nonexistent_alt');
;SELECT * FROM chkumapping();
;DROP USER MAPPING FOR CURRENT_USER SERVER sv1;
;DROP USER MAPPING FOR "current_user" SERVER sv2;
;DROP USER MAPPING FOR CURRENT_ROLE SERVER sv3;
;DROP USER MAPPING FOR USER SERVER sv4;
;DROP USER MAPPING FOR "user" SERVER sv5;
;DROP USER MAPPING FOR SESSION_USER SERVER sv6;
;DROP USER MAPPING FOR PUBLIC SERVER sv7;
;DROP USER MAPPING FOR "Public" SERVER sv8;
;DROP USER MAPPING FOR regress_testrolx SERVER sv9;
;DROP USER MAPPING FOR nonexistent SERVER sv10;
;SELECT * FROM chkumapping();
;CREATE USER MAPPING FOR CURRENT_USER SERVER sv1 OPTIONS (user 'CURRENT_USER');
;CREATE USER MAPPING FOR "current_user" SERVER sv2 OPTIONS (user '"current_user"');
;CREATE USER MAPPING FOR CURRENT_ROLE SERVER sv3 OPTIONS (user 'CURRENT_ROLE');
;CREATE USER MAPPING FOR USER SERVER sv4 OPTIONS (user 'USER');
;CREATE USER MAPPING FOR "user" SERVER sv5 OPTIONS (user '"USER"');
;CREATE USER MAPPING FOR SESSION_USER SERVER sv6 OPTIONS (user 'SESSION_USER');
;CREATE USER MAPPING FOR PUBLIC SERVER sv7 OPTIONS (user 'PUBLIC');
;CREATE USER MAPPING FOR "Public" SERVER sv8 OPTIONS (user '"Public"');
;CREATE USER MAPPING FOR regress_testrolx SERVER sv9 OPTIONS (user 'regress_testrolx');
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR CURRENT_USER SERVER sv1;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR "current_user" SERVER sv2;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR CURRENT_USER SERVER sv3;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR USER SERVER sv4;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR "user" SERVER sv5;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR SESSION_USER SERVER sv6;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR PUBLIC SERVER sv7;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR "Public" SERVER sv8;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR regress_testrolx SERVER sv9;
;SELECT * FROM chkumapping();
;DROP USER MAPPING IF EXISTS FOR nonexistent SERVER sv10;
;GRANT regress_testrol0 TO pg_signal_backend;
;SET ROLE pg_signal_backend;
;RESET ROLE;
;CREATE SCHEMA test_roles_schema AUTHORIZATION pg_signal_backend;
;SET ROLE regress_testrol2;
;UPDATE pg_proc SET proacl = null WHERE proname LIKE 'testagg_';
;SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
;REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2) FROM PUBLIC;
;GRANT ALL PRIVILEGES ON FUNCTION testagg1(int2) TO PUBLIC;
;GRANT ALL PRIVILEGES ON FUNCTION testagg2(int2) TO CURRENT_USER;
;GRANT ALL PRIVILEGES ON FUNCTION testagg3(int2) TO "current_user";
;GRANT ALL PRIVILEGES ON FUNCTION testagg4(int2) TO CURRENT_ROLE;
;GRANT ALL PRIVILEGES ON FUNCTION testagg5(int2) TO SESSION_USER;
;GRANT ALL PRIVILEGES ON FUNCTION testagg6(int2) TO "Public";
;GRANT ALL PRIVILEGES ON FUNCTION testagg7(int2) TO regress_testrolx;
;GRANT ALL PRIVILEGES ON FUNCTION testagg8(int2) TO "public";
;GRANT ALL PRIVILEGES ON FUNCTION testagg9(int2)
 TO current_user, public, regress_testrolx;
;SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
;GRANT ALL PRIVILEGES ON FUNCTION testagga(int2) TO USER;
;GRANT ALL PRIVILEGES ON FUNCTION testagga(int2) TO NONE;
;GRANT ALL PRIVILEGES ON FUNCTION testagga(int2) TO "none";
;SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
;REVOKE ALL PRIVILEGES ON FUNCTION testagg1(int2) FROM PUBLIC;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg2(int2) FROM CURRENT_USER;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg3(int2) FROM "current_user";
;REVOKE ALL PRIVILEGES ON FUNCTION testagg4(int2) FROM CURRENT_ROLE;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg5(int2) FROM SESSION_USER;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg6(int2) FROM "Public";
;REVOKE ALL PRIVILEGES ON FUNCTION testagg7(int2) FROM regress_testrolx;
;REVOKE ALL PRIVILEGES ON FUNCTION testagg8(int2) FROM "public";
;REVOKE ALL PRIVILEGES ON FUNCTION testagg9(int2)
 FROM current_user, public, regress_testrolx;
;SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
;REVOKE ALL PRIVILEGES ON FUNCTION testagga(int2) FROM USER;
;REVOKE ALL PRIVILEGES ON FUNCTION testagga(int2) FROM NONE;
;REVOKE ALL PRIVILEGES ON FUNCTION testagga(int2) FROM "none";
;SELECT proname, proacl FROM pg_proc WHERE proname LIKE 'testagg_';
;CREATE ROLE regress_role_haspriv;
;CREATE ROLE regress_role_nopriv;
;GRANT pg_read_all_stats TO regress_role_haspriv;
;SET SESSION AUTHORIZATION regress_role_haspriv;
;SELECT COUNT(*) = 0 AS haspriv FROM pg_stat_activity
  WHERE query = '<insufficient privilege>';
;SET SESSION AUTHORIZATION regress_role_nopriv;
;SELECT COUNT(*) = 0 AS haspriv FROM pg_stat_activity
  WHERE query = '<insufficient privilege>';
;RESET SESSION AUTHORIZATION;
;REVOKE pg_read_all_stats FROM regress_role_haspriv;
;GRANT pg_read_all_settings TO regress_role_haspriv;
;BEGIN;
;SET LOCAL session_preload_libraries TO 'path-to-preload-libraries';
;SET SESSION AUTHORIZATION regress_role_haspriv;
;SHOW session_preload_libraries;
;SET SESSION AUTHORIZATION regress_role_nopriv;
;SHOW session_preload_libraries;
;RESET SESSION AUTHORIZATION;
;ROLLBACK;
;REVOKE pg_read_all_settings FROM regress_role_haspriv;
;