SET client_min_messages TO 'warning';
;DROP ROLE IF EXISTS regress_priv_group1;
;DROP ROLE IF EXISTS regress_priv_group2;
;DROP ROLE IF EXISTS regress_priv_user1;
;DROP ROLE IF EXISTS regress_priv_user2;
;DROP ROLE IF EXISTS regress_priv_user3;
;DROP ROLE IF EXISTS regress_priv_user4;
;DROP ROLE IF EXISTS regress_priv_user5;
;DROP ROLE IF EXISTS regress_priv_user6;
;DROP ROLE IF EXISTS regress_priv_user7;
;SELECT lo_unlink(oid) FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid;
;RESET client_min_messages;
;CREATE USER regress_priv_user1;
;CREATE USER regress_priv_user2;
;CREATE USER regress_priv_user3;
;CREATE USER regress_priv_user4;
;CREATE USER regress_priv_user5;
;CREATE USER regress_priv_user5;
;CREATE USER regress_priv_user6;
;CREATE USER regress_priv_user7;
;CREATE USER regress_priv_user8;
;CREATE USER regress_priv_user9;
;CREATE USER regress_priv_user10;
;CREATE ROLE regress_priv_role;
;GRANT pg_read_all_data TO regress_priv_user6;
;GRANT pg_write_all_data TO regress_priv_user7;
;GRANT pg_read_all_settings TO regress_priv_user8 WITH ADMIN OPTION;
;SET SESSION AUTHORIZATION regress_priv_user8;
;GRANT pg_read_all_settings TO regress_priv_user9 WITH ADMIN OPTION;
;SET SESSION AUTHORIZATION regress_priv_user9;
;GRANT pg_read_all_settings TO regress_priv_user10;
;SET SESSION AUTHORIZATION regress_priv_user8;
;REVOKE pg_read_all_settings FROM regress_priv_user10;
;REVOKE ADMIN OPTION FOR pg_read_all_settings FROM regress_priv_user9;
;REVOKE pg_read_all_settings FROM regress_priv_user9;
;RESET SESSION AUTHORIZATION;
;REVOKE ADMIN OPTION FOR pg_read_all_settings FROM regress_priv_user8;
;SET SESSION AUTHORIZATION regress_priv_user8;
;SET ROLE pg_read_all_settings;
;RESET ROLE;
;RESET SESSION AUTHORIZATION;
;REVOKE pg_read_all_settings FROM regress_priv_user8;
;DROP USER regress_priv_user10;
;DROP USER regress_priv_user9;
;DROP USER regress_priv_user8;
;CREATE GROUP regress_priv_group1;
;CREATE GROUP regress_priv_group2 WITH USER regress_priv_user1, regress_priv_user2;
;ALTER GROUP regress_priv_group1 ADD USER regress_priv_user4;
;ALTER GROUP regress_priv_group2 ADD USER regress_priv_user2;
;ALTER GROUP regress_priv_group2 DROP USER regress_priv_user2;
;GRANT regress_priv_group2 TO regress_priv_user4 WITH ADMIN OPTION;
;CREATE FUNCTION leak(integer,integer) RETURNS boolean
  AS 'int4lt'
  LANGUAGE internal IMMUTABLE STRICT;
;ALTER FUNCTION leak(integer,integer) OWNER TO regress_priv_user1;
;GRANT regress_priv_role TO regress_priv_user1 WITH ADMIN OPTION GRANTED BY CURRENT_ROLE;
;REVOKE ADMIN OPTION FOR regress_priv_role FROM regress_priv_user1 GRANTED BY foo;
;REVOKE ADMIN OPTION FOR regress_priv_role FROM regress_priv_user1 GRANTED BY regress_priv_user2;
;REVOKE ADMIN OPTION FOR regress_priv_role FROM regress_priv_user1 GRANTED BY CURRENT_USER;
;REVOKE regress_priv_role FROM regress_priv_user1 GRANTED BY CURRENT_ROLE;
;DROP ROLE regress_priv_role;
;SET SESSION AUTHORIZATION regress_priv_user1;
;SELECT session_user, current_user;
;CREATE TABLE atest1 ( a int, b text );
;SELECT * FROM atest1;
;INSERT INTO atest1 VALUES (1, 'one');
;DELETE FROM atest1;
;UPDATE atest1 SET a = 1 WHERE b = 'blech';
;TRUNCATE atest1;
;BEGIN;
;LOCK atest1 IN ACCESS EXCLUSIVE MODE;
;COMMIT;
;REVOKE ALL ON atest1 FROM PUBLIC;
;SELECT * FROM atest1;
;GRANT ALL ON atest1 TO regress_priv_user2;
;GRANT SELECT ON atest1 TO regress_priv_user3, regress_priv_user4;
;SELECT * FROM atest1;
;CREATE TABLE atest2 (col1 varchar(10), col2 boolean);
;GRANT SELECT ON atest2 TO regress_priv_user2;
;GRANT UPDATE ON atest2 TO regress_priv_user3;
;GRANT INSERT ON atest2 TO regress_priv_user4 GRANTED BY CURRENT_USER;
;GRANT TRUNCATE ON atest2 TO regress_priv_user5 GRANTED BY CURRENT_ROLE;
;GRANT TRUNCATE ON atest2 TO regress_priv_user4 GRANTED BY regress_priv_user5;
;SET SESSION AUTHORIZATION regress_priv_user2;
;SELECT session_user, current_user;
;SELECT * FROM atest1;
;SELECT * FROM atest2;
;INSERT INTO atest1 VALUES (2, 'two');
;INSERT INTO atest2 VALUES ('foo', true);
;INSERT INTO atest1 SELECT 1, b FROM atest1;
;UPDATE atest1 SET a = 1 WHERE a = 2;
;UPDATE atest2 SET col2 = NOT col2;
;SELECT * FROM atest1 FOR UPDATE;
;SELECT * FROM atest2 FOR UPDATE;
;DELETE FROM atest2;
;TRUNCATE atest2;
;BEGIN;
;LOCK atest2 IN ACCESS EXCLUSIVE MODE;
;COMMIT;
;COPY atest2 FROM stdin;
;GRANT ALL ON atest1 TO PUBLIC;
;SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
;SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
;SET SESSION AUTHORIZATION regress_priv_user6;
;SELECT * FROM atest1;
;SELECT * FROM atest2;
;INSERT INTO atest2 VALUES ('foo', true);
;SET SESSION AUTHORIZATION regress_priv_user7;
;SELECT * FROM atest1;
;SELECT * FROM atest2;
;INSERT INTO atest2 VALUES ('foo', true);
;UPDATE atest2 SET col2 = true;
;DELETE FROM atest2;
;UPDATE pg_catalog.pg_class SET relname = '123';
;DELETE FROM pg_catalog.pg_class;
;UPDATE pg_toast.pg_toast_1213 SET chunk_id = 1;
;SET SESSION AUTHORIZATION regress_priv_user3;
;SELECT session_user, current_user;
;SELECT * FROM atest1;
;SELECT * FROM atest2;
;INSERT INTO atest1 VALUES (2, 'two');
;INSERT INTO atest2 VALUES ('foo', true);
;INSERT INTO atest1 SELECT 1, b FROM atest1;
;UPDATE atest1 SET a = 1 WHERE a = 2;
;UPDATE atest2 SET col2 = NULL;
;UPDATE atest2 SET col2 = NOT col2;
;UPDATE atest2 SET col2 = true FROM atest1 WHERE atest1.a = 5;
;SELECT * FROM atest1 FOR UPDATE;
;SELECT * FROM atest2 FOR UPDATE;
;DELETE FROM atest2;
;TRUNCATE atest2;
;BEGIN;
;LOCK atest2 IN ACCESS EXCLUSIVE MODE;
;COMMIT;
;COPY atest2 FROM stdin;
;SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
;SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
;SET SESSION AUTHORIZATION regress_priv_user4;
;COPY atest2 FROM stdin;
;SELECT * FROM atest1;
;SET SESSION AUTHORIZATION regress_priv_user1;
;CREATE TABLE atest12 as
  SELECT x AS a, 10001 - x AS b FROM generate_series(1,10000) x;
;CREATE INDEX ON atest12 (a);
;CREATE INDEX ON atest12 (abs(a));
;ALTER TABLE atest12 SET (autovacuum_enabled = off);
;SET default_statistics_target = 10000;
;VACUUM ANALYZE atest12;
;RESET default_statistics_target;
;CREATE OPERATOR <<< (procedure = leak, leftarg = integer, rightarg = integer,
                     restrict = scalarltsel);
;CREATE VIEW atest12v AS
  SELECT * FROM atest12 WHERE b <<< 5;
;CREATE VIEW atest12sbv WITH (security_barrier=true) AS
  SELECT * FROM atest12 WHERE b <<< 5;
;GRANT SELECT ON atest12v TO PUBLIC;
;GRANT SELECT ON atest12sbv TO PUBLIC;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12 x, atest12 y
  WHERE x.a = y.b and abs(y.a) <<< 5;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12sbv x, atest12sbv y WHERE x.a = y.b;
;SET SESSION AUTHORIZATION regress_priv_user2;
;CREATE FUNCTION leak2(integer,integer) RETURNS boolean
  AS $$begin raise notice 'leak % %', $1, $2; return $1 > $2; end$$
  LANGUAGE plpgsql immutable;
;CREATE OPERATOR >>> (procedure = leak2, leftarg = integer, rightarg = integer,
                     restrict = scalargtsel);
;EXPLAIN (COSTS OFF) SELECT * FROM atest12 WHERE a >>> 0;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12sbv x, atest12sbv y WHERE x.a = y.b;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y
  WHERE x.a = y.b and abs(y.a) <<< 5;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12sbv x, atest12sbv y
  WHERE x.a = y.b and abs(y.a) <<< 5;
;SET SESSION AUTHORIZATION regress_priv_user1;
;GRANT SELECT (a, b) ON atest12 TO PUBLIC;
;SET SESSION AUTHORIZATION regress_priv_user2;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
;EXPLAIN (COSTS OFF) SELECT * FROM atest12 x, atest12 y
  WHERE x.a = y.b and abs(y.a) <<< 5;
;DROP FUNCTION leak2(integer, integer) CASCADE;
;SET SESSION AUTHORIZATION regress_priv_user3;
;CREATE TABLE atest3 (one int, two int, three int);
;GRANT DELETE ON atest3 TO GROUP regress_priv_group2;
;SET SESSION AUTHORIZATION regress_priv_user1;
;SELECT * FROM atest3;
;DELETE FROM atest3;
;BEGIN;
;RESET SESSION AUTHORIZATION;
;ALTER ROLE regress_priv_user1 NOINHERIT;
;SET SESSION AUTHORIZATION regress_priv_user1;
;DELETE FROM atest3;
;ROLLBACK;
;SET SESSION AUTHORIZATION regress_priv_user3;
;CREATE VIEW atestv1 AS SELECT * FROM atest1;
;/* The next *should* fail, but it's not implemented that way yet. */
CREATE VIEW atestv2 AS SELECT * FROM atest2;
;CREATE VIEW atestv3 AS SELECT * FROM atest3;
;/* Empty view is a corner case that failed in 9.2. */
CREATE VIEW atestv0 AS SELECT 0 as x WHERE false;
;SELECT * FROM atestv1;
;SELECT * FROM atestv2;
;GRANT SELECT ON atestv1, atestv3 TO regress_priv_user4;
;GRANT SELECT ON atestv2 TO regress_priv_user2;
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT * FROM atestv1;
;SELECT * FROM atestv2;
;SELECT * FROM atestv3;
;SELECT * FROM atestv0;
;select * from
  ((select a.q1 as x from int8_tbl a offset 0)
   union all
   (select b.q2 as x from int8_tbl b offset 0)) ss
where false;
;set constraint_exclusion = on;
;select * from
  ((select a.q1 as x, random() from int8_tbl a where q1 > 0)
   union all
   (select b.q2 as x, random() from int8_tbl b where q2 > 0)) ss
where x < 0;
;reset constraint_exclusion;
;CREATE VIEW atestv4 AS SELECT * FROM atestv3;
;SELECT * FROM atestv4;
;GRANT SELECT ON atestv4 TO regress_priv_user2;
;SET SESSION AUTHORIZATION regress_priv_user2;
;SELECT * FROM atestv3;
;SELECT * FROM atestv4;
;SELECT * FROM atest2;
;SELECT * FROM atestv2;
;SET SESSION AUTHORIZATION regress_priv_user1;
;CREATE TABLE atest5 (one int, two int unique, three int, four int unique);
;CREATE TABLE atest6 (one int, two int, blue int);
;GRANT SELECT (one), INSERT (two), UPDATE (three) ON atest5 TO regress_priv_user4;
;GRANT ALL (one) ON atest5 TO regress_priv_user3;
;INSERT INTO atest5 VALUES (1,2,3);
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT * FROM atest5;
;SELECT one FROM atest5;
;COPY atest5 (one) TO stdout;
;SELECT two FROM atest5;
;COPY atest5 (two) TO stdout;
;SELECT atest5 FROM atest5;
;COPY atest5 (one,two) TO stdout;
;SELECT 1 FROM atest5;
;SELECT 1 FROM atest5 a JOIN atest5 b USING (one);
;SELECT 1 FROM atest5 a JOIN atest5 b USING (two);
;SELECT 1 FROM atest5 a NATURAL JOIN atest5 b;
;SELECT * FROM (atest5 a JOIN atest5 b USING (one)) j;
;SELECT j.* FROM (atest5 a JOIN atest5 b USING (one)) j;
;SELECT (j.*) IS NULL FROM (atest5 a JOIN atest5 b USING (one)) j;
;SELECT one FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j;
;SELECT j.one FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j;
;SELECT two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j;
;SELECT j.two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j;
;SELECT y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j;
;SELECT j.y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one)) j;
;SELECT * FROM (atest5 a JOIN atest5 b USING (one));
;SELECT a.* FROM (atest5 a JOIN atest5 b USING (one));
;SELECT (a.*) IS NULL FROM (atest5 a JOIN atest5 b USING (one));
;SELECT two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one));
;SELECT a.two FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one));
;SELECT y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one));
;SELECT b.y FROM (atest5 a JOIN atest5 b(one,x,y,z) USING (one));
;SELECT y FROM (atest5 a LEFT JOIN atest5 b(one,x,y,z) USING (one));
;SELECT b.y FROM (atest5 a LEFT JOIN atest5 b(one,x,y,z) USING (one));
;SELECT y FROM (atest5 a FULL JOIN atest5 b(one,x,y,z) USING (one));
;SELECT b.y FROM (atest5 a FULL JOIN atest5 b(one,x,y,z) USING (one));
;SELECT 1 FROM atest5 WHERE two = 2;
;SELECT * FROM atest1, atest5;
;SELECT atest1.* FROM atest1, atest5;
;SELECT atest1.*,atest5.one FROM atest1, atest5;
;SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.two);
;SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.one);
;SELECT one, two FROM atest5;
;SET SESSION AUTHORIZATION regress_priv_user1;
;GRANT SELECT (one,two) ON atest6 TO regress_priv_user4;
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT one, two FROM atest5 NATURAL JOIN atest6;
;SET SESSION AUTHORIZATION regress_priv_user1;
;GRANT SELECT (two) ON atest5 TO regress_priv_user4;
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT one, two FROM atest5 NATURAL JOIN atest6;
;INSERT INTO atest5 (two) VALUES (3);
;COPY atest5 FROM stdin;
;COPY atest5 (two) FROM stdin;
;INSERT INTO atest5 (three) VALUES (4);
;INSERT INTO atest5 VALUES (5,5,5);
;UPDATE atest5 SET three = 10;
;UPDATE atest5 SET one = 8;
;UPDATE atest5 SET three = 5, one = 2;
;INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10;
;INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10 RETURNING atest5.three;
;INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10 RETURNING atest5.one;
;INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = EXCLUDED.one;
;INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = EXCLUDED.three;
;INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set one = 8;
;INSERT INTO atest5(three) VALUES (4) ON CONFLICT (two) DO UPDATE set three = 10;
;INSERT INTO atest5(four) VALUES (4);
;SET SESSION AUTHORIZATION regress_priv_user1;
;GRANT INSERT (four) ON atest5 TO regress_priv_user4;
;SET SESSION AUTHORIZATION regress_priv_user4;
;INSERT INTO atest5(four) VALUES (4) ON CONFLICT (four) DO UPDATE set three = 3;
;INSERT INTO atest5(four) VALUES (4) ON CONFLICT ON CONSTRAINT atest5_four_key DO UPDATE set three = 3;
;INSERT INTO atest5(four) VALUES (4);
;SET SESSION AUTHORIZATION regress_priv_user1;
;GRANT SELECT (four) ON atest5 TO regress_priv_user4;
;SET SESSION AUTHORIZATION regress_priv_user4;
;INSERT INTO atest5(four) VALUES (4) ON CONFLICT (four) DO UPDATE set three = 3;
;INSERT INTO atest5(four) VALUES (4) ON CONFLICT ON CONSTRAINT atest5_four_key DO UPDATE set three = 3;
;SET SESSION AUTHORIZATION regress_priv_user1;
;REVOKE ALL (one) ON atest5 FROM regress_priv_user4;
;GRANT SELECT (one,two,blue) ON atest6 TO regress_priv_user4;
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT one FROM atest5;
;UPDATE atest5 SET one = 1;
;SELECT atest6 FROM atest6;
;COPY atest6 TO stdout;
;SET SESSION AUTHORIZATION regress_priv_user1;
;CREATE TABLE t1 (c1 int, c2 int, c3 int check (c3 < 5), primary key (c1, c2));
;GRANT SELECT (c1) ON t1 TO regress_priv_user2;
;GRANT INSERT (c1, c2, c3) ON t1 TO regress_priv_user2;
;GRANT UPDATE (c1, c2, c3) ON t1 TO regress_priv_user2;
;INSERT INTO t1 VALUES (1, 1, 1);
;INSERT INTO t1 VALUES (1, 2, 1);
;INSERT INTO t1 VALUES (2, 1, 2);
;INSERT INTO t1 VALUES (2, 2, 2);
;INSERT INTO t1 VALUES (3, 1, 3);
;SET SESSION AUTHORIZATION regress_priv_user2;
;INSERT INTO t1 (c1, c2) VALUES (1, 1);
;UPDATE t1 SET c2 = 1;
;INSERT INTO t1 (c1, c2) VALUES (null, null);
;INSERT INTO t1 (c3) VALUES (null);
;INSERT INTO t1 (c1) VALUES (5);
;UPDATE t1 SET c3 = 10;
;SET SESSION AUTHORIZATION regress_priv_user1;
;DROP TABLE t1;
;CREATE TABLE errtst(a text, b text NOT NULL, c text, secret1 text, secret2 text) PARTITION BY LIST (a);
;CREATE TABLE errtst_part_1(secret2 text, c text, a text, b text NOT NULL, secret1 text);
;CREATE TABLE errtst_part_2(secret1 text, secret2 text, a text, c text, b text NOT NULL);
;ALTER TABLE errtst ATTACH PARTITION errtst_part_1 FOR VALUES IN ('aaa');
;ALTER TABLE errtst ATTACH PARTITION errtst_part_2 FOR VALUES IN ('aaaa');
;GRANT SELECT (a, b, c) ON TABLE errtst TO regress_priv_user2;
;GRANT UPDATE (a, b, c) ON TABLE errtst TO regress_priv_user2;
;GRANT INSERT (a, b, c) ON TABLE errtst TO regress_priv_user2;
;INSERT INTO errtst_part_1 (a, b, c, secret1, secret2)
VALUES ('aaa', 'bbb', 'ccc', 'the body', 'is in the attic');
;SET SESSION AUTHORIZATION regress_priv_user2;
;INSERT INTO errtst (a, b) VALUES ('aaa', NULL);
;UPDATE errtst SET b = NULL;
;UPDATE errtst SET a = 'aaa', b = NULL;
;UPDATE errtst SET a = 'aaaa', b = NULL;
;UPDATE errtst SET a = 'aaaa', b = NULL WHERE a = 'aaa';
;SET SESSION AUTHORIZATION regress_priv_user1;
;DROP TABLE errtst;
;SET SESSION AUTHORIZATION regress_priv_user1;
;ALTER TABLE atest6 ADD COLUMN three integer;
;GRANT DELETE ON atest5 TO regress_priv_user3;
;GRANT SELECT (two) ON atest5 TO regress_priv_user3;
;REVOKE ALL (one) ON atest5 FROM regress_priv_user3;
;GRANT SELECT (one) ON atest5 TO regress_priv_user4;
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT atest6 FROM atest6;
;SELECT one FROM atest5 NATURAL JOIN atest6;
;SET SESSION AUTHORIZATION regress_priv_user1;
;ALTER TABLE atest6 DROP COLUMN three;
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT atest6 FROM atest6;
;SELECT one FROM atest5 NATURAL JOIN atest6;
;SET SESSION AUTHORIZATION regress_priv_user1;
;ALTER TABLE atest6 DROP COLUMN two;
;REVOKE SELECT (one,blue) ON atest6 FROM regress_priv_user4;
;SET SESSION AUTHORIZATION regress_priv_user4;
;SELECT * FROM atest6;
;SELECT 1 FROM atest6;
;SET SESSION AUTHORIZATION regress_priv_user3;
;DELETE FROM atest5 WHERE one = 1;
;DELETE FROM atest5 WHERE two = 2;
;SET SESSION AUTHORIZATION regress_priv_user1;
;CREATE TABLE atestp1 (f1 int, f2 int);
;CREATE TABLE atestp2 (fx int, fy int);
;CREATE TABLE atestc (fz int) INHERITS (atestp1, atestp2);
;GRANT SELECT(fx,fy,tableoid) ON atestp2 TO regress_priv_user2;
;GRANT SELECT(fx) ON atestc TO regress_priv_user2;
;SET SESSION AUTHORIZATION regress_priv_user2;
;SELECT fx FROM atestp2;
;SELECT fy FROM atestp2;
;SELECT atestp2 FROM atestp2;
;SELECT tableoid FROM atestp2;
;SELECT fy FROM atestc;
;SET SESSION AUTHORIZATION regress_priv_user1;
;GRANT SELECT(fy,tableoid) ON atestc TO regress_priv_user2;
;SET SESSION AUTHORIZATION regress_priv_user2;
;SELECT fx FROM atestp2;
;SELECT fy FROM atestp2;
;SELECT atestp2 FROM atestp2;
;SELECT tableoid FROM atestp2;
;SET SESSION AUTHORIZATION regress_priv_user1;
;REVOKE ALL ON atestc FROM regress_priv_user2;
;GRANT ALL ON atestp1 TO regress_priv_user2;
;SET SESSION AUTHORIZATION regress_priv_user2;
;SELECT f2 FROM atestp1;
;SELECT f2 FROM atestc;
;DELETE FROM atestp1;
;DELETE FROM atestc;
;UPDATE atestp1 SET f1 = 1;
;UPDATE atestc SET f1 = 1;
;TRUNCATE atestp1;
;TRUNCATE atestc;
;BEGIN;
;LOCK atestp1;
;END;
;BEGIN;
;LOCK atestc;
;END;
;