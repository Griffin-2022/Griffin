
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;
 CREATE TABLE a (i int PRIMARY KEY);
 INSERT INTO a VALUES (0), (1), (2), (3);
 CREATE FUNCTION f() RETURNS TRIGGER LANGUAGE plpgsql AS 'BEGIN RETURN NULL; END;';
 CREATE TRIGGER t AFTER UPDATE ON a EXECUTE PROCEDURE f();

;
 DROP TABLE a;
 DROP FUNCTION f();

;