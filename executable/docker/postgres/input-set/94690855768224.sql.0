CREATE USER regress_dep_user;
;CREATE USER regress_dep_user2;
;CREATE USER regress_dep_user3;
;CREATE GROUP regress_dep_group;
;CREATE TABLE deptest (f1 serial primary key, f2 text);
;GRANT SELECT ON TABLE deptest TO GROUP regress_dep_group;
;GRANT ALL ON TABLE deptest TO regress_dep_user, regress_dep_user2;
;DROP USER regress_dep_user;
;DROP GROUP regress_dep_group;
;REVOKE SELECT ON deptest FROM GROUP regress_dep_group;
;DROP GROUP regress_dep_group;
;REVOKE SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES ON deptest FROM regress_dep_user;
;DROP USER regress_dep_user;
;REVOKE TRIGGER ON deptest FROM regress_dep_user;
;DROP USER regress_dep_user;
;REVOKE ALL ON deptest FROM regress_dep_user2;
;DROP USER regress_dep_user2;
;ALTER TABLE deptest OWNER TO regress_dep_user3;
;DROP USER regress_dep_user3;
;DROP TABLE deptest;
;DROP USER regress_dep_user3;
;CREATE USER regress_dep_user0;
;CREATE USER regress_dep_user1;
;CREATE USER regress_dep_user2;
;SET SESSION AUTHORIZATION regress_dep_user0;
;DROP OWNED BY regress_dep_user1;
;DROP OWNED BY regress_dep_user0, regress_dep_user2;
;REASSIGN OWNED BY regress_dep_user0 TO regress_dep_user1;
;REASSIGN OWNED BY regress_dep_user1 TO regress_dep_user0;
;DROP OWNED BY regress_dep_user0;
;CREATE TABLE deptest1 (f1 int unique);
;GRANT ALL ON deptest1 TO regress_dep_user1 WITH GRANT OPTION;
;SET SESSION AUTHORIZATION regress_dep_user1;
;CREATE TABLE deptest (a serial primary key, b text);
;GRANT ALL ON deptest1 TO regress_dep_user2;
;RESET SESSION AUTHORIZATION;
;SELECT n.nspname as "Schema",
  c.relname as "Name",
  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'S' THEN 'sequence' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' END as "Type",
  pg_catalog.array_to_string(c.relacl, E'\n') AS "Access privileges",
  pg_catalog.array_to_string(ARRAY(
    SELECT attname || E':\n  ' || pg_catalog.array_to_string(attacl, E'\n  ')
    FROM pg_catalog.pg_attribute a
    WHERE attrelid = c.oid AND NOT attisdropped AND attacl IS NOT NULL
  ), E'\n') AS "Column privileges",
  pg_catalog.array_to_string(ARRAY(
    SELECT polname
    || CASE WHEN NOT polpermissive THEN
       E' (RESTRICTIVE)'
       ELSE '' END
    || CASE WHEN polcmd != '*' THEN
           E' (' || polcmd::pg_catalog.text || E'):'
       ELSE E':'
       END
    || CASE WHEN polqual IS NOT NULL THEN
           E'\n  (u): ' || pg_catalog.pg_get_expr(polqual, polrelid)
       ELSE E''
       END
    || CASE WHEN polwithcheck IS NOT NULL THEN
           E'\n  (c): ' || pg_catalog.pg_get_expr(polwithcheck, polrelid)
       ELSE E''
       END    || CASE WHEN polroles <> '{0}' THEN
           E'\n  to: ' || pg_catalog.array_to_string(
               ARRAY(
                   SELECT rolname
                   FROM pg_catalog.pg_roles
                   WHERE oid = ANY (polroles)
                   ORDER BY 1
               ), E', ')
       ELSE E''
       END
    FROM pg_catalog.pg_policy pol
    WHERE polrelid = c.oid), E'\n')
    AS "Policies"
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relkind IN ('r','v','m','S','f','p')
  AND c.relname OPERATOR(pg_catalog.~) '^(deptest1)$' COLLATE pg_catalog.default
  AND n.nspname !~ '^pg_' AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 1, 2;
;DROP OWNED BY regress_dep_user1;
;SELECT n.nspname as "Schema",
  c.relname as "Name",
  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'S' THEN 'sequence' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' END as "Type",
  pg_catalog.array_to_string(c.relacl, E'\n') AS "Access privileges",
  pg_catalog.array_to_string(ARRAY(
    SELECT attname || E':\n  ' || pg_catalog.array_to_string(attacl, E'\n  ')
    FROM pg_catalog.pg_attribute a
    WHERE attrelid = c.oid AND NOT attisdropped AND attacl IS NOT NULL
  ), E'\n') AS "Column privileges",
  pg_catalog.array_to_string(ARRAY(
    SELECT polname
    || CASE WHEN NOT polpermissive THEN
       E' (RESTRICTIVE)'
       ELSE '' END
    || CASE WHEN polcmd != '*' THEN
           E' (' || polcmd::pg_catalog.text || E'):'
       ELSE E':'
       END
    || CASE WHEN polqual IS NOT NULL THEN
           E'\n  (u): ' || pg_catalog.pg_get_expr(polqual, polrelid)
       ELSE E''
       END
    || CASE WHEN polwithcheck IS NOT NULL THEN
           E'\n  (c): ' || pg_catalog.pg_get_expr(polwithcheck, polrelid)
       ELSE E''
       END    || CASE WHEN polroles <> '{0}' THEN
           E'\n  to: ' || pg_catalog.array_to_string(
               ARRAY(
                   SELECT rolname
                   FROM pg_catalog.pg_roles
                   WHERE oid = ANY (polroles)
                   ORDER BY 1
               ), E', ')
       ELSE E''
       END
    FROM pg_catalog.pg_policy pol
    WHERE polrelid = c.oid), E'\n')
    AS "Policies"
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relkind IN ('r','v','m','S','f','p')
  AND c.relname OPERATOR(pg_catalog.~) '^(deptest1)$' COLLATE pg_catalog.default
  AND n.nspname !~ '^pg_' AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 1, 2;
;SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) '^(deptest)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 2, 3;
;GRANT ALL ON deptest1 TO regress_dep_user1;
;GRANT CREATE ON DATABASE regression TO regress_dep_user1;
;SET SESSION AUTHORIZATION regress_dep_user1;
;CREATE SCHEMA deptest;
;CREATE TABLE deptest (a serial primary key, b text);
;ALTER DEFAULT PRIVILEGES FOR ROLE regress_dep_user1 IN SCHEMA deptest
  GRANT ALL ON TABLES TO regress_dep_user2;
;CREATE FUNCTION deptest_func() RETURNS void LANGUAGE plpgsql
  AS $$ BEGIN END; $$;
;CREATE TYPE deptest_enum AS ENUM ('red');
;CREATE TYPE deptest_range AS RANGE (SUBTYPE = int4);
;CREATE TABLE deptest2 (f1 int);
;CREATE SEQUENCE ss1;
;ALTER TABLE deptest2 ALTER f1 SET DEFAULT nextval('ss1');
;ALTER SEQUENCE ss1 OWNED BY deptest2.f1;
;CREATE TYPE deptest_t AS (a int);
;SELECT typowner = relowner
FROM pg_type JOIN pg_class c ON typrelid = c.oid WHERE typname = 'deptest_t';
;RESET SESSION AUTHORIZATION;
;REASSIGN OWNED BY regress_dep_user1 TO regress_dep_user2;
;SELECT n.nspname as "Schema",
  c.relname as "Name",
  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 't' THEN 'TOAST table' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relkind IN ('r','p','t','s','')
  AND c.relname OPERATOR(pg_catalog.~) '^(deptest)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 1,2;
;SELECT typowner = relowner
FROM pg_type JOIN pg_class c ON typrelid = c.oid WHERE typname = 'deptest_t';
;DROP USER regress_dep_user1;
;DROP OWNED BY regress_dep_user1;
;DROP USER regress_dep_user1;
;DROP USER regress_dep_user2;
;DROP OWNED BY regress_dep_user2, regress_dep_user0;
;DROP USER regress_dep_user2;
;DROP USER regress_dep_user0;
;