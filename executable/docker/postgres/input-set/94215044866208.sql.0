CALL nonexistent();
;CALL random();
;CREATE FUNCTION cp_testfunc1(a int) RETURNS int LANGUAGE SQL AS $$ SELECT a $$;
;CREATE TABLE cp_test (a int, b text);
;CREATE PROCEDURE ptest1(x text)
LANGUAGE SQL
AS $$
INSERT INTO cp_test VALUES (1, x);
$$;
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.proname OPERATOR(pg_catalog.~) '^(ptest1)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4;
;SELECT pg_get_functiondef('ptest1'::regproc);
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.prokind <> 'a'
      AND p.prokind <> 'p'
      AND p.prorettype <> 'pg_catalog.trigger'::pg_catalog.regtype
      AND p.prokind <> 'w'
  AND p.proname OPERATOR(pg_catalog.~) '^(.*test.*1)$' COLLATE pg_catalog.default
  AND n.nspname OPERATOR(pg_catalog.~) '^(public)$' COLLATE pg_catalog.default
ORDER BY 1, 2, 4;
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE (
       p.prokind = 'p'
      )
  AND p.proname OPERATOR(pg_catalog.~) '^(.*test.*1)$' COLLATE pg_catalog.default
  AND n.nspname OPERATOR(pg_catalog.~) '^(public)$' COLLATE pg_catalog.default
ORDER BY 1, 2, 4;
;SELECT ptest1('x');
;CALL ptest1('a');
;CALL ptest1('xy' || 'zzy');
;CALL ptest1(substring(random()::numeric(20,15)::text, 1, 1));
;SELECT * FROM cp_test ORDER BY b COLLATE "C";
;CREATE PROCEDURE ptest1s(x text)
LANGUAGE SQL
BEGIN ATOMIC
  INSERT INTO cp_test VALUES (1, x);
END;
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.proname OPERATOR(pg_catalog.~) '^(ptest1s)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4;
;SELECT pg_get_functiondef('ptest1s'::regproc);
;CALL ptest1s('b');
;SELECT * FROM cp_test ORDER BY b COLLATE "C";
;CREATE PROCEDURE ptestx()
LANGUAGE SQL
BEGIN ATOMIC
  CREATE TABLE x (a int);
END;
;CREATE PROCEDURE ptest2()
LANGUAGE SQL
AS $$
SELECT 5;
$$;
;CALL ptest2();
;TRUNCATE cp_test;
;CREATE PROCEDURE ptest3(y text)
LANGUAGE SQL
AS $$
CALL ptest1(y);
CALL ptest1($1);
$$;
;CALL ptest3('b');
;SELECT * FROM cp_test;
;CREATE PROCEDURE ptest4a(INOUT a int, INOUT b int)
LANGUAGE SQL
AS $$
SELECT 1, 2;
$$;
;CALL ptest4a(NULL, NULL);
;CREATE PROCEDURE ptest4b(INOUT b int, INOUT a int)
LANGUAGE SQL
AS $$
CALL ptest4a(a, b);  -- error, not supported
$$;
;DROP PROCEDURE ptest4a;
;CREATE OR REPLACE PROCEDURE ptest5(a int, b text, c int default 100)
LANGUAGE SQL
AS $$
INSERT INTO cp_test VALUES(a, b);
INSERT INTO cp_test VALUES(c, b);
$$;
;TRUNCATE cp_test;
;CALL ptest5(10, 'Hello', 20);
;CALL ptest5(10, 'Hello');
;CALL ptest5(10, b => 'Hello');
;CALL ptest5(b => 'Hello', a => 10);
;SELECT * FROM cp_test;
;CREATE PROCEDURE ptest6(a int, b anyelement)
LANGUAGE SQL
AS $$
SELECT NULL::int;
$$;
;CALL ptest6(1, 2);
;CREATE PROCEDURE ptest7(a text, b text)
LANGUAGE SQL
AS $$
SELECT a = b;
$$;
;CALL ptest7(least('a', 'b'), 'a');
;CREATE PROCEDURE ptest8(x text)
BEGIN ATOMIC
END;
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.proname OPERATOR(pg_catalog.~) '^(ptest8)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4;
;SELECT pg_get_functiondef('ptest8'::regproc);
;CALL ptest8('');
;CREATE PROCEDURE ptest9(OUT a int)
LANGUAGE SQL
AS $$
INSERT INTO cp_test VALUES (1, 'a');
SELECT 1;
$$;
;CALL ptest9(NULL);
;CALL ptest9(1/0);
;CALL ptest9(1./0.);
;CREATE PROCEDURE ptest10(OUT a int, IN b int, IN c int)
LANGUAGE SQL AS $$ SELECT b - c $$;
;CALL ptest10(null, 7, 4);
;CALL ptest10(a => null, b => 8, c => 2);
;CALL ptest10(null, 7, c => 2);
;CALL ptest10(null, c => 4, b => 11);
;CALL ptest10(b => 8, c => 2, a => 0);
;CREATE PROCEDURE ptest11(a OUT int, VARIADIC b int[]) LANGUAGE SQL
  AS $$ SELECT b[1] + b[2] $$;
;CALL ptest11(null, 11, 12, 13);
;CREATE PROCEDURE ptest10(IN a int, IN b int, IN c int)
LANGUAGE SQL AS $$ SELECT a + b - c $$;
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.proname OPERATOR(pg_catalog.~) '^(ptest10)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4;
;drop procedure ptest10;
;drop procedure ptest10(int, int, int);
;begin;
;drop procedure ptest10(out int, int, int);
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.proname OPERATOR(pg_catalog.~) '^(ptest10)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4;
;drop procedure ptest10(int, int, int);
;rollback;
;begin;
;drop procedure ptest10(in int, int, int);
;SELECT n.nspname as "Schema",
  p.proname as "Name",
  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
 CASE p.prokind
  WHEN 'a' THEN 'agg'
  WHEN 'w' THEN 'window'
  WHEN 'p' THEN 'proc'
  ELSE 'func'
 END as "Type"
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE p.proname OPERATOR(pg_catalog.~) '^(ptest10)$' COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4;
;drop procedure ptest10(int, int, int);
;rollback;
;CALL version();
;CALL sum(1);
;CREATE PROCEDURE ptestx() LANGUAGE SQL WINDOW AS $$ INSERT INTO cp_test VALUES (1, 'a') $$;
;CREATE PROCEDURE ptestx() LANGUAGE SQL STRICT AS $$ INSERT INTO cp_test VALUES (1, 'a') $$;
;CREATE PROCEDURE ptestx(a VARIADIC int[], b OUT int) LANGUAGE SQL
  AS $$ SELECT a[1] $$;
;CREATE PROCEDURE ptestx(a int DEFAULT 42, b OUT int) LANGUAGE SQL
  AS $$ SELECT a $$;
;ALTER PROCEDURE ptest1(text) STRICT;
;ALTER FUNCTION ptest1(text) VOLATILE;
;ALTER PROCEDURE cp_testfunc1(int) VOLATILE;
;ALTER PROCEDURE nonexistent() VOLATILE;
;DROP FUNCTION ptest1(text);
;DROP PROCEDURE cp_testfunc1(int);
;DROP PROCEDURE nonexistent();
;CREATE USER regress_cp_user1;
;GRANT INSERT ON cp_test TO regress_cp_user1;
;REVOKE EXECUTE ON PROCEDURE ptest1(text) FROM PUBLIC;
;SET ROLE regress_cp_user1;
;CALL ptest1('a');
;RESET ROLE;
;GRANT EXECUTE ON PROCEDURE ptest1(text) TO regress_cp_user1;
;SET ROLE regress_cp_user1;
;CALL ptest1('a');
;RESET ROLE;
;ALTER ROUTINE cp_testfunc1(int) RENAME TO cp_testfunc1a;
;ALTER ROUTINE cp_testfunc1a RENAME TO cp_testfunc1;
;ALTER ROUTINE ptest1(text) RENAME TO ptest1a;
;ALTER ROUTINE ptest1a RENAME TO ptest1;
;DROP ROUTINE cp_testfunc1(int);
;DROP PROCEDURE ptest1;
;DROP PROCEDURE ptest1s;
;DROP PROCEDURE ptest2;
;DROP TABLE cp_test;
;DROP USER regress_cp_user1;
;