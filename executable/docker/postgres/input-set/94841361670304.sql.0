COPY aggtest FROM '/root/postgres/src/test/regress/data/agg.data';
;COPY onek FROM '/root/postgres/src/test/regress/data/onek.data';
;COPY onek TO '/root/postgres/src/test/regress/results/onek.data';
;DELETE FROM onek;
;COPY onek FROM '/root/postgres/src/test/regress/results/onek.data';
;COPY tenk1 FROM '/root/postgres/src/test/regress/data/tenk.data';
;COPY slow_emp4000 FROM '/root/postgres/src/test/regress/data/rect.data';
;COPY person FROM '/root/postgres/src/test/regress/data/person.data';
;COPY emp FROM '/root/postgres/src/test/regress/data/emp.data';
;COPY student FROM '/root/postgres/src/test/regress/data/student.data';
;COPY stud_emp FROM '/root/postgres/src/test/regress/data/stud_emp.data';
;COPY road FROM '/root/postgres/src/test/regress/data/streets.data';
;COPY real_city FROM '/root/postgres/src/test/regress/data/real_city.data';
;COPY hash_i4_heap FROM '/root/postgres/src/test/regress/data/hash.data';
;COPY hash_name_heap FROM '/root/postgres/src/test/regress/data/hash.data';
;COPY hash_txt_heap FROM '/root/postgres/src/test/regress/data/hash.data';
;COPY hash_f8_heap FROM '/root/postgres/src/test/regress/data/hash.data';
;COPY test_tsvector FROM '/root/postgres/src/test/regress/data/tsearch.data';
;COPY testjsonb FROM '/root/postgres/src/test/regress/data/jsonb.data';
;COPY bt_i4_heap FROM '/root/postgres/src/test/regress/data/desc.data';
;COPY bt_name_heap FROM '/root/postgres/src/test/regress/data/hash.data';
;COPY bt_txt_heap FROM '/root/postgres/src/test/regress/data/desc.data';
;COPY bt_f8_heap FROM '/root/postgres/src/test/regress/data/hash.data';
;COPY array_op_test FROM '/root/postgres/src/test/regress/data/array.data';
;COPY array_index_op_test FROM '/root/postgres/src/test/regress/data/array.data';
;ANALYZE aggtest;
;ANALYZE onek;
;ANALYZE tenk1;
;ANALYZE slow_emp4000;
;ANALYZE person;
;ANALYZE emp;
;ANALYZE student;
;ANALYZE stud_emp;
;ANALYZE road;
;ANALYZE real_city;
;ANALYZE hash_i4_heap;
;ANALYZE hash_name_heap;
;ANALYZE hash_txt_heap;
;ANALYZE hash_f8_heap;
;ANALYZE test_tsvector;
;ANALYZE bt_i4_heap;
;ANALYZE bt_name_heap;
;ANALYZE bt_txt_heap;
;ANALYZE bt_f8_heap;
;ANALYZE array_op_test;
;ANALYZE array_index_op_test;
;create temp table copytest (
	style	text,
	test 	text,
	filler	int);
;insert into copytest values('DOS',E'abc\r\ndef',1);
;insert into copytest values('Unix',E'abc\ndef',2);
;insert into copytest values('Mac',E'abc\rdef',3);
;insert into copytest values(E'esc\\ape',E'a\\r\\\r\\\n\\nb',4);
;copy copytest to '/root/postgres/src/test/regress/results/copytest.csv' csv;
;create temp table copytest2 (like copytest);
;copy copytest2 from '/root/postgres/src/test/regress/results/copytest.csv' csv;
;select * from copytest except select * from copytest2;
;truncate copytest2;
;copy copytest to '/root/postgres/src/test/regress/results/copytest.csv' csv quote '''' escape E'\\';
;copy copytest2 from '/root/postgres/src/test/regress/results/copytest.csv' csv quote '''' escape E'\\';
;select * from copytest except select * from copytest2;
;create temp table copytest3 (
	c1 int,
	"col with , comma" text,
	"col with "" quote"  int);
;copy copytest3 from stdin csv header;
;copy copytest3 to stdout csv header;
;create temp table copytest4 (
	c1 int,
	"colname with tab: 	" text);
;copy copytest4 from stdin (header);
;copy copytest4 to stdout (header);
;create table parted_copytest (
	a int,
	b int,
	c text
) partition by list (b);
;create table parted_copytest_a1 (c text, b int, a int);
;create table parted_copytest_a2 (a int, c text, b int);
;alter table parted_copytest attach partition parted_copytest_a1 for values in(1);
;alter table parted_copytest attach partition parted_copytest_a2 for values in(2);
;insert into parted_copytest select x,1,'One' from generate_series(1,1000) x;
;insert into parted_copytest select x,2,'Two' from generate_series(1001,1010) x;
;insert into parted_copytest select x,1,'One' from generate_series(1011,1020) x;
;copy (select * from parted_copytest order by a) to '/root/postgres/src/test/regress/results/parted_copytest.csv';
;truncate parted_copytest;
;copy parted_copytest from '/root/postgres/src/test/regress/results/parted_copytest.csv';
;begin;
;truncate parted_copytest;
;copy parted_copytest from '/root/postgres/src/test/regress/results/parted_copytest.csv' (freeze);
;rollback;
;select tableoid::regclass,count(*),sum(a) from parted_copytest
group by tableoid order by tableoid::regclass::name;
;truncate parted_copytest;
;create function part_ins_func() returns trigger language plpgsql as $$
begin
  return new;
end;
$$;
;create trigger part_ins_trig
	before insert on parted_copytest_a2
	for each row
	execute procedure part_ins_func();
;copy parted_copytest from '/root/postgres/src/test/regress/results/parted_copytest.csv';
;select tableoid::regclass,count(*),sum(a) from parted_copytest
group by tableoid order by tableoid::regclass::name;
;truncate table parted_copytest;
;create index on parted_copytest (b);
;drop trigger part_ins_trig on parted_copytest_a2;
;copy parted_copytest from stdin;
;select * from parted_copytest where b = 1;
;select * from parted_copytest where b = 2;
;drop table parted_copytest;
;create table tab_progress_reporting (
	name text,
	age int4,
	location point,
	salary int4,
	manager name
);
;create function notice_after_tab_progress_reporting() returns trigger AS
$$
declare report record;
begin
  -- The fields ignored here are the ones that may not remain
  -- consistent across multiple runs.  The sizes reported may differ
  -- across platforms, so just check if these are strictly positive.
  with progress_data as (
    select
       relid::regclass::text as relname,
       command,
       type,
       bytes_processed > 0 as has_bytes_processed,
       bytes_total > 0 as has_bytes_total,
       tuples_processed,
       tuples_excluded
      from pg_stat_progress_copy
      where pid = pg_backend_pid())
  select into report (to_jsonb(r)) as value
    from progress_data r;

  raise info 'progress: %', report.value::text;
  return new;
end;
$$ language plpgsql;
;create trigger check_after_tab_progress_reporting
	after insert on tab_progress_reporting
	for each statement
	execute function notice_after_tab_progress_reporting();
;copy tab_progress_reporting from stdin;
;truncate tab_progress_reporting;
;copy tab_progress_reporting from '/root/postgres/src/test/regress/data/emp.data'
	where (salary < 2000);
;drop trigger check_after_tab_progress_reporting on tab_progress_reporting;
;drop function notice_after_tab_progress_reporting();
;drop table tab_progress_reporting;
;