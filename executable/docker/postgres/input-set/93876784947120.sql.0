
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;
    CREATE TABLE trigtest(key text primary key, data text);

    CREATE FUNCTION noisy_oper(p_comment text, p_a anynonarray, p_op text, p_b anynonarray)
    RETURNS bool LANGUAGE plpgsql AS $body$
        DECLARE
            r bool;
        BEGIN
            EXECUTE format('SELECT $1 %s $2', p_op) INTO r USING p_a, p_b;
            RAISE NOTICE '%: % % % % %: %', p_comment, pg_typeof(p_a), p_a, p_op, pg_typeof(p_b), p_b, r;
        RETURN r;
    END;$body$;

    CREATE FUNCTION trig_report() RETURNS TRIGGER LANGUAGE plpgsql AS $body$
    DECLARE
	r_new text;
	r_old text;
	r_ret record;
    BEGIN
	-- In older releases it wasn't allowed to reference OLD/NEW
        -- when not applicable for TG_WHEN
	IF TG_OP = 'INSERT' THEN
	    r_old = NULL;
	    r_new = NEW;
	    r_ret = NEW;
	ELSIF TG_OP = 'DELETE' THEN
	    r_old = OLD;
	    r_new = NULL;
	    r_ret = OLD;
	ELSIF TG_OP = 'UPDATE' THEN
	    r_old = OLD;
	    r_new = NEW;
	    r_ret = NEW;
	END IF;

	IF TG_WHEN = 'AFTER' THEN
	   r_ret = NULL;
	END IF;

        RAISE NOTICE 'trigger: name %; when: %; lev: %s; op: %; old: % new: %',
            TG_NAME, TG_WHEN, TG_LEVEL, TG_OP, r_old, r_new;

	RETURN r_ret;
    END;
    $body$;

;
     DROP TABLE trigtest;
     DROP FUNCTION noisy_oper(text, anynonarray, text, anynonarray);
     DROP FUNCTION trig_report();

;