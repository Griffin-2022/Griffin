# name: test/sql/aggregate/having/test_scalar_having.test
# description: Test HAVING clause without GROUP BY
# group: [having]

# CONTROVERSIAL: HAVING without GROUP BY works in PostgreSQL, but not in SQLite
# scalar HAVING queries
# constants only
;
SELECT 42 HAVING 42 > 20
;
42

;
SELECT 42 HAVING 42 > 80
;

# aggregates
;
SELECT SUM(42) HAVING AVG(42) > MIN(20)
;
42.000000

;
SELECT SUM(42) HAVING SUM(42) > SUM(80)
;

;
SELECT SUM(42)+COUNT(*)+COUNT(1), 3 HAVING SUM(42)+MAX(20)+AVG(30) > SUM(120)-MIN(100)
;
44.000000	3

# subqueries
;
SELECT SUM(42) HAVING (SELECT SUM(42)) > SUM(80)
;

;
CREATE TABLE test (a INTEGER, b INTEGER);

;
INSERT INTO test VALUES (11, 22), (13, 22), (12, 21)

# HAVING with column references does not work
# HAVING clause can only contain aggregates
;
SELECT a FROM test WHERE a=13 HAVING a > 11

# HAVING clause also turns the rest of the query into an aggregate
# thus column references in SELECT clause also produce errors
;
SELECT a FROM test WHERE a=13 HAVING SUM(a) > 11

# once we produce a sum this works though
;
SELECT SUM(a) FROM test WHERE a=13 HAVING SUM(a) > 11
;
13.000000

;
SELECT SUM(a) FROM test WHERE a=13 HAVING SUM(a) > 20
;

# HAVING with single-node aggregation does work, even without GROUP BY
;
SELECT SUM(a) FROM test HAVING SUM(a)>10;
;
36.000000

;
SELECT SUM(a) FROM test HAVING SUM(a)<10;
;

;
SELECT SUM(a) FROM test HAVING COUNT(*)>1;
;
36.000000

;
SELECT SUM(a) FROM test HAVING COUNT(*)>10;
;

