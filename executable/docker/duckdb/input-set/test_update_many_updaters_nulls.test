# name: test/sql/update/test_update_many_updaters_nulls.test
# description: Test update behavior with multiple updaters and NULL values
# group: [update]

;
PRAGMA enable_verification

;
PRAGMA enable_verification

;
PRAGMA enable_verification

;
PRAGMA enable_verification

;
PRAGMA enable_verification

;
PRAGMA enable_verification

# this test contains five query connections (con1, con2, con3, con4, con5)
# and one updating connection (updater)
# create a table, filled with 3 values (1), (2), (3)
;
CREATE TABLE test (a INTEGER);

;
INSERT INTO test VALUES (1), (2), (3)

# now we start updating specific values and reading different versions
;
BEGIN TRANSACTION

;
UPDATE test SET a=NULL WHERE a=1
;
1

;
BEGIN TRANSACTION

;
UPDATE test SET a=NULL WHERE a=2
;
1

;
BEGIN TRANSACTION

;
UPDATE test SET a=NULL WHERE a=3
;
1

;
BEGIN TRANSACTION

;
SELECT COUNT(*) FROM test WHERE a IS NULL
;
3

;
UPDATE test SET a=99 WHERE a IS NULL
;
3

;
BEGIN TRANSACTION

# now read the different states
# con sees {1, 2, 3}
;
SELECT * FROM test ORDER BY a
;
1
2
3

# con2 sees {NULL, 2, 3}
;
SELECT * FROM test ORDER BY a
;
NULL
2
3

# con3 sees {NULL, NULL, 3}
;
SELECT * FROM test ORDER BY a
;
NULL
NULL
3

# con4 sees {NULL, NULL, NULL}
;
SELECT * FROM test ORDER BY a
;
NULL
NULL
NULL

# con5 sees {99, 99, 99}
;
SELECT * FROM test ORDER BY a
;
99
99
99

# now verify that we get conflicts when we update values that have been updated AFTER we started
;
UPDATE test SET a=99 WHERE a=1

;
UPDATE test SET a=99 WHERE a=2

;
UPDATE test SET a=99 WHERE a=3

;
UPDATE test SET a=99 WHERE a IS NULL

