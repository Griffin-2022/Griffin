# name: test/sql/types/nested/list/test_list_slice.test
# description: List slicing test
# group: [list]

;
PRAGMA enable_verification

;
CREATE TABLE listdata (
    c0 char(1),
    c1 char(1),
    c2 char(1),
    c3 char(1),
    c4 char(1),
    off integer,
    length integer)

;
INSERT INTO listdata VALUES
    ('h', 'e', 'l', 'l', 'o', 1, 2),
    ('w', 'o', 'r', 'l', 'd', 2, 3),
    ('b', NULL, NULL, NULL, NULL, 0, 1),
    (NULL, NULL, NULL, NULL, NULL, 0, 2);

;
CREATE VIEW lists AS
    SELECT CASE
            WHEN c0 = 'b' THEN LIST_VALUE(c0)
            WHEN c0 IS NULL THEN NULL
            ELSE LIST_VALUE(c0, c1, c2, c3, c4)
            END AS s,
    off, length FROM listdata;

# check contents
;
SELECT s from lists
;
[h, e, l, l, o]
[w, o, r, l, d]
[b]
NULL

# Slicing string constants is not supported
;
CREATE TABLE duckdata(c0 char(1), c1 char(1), c2 char(1));

;
INSERT INTO duckdata VALUES ('ðŸ¦†', 'a', 'b'), ('a', 'b', 'c')

;
CREATE VIEW ducks AS SELECT LIST_VALUE(c0, c1, c2) AS d from duckdata;

;
CREATE VIEW hello AS SELECT s AS hello FROM lists WHERE off = 1 AND length = 2

;
CREATE VIEW nulltable as SELECT s as n FROM lists WHERE off = 0 AND length = 2

;
SELECT d from ducks
;
[ðŸ¦†, a, b]
[a, b, c]

# test zero length
;
SELECT d[0:0] FROM ducks
;
[]
[]

# constant offset/length
# normal slice
;
SELECT s[1:2] FROM lists
;
[h, e]
[w, o]
[b]
NULL

# index out of range
;
SELECT s[1:3] FROM lists
;
[h, e, l]
[w, o, r]
[b]
NULL

# variable length offset/length
;
SELECT s[off:length+off] FROM lists
;
[h, e, l]
[o, r, l, d]
[b]
NULL

;
SELECT s[off:2+off] FROM lists
;
[h, e, l]
[o, r, l]
[b]
NULL

;
SELECT s[0:length] FROM lists
;
[h, e]
[w, o, r]
[b]
NULL

;
SELECT hello[off:length+off] FROM lists, hello
;
[h, e, l]
[e, l, l, o]
[h]
[h, e]

;
SELECT n[off:length+off] FROM lists, nulltable
;
NULL
NULL
NULL
NULL

;
SELECT hello[NULL:length+NULL] FROM lists, hello
;
[h, e, l, l, o]
[h, e, l, l, o]
[h, e, l, l, o]
[h, e, l, l, o]

;
SELECT hello[off:NULL+off] FROM lists, hello
;
[h, e, l, l, o]
[e, l, l, o]
[h, e, l, l, o]
[h, e, l, l, o]

;
SELECT n[NULL:length+NULL] FROM lists, nulltable
;
NULL
NULL
NULL
NULL

;
SELECT hello[NULL:NULL+NULL] FROM lists, hello
;
[h, e, l, l, o]
[h, e, l, l, o]
[h, e, l, l, o]
[h, e, l, l, o]

;
SELECT n[off:NULL+off] FROM lists, nulltable
;
NULL
NULL
NULL
NULL

;
SELECT n[NULL:NULL+NULL] FROM lists, nulltable
;
NULL
NULL
NULL
NULL

# fixed slice
;
SELECT s[-2:] FROM lists
;
[l, o]
[l, d]
NULL
NULL

# length 1
;
SELECT s[0:1] FROM lists
;
[h]
[w]
[b]
NULL

# negative offset and negative length
;
SELECT s[-4:-2] FROM lists
;
[e, l]
[o, r]
NULL
NULL

# length 1
;
SELECT s[1:1] FROM lists
;
[h]
[w]
[b]
NULL

# no end
;
SELECT s[1:] FROM lists
;
[h, e, l, l, o]
[w, o, r, l, d]
[b]
NULL

;
SELECT s[2:] FROM lists
;
[e, l, l, o]
[o, r, l, d]
[]
NULL

# very large offset and length
;
SELECT s[(2147483647-1):1] FROM lists
;
[]
[]
[]
NULL

;
SELECT s[(2147483647-1):-1] FROM lists
;
[]
[]
[]
NULL

;
SELECT s[(-2147483646-1):-1] FROM lists
;
NULL
NULL
NULL
NULL

;
SELECT s[(-2147483646-1):-2147483647] FROM lists
;
NULL
NULL
NULL
NULL

# pop back
;
SELECT ARRAY_POP_BACK(s) FROM lists;
;
[h, e, l, l]
[w, o, r, l]
[]
NULL

# pop front
;
SELECT ARRAY_POP_FRONT(s) FROM lists;
;
[e, l, l, o]
[o, r, l, d]
[]
NULL