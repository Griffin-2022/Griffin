# name: test/sql/function/list/list_contains.test
# description: Test list_contains function
# group: [list]

;
PRAGMA enable_verification

;
create table TEST2 (i int[], j int);

;
insert into TEST2 values ([2,1,3], 2), ([2,3,4], 5), ([1], NULL);

;
select list_contains(i, j) from TEST2
;
1
0
NULL

;
create table TEST (i int[]);

;
insert into TEST values ([2,1,3]), ([2,3,4]), ([1]);

;
SELECT i, list_contains(i,1) from TEST;
;
[2, 1, 3]	1
[2, 3, 4]	0
[1]	1

;
SELECT i, list_contains(i,4.0) from TEST;
;
[2, 1, 3]	0
[2, 3, 4]	1
[1]	0

;
DROP table TEST;

;
create table STR_TEST (i string[]);

;
insert into STR_TEST values (['a','b','c']), (['d','a','e']), (['b']), (['aaaaaaaaaaaaaaaaaaaaaaaa']);

;
SELECT i, list_contains(i,'a') from STR_TEST;
;
[a, b, c]	1
[d, a, e]	1
[b]	0
[aaaaaaaaaaaaaaaaaaaaaaaa]	0

;
SELECT i, list_contains(i,'aaaaaaaaaaaaaaaaaaaaaaaa') from STR_TEST;
;
[a, b, c]	0
[d, a, e]	0
[b]	0
[aaaaaaaaaaaaaaaaaaaaaaaa]	1

;
SELECT i, list_contains(i,0) from STR_TEST;
;
[a, b, c]	0
[d, a, e]	0
[b]	0
[aaaaaaaaaaaaaaaaaaaaaaaa]	0


;
SELECT i, list_contains(i,NULL) from STR_TEST;
;
[a, b, c]	NULL
[d, a, e]	NULL
[b]	NULL
[aaaaaaaaaaaaaaaaaaaaaaaa]	NULL

;
DROP table STR_TEST;


# basic functionality
;
SELECT list_contains([7,2,5], 7)
;
1

# Empty list
;
SELECT list_contains([], 7)
;
0

# Mixed data types
;
SELECT list_contains([1,2,3],1.0)
;
1

;
SELECT list_contains([1.0,2.0,3.0,4.0],1)
;
1

;
SELECT list_contains([1,2,3],4.0)
;
0

;
SELECT list_contains([1.0,2.0,3.0],4)
;
0


;
SELECT list_contains([1.0,2.0,3.0], 'a')
;
0

# Not a list as input
;
SELECT list_contains('a', 'a')

;
SELECT list_contains(NULL,NULL)
;
NULL


;
SELECT list_contains([7], 5)
;
0

;
SELECT list_contains([1,2,3,4],4)
;
1

;
SELECT list_contains([1,2,3,4],5)
;
0

;
SELECT list_contains([1.0,2.0,3.0,4.0],5.0)
;
0

;
SELECT list_contains([1.0,2.0,3.0,4.0],4.0)
;
1

;
SELECT list_contains([true, false],true)
;
1

;
SELECT list_contains([true, true],false)
;
0

;
SELECT list_contains(['test', 'notest'],'notest')
;
1

;
SELECT list_contains(['test', 'notest'],'a')
;
0

# Null types
;
SELECT list_contains(NULL,1)
;
NULL

# Null types
;
SELECT list_contains([1],NULL)
;
NULL

;
SELECT list_contains([NULL],NULL)
;
NULL

;
SELECT list_contains([NULL, 1],NULL)
;
NULL

;
SELECT list_contains([NULL, 1],1)
;
1

;
SELECT list_contains([NULL, 0],1)
;
0

;
SELECT list_contains([],NULL)
;
NULL

;
SELECT list_contains([NULL,7], 7)
;
1

;
SELECT list_contains([[1,2,3],[1],[1,2,3])

;
SELECT list_contains([[1,2,3],[1],[1,2,3]])

;
SELECT list_contains(1)

;
SELECT list_contains(1,1)

;
PRAGMA debug_force_external=true

loop i 0 2

foreach type <integral> varchar

# list tests
;
CREATE TABLE test0 (i ${type}[])

;
INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3])

;
SELECT list_contains(i,1) from test0
;
0
1
1
0
0
0
0

;
DROP TABLE test0

;
PRAGMA debug_force_external=false

endloop

endloop

;
SELECT list_contains([[1,2,3],[1]],[1])
;
1

;
SELECT list_contains([[1,2,3],[1]],[2])
;
0

;
SELECT list_contains([[1,2,3],[1]],[1,2,3])
;
1

;
SELECT list_contains([[1,3],[1]],[1,2,3])
;
0

;
SELECT list_contains([[1,3],[1], [1,2,3]],[1,2,3])
;
1

;
SELECT list_contains([[NULL],[1], [1,2,3]],NULL)
;
NULL

;
SELECT list_contains([[NULL],[1], [1,2,3]],[NULL])
;
1

;
SELECT list_contains([[1,NULL],[1], [1,2,3]],[1,NULL])
;
1

;
SELECT list_contains([[1,NULL],[1], [1,2,3]],[0,NULL])
;
0

# nested types
;
SELECT list_contains([{a: 1}, {a: 2}], {a: 2})
;
1

;
SELECT list_contains([{a: 1}, {a: 2}], {a: 3})
;
0

;
SELECT list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 2, b: 2})
;
1

;
SELECT list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 1, b: 2})
;
0

;
SELECT list_contains([MAP([1], [2])], MAP([1], [2]))
;
1

;
SELECT list_contains([MAP([1], [2])], MAP([1], [3]))
;
0

;
PRAGMA debug_force_external=true

loop i 0 2

foreach type float double

# list tests
;
CREATE TABLE test0 (i ${type}[])

;
INSERT INTO test0 VALUES ([2.0]), ([1.0]), ([1.0, 2.0]), ([]), ([2.0, 2.0]), ([NULL]), ([2.0, 3.0])

;
SELECT list_contains(i,1.0) from test0
;
0
1
1
0
0
0
0

;
DROP TABLE test0

;
PRAGMA debug_force_external=false

endloop

endloop