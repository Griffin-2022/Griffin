# name: test/sql/types/enum/test_enum_comparisons.test
# description: ENUM tests
# group: [enum]

;
PRAGMA enable_verification

;
CREATE TYPE mood AS ENUM ('sad', 'quackity-quack', 'happy', 'ok');

;
CREATE TABLE person (
    name text,
    current_mood mood
);

;
insert into person values ('Pedro','happy'), ('Mark', NULL), ('Hannes', 'quackity-quack'), ('Tim', 'ok'), ('Diego', 'sad')

;
CREATE TABLE robots (
    name text,
    current_mood mood
);

;
insert into robots values ('Timmynator','sad'), ('Tars', 'ok'), ('Diggernaut', NULL)

# This just compares the actual uint value of the column since both are from the same mood type
;
select person.name, robots.name from person inner join robots on (person.current_mood = robots.current_mood)
;
Tim	Tars
Diego	Timmynator

;
CREATE TYPE pet_mood AS ENUM ( 'happy','beaming', 'quackity-quack');

;
CREATE TABLE pet (
    name text,
    current_mood pet_mood
);

;
insert into pet values ('Oogie','happy'), ('Wilbur', 'quackity-quack'), ('Chorizo', NULL), ('Vacilo', 'beaming')

# String Comparison
;
select person.name, pet.name from person inner join pet on (person.current_mood > pet.current_mood) where person.name = 'Pedro'
;
Pedro	Vacilo


# This actually performs the optimized comparison since they are both ENUMs but of different types.

;
select person.name, pet.name from person inner join pet on (person.current_mood = pet.current_mood)
;
Pedro	Oogie
Hannes	Wilbur

;
select person_name,pet_name from
(select person.name as person_name, pet.name as pet_name, person.current_mood as person_mood, pet.current_mood as pet_mood
from person,pet) as t
where person_mood = pet_mood
;
Pedro	Oogie
Hannes	Wilbur


;
select person_name,pet_name from
(select person.name as person_name, pet.name as pet_name, person.current_mood as person_mood, pet.current_mood as pet_mood
from person,pet) as t
where pet_mood = person_mood
;
Pedro	Oogie
Hannes	Wilbur

#SET Operations (e.g. SELECT enum_one UNION ALL SELECT enum_two)
;
SELECT person.current_mood
FROM person
UNION ALL
SELECT pet.current_mood
FROM pet
;
happy
NULL
quackity-quack
ok
sad
happy
quackity-quack
NULL
beaming

;
CREATE TABLE person_pet (
    person_name text,
    pet_name text
);

;
insert into person_pet values ('Pedro','Oogie'), ('Hannes', 'Wilbur'), ('Tim', 'Chorizo'), ('Diego', 'Vacilo')

;
CREATE TABLE person_pet_den as select person_name,pet_name, person_mood, pet_mood from
(select person.name as person_name, pet.name as pet_name, person.current_mood as person_mood, pet.current_mood as pet_mood
from person inner join person_pet on (person.name = person_pet.person_name) inner join pet on (pet.name = person_pet.pet_name))

;
SELECT * FROM person_pet_den
;
Pedro	Oogie	happy	happy
Hannes	Wilbur	quackity-quack	quackity-quack
Tim	Chorizo	ok	NULL
Diego	Vacilo	sad	beaming

#CASE expressions (e.g. SELECT CASE WHEN cond THEN enum_one ELSE enum_two END
;
SELECT CASE WHEN person_name = 'Tim' THEN person_mood ELSE pet_mood END FROM person_pet_den
;
happy
quackity-quack
ok
beaming

#IN clause (e.g. SELECT enum_one IN (enum_two, enum_one, ....))
;
SELECT person_mood in ('sad') FROM person_pet_den
;
False
False
False
True

;
SELECT person_mood in ('beaming'::pet_mood) FROM person_pet_den
;
False
False
False
False

# LISTS (e.g. SELECT [enum_one, enum_two])
;
SELECT [person_mood, pet_mood] FROM person_pet_den
;
[happy, happy]
[quackity-quack, quackity-quack]
[ok, NULL]
[sad, beaming]

# Comparison in the SELECT clause
;
SELECT person_mood == pet_mood FROM person_pet_den
;
True
True
NULL
False

# Tests in the WHERE clause where null-ness matters
;
SELECT * FROM person_pet_den WHERE (person_mood == pet_mood) IS NULL
;
Tim	Chorizo	ok	NULL

# Explicit casts from one enum to another
;
SELECT person_mood::pet_mood FROM person_pet_den
;
happy
quackity-quack
NULL
NULL

# Use enums as normal strings (testing e.g. substr, LIKE, REGEXP_MATCHES).
;
SELECT substring(person_mood from 1 for 2) FROM person_pet_den
;
ha
qu
ok
sa

;
SELECT substring(pet_mood from 1 for 2) FROM person_pet_den
;
ha
qu
NULL
be

;
SELECT person_mood  FROM person_pet_den where person_mood like '%a%'
;
happy
quackity-quack
sad

;
SELECT person_mood  FROM person_pet_den where person_mood like '%a%'
;
happy
quackity-quack
sad

;
SELECT regexp_matches(person_mood, '.*a.*')  FROM person_pet_den
;
True
True
False
True

# Compare two different enum types
;
CREATE TYPE wealth AS ENUM ('poor', 'medium-class', 'rich', 'very super rich');

;
CREATE TABLE test (
    a mood,
    b wealth
);

;
insert into test values ('happy', 'rich'), ('ok', 'poor')

;
SELECT a = b  FROM test
;
False
False

# Repeat test with where clause
;
SELECT * FROM test where a = b
;

;
insert into test values (NULL, 'very super rich')

# Repeat test with where clause
;
SELECT * FROM test where (a = b) is NULL
;
NULL	very super rich