# name: test/sql/json/test_json_structure.test
# description: Test json_structure() function
# group: [json]

require json

;
pragma enable_verification


;
select json_structure('{"a": 42, "a": 7}')




# singletons
;
select json_structure('42')
;
"UBIGINT"

;
select json_structure('4.2')
;
"DOUBLE"

;
select json_structure('null')
;
"NULL"

;
select json_structure('true')
;
"BOOLEAN"

;
select json_structure('"duck"')
;
"VARCHAR"

# simple objects
;
select json_structure('{"a": 42}')
;
{"a":"UBIGINT"}

;
select json_structure('{"a": 4.2}')
;
{"a":"DOUBLE"}

;
select json_structure('{"a": "42"}')
;
{"a":"VARCHAR"}

;
select json_structure('{"a": "looooooooooooooooong"}')
;
{"a":"VARCHAR"}

;
select json_structure('{"a": null}')
;
{"a":"NULL"}

;
select json_structure('{"a": true}')
;
{"a":"BOOLEAN"}

;
select json_structure('{"a": []}')
;
{"a":["NULL"]}

;
select json_structure('{"a": [42]}')
;
{"a":["UBIGINT"]}

;
select json_structure('{"a": {"b": 42}}')
;
{"a":{"b":"UBIGINT"}}

# now the hard part: JSON arrays
# we derive some kind of consistent structure from arrays, while not being too strict
# i.e., objects in arrays can have a different set of keys, null is a wildcard
# If same keys have a different type, we take the 'max' logical type in terms of what we can cast
;
select json_structure('[null,null]')
;
["NULL"]

;
select json_structure('[true,null,false]')
;
["BOOLEAN"]

;
select json_structure('[true,null,false,1]')
;
["UBIGINT"]

;
select json_structure('[true,null,false,1,-1]')
;
["BIGINT"]

;
select json_structure('[true,null,false,1,-1,0.42]')
;
["DOUBLE"]

;
select json_structure('[true,null,false,1,-1,0.42,"42"]')
;
["VARCHAR"]

# nested stuff
;
select json_structure('[{"a": 42}, {"a": null}]')
;
[{"a":"UBIGINT"}]

;
select json_structure('[{"a": 42}, {"b": 4.2}]')
;
[{"a":"UBIGINT","b":"DOUBLE"}]

;
select json_structure('[{"a": [42, null]}, {"a": [7]}]')
;
[{"a":["UBIGINT"]}]

;
select json_structure('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"b": 7}]}]')
;
[{"a":[{"b":"UBIGINT"}]}]

;
select json_structure('[{"a": [{"b": 42}, {"b": null}]}, {"a": [{"c": 7}]}]')
;
[{"a":[{"b":"UBIGINT","c":"UBIGINT"}]}]

# inconsistent types
;
select json_structure('[1, [1]]')

;
select json_structure('[1, {"a": 1}]')

;
select json_structure('[[1], {"a": 1}]')

# duplicate key
;
select json_structure('{"a": 42, "a": 7}')

# from a table
;
create table test (j json);

;
insert into test values
    ('{"family": "anatidae", "species": ["duck", "goose", "swan", null], "coolness": 1000}'),
    ('{"family": "canidae", "species": ["labrador", null, "bulldog", "shepherd"], "hair": true, "coolness": 999}'),
    (NULL),
    ('{"family": null, "species": null, "hair": null, "coolness": null}'),
    ('{"family": "felidae", "species": ["tiger", "lion", null, "british shorthair"], "hair": true, "coolness": 999}')

;
select json_structure(j) from test
;
{"family":"VARCHAR","species":["VARCHAR"],"coolness":"UBIGINT"}
{"family":"VARCHAR","species":["VARCHAR"],"hair":"BOOLEAN","coolness":"UBIGINT"}
NULL
{"family":"NULL","species":"NULL","hair":"NULL","coolness":"NULL"}
{"family":"VARCHAR","species":["VARCHAR"],"hair":"BOOLEAN","coolness":"UBIGINT"}
