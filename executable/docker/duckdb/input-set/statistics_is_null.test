# name: test/optimizer/statistics/statistics_is_null.test
# description: Test filter propagation in IS NULL/IS NOT NULL operands
# group: [statistics]

;
PRAGMA enable_verification;

;
CREATE TABLE integers AS SELECT * FROM (VALUES (1), (2), (3)) tbl(i);

;
CREATE TABLE integers2 AS SELECT * FROM (VALUES (4), (5), (NULL)) tbl(i);

;
PRAGMA explain_output = OPTIMIZED_ONLY;

# we can statically determine IS NULL/IS NOT NULL are false, if there are no null values for this column
;
EXPLAIN SELECT i IS NULL FROM integers;
;
logical_opt	<!REGEX>:.*IS NULL.*

;
EXPLAIN SELECT i IS NOT NULL FROM integers;
;
logical_opt	<!REGEX>:.*IS NOT NULL.*

# if there are null values, however, we have to execute the operator
;
EXPLAIN SELECT i IS NULL FROM integers2;
;
logical_opt	<REGEX>:.*IS NULL.*

;
EXPLAIN SELECT i IS NOT NULL FROM integers2;
;
logical_opt	<REGEX>:.*IS NOT NULL.*

# filters remove null values, so even if the base column contains null values, we don't need to check IS NULL here
;
EXPLAIN SELECT i IS NULL FROM integers2 WHERE i>0;
;
logical_opt	<!REGEX>:.*IS NULL.*

# left/right/full outer joins can introduce nulls, even if the base tables do not contain them
;
EXPLAIN SELECT i2.i IS NULL FROM integers i1 LEFT JOIN integers i2 ON (false);
;
logical_opt	<REGEX>:.*IS NULL.*

;
EXPLAIN SELECT i1.i IS NULL FROM integers i1 FULL OUTER JOIN integers i2 ON (false);
;
logical_opt	<REGEX>:.*IS NULL.*

# verify that all these queries produce the correct results
;
SELECT i IS NULL FROM integers;
;
0
0
0

;
SELECT i IS NOT NULL FROM integers;
;
1
1
1

;
SELECT i IS NULL FROM integers2;
;
0
0
1

;
SELECT i IS NOT NULL FROM integers2;
;
1
1
0

;
SELECT i IS NULL FROM integers2 WHERE i>0;
;
0
0

;
SELECT i2.i IS NULL FROM integers i1 LEFT JOIN integers i2 ON (false);
;
1
1
1

;
SELECT i1.i IS NULL FROM integers i1 FULL OUTER JOIN integers i2 ON (false) ORDER BY i1.i;
;
1
1
1
0
0
0