# name: test/sql/aggregate/grouping_sets/grouping_sets.test
# description: Test basic grouping sets
# group: [grouping_sets]

;
PRAGMA enable_verification

;
create table students (course VARCHAR, type VARCHAR);

;
insert into students
		(course, type)
	values
		('CS', 'Bachelor'),
		('CS', 'Bachelor'),
		('CS', 'PhD'),
		('Math', 'Masters'),
		('CS', NULL),
		('CS', NULL),
		('Math', NULL);

;
select 1 from students group by ();
;
1

;
select count(*) from students group by ();
;
7

;
select course, type, count(*) from students group by course, type order by 1, 2, 3;
;
CS	NULL	2
CS	Bachelor	2
CS	PhD	1
Math	NULL	1
Math	Masters	1

;
select course, type, count(*) from students group by (course, type) order by 1, 2, 3;
;
CS	NULL	2
CS	Bachelor	2
CS	PhD	1
Math	NULL	1
Math	Masters	1

;
select course, count(*) from students group by (), course, () ORDER BY 1;
;
CS	5
Math	2

# multiple grouping sets
;
select count(*), course, type
	from students
	group by grouping sets ((course), (type))
	order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
2	NULL	Bachelor
2	Math	NULL
3	NULL	NULL
5	CS	NULL

# multiple grouping sets
# these are combined as if they are regular GROUP BY expressions
# i.e. the result is just GROUP BY course, type

# If multiple grouping items are specified in a single GROUP BY clause,
# then the final list of grouping sets is the cross product of the individual items.
;
select count(*), course, type
	from students
	group by grouping sets (course), grouping sets(type)
	order by 1, 2, 3;
;
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	CS	NULL
2	CS	Bachelor

# combining grouping sets with non-grouping sets
;
select count(*), course, type
	from students
	group by course, grouping sets(type)
	order by 1, 2, 3;
;
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	CS	NULL
2	CS	Bachelor

# with multiple grouping sets...
;
select count(*), course, type
	from students
	group by course, grouping sets(type, ())
	order by 1, 2, 3;
;
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	CS	NULL
2	CS	Bachelor
2	Math	NULL
5	CS	NULL

;
select count(*), course, type
	from students
	group by grouping sets((course, type), (course))
	order by 1, 2, 3;
;
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	CS	NULL
2	CS	Bachelor
2	Math	NULL
5	CS	NULL

# nested grouping sets
# If one GROUPING SETS clause is nested inside another,
# the effect is the same as if all the elements of the inner clause had been written directly in the outer clause.
;
select count(*), course, type
	from students
	group by grouping sets (grouping sets(course), grouping sets(type))
	order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
2	NULL	Bachelor
2	Math	NULL
3	NULL	NULL
5	CS	NULL

;
select count(*), course, type
        from students
        group by grouping sets (grouping sets(course, ()), grouping sets(type))
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
2	NULL	Bachelor
2	Math	NULL
3	NULL	NULL
5	CS	NULL
7	NULL	NULL

;
select count(*), course, type
        from students
        group by grouping sets ((course), (), (type))
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
2	NULL	Bachelor
2	Math	NULL
3	NULL	NULL
5	CS	NULL
7	NULL	NULL

;
select count(*), course, type
        from students
        group by grouping sets(course, ()), grouping sets(type)
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	NULL	Bachelor
2	CS	NULL
2	CS	Bachelor
3	NULL	NULL

;
select count(*), course, type
        from students
        group by grouping sets(course, ()), type
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	NULL	Bachelor
2	CS	NULL
2	CS	Bachelor
3	NULL	NULL

;
select count(*), course, type
        from students
        group by grouping sets((course, type), (type))
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	NULL	Bachelor
2	CS	NULL
2	CS	Bachelor
3	NULL	NULL

# references to group ids by index
;
select count(*), course, type
        from students
        group by grouping sets((2, 3), (3))
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	NULL	Bachelor
2	CS	NULL
2	CS	Bachelor
3	NULL	NULL

;
select count(*), course AS crs, type AS tp
        from students
        group by grouping sets((crs, tp), (tp))
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
1	CS	PhD
1	Math	NULL
1	Math	Masters
2	NULL	Bachelor
2	CS	NULL
2	CS	Bachelor
3	NULL	NULL

;
select count(*), course, type
        from students
        group by grouping sets (grouping sets(course, ()), grouping sets(type, ()))
        order by 1, 2, 3;
;
1	NULL	Masters
1	NULL	PhD
2	NULL	Bachelor
2	Math	NULL
3	NULL	NULL
5	CS	NULL
7	NULL	NULL
7	NULL	NULL

# course is not a group or aggregate column
;
select course from students group by ();
