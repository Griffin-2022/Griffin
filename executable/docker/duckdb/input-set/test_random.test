# name: test/sql/function/numeric/test_random.test
# description: Test random & setseed functions
# group: [numeric]

# we need to be a bit more clever here for testing random
# it's very unlikely that three random variables are exactly equivalent

;
BEGIN TRANSACTION

;
CREATE TEMPORARY TABLE t1 AS SELECT RANDOM() a;

;
CREATE TEMPORARY TABLE t2 AS SELECT RANDOM() b;

;
CREATE TEMPORARY TABLE t3 AS SELECT RANDOM() c;

# empty result on this join
;
SELECT COUNT(*) FROM (SELECT a FROM t1 JOIN t2 ON (a=b) JOIN t3 ON (b=c)) s1
;
0

;
ROLLBACK

# with setseed we can enforce the equivalence of these values
;
select setseed(0.1)

;
CREATE TEMPORARY TABLE t1 AS SELECT RANDOM() a;

;
select setseed(0.1)

;
CREATE TEMPORARY TABLE t2 AS SELECT RANDOM() b;

;
select setseed(0.1)

;
CREATE TEMPORARY TABLE t3 AS SELECT RANDOM() c;

# now the join has one value
;
SELECT COUNT(*) FROM (SELECT a FROM t1 JOIN t2 ON (a=b) JOIN t3 ON (b=c)) s1
;
1

# incorrect usage of setseed
;
select setseed(1.1)

;
select setseed(-1.1)

# we can use setseed with a table as well
;
CREATE TABLE seeds(a DOUBLE)

;
INSERT INTO seeds VALUES (-0.1), (0.0), (0.1)

;
select setseed(a), a from seeds;
;
NULL	-0.100000
NULL	0.000000
NULL	0.100000

# use random in some complicated expressions
;
CREATE TABLE numbers(a INTEGER)

;
INSERT INTO numbers VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10)

;
select case when min(random()) >= 0 then 1 else 0 end from numbers;
;
1

;
select case when max(random()) < 1 then 1 else 0 end from numbers;
;
1

# we can order by random
;
select * from numbers order by random()

# we can select random
;
select random() from numbers
