# name: test/sql/optimizer/expression/test_common_aggregate.test
# description: Test common aggregate
# group: [expression]

;
PRAGMA enable_verification

;
CREATE TABLE integers(i INTEGER);

;
INSERT INTO integers VALUES (1), (2), (3)

;
PRAGMA explain_output = 'OPTIMIZED_ONLY';

# all of these are identical, i.e. this gets folded into a single count aggregate
;
EXPLAIN SELECT COUNT(*), COUNT(), COUNT(i) FROM integers;
;
logical_opt	<!REGEX>:.*AGGREGATE.*count.*count.*

;
SELECT COUNT(*), COUNT(), COUNT(i) FROM integers;
;
3	3	3

# again, here there is only a single count and a single sum
;
EXPLAIN SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;
;
logical_opt	<!REGEX>:.*AGGREGATE.*count.*count.*

;
SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;
;
3	3	6	3	2

# however, once we add a null value COUNT(i) is no longer equal to COUNT(*)
;
INSERT INTO integers VALUES (NULL)

# now there are two counts!
;
EXPLAIN SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;
;
logical_opt	<REGEX>:.*AGGREGATE.*count.*count.*

;
SELECT COUNT(*), COUNT(), SUM(i), COUNT(i), SUM(i) / COUNT(i) FROM integers;
;
4	4	6	3	2

;
CREATE TABLE groups(grp INTEGER, aggr1 INTEGER, aggr2 INTEGER, aggr3 INTEGER)

;
INSERT INTO groups VALUES (1, 1, 2, 3), (1, 2, 4, 6), (2, 1, 2, 3),  (2, 3, 6, 9);

;
SELECT
    sum(aggr1)::DOUBLE / count(aggr1)::DOUBLE AS avg_qty,
    sum(aggr2)::DOUBLE / count(aggr2)::DOUBLE AS avg_price,
    sum(aggr3)::DOUBLE / count(aggr3)::DOUBLE AS avg_disc
FROM
    groups
GROUP BY
    grp
ORDER BY grp;
;
1.5	3	4.5
2	4	6
