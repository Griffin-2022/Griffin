# name: test/sql/catalog/table/test_default.test
# description: Test DEFAULT in tables
# group: [table]

;
PRAGMA enable_verification

# no default specified: write NULL value
;
CREATE TABLE test (a INTEGER, b INTEGER);

;
INSERT INTO test (b) VALUES (3);

;
INSERT INTO test VALUES (DEFAULT, DEFAULT);

;
SELECT * FROM test
;
NULL	3
NULL	NULL

;
DROP TABLE test

# no default specified: default is NULL value
# but we set column to NOT NULL
# now insert should fail
;
CREATE TABLE test (a INTEGER NOT NULL, b INTEGER);

;
INSERT INTO test (b) VALUES (3);

;
DROP TABLE test

# simple default: constant value
;
CREATE TABLE test (a INTEGER DEFAULT 1, b INTEGER);

;
INSERT INTO test (b) VALUES (3);

;
SELECT * FROM test
;
1	3

;
DROP TABLE test

# default as expression
;
CREATE TABLE test (a INTEGER DEFAULT 1+1, b INTEGER);

;
INSERT INTO test (b) VALUES (3);

;
SELECT * FROM test
;
2	3

;
DROP TABLE test

# default with insert from query
;
CREATE TABLE test (a INTEGER DEFAULT 1+1, b INTEGER);

;
INSERT INTO test (b) SELECT 3

;
SELECT * FROM test
;
2	3

;
DROP TABLE test

# default from sequence
;
CREATE SEQUENCE seq;

;
CREATE TABLE test (a INTEGER DEFAULT nextval('seq'), b INTEGER);

;
INSERT INTO test (b) VALUES (2), (4), (6), (2), (4);

;
SELECT * FROM test ORDER BY 1
;
1	2
2	4
3	6
4	2
5	4

# cannot drop sequence now
;
DROP SEQUENCE seq

;
DROP TABLE test

# after dropping table we can drop seq
;
DROP SEQUENCE seq

# test default with update
;
CREATE SEQUENCE seq;

;
CREATE TABLE test (a INTEGER DEFAULT nextval('seq'), b INTEGER);

;
INSERT INTO test (b) VALUES (1);

;
UPDATE test SET a=DEFAULT

;
SELECT * FROM test ORDER BY 1
;
2	1

# cannot use subquery in DEFAULT expression
;
CREATE TABLE test (a INTEGER DEFAULT (SELECT 42), b INTEGER);

# aggregate functions are not allowed in DEFAULT expressions
;
CREATE TABLE test (a INTEGER DEFAULT SUM(42), b INTEGER);

# window functions are not allowed in DEFAULT expressions
;
CREATE TABLE test (a INTEGER DEFAULT row_number() OVER (), b INTEGER);

# default value must be scalar expression
;
CREATE TABLE test (a INTEGER DEFAULT b+1, b INTEGER);

# test default with random
;
DROP TABLE test

;
CREATE TABLE test (a DOUBLE DEFAULT random(), b INTEGER);

;
INSERT INTO test (b) VALUES (1);

;
INSERT INTO test (b) VALUES (2);

;
SELECT COUNT(DISTINCT a) FROM test;
;
2

