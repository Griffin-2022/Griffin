# name: test/sql/window/test_streaming_window.test
# description: Streaming window functions
# group: [window]

;
PRAGMA enable_verification

;
PRAGMA explain_output = PHYSICAL_ONLY;

;
create table integers (i int, j int)

;
insert into integers values (2, 2), (2, 1), (1, 2), (1, NULL)

;
explain select first_value(i IGNORE NULLS) over () from integers
;
physical_plan	<!REGEX>:.*STREAMING_WINDOW.*

# Test each of the streaming window functions
;
explain select row_number() over (), i, j from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*

;
select row_number() over (), i, j from integers
;
1	2	2
2	2	1
3	1	2
4	1	NULL

;
explain select rank() over (), i, j from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*

;
select rank() over (), i, j from integers
;
1	2	2
1	2	1
1	1	2
1	1	NULL

;
explain select dense_rank() over (), i, j from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*

;
select dense_rank() over (), i, j from integers
;
1	2	2
1	2	1
1	1	2
1	1	NULL

;
explain select percent_rank() over (), i, j from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*

;
select percent_rank() over (), i, j from integers
;
0.0	2	2
0.0	2	1
0.0	1	2
0.0	1	NULL

# Some combinations of compatible window functions
;
explain select i, j, first_value(i) over (), first_value(j) over () from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*

;
select i, j, first_value(i) over (), first_value(j) over () from integers
;
2	2	2	2
2	1	2	2
1	2	2	2
1	NULL	2	2

;
select row_number() over (), first_value(i) over (), first_value(j) over () from integers
;
1	2	2
2	2	2
3	2	2
4	2	2

;
select row_number() over (), row_number() over () from integers
;
1	1
2	2
3	3
4	4

# Ignore nulls is not supported for streaming windows
;
explain select first_value(i IGNORE NULLS) over () from integers
;
physical_plan	<!REGEX>:.*STREAMING_WINDOW.*

# When we combine a streaming and a blocking window function over the same window,
# We get both a streaming and a blocking window operator
# The streaming window should always come last
;
explain select first_value(i) over (), last_value(i) over () from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*WINDOW.*

;
explain select last_value(i) over (), first_value(i) over () from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*WINDOW.*

# Same when the streaming and blocking window functions have different windows
;
explain select first_value(i) over (), last_value(i) over (order by j) from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*WINDOW.*

;
explain select last_value(i) over (order by j), first_value(i) over () from integers
;
physical_plan	<REGEX>:.*STREAMING_WINDOW.*WINDOW.*

#
# Global state tests from #3275
#

# Original UNION ALL bug
;
CREATE TABLE v1(id bigint);

;
CREATE TABLE v2(id bigint);

;
INSERT INTO v1 VALUES (11),  (12),  (13);

;
INSERT INTO v2 VALUES (21),  (22);

;
CREATE VIEW vertices_view AS
  SELECT * FROM v1
  UNION ALL
  SELECT * FROM v2;

;
SELECT id AS sparse_id, row_number() OVER () AS rnum
FROM vertices_view;
;
11	1
12	2
13	3
21	4
22	5

# Recursive CTE
;
WITH RECURSIVE rte AS (
	SELECT 1 l, 1::BIGINT r
	UNION  ALL
	SELECT l+1, row_number() OVER()
	FROM rte
	WHERE l < 3
)
SELECT * FROM rte;
;
1	1
2	1
3	1

# In a prepared statement that is executed multiple times
;
PREPARE sw1 AS
	SELECT i, row_number() OVER() AS row_no
	FROM range(10, 20) tbl(i)
	QUALIFY row_no <= ?::BIGINT
;

;
EXECUTE sw1(10);
;
10	1
11	2
12	3
13	4
14	5
15	6
16	7
17	8
18	9
19	10

;
EXECUTE sw1(2);
;
10	1
11	2
