# name: test/sql/aggregate/aggregates/test_approx_quantile.test
# description: Test approx quantile operator
# group: [aggregates]

;
PRAGMA enable_verification

;
create table quantile as select range r, random() from range(10000) union all values (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) order by 2;

;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.5) as approx_quantile ,quantile(r,0.5) as true_quantile FROM quantile) AS T
;
1


;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 1.0) as approx_quantile ,quantile(r, 1.0) as true_quantile FROM quantile) AS T
;
1

;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.0) as approx_quantile ,quantile(r, 0.0) as true_quantile from quantile) AS T
;
1

;
SELECT approx_quantile(NULL, 0.5)  as approx_quantile ,quantile(NULL, 0.5) as true_quantile
;
NULL	NULL

;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(42, 0.5)  as approx_quantile ,quantile(42, 0.5)  as true_quantile) AS T
;
1

;
SELECT approx_quantile(NULL, 0.5)  as approx_quantile ,quantile(NULL, 0.5)  as true_quantile FROM quantile
;
NULL	NULL

;
SELECT approx_quantile(1, 0.5)  as approx_quantile ,quantile(1, 0.5)  as true_quantile FROM quantile
;
1	1

;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(42, 0.5)  as approx_quantile ,quantile(42, 0.5)  as true_quantile) AS T
;
1

;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.1)  as approx_quantile ,quantile(r, 0.1)  as true_quantile from quantile) AS T
;
1

;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.9)  as approx_quantile ,quantile(r, 0.9)  as true_quantile from quantile) AS T
;
1



;
SELECT approx_quantile(r, -0.1) FROM quantile

;
SELECT approx_quantile(r, 1.1) FROM quantile

;
SELECT approx_quantile(r, NULL) FROM quantile

;
SELECT approx_quantile(r, r) FROM quantile

;
SELECT approx_quantile(r::string, 0.5) FROM quantile

;
SELECT approx_quantile(r) FROM quantile

;
SELECT approx_quantile(r, 0.1, 0.2) FROM quantile

;
pragma threads=4

;
PRAGMA verify_parallelism

;
SELECT CASE
	  WHEN (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01)))
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.1) as approx_quantile, quantile(r, 0.1) as true_quantile, SUM(r) as sumr from quantile) AS T
;
1

;
SELECT CASE
	  WHEN (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01)))
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.9) as approx_quantile, quantile(r, 0.9) as true_quantile, SUM(r) as sumr from quantile) AS T
;
1

;
SELECT CASE
	  WHEN (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01)))
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.5) as approx_quantile, quantile(r, 0.5) as true_quantile, SUM(r) as sumr from quantile) AS T
;
1


# Test reservoir quantile
;
PRAGMA disable_verification;

;
SELECT reservoir_quantile(r, 0.9)  from quantile

;
SELECT reservoir_quantile(r, 0.9,1000)  from quantile

# reservoir = 1
;
SELECT reservoir_quantile(1, 0.5, 1) FROM quantile
;
1

;
SELECT RESERVOIR_QUANTILE(b, 0.5)
FROM (SELECT 'a' AS a, 1.0 AS b) y
GROUP BY a

;
SELECT APPROX_QUANTILE(b, 0.5)
FROM (
    SELECT 'a' AS a, 1.0 AS b
    UNION ALL SELECT 'a' AS a, 1.0 AS b
    UNION ALL SELECT 'b' AS a, 1.0 AS b
    ) y
GROUP BY a

;
SELECT reservoir_quantile(r, r)  from quantile

;
SELECT reservoir_quantile(r, NULL)  from quantile

;
SELECT reservoir_quantile(r, r, r)  from quantile

;
SELECT reservoir_quantile(r, 0.9, NULL)  from quantile

;
SELECT reservoir_quantile(r, 0.9, r)  from quantile

;
SELECT reservoir_quantile(r, random()::float)  from quantile

;
SELECT reservoir_quantile(r, 0.9, random()::float)  from quantile
