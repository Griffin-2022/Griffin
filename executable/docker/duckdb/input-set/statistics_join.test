# name: test/optimizer/statistics/statistics_join.test
# description: Statistics propagation test with joins
# group: [statistics]

;
CREATE TABLE integers AS SELECT * FROM (VALUES (1), (2), (3)) tbl(i);

;
CREATE TABLE integers2 AS SELECT * FROM (VALUES (4), (5), (6)) tbl(i);

;
PRAGMA explain_output = OPTIMIZED_ONLY;

# inner join
# join cannot match
;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i=i2.i ORDER BY 1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i>i2.i ORDER BY 1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i>=i2.i ORDER BY 1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i<i1.i ORDER BY 1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i<=i1.i ORDER BY 1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# join is guaranteed to match
;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i<i2.i ORDER BY 1;
;
logical_opt	<REGEX>:.*CROSS_PRODUCT.*

;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i<=i2.i ORDER BY 1;
;
logical_opt	<REGEX>:.*CROSS_PRODUCT.*

;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i>i1.i ORDER BY 1;
;
logical_opt	<REGEX>:.*CROSS_PRODUCT.*

;
EXPLAIN SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i>=i1.i ORDER BY 1;
;
logical_opt	<REGEX>:.*CROSS_PRODUCT.*

# left join
# join cannot match
# note that the result is not actually empty here; only the RHS is set to the empty result
;
EXPLAIN SELECT i1.i FROM integers i1 LEFT JOIN integers2 i2 ON i1.i=i2.i ORDER BY 1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# left join with guaranteed match: same as inner join
;
EXPLAIN SELECT i1.i FROM integers i1 LEFT JOIN integers2 i2 ON i1.i<i2.i ORDER BY 1;
;
logical_opt	<REGEX>:.*CROSS_PRODUCT.*

# semi join
# join cannot match: replaced with empty result
;
explain select * from integers where i > any(select * from integers2) order by 1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# join is guaranteed to match: entire join is stripped away
;
explain select * from integers where i < any(select * from integers2) order by 1;
;
logical_opt	<!REGEX>:.*JOIN.*

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i=i2.i ORDER BY 1;
;

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i>i2.i ORDER BY 1;
;

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i>=i2.i ORDER BY 1;
;

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i<i1.i ORDER BY 1;
;

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i<=i1.i ORDER BY 1;
;

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i<i2.i ORDER BY 1;
;
1
1
1
2
2
2
3
3
3

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i1.i<=i2.i ORDER BY 1;
;
1
1
1
2
2
2
3
3
3

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i>i1.i ORDER BY 1;
;
1
1
1
2
2
2
3
3
3

;
SELECT i1.i FROM integers i1 JOIN integers2 i2 ON i2.i>=i1.i ORDER BY 1;
;
1
1
1
2
2
2
3
3
3

;
SELECT i1.i FROM integers i1 LEFT JOIN integers2 i2 ON i1.i=i2.i ORDER BY 1;
;
1
2
3

;
SELECT i1.i FROM integers i1 LEFT JOIN integers2 i2 ON i1.i<i2.i ORDER BY 1;
;
1
1
1
2
2
2
3
3
3

;
select * from integers where i > any(select * from integers2) order by 1;
;

;
select * from integers where i < any(select * from integers2) order by 1;
;
1
2
3
