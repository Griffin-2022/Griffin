# name: test/sql/update/test_null_update.test
# description: Test standard update behavior with NULLs
# group: [update]

# create a table
;
CREATE TABLE test (a INTEGER);

;
INSERT INTO test VALUES (1), (2), (3), (NULL)

;
SELECT * FROM test ORDER BY a
;
NULL
1
2
3

# test updating from a non-null value to a null value
;
BEGIN TRANSACTION

;
UPDATE test SET a=NULL WHERE a=2

# not seen yet by con2, only by con1
;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

;
SELECT * FROM test ORDER BY a
;
NULL
1
2
3

# commit
;
COMMIT

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

# now test a rollback
;
BEGIN TRANSACTION

;
UPDATE test SET a=NULL WHERE a=3

# not seen yet by con2, only by con1
;
SELECT * FROM test ORDER BY a
;
NULL
NULL
NULL
1

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

;
ROLLBACK

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

# test updating from a null value to a non-null value
;
BEGIN TRANSACTION

;
UPDATE test SET a=10 WHERE a IS NULL

# not seen yet by con2, only by con1
;
SELECT * FROM test ORDER BY a
;
1
3
10
10

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

# now rollback
;
ROLLBACK

# values are back to original values
;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

# perform the same update, but this time commit
;
BEGIN TRANSACTION

;
UPDATE test SET a=10 WHERE a IS NULL

;
SELECT * FROM test ORDER BY a
;
1
3
10
10

;
SELECT * FROM test ORDER BY a
;
NULL
NULL
1
3

;
COMMIT

;
SELECT * FROM test ORDER BY a
;
1
3
10
10

;
SELECT * FROM test ORDER BY a
;
1
3
10
10

