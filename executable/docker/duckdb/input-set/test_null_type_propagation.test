# name: test/sql/binder/test_null_type_propagation.test
# description: Test binding of NULL type
# group: [binder]

;
PRAGMA enable_verification

# regular binding
;
SELECT NULL
;
NULL

# union
;
SELECT NULL UNION ALL SELECT CAST(1 AS BOOLEAN)
;
NULL
True

;
SELECT NULL UNION ALL SELECT NULL
;
NULL
NULL

# mutliple unions
;
SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT NULL UNION ALL SELECT CAST(1 AS BOOLEAN)
;
NULL
NULL
NULL
NULL
True

# scalar subquery
;
SELECT (SELECT NULL) UNION ALL SELECT CAST(1 AS BOOLEAN)
;
NULL
True

# table subquery
;
SELECT * FROM (SELECT NULL) tbl(i) UNION ALL SELECT CAST(1 AS BOOLEAN)
;
NULL
True

;
SELECT * FROM (SELECT (SELECT NULL) UNION ALL SELECT CAST(1 AS BOOLEAN)) tbl(i)
;
NULL
True

;
SELECT * FROM (SELECT NULL) tbl(i) UNION ALL SELECT NULL
;
NULL
NULL

# bool_and
;
SELECT bool_and(i) FROM (SELECT * FROM (SELECT NULL) tbl(i) UNION ALL SELECT CAST(1 as BOOLEAN)) tbl(i)
;
True

# this wouldn't work if we would upcast to integer
;
SELECT bool_and(i) FROM (SELECT * FROM (SELECT NULL::INTEGER) tbl(i) UNION ALL SELECT CAST(1 as BOOLEAN)) tbl(i)

# cross product
;
SELECT * FROM (SELECT NULL) tbl(i), (SELECT NULL) tbl2(j)
;
NULL	NULL

;
SELECT bool_and(i), bool_and(j) FROM (SELECT NULL) tbl(i), (SELECT NULL) tbl2(j)
;
NULL	NULL

# Issue #1049: Should a UNION with untyped NULL preserve the type?
;
SELECT NULL as a, NULL as b, 1 as id UNION SELECT CAST(1 AS BOOLEAN) as a, CAST(0 AS BOOLEAN) as b, 2 as id
;
NULL	NULL	1
True	False	2

;
SELECT CAST(1 AS BOOLEAN) as a, CAST(0 AS BOOLEAN) as b, 1 as id UNION SELECT NULL as a, NULL as b, 2 as id
;
True	False	1
NULL	NULL	2

# old behavior: cast NULL to integer explicitly
;
SELECT NULL::INTEGER as a, NULL::INTEGER as b, 1 as id UNION SELECT CAST(1 AS BOOLEAN) as a, CAST(0 AS BOOLEAN) as b, 2 as id
;
NULL	NULL	1
1	0	2

;
SELECT CAST(1 AS BOOLEAN) as a, CAST(0 AS BOOLEAN) as b, 1 as id UNION SELECT NULL::INTEGER as a, NULL::INTEGER as b, 2 as id
;
1	0	1
NULL	NULL	2

# NULL is auto-cast to integer for storage purposes
;
CREATE TABLE tbl AS SELECT NULL UNION ALL SELECT NULL

;
SELECT * FROM tbl
;
NULL
NULL

;
SELECT typeof(#1) FROM tbl LIMIT 1
;
INTEGER

# views preserve NULLs
;
CREATE VIEW v1 AS SELECT NULL

;
SELECT * FROM v1
;
NULL

;
SELECT * FROM v1 UNION ALL SELECT CAST(1 AS BOOLEAN)
;
NULL
True

;
SELECT typeof(#1) FROM v1
;
NULL

# also with unions
;
CREATE VIEW v2 AS SELECT NULL UNION ALL SELECT NULL

;
SELECT * FROM v2
;
NULL
NULL

;
SELECT * FROM v2 UNION ALL SELECT CAST(1 AS BOOLEAN)
;
NULL
NULL
True

;
SELECT typeof(#1) FROM v2 LIMIT 1
;
NULL

# nulls in lists
;
SELECT [NULL]
;
[NULL]

;
SELECT [NULL] UNION ALL SELECT [True]
;
[NULL]
[True]

# nulls in structs
;
SELECT {'x': NULL}
;
{'x': NULL}

;
SELECT {'x': NULL} UNION ALL SELECT {'x': True}
;
{'x': NULL}
{'x': True}

# ctes
;
WITH cte AS (SELECT NULL)
SELECT * FROM cte
;
NULL

;
WITH cte AS (SELECT NULL)
SELECT * FROM cte UNION ALL SELECT CAST(1 AS BOOLEAN)
;
NULL
True
