# name: test/sql/function/string/test_printf.test
# description: Test printf
# group: [string]

;
PRAGMA enable_verification

# printf without format specifiers
;
SELECT printf('hello'), printf(NULL)
;
hello	NULL

# format strings
;
SELECT printf('%s', 'hello'), printf('%s: %s', 'hello', 'world')
;
hello	hello: world

# format strings with NULL values
;
SELECT printf('%s', NULL), printf(NULL, 'hello', 'world')
;
NULL	NULL

# booleans
;
SELECT printf('%d', TRUE)
;
1

# integers
;
SELECT printf('%d', 33), printf('%d + %d = %d', 3, 5, 3 + 5)
;
33	3 + 5 = 8

# integers with special formatting specifiers
;
SELECT printf('%04d', 33), printf('%s %02d:%02d:%02d %s', 'time', 12, 3, 16, 'AM'), printf('%10d', 1992)
;
0033	time 12:03:16 AM	      1992

# different integer types
;
SELECT printf('%hhd %hd %d %lld', 33::TINYINT, 12::SMALLINT, 40::INTEGER, 80::BIGINT)
;
33 12 40 80

# ...but really any of these can be used
;
SELECT printf('%d %lld %hhd %hd', 33::TINYINT, 12::SMALLINT, 40::INTEGER, 80::BIGINT)
;
33 12 40 80

# exotic types
# dates, times and timestamps are strings
;
SELECT printf('%s %s = %s', DATE '1992-01-01', TIME '12:01:00', TIMESTAMP '1992-01-01 12:01:00')
;
1992-01-01 12:01:00 = 1992-01-01 12:01:00

# blob
;
SELECT printf('%s', BLOB '\x01\xa0')
;
\x01\xA0

# hugeint
;
SELECT printf('%s', 120381902481294715712::HUGEINT)
;
120381902481294715712

# decimal
;
SELECT printf('%.3f', '1.234'::DECIMAL)
;
1.234

# octal hex etc
;
SELECT printf('%d %x %o %#x %#o', 100, 100, 100, 100, 100)
;
100 64 144 0x64 0144

# ascii characters
;
SELECT printf('%c', 65)
;
A

# width trick
;
SELECT printf('%*d', 5, 10)
;
   10

# floating point numbers
;
SELECT printf('%.2f', 10.0::FLOAT), printf('%.4f', 0.5)
;
10.00	0.5000

# weird float stuff
;
SELECT printf('floats: %4.2f %+.0e %E', 3.1416, 3.1416, 3.1416)
;
floats: 3.14 +3e+00 3.141600E+00

# incorrect number of parameters
# too few parameters
;
SELECT printf('%s')

;
SELECT printf('%s %s', 'hello')

# excess parameters are ignored
;
SELECT printf('%s', 'hello', 'world')
;
hello

# incorrect types
;
SELECT printf('%s', 42)

;
SELECT printf('%d', 'hello')

# Test printf with vectors
;
CREATE TABLE strings(idx INTEGER, fmt STRING, pint INTEGER, pstring STRING)

;
INSERT INTO strings VALUES (1, '%d: %s', 10, 'hello')

;
INSERT INTO strings VALUES (2, 'blabla %d blabla %s', 20, 'blabla')

;
INSERT INTO strings VALUES (3, NULL, 30, 'abcde')

# printf without format specifiers: too few parameters
;
SELECT printf(fmt) FROM strings ORDER BY idx

;
SELECT printf(CASE WHEN pint < 15 THEN NULL ELSE pint END) FROM strings ORDER BY idx
;
NULL
20
30

# standard vectorized printf
;
SELECT printf(fmt, pint, pstring) FROM strings ORDER BY idx
;
10: hello
blabla 20 blabla blabla
NULL

# printf with constants in format arguments
;
SELECT printf(fmt, 10, pstring) FROM strings ORDER BY idx
;
10: hello
blabla 10 blabla blabla
NULL

# printf with constant format string
;
SELECT printf('%s: %s', pstring, pstring) FROM strings ORDER BY idx
;
hello: hello
blabla: blabla
abcde: abcde

# printf with selection vector
;
SELECT printf('%s: %s', pstring, pstring) FROM strings WHERE idx <> 2 ORDER BY idx
;
hello: hello
abcde: abcde
