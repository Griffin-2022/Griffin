# name: test/sql/function/list/aggregates/avg.test
# description: Test the list_avg aggregate function
# group: [aggregates]

# list_avg on a sequence
;
CREATE SEQUENCE seq;

;
SELECT list_avg([nextval('seq')]);
;
1

;
SELECT list_avg([nextval('seq')]);
;
2

# multiple list entries
;
CREATE TABLE integers(i INTEGER[]);

;
INSERT INTO integers VALUES ([1, 2, 3]), ([6, 3, 2, 5]), ([]), ([NULL]), (NULL), ([1, NULL, 2, 3]);

;
SELECT list_avg(i) FROM integers;
;
2
4
NULL
NULL
NULL
2

# incorrect use
;
SELECT list_avg()

# NULL average
;
CREATE TABLE vals(i INTEGER[], j HUGEINT[]);

;
INSERT INTO vals VALUES ([NULL, NULL], [NULL, NULL, NULL])

;
SELECT list_avg(i), list_avg(j) FROM vals;
;
NULL	NULL

# test list_avg on integers with no exact float64 representation

;
CREATE TABLE bigints(n HUGEINT[]);

;
INSERT INTO bigints (n) VALUES (['9007199254740992'::HUGEINT, 1::HUGEINT, 0::HUGEINT]);

# this would give the wrong result with 'double' precision
require longdouble

;
SELECT list_avg(n)::DOUBLE - '3002399751580331'::DOUBLE FROM bigints;
;
0

# test list_avg in which the intermediate sums are not exact (favg)

;
CREATE TABLE doubles(n DOUBLE[]);

;
INSERT INTO doubles (n) VALUES (['9007199254740992'::DOUBLE, 1::DOUBLE, 1::DOUBLE, 0::DOUBLE]);

# this would give the wrong result with a simple sum-and-divide
;
SELECT list_aggr(n, 'favg') - '2251799813685248.5'::DOUBLE FROM doubles;
;
0
