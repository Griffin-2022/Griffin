# name: test/common/test_cast_struct.test
# description: Test casting structs
# group: [common]

;
PRAGMA enable_verification

# struct to struct casts with different names
;
select struct_extract(struct_pack(b=>42)::struct(a integer), 'a');
;
42

# this all also works with the row type
;
select struct_extract(struct_pack(b=>42)::row(a integer), 'a');
;
42

# struct to struct casts with different names AND different types
;
select struct_extract(struct_pack(b=>42::double)::struct(a integer), 'a');
;
42

;
select struct_extract(struct_pack(b=>'42'::double)::struct(a integer), 'a');
;
42

;
select struct_pack(b=>'42'::double)::struct(a integer, c string)

;
select struct_pack(b=>'hello'::string)::struct(b integer)

;
select struct_pack(b=>'hello'::string)::struct(a integer)


;
select struct_pack(b=>'42'::double, c => 'asdf'::string)::struct(a1 integer, a2 string);
;
{'a1': 42, 'a2': asdf}

;
select ROW(42, 'asdf');
;
{'v1': 42, 'v2': asdf}


;
select ROW();

;
select ROW(NULL);
;
{'v1': NULL}

;
select ROW(NULL, NULL);
;
{'v1': NULL, 'v2': NULL}

# MB example
;
SELECT CAST(ROW(1, 2) AS ROW(a INTEGER, b INTEGER))
;
{'a': 1, 'b': 2}

;
select a::row(a integer, b string) r from (VALUES (ROW(1, 'asdf')), (ROW(4, 'fdsa'))) s(a);
;
{'a': 1, 'b': asdf}
{'a': 4, 'b': fdsa}

;
select struct_extract({'a': a}, a) from range(10) tbl(a);
