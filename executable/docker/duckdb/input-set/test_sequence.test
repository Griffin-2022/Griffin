# name: test/sql/catalog/sequence/test_sequence.test
# description: Test Sequences
# group: [sequence]

# note: query verification is disabled for these queries
# because running the same query multiple times with a sequence does not result in the same answer
# create a sequence
;
CREATE SEQUENCE seq;

# cannot create duplicate sequence
;
CREATE SEQUENCE seq;

# ignore errors if sequence already exists
;
CREATE SEQUENCE IF NOT EXISTS seq;

# generate values from the sequence
;
SELECT nextval('seq')
;
1

;
SELECT currval('seq')
;
1

;
SELECT currval('seq')
;
1

;
SELECT nextval('seq')
;
2

;
SELECT currval('seq')
;
2

;
SELECT currval('seq')
;
2

;
SELECT nextval('seq'), nextval('seq');
;
3	4

# NULL in nextval/currval
;
SELECT nextval(NULL)
;
NULL

;
SELECT currval(NULL)
;
NULL

;
SELECT nextval(a) FROM (VALUES ('seq'), (NULL), ('seq')) tbl1(a)
;
5
NULL
6

;
SELECT currval(a) FROM (VALUES ('seq'), (NULL), ('seq')) tbl1(a)
;
6
NULL
6

# can't create a sequence that already exists
;
CREATE SEQUENCE seq;

# drop the sequence
;
DROP SEQUENCE seq;

# can't drop non-existing sequence
;
DROP SEQUENCE seq;

# but doesn't fail with IF EXISTS
;
DROP SEQUENCE IF EXISTS seq;

# INCREMENT BY
;
CREATE SEQUENCE seq INCREMENT BY 2;

;
SELECT nextval('seq')
;
1

;
SELECT nextval('"seq"')
;
3

;
SELECT currval('"seq"')
;
3

;
DROP SEQUENCE seq;

# MINVALUE
;
CREATE SEQUENCE seq MINVALUE 3;

;
SELECT nextval('seq')
;
3

;
SELECT nextval('seq')
;
4

;
DROP SEQUENCE seq;

# MAXVALUE
;
CREATE SEQUENCE seq MAXVALUE 2;

;
SELECT nextval('seq')
;
1

;
SELECT nextval('seq')
;
2

# max value exceeded
;
SELECT nextval('seq')

;
DROP SEQUENCE seq;

# MAXVALUE and CYCLE
;
CREATE SEQUENCE seq MAXVALUE 2 CYCLE;

;
SELECT nextval('seq')
;
1

;
SELECT nextval('seq')
;
2

;
SELECT currval('seq')
;
2

# max value exceeded: cycle back
;
SELECT nextval('seq')
;
1

;
SELECT currval('seq')
;
1

;
DROP SEQUENCE seq;

# START WITH, MINVALUE, MAXVALUE and CYCLE
;
CREATE SEQUENCE seq MINVALUE 3 MAXVALUE 5 START WITH 4 CYCLE;

;
SELECT nextval('seq')
;
4

;
SELECT currval('seq')
;
4

;
SELECT nextval('seq')
;
5

;
SELECT currval('seq')
;
5

;
SELECT nextval('seq')
;
3

;
SELECT currval('seq')
;
3

;
DROP SEQUENCE seq;

# START WITH defaults to MAXVALUE if increment is negative
;
CREATE SEQUENCE seq INCREMENT BY -1 MINVALUE 0 MAXVALUE 2;

;
SELECT nextval('seq')
;
2

;
SELECT nextval('seq')
;
1

;
SELECT nextval('seq')
;
0

;
SELECT currval('seq')
;
0

;
SELECT nextval('seq')

;
SELECT currval('seq')
;
0

;
DROP SEQUENCE seq;

# START WITH defaults to MINVALUE if increment is positive
;
CREATE SEQUENCE seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2;

;
SELECT nextval('seq')
;
0

;
SELECT nextval('seq')
;
1

;
SELECT nextval('seq')
;
2

;
SELECT nextval('seq')

;
DROP SEQUENCE seq;

# for positive increment min_value/start defaults to 1 and max_value defaults to 2^63
;
CREATE SEQUENCE seq INCREMENT 1 MAXVALUE 3 START 2 CYCLE;

;
SELECT nextval('seq')
;
2

;
SELECT nextval('seq')
;
3

;
SELECT nextval('seq')
;
1

;
DROP SEQUENCE seq;

# for negative increment min_value defaults to -2^63 and max_value/start defaults to -1
;
CREATE SEQUENCE seq INCREMENT -1 CYCLE;

;
SELECT nextval('seq')
;
-1

;
SELECT nextval('seq')
;
-2

;
SELECT nextval('seq')
;
-3

;
DROP SEQUENCE seq;

;
CREATE SEQUENCE seq INCREMENT -1 MINVALUE -2 CYCLE;

;
SELECT nextval('seq')
;
-1

;
SELECT nextval('seq')
;
-2

;
SELECT nextval('seq')
;
-1

;
DROP SEQUENCE seq;

# min_value defaults to 1, setting start to -1 gives start < min_value
;
CREATE SEQUENCE seq INCREMENT 1 START -1 CYCLE;

# max_value defaults to -1, setting start to 1 gives start > max_value
;
CREATE SEQUENCE seq INCREMENT -1 START 1 CYCLE;

# sequences in schemas
;
CREATE SCHEMA a;

;
CREATE SCHEMA b;

;
CREATE SEQUENCE a.seq;

;
CREATE SEQUENCE b.seq;

;
SELECT nextval('a.seq'), nextval('b.seq');
;
1	1

;
SELECT currval('a.seq'), currval('b.seq');
;
1	1

# with quotes
;
SELECT nextval('"a"."seq"'), nextval('"b".seq');
;
2	2

;
SELECT currval('"a"."seq"'), currval('"b".seq');
;
2	2

# unterminated quotes
;
SELECT nextval('"a"."seq');

# too many separators
;
SELECT nextval('a.b.c.d');

# start exceeds max value
;
CREATE SEQUENCE seq MAXVALUE 5 START WITH 6;

# start preceeds min value
;
CREATE SEQUENCE seq MINVALUE 5 START WITH 4;

# min value bigger than max
;
CREATE SEQUENCE seq MINVALUE 7 MAXVALUE 5;

# increment must not be 0
;
CREATE SEQUENCE seq INCREMENT 0;

;
CREATE SEQUENCE seq;

;
CREATE SEQUENCE seq2;

# we can use operations in nextval
;
SELECT nextval('s'||'e'||'q')
;
1

;
DROP SEQUENCE seq;

# sequences with tables
;
CREATE SEQUENCE seq;

;
CREATE TABLE strings(s VARCHAR);

;
INSERT INTO strings VALUES ('seq'), ('seq2')

# nextval is run once per value
;
SELECT s, nextval('seq') FROM strings
;
seq	1
seq2	2

;
SELECT s, currval('seq') FROM strings
;
seq	2
seq2	2

# we can also use the strings from the table as input to the sequence
;
SELECT s, nextval(s) FROM strings
;
seq	3
seq2	1

;
SELECT s, currval(s) FROM strings
;
seq	3
seq2	1

# this will also cause an error if the sequence does not exist
;
INSERT INTO strings VALUES ('nonexistant_seq')

;
SELECT s, nextval(s) FROM strings

# currval causes error for new sequence
;
CREATE SEQUENCE fresh;

;
select currval('fresh');