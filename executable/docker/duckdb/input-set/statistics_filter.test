# name: test/optimizer/statistics/statistics_filter.test
# description: Statistics propagation test with filters
# group: [statistics]

foreach type utinyint usmallint uinteger ubigint tinyint smallint integer bigint hugeint float double

;
CREATE TABLE integers AS SELECT i::${type} i FROM (VALUES (1), (2), (3)) tbl(i);

;
PRAGMA explain_output = OPTIMIZED_ONLY;

;
PRAGMA enable_verification

# = filter is out of range
;
EXPLAIN SELECT * FROM integers WHERE i=0;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

;
EXPLAIN SELECT * FROM integers WHERE i=4;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# = filter is in range
;
EXPLAIN SELECT * FROM integers WHERE i=1;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# > filter is out of range
;
EXPLAIN SELECT * FROM integers WHERE i>3;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# > filter is in of range
;
EXPLAIN SELECT * FROM integers WHERE i>2;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# >= filter is out of range
;
EXPLAIN SELECT * FROM integers WHERE i>=4;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# >= filter is in of range
;
EXPLAIN SELECT * FROM integers WHERE i>=3;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# < filter is out of range
;
EXPLAIN SELECT * FROM integers WHERE i<1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# < filter is in of range
;
EXPLAIN SELECT * FROM integers WHERE i<2;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# <= filter is out of range
;
EXPLAIN SELECT * FROM integers WHERE i<=0;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# <= filter is in of range
;
EXPLAIN SELECT * FROM integers WHERE i<=1;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# verify that all these queries return correct results
;
SELECT * FROM integers WHERE i=0;
;

;
SELECT * FROM integers WHERE i=4;
;

;
SELECT * FROM integers WHERE i=1;
;
1

;
SELECT * FROM integers WHERE i>3;
;

;
SELECT * FROM integers WHERE i>2;
;
3

;
SELECT * FROM integers WHERE i>=4;
;


;
SELECT * FROM integers WHERE i>=3;
;
3

;
SELECT * FROM integers WHERE i<1;
;


;
SELECT * FROM integers WHERE i<2;
;
1

;
SELECT * FROM integers WHERE i<=0;
;


;
SELECT * FROM integers WHERE i<=1;
;
1

# we repeat everything we did above, but with a subquery with a limit
# the limit prevents the filter from being pushed down into the scan
# which causes these tests to test different behavior

# = filter is out of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i=0;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i=4;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# = filter is in range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i=1;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# > filter is out of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>3;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# > filter is in of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>2;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# >= filter is out of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>=4;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# >= filter is in of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>=3;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# < filter is out of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<1;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# < filter is in of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<2;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# <= filter is out of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<=0;
;
logical_opt	<REGEX>:.*EMPTY_RESULT.*

# <= filter is in of range
;
EXPLAIN SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<=1;
;
logical_opt	<!REGEX>:.*EMPTY_RESULT.*

# verify that all these queries return correct results
;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i=0;
;

;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i=4;
;

;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i=1;
;
1

;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>3;
;

;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>2;
;
3

;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>=4;
;


;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i>=3;
;
3

;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<1;
;


;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<2;
;
1

;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<=0;
;


;
SELECT * FROM (SELECT * FROM integers LIMIT 10) integers(i) WHERE i<=1;
;
1

;
DROP TABLE integers;

endloop
