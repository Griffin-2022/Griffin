# name: test/sql/subquery/scalar/test_correlated_subquery_cte.test
# description: Test correlated subqueries
# group: [scalar]

;
PRAGMA enable_verification

;
CREATE TABLE integers(i INTEGER)

;
INSERT INTO integers VALUES (1), (2), (3), (NULL)

# scalar select with correlation
;
SELECT i, (WITH i2 AS (SELECT 42+i1.i AS j) SELECT j FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	43
2	44
3	45

# ORDER BY correlated subquery
;
SELECT i FROM integers i1 ORDER BY (WITH i2 AS (SELECT 100-i1.i as j) SELECT j FROM i2);
;
NULL
3
2
1

# subquery returning multiple results
;
SELECT i, (WITH i2 AS (SELECT 42+i1.i AS j FROM integers) SELECT j FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	43
2	44
3	45

# subquery with LIMIT
;
SELECT i, (WITH i2 AS (SELECT 42+i1.i AS j FROM integers) SELECT j FROM i2 LIMIT 1) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	43
2	44
3	45

# subquery with LIMIT 0
;
SELECT i, (WITH i2 AS (SELECT 42+i1.i AS j FROM integers) SELECT j FROM i2 LIMIT 0) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	NULL
2	NULL
3	NULL

# subquery with WHERE clause that is always FALSE
;
SELECT i, (WITH i2 AS (SELECT i FROM integers WHERE 1=0 AND i1.i=i) SELECT i FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	NULL
2	NULL
3	NULL

# correlated EXISTS with WHERE clause that is always FALSE
;
SELECT i, EXISTS(WITH i2 AS (SELECT i FROM integers WHERE 1=0 AND i1.i=i) SELECT i FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	0
1	0
2	0
3	0

# correlated ANY with WHERE clause that is always FALSE
;
SELECT i, i=ANY(WITH i2 AS (SELECT i FROM integers WHERE 1=0 AND i1.i=i) SELECT i FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	0
1	0
2	0
3	0

# subquery with OFFSET is not supported
;
SELECT i, (WITH i2 AS (SELECT i+i1.i FROM integers LIMIT 1 OFFSET 1) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;

# subquery with ORDER BY is not supported
;
SELECT i, (WITH i2 AS (SELECT i+i1.i FROM integers ORDER BY 1 LIMIT 1 OFFSET 1) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;

# correlated filter without FROM clause
;
SELECT i, (WITH i2 AS (SELECT 42 WHERE i1.i>2) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	NULL
2	NULL
3	42

# correlated filter with matching entry on NULL
;
SELECT i, (WITH i2 AS (SELECT 42 WHERE i1.i IS NULL) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	42
1	NULL
2	NULL
3	NULL

# scalar select with correlation in projection
;
SELECT i, (WITH i2 AS (SELECT i+i1.i FROM integers WHERE i=1) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	2
2	3
3	4

# scalar select with correlation in filter
;
SELECT i, (WITH i2 AS (SELECT i FROM integers WHERE i=i1.i) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	1
2	2
3	3

# scalar select with operation in projection
;
SELECT i, (WITH i2 AS (SELECT i+1 FROM integers WHERE i=i1.i) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	2
2	3
3	4

# correlated scalar select with constant in projection
;
SELECT i, (WITH i2 AS (SELECT 42 FROM integers WHERE i=i1.i) SELECT * FROM i2) AS j FROM integers i1 ORDER BY i;
;
NULL	NULL
1	42
2	42
3	42

