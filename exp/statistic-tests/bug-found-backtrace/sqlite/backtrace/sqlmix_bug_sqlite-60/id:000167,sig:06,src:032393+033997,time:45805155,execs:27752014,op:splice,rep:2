GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < /root/crashes/id:000167,sig:06,src:032393+033997,time:45805155,execs:27752014,op:splice,rep:2
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL-trace: ;PRAGMA sql_trace=on;
SQL-trace:  
;;PRAGMA journal_mode = off;
SQL-trace: ;
;INSERT INTO t1 VALUES(randomblob(1000), randomblob(1000));
SQL-trace:  SELECT randomblob(1000), randomblob(1000) FROM t1;
SQL-trace: 
;
;SELECT count(*) FROM t1;
SQL-trace: ;;BEGIN;
SQL-trace: ;
;PRAGMA incremental_vacuum
;
SQL-trace:  VALUES('hello', 'world');
SQL-trace: ;
;DROP TABLE IF EXISTS after;
SQL-trace: ;PRAGMA incremental_vacuum;
SQL-trace: ;CREATE TABLE x(t2, t1i1);
SQL-trace: ;CREATE TABLE t2i1(t1b, c);
SQL-trace: ;
;INSERT INTO t2i1 VALUES($ii, $ii || $ii)
;
SQL-trace: ;PRAGMA max_page_count = 2 
;
SQL-trace: ;
;PRAGMA auto_vacuum = incremental
;
SQL-trace: ;;
;BEGIN;
SQL-trace: ;UPDATE t1 SET a=a*2;
SQL-trace: ;
;BEGIN;
SQL-trace: ;
;BEGIN;
SQL-trace: COMMIT 
;
SQL-trace: ;COMMIT
;
SQL-trace: ;INSERT INTO t1 VALUES(8,'a'),(9,'z'),(6,'w'),(7,'a');
SQL-trace: VACUUM
;
SQL-trace: ATTACH '' AS vacuum_db
SQL-trace: BEGIN
SQL-trace: SELECT sql FROM "main".sqlite_schema WHERE type='table'AND name<>'sqlite_sequence' AND coalesce(rootpage,1)>0
SQL-trace: CREATE TABLE t1(a, b)
SQL-trace: CREATE TABLE x(t2, t1i1)
SQL-trace: CREATE TABLE t2i1(t1b, c)
SQL-trace: SELECT sql FROM "main".sqlite_schema WHERE type='index'
SQL-trace: SELECT'INSERT INTO vacuum_db.'||quote(name)||' SELECT*FROM"main".'||quote(name)FROM vacuum_db.sqlite_schema WHERE type='table'AND coalesce(rootpage,1)>0
SQL-trace: INSERT INTO vacuum_db.'t1' SELECT*FROM"main".'t1'
SQL-trace: INSERT INTO vacuum_db.'x' SELECT*FROM"main".'x'
SQL-trace: INSERT INTO vacuum_db.'t2i1' SELECT*FROM"main".'t2i1'
SQL-trace: INSERT INTO vacuum_db.sqlite_schema SELECT*FROM "main".sqlite_schema WHERE type IN('view','trigger') OR(type='table'AND rootpage=0)
SQL-trace: 
;SELECT 2.0e-27 * '+0.5e+127'
;
SQL-trace: SELECT 2.0e-27 * '+0.000005e+132'
;
SQL-trace: ;;COMMIT;
SQL-trace: ;COMMIT;
SQL-trace: ;PRAGMA reverse_unordered_selects = ON;
SQL-trace: ATTACH '' AS vacuum_db
;
SQL-trace: ;;PRAGMA writable_schema = 1;
SQL-trace: ;COMMIT
;
SQL-trace: ;UPDATE sqlite_master SET rootpage=5 WHERE tbl_name = 'aftSr';
SQL-trace: 
        VALUES(1,'a23456789_b23456789_c23456789_d23456789_e23456789_');
SQL-trace: ;PRAGMA integrity_check;
SQL-trace: ;;DROP TABLE IF EXISTS t3y;
SQL-trace: ;;
;DELETE FROM t1;
SQL-trace: ;
;pragma auto_vacuum = 'incremental';
SQL-trace: PRAGMA max_page_count = 2 
;
SQL-trace: PRAGMA page_size = 1024;
SQL-trace: ;
;PRAGMA auto_vacuum = 1;
SQL-trace: ;
;BEGIN;
SQL-trace: ;
;BEGIN;
SQL-trace: ;
;PRAGMA auto_vacuum = 2;
SQL-trace: COMMIT 
;
SQL-trace: ;;
;DELETE FROM t1;
SQL-trace: ;DROP TABLE t1;
SQL-trace: ;PRAGMA incremental_vacuum;
SQL-trace: ;COMMIT;
SQL-trace: ;
;BEGIN;
SQL-trace: ;-- this is a no-op.
    COMMIT;
SQL-trace: ;
;BEGIN;
SQL-trace: ;
;BEGIN;
SQL-trace:  SELECT * FROM t2i1;

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f6e29d49859 in __GI_abort () at abort.c:79
#2  0x00007f6e29d49729 in __assert_fail_base (fmt=0x7f6e29edf588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x55a393 "(*ppPage)->pgno==pgno", file=0x549ad6 "sqlite3.c", line=67791, function=<optimized out>)
    at assert.c:92
#3  0x00007f6e29d5afd6 in __GI___assert_fail (assertion=0x55a393 "(*ppPage)->pgno==pgno", file=0x549ad6 "sqlite3.c", line=67791, function=0x55a2ee "int getAndInitPage(BtShared *, Pgno, MemPage **, BtCursor *, int)")
    at assert.c:101
#4  0x0000000000482781 in getAndInitPage (pBt=0x15533c0, pgno=5, ppPage=0x1565058, pCur=0x0, bReadOnly=2) at sqlite3.c:67791
#5  0x0000000000481f50 in moveToRoot (pCur=0x1564fd0) at sqlite3.c:70854
#6  0x0000000000475dd4 in sqlite3BtreeLast (pCur=0x1564fd0, pRes=0x7ffceb51c82c) at sqlite3.c:71003
#7  0x00000000004692cc in sqlite3VdbeExec (p=0x1562e70) at sqlite3.c:92444
#8  0x0000000000416374 in sqlite3Step (p=0x1562e70) at sqlite3.c:85145
#9  0x000000000040e242 in sqlite3_step (pStmt=0x1562e70) at sqlite3.c:85202
#10 0x000000000040556f in main (argc=1, argv=0x7ffceb51d108) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 26937] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
