MDL_context::acquire_lock: info: Got lock without waiting
filename_to_tablename: enter: from 'mysql'
filename_to_tablename: exit: to 'mysql'
filename_to_tablename: enter: from 'innodb_index_stats'
filename_to_tablename: exit: to 'innodb_index_stats'
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000868d98, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00021bf20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000868ca0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869118, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00021d420, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869020, type: 6
que_eval_sql: que_eval_sql: query: PROCEDURE DROP_DATABASE_STATS () IS
BEGIN
DELETE FROM "mysql/innodb_table_stats" WHERE database_name=:db;
DELETE FROM "mysql/innodb_index_stats" WHERE database_name=:db;
END;

dict_table_open_on_name: dict_table_open_on_name: table: 'mysql/innodb_table_stats'
dict_table_open_on_name: dict_table_open_on_name: table: 'mysql/innodb_index_stats'
que_eval_sql: ib_que: Execute 9 (QUERY THREAD) at 0x62900173a758
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x62900173a800
que_eval_sql: ib_que: Execute 4 (UPDATE) at 0x6290017395e8
que_eval_sql: ib_que: Execute 6 (SELECT) at 0x629001739968
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locked
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) unlocking
que_eval_sql: ib_que: Execute 4 (UPDATE) at 0x6290017395e8
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x62900173a800
que_eval_sql: ib_que: Execute 4 (UPDATE) at 0x629001739ec8
que_eval_sql: ib_que: Execute 6 (SELECT) at 0x62900173a248
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locked
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) unlocking
que_eval_sql: ib_que: Execute 4 (UPDATE) at 0x629001739ec8
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x62900173a800
que_eval_sql: ib_que: Execute 9 (QUERY THREAD) at 0x62900173a758
que_graph_free_recursive: que_graph_free_recursive: node: 0x62900173a6a0, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x62900173a758, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x62900173a800, type: 1044
que_graph_free_recursive: que_graph_free_recursive: node: 0x6290017395e8, type: 4
que_graph_free_recursive: que_graph_free_recursive: node: 0x629001739968, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x629001739ec8, type: 4
que_graph_free_recursive: que_graph_free_recursive: node: 0x62900173a248, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869f18, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00021db20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869e20, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869818, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b000af9420, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869720, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086c598, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b000c0b220, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086c4a0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086da98, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00021e220, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086d9a0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086bb18, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00021f020, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086ba20, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086ad18, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b0010d6520, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700086ac20, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869b98, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b0010d5e20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000869aa0, type: 6
que_eval_sql: que_eval_sql: query: PROCEDURE DROP_DATABASE_PROC () IS
fk CHAR;
name CHAR;
tid CHAR;
iid CHAR;
DECLARE FUNCTION fk_report;
DECLARE CURSOR fkf IS
SELECT ID FROM SYS_FOREIGN WHERE ID >= :db FOR UPDATE;
DECLARE CURSOR fkr IS
SELECT REF_NAME,ID FROM SYS_FOREIGN WHERE REF_NAME >= :db FOR UPDATE
ORDER BY REF_NAME;
DECLARE CURSOR tab IS
SELECT ID,NAME FROM SYS_TABLES WHERE NAME >= :db FOR UPDATE;
DECLARE CURSOR idx IS
SELECT ID FROM SYS_INDEXES WHERE TABLE_ID = tid FOR UPDATE;
BEGIN
OPEN fkf;
WHILE 1 = 1 LOOP
  FETCH fkf INTO fk;
  IF (SQL % NOTFOUND) THEN EXIT; END IF;
  IF TO_BINARY(SUBSTR(fk, 0, LENGTH(:db)))<>TO_BINARY(:db) THEN EXIT; END IF;
  DELETE FROM SYS_FOREIGN_COLS WHERE TO_BINARY(ID)=TO_BINARY(fk);
  DELETE FROM SYS_FOREIGN WHERE CURRENT OF fkf;
END LOOP;
CLOSE fkf;
OPEN fkr;
FETCH fkr INTO fk_report();
CLOSE fkr;
OPEN tab;
WHILE 1 = 1 LOOP
  FETCH tab INTO tid,name;
  IF (SQL % NOTFOUND) THEN EXIT; END IF;
  IF SUBSTR(name, 0, LENGTH(:db)) <> :db THEN EXIT; END IF;
  DELETE FROM SYS_COLUMNS WHERE TABLE_ID=tid;
  D
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN'
