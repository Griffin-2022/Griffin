alloc_root: exit: ptr: 0x61a0005dfd50
alloc_root: enter: root: 0x7f8c2ebe8688
alloc_root: exit: ptr: 0x61a0005dfd60
alloc_root: enter: root: 0x7f8c2ebe8688
alloc_root: exit: ptr: 0x61a0005dfd78
TABLE_SHARE::init_from_binary_frm_image: info: i_count: 0  i_parts: 0  index: 0  n_length: 5  int_length: 0  com_length: 0  vcol_screen_length: 0
alloc_root: enter: root: 0x7f8c2ebe8688
alloc_root: exit: ptr: 0x61a0005dfd88
get_new_handler: enter: alloc: 0x7f8c2ebe8688
alloc_root: enter: root: 0x7f8c2ebe8688
my_malloc: my: size: 1992 flags: 4112
my_malloc: info: global thd memory_used: 41832  size: 2016
my_malloc: exit: ptr: 0x61d00147e508
alloc_root: exit: ptr: 0x61d00147e528
get_new_handler: info: handler created F_UNLCK 2 F_RDLCK 0 F_WRLCK 1
TABLE_SHARE::init_from_binary_frm_image: debug: field_type: double, field_length: 22, interval: 0x0, pack_flag: FIELDFLAG_BINARY FIELDFLAG_NUMBER FIELDFLAG_PACK 
alloc_root: enter: root: 0x7f8c2ebe8688
alloc_root: exit: ptr: 0x61a0005dfde0
parse_option_list: enter: struct: 0x0 list: 0x0 rules: 0x51c2aa0 suppress_warning: 1 root: 0x7f8c2ebe8688
alloc_root: enter: root: 0x7f8c2ebe8688
alloc_root: exit: ptr: 0x61a0005dfeb8
set_one_value: enter: opt: 0x51c2aa0 type: 3 name 'PAGE_COMPRESSED' value: '<DEFAULT>'
set_one_value: enter: opt: 0x51c2af0 type: 0 name 'PAGE_COMPRESSION_LEVEL' value: '<DEFAULT>'
set_one_value: enter: opt: 0x51c2b40 type: 2 name 'ENCRYPTED' value: '<DEFAULT>'
set_one_value: enter: opt: 0x51c2b90 type: 0 name 'ENCRYPTION_KEY_ID' value: '<DEFAULT>'
parse_option_list: enter: struct: 0x0 list: 0x0 rules: 0x0 suppress_warning: 1 root: 0x7f8c2ebe8688
alloc_root: enter: root: 0x7f8c2ebe8688
alloc_root: exit: ptr: 0x61a0005dfee0
open_table_from_share: enter: name: 'tdulybld.n'  form: 0x7f8c2ebe8c20
init_alloc_root: enter: root: 0x7f8c2ebe8eb8  prealloc: 0
alloc_root: enter: root: 0x7f8c2ebe8eb8
my_malloc: my: size: 1016 flags: 4112
my_malloc: info: global thd memory_used: 43848  size: 1040
my_malloc: exit: ptr: 0x61a001274b08
alloc_root: exit: ptr: 0x61a001274b28
get_new_handler: enter: alloc: 0x7f8c2ebe8eb8
alloc_root: enter: root: 0x7f8c2ebe8eb8
my_malloc: my: size: 1992 flags: 4112
my_malloc: info: global thd memory_used: 44888  size: 2016
my_malloc: exit: ptr: 0x61d00147ef08
alloc_root: exit: ptr: 0x61d00147ef28
get_new_handler: info: handler created F_UNLCK 2 F_RDLCK 0 F_WRLCK 1
alloc_root: enter: root: 0x7f8c2ebe8eb8
alloc_root: exit: ptr: 0x61a001274b38
alloc_root: enter: root: 0x7f8c2ebe8eb8
alloc_root: exit: ptr: 0x61a001274b50
alloc_root: enter: root: 0x7f8c2ebe8eb8
alloc_root: exit: ptr: 0x61a001274b68
alloc_root: enter: root: 0x7f8c2ebe8eb8
alloc_root: exit: ptr: 0x61a001274b70
alloc_root: enter: root: 0x7f8c2ebe8eb8
alloc_root: exit: ptr: 0x61a001274c48
ha_innobase::update_thd: ha_innobase::update_thd: user_thd: 0x62b00015e288 -> 0x62b00015e288
MDL_ticket::downgrade_lock: enter: old_type: MDL_BACKUP_DDL  new_type: MDL_BACKUP_ALTER_COPY
MDL_context::upgrade_shared_lock: enter: old_type: MDL_SHARED_UPGRADABLE  new_type: MDL_EXCLUSIVE  lock_wait_timeout: 86400.000000
MDL_context::acquire_lock: enter: lock_type: MDL_EXCLUSIVE  timeout: 86400.000000
MDL_context::acquire_lock: info: Got lock without waiting
mysql_inplace_alter_table: info: Adding mdl lock MDL_EXCLUSIVE to MDL_EXCLUSIVE
mysql_inplace_alter_table: mutex: element->LOCK_table_share (0x61b00041e8c0) locking
mysql_inplace_alter_table: mutex: element->LOCK_table_share (0x61b00041e8c0) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000c88) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000c88) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000c88) unlocking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000d98) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000d98) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000d98) unlocking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000ea8) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000ea8) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000ea8) unlocking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000fb8) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000fb8) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e000000fb8) unlocking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000010c8) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000010c8) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000010c8) unlocking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000011d8) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000011d8) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000011d8) unlocking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000012e8) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000012e8) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000012e8) unlocking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000013f8) locking
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000013f8) locked
mysql_inplace_alter_table: mutex: LOCK_table_cache (0x61e0000013f8) unlocking
mysql_inplace_alter_table: mutex: element->LOCK_table_share (0x61b00041e8c0) unlocking
mysql_inplace_alter_table: mutex: element->LOCK_table_share (0x61b00041e8c0) locking
mysql_inplace_alter_table: mutex: element->LOCK_table_share (0x61b00041e8c0) locked
mysql_inplace_alter_table: mutex: element->LOCK_table_share (0x61b00041e8c0) unlocking
alloc_root: enter: root: 0x62b0001641a8
alloc_root: exit: ptr: 0x6290000e7810
lock_tables_check: info: Adding mdl lock MDL_SHARED_READ to MDL_EXCLUSIVE
get_lock_data: info: count 1
alloc_root: enter: root: 0x62b0001641a8
alloc_root: exit: ptr: 0x6290000e7820
get_lock_data: info: sql_lock->table_count 1 sql_lock->lock_count 0
mysql_lock_tables(sql_lock): THD::enter_stage: System lock at /root/mariadb/sql/lock.cc:337
lock_external: info: count 1
ha_innobase::external_lock: enter: lock_type: 0
ha_innobase::update_thd: ha_innobase::update_thd: user_thd: 0x62b00015e288 -> 0x62b00015e288
trans_register_ha: enter: stmt
