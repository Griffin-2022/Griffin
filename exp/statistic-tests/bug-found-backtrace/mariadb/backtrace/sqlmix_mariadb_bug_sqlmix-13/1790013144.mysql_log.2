que_graph_free_recursive: que_graph_free_recursive: node: 0x629001d1b248, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000680618, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b000710420, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000680520, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000680298, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00070fd20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x6170006801a0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067ff18, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00070f620, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067fe20, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067fb98, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00070ef20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067faa0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067f818, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00070e820, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067f720, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067f498, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00070e120, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067f3a0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067f118, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00070da20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700067f020, type: 6
que_eval_sql: que_eval_sql: query: PROCEDURE DROP_DATABASE_PROC () IS
fk CHAR;
name CHAR;
tid CHAR;
iid CHAR;
DECLARE FUNCTION fk_report;
DECLARE CURSOR fkf IS
SELECT ID FROM SYS_FOREIGN WHERE ID >= :db FOR UPDATE;
DECLARE CURSOR fkr IS
SELECT REF_NAME,ID FROM SYS_FOREIGN WHERE REF_NAME >= :db FOR UPDATE
ORDER BY REF_NAME;
DECLARE CURSOR tab IS
SELECT ID,NAME FROM SYS_TABLES WHERE NAME >= :db FOR UPDATE;
DECLARE CURSOR idx IS
SELECT ID FROM SYS_INDEXES WHERE TABLE_ID = tid FOR UPDATE;
BEGIN
OPEN fkf;
WHILE 1 = 1 LOOP
  FETCH fkf INTO fk;
  IF (SQL % NOTFOUND) THEN EXIT; END IF;
  IF TO_BINARY(SUBSTR(fk, 0, LENGTH(:db)))<>TO_BINARY(:db) THEN EXIT; END IF;
  DELETE FROM SYS_FOREIGN_COLS WHERE TO_BINARY(ID)=TO_BINARY(fk);
  DELETE FROM SYS_FOREIGN WHERE CURRENT OF fkf;
END LOOP;
CLOSE fkf;
OPEN fkr;
FETCH fkr INTO fk_report();
CLOSE fkr;
OPEN tab;
WHILE 1 = 1 LOOP
  FETCH tab INTO tid,name;
  IF (SQL % NOTFOUND) THEN EXIT; END IF;
  IF SUBSTR(name, 0, LENGTH(:db)) <> :db THEN EXIT; END IF;
  DELETE FROM SYS_COLUMNS WHERE TABLE_ID=tid;
  D
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_TABLES'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_INDEXES'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN_COLS'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_COLUMNS'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_TABLES'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FIELDS'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_INDEXES'
que_eval_sql: ib_que: Execute 9 (QUERY THREAD) at 0x625000319be0
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 25 (OPEN) at 0x629001d18888
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 1046 (WHILE) at 0x625000314bc8
que_eval_sql: ib_que: Execute 24 (FETCH) at 0x629001d18d10
que_eval_sql: ib_que: Execute 6 (SELECT) at 0x629001d15fe0
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locked
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) unlocking
que_eval_sql: ib_que: Execute 24 (FETCH) at 0x629001d18d10
que_eval_sql: ib_que: Execute 1046 (WHILE) at 0x625000314bc8
que_eval_sql: ib_que: Execute 1045 (IF) at 0x629001d18f10
que_eval_sql: ib_que: Execute 32 (EXIT) at 0x629001d18ed0
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 25 (OPEN) at 0x625000314d08
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 25 (OPEN) at 0x625000314e48
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 24 (FETCH) at 0x625000315080
que_eval_sql: ib_que: Execute 6 (SELECT) at 0x629001d16a50
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locked
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) unlocking
que_eval_sql: ib_que: Execute 24 (FETCH) at 0x625000315080
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 25 (OPEN) at 0x6250003151c8
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 25 (OPEN) at 0x625000315308
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000319c88
que_eval_sql: ib_que: Execute 1046 (WHILE) at 0x625000319998
que_eval_sql: ib_que: Execute 24 (FETCH) at 0x625000315880
que_eval_sql: ib_que: Execute 6 (SELECT) at 0x629001d17670
