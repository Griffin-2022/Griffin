my_malloc: my: size: 10 flags: 0
my_malloc: info: global thd memory_used: 373936  size: 40
my_malloc: exit: ptr: 0x60e000a54688
innobase_trx_allocate: mutex: mutex (0x611000001480) locking
innobase_trx_allocate: mutex: mutex (0x611000001480) locked
innobase_trx_allocate: mutex: mutex (0x611000001480) unlocking
innobase_trx_allocate: mutex: mutex (0x6120000012a0) locking
innobase_trx_allocate: mutex: mutex (0x6120000012a0) locked
innobase_trx_allocate: mutex: mutex (0x6120000012a0) unlocking
innobase_trx_allocate: trx: Create: 0x7f48545f29d0
innobase_trx_allocate: mutex: mutex (0x52b5200) locking
innobase_trx_allocate: mutex: mutex (0x52b5200) locked
innobase_trx_allocate: mutex: mutex (0x52b5200) unlocking
dict_table_open_on_name: dict_table_open_on_name: table: 'mysql/innodb_table_stats'
filename_to_tablename: enter: from 'mysql'
filename_to_tablename: exit: to 'mysql'
filename_to_tablename: enter: from 'innodb_table_stats'
filename_to_tablename: exit: to 'innodb_table_stats'
MDL_context::acquire_lock: enter: lock_type: MDL_SHARED  timeout: 86400.000000
MDL_context::acquire_lock: info: Got lock without waiting
filename_to_tablename: enter: from 'mysql'
filename_to_tablename: exit: to 'mysql'
filename_to_tablename: enter: from 'innodb_table_stats'
filename_to_tablename: exit: to 'innodb_table_stats'
dict_table_open_on_name: dict_table_open_on_name: table: 'mysql/innodb_index_stats'
dict_load_table_one: dict_load_table_one: table: mysql/innodb_index_stats
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locked
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) unlocking
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000898f98, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00160a120, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000898ea0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000bf9e98, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b001204a20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000bf9da0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000bfa218, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b0018a9a20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000bfa120, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x6170003ecd98, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b001928f20, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x6170003ecca0, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700078bb18, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b000d6a020, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700078ba20, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700097af18, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b001119420, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x61700097ae20, type: 6
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000bf9798, type: 8
que_graph_free_recursive: que_graph_free_recursive: node: 0x61b00066e620, type: 9
que_graph_free_recursive: que_graph_free_recursive: node: 0x617000bf96a0, type: 6
que_eval_sql: que_eval_sql: query: PROCEDURE DROP_DATABASE_PROC () IS
fk CHAR;
name CHAR;
tid CHAR;
iid CHAR;
DECLARE FUNCTION fk_report;
DECLARE CURSOR fkf IS
SELECT ID FROM SYS_FOREIGN WHERE ID >= :db FOR UPDATE;
DECLARE CURSOR fkr IS
SELECT REF_NAME,ID FROM SYS_FOREIGN WHERE REF_NAME >= :db FOR UPDATE
ORDER BY REF_NAME;
DECLARE CURSOR tab IS
SELECT ID,NAME FROM SYS_TABLES WHERE NAME >= :db FOR UPDATE;
DECLARE CURSOR idx IS
SELECT ID FROM SYS_INDEXES WHERE TABLE_ID = tid FOR UPDATE;
BEGIN
OPEN fkf;
WHILE 1 = 1 LOOP
  FETCH fkf INTO fk;
  IF (SQL % NOTFOUND) THEN EXIT; END IF;
  IF TO_BINARY(SUBSTR(fk, 0, LENGTH(:db)))<>TO_BINARY(:db) THEN EXIT; END IF;
  DELETE FROM SYS_FOREIGN_COLS WHERE TO_BINARY(ID)=TO_BINARY(fk);
  DELETE FROM SYS_FOREIGN WHERE CURRENT OF fkf;
END LOOP;
CLOSE fkf;
OPEN fkr;
FETCH fkr INTO fk_report();
CLOSE fkr;
OPEN tab;
WHILE 1 = 1 LOOP
  FETCH tab INTO tid,name;
  IF (SQL % NOTFOUND) THEN EXIT; END IF;
  IF SUBSTR(name, 0, LENGTH(:db)) <> :db THEN EXIT; END IF;
  DELETE FROM SYS_COLUMNS WHERE TABLE_ID=tid;
  D
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_TABLES'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_INDEXES'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN_COLS'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FOREIGN'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_COLUMNS'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_TABLES'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_FIELDS'
dict_table_open_on_name: dict_table_open_on_name: table: 'SYS_INDEXES'
que_eval_sql: ib_que: Execute 9 (QUERY THREAD) at 0x625000e613e0
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000e61488
que_eval_sql: ib_que: Execute 25 (OPEN) at 0x629004324888
que_eval_sql: ib_que: Execute 1044 (STORED PROCEDURE) at 0x625000e61488
que_eval_sql: ib_que: Execute 1046 (WHILE) at 0x6250015be3c8
