alloc_root: exit: ptr: 0x61a000548610
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a000548618
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a0005486f0
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a0005487c8
alloc_root: enter: root: 0x61900004bda0
my_malloc: my: size: 1016 flags: 4112
my_malloc: info: global thd memory_used: 11184  size: 1040
my_malloc: exit: ptr: 0x61a000e8c308
alloc_root: exit: ptr: 0x61a000e8c328
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a000e8c400
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a000e8c4d8
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a000e8c5b0
alloc_root: enter: root: 0x61900004bda0
my_malloc: my: size: 2040 flags: 4112
my_malloc: info: global thd memory_used: 12224  size: 2064
my_malloc: exit: ptr: 0x61d000fbcd08
alloc_root: exit: ptr: 0x61d000fbcd28
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a0005488a0
handler::ha_open: enter: name: ./ffsydoam/sqlsim0  db_type: 44  db_stat: 33  mode: 2  lock_test: 4114
handler::ha_open: info: old m_lock_type: 2 F_UNLCK 2
dict_table_open_on_name: dict_table_open_on_name: table: 'ffsydoam/sqlsim0'
ha_innobase::update_thd: ha_innobase::update_thd: user_thd: 0x0 -> 0x62b00015e288
dirname_part: enter: '././ffsydoam/sqlsim0.frm'
dirname_part: enter: '././ffsydoam/'
cleanup_dirname: enter: from: '././ffsydoam/'
cleanup_dirname: exit: to: './ffsydoam/'
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a0005488c8
alloc_root: enter: root: 0x61900004bda0
alloc_root: exit: ptr: 0x61a0005488e0
open_table_from_share: mutex: share->LOCK_share (0x61b0012c45e8) locking
open_table_from_share: mutex: share->LOCK_share (0x61b0012c45e8) locked
open_table_from_share: mutex: share->LOCK_share (0x61b0012c45e8) unlocking
build_table_filename: enter: db: 'ffsydoam'  table_name: 'sqlsim0'  ext: '.TRG'  flags: 0
tablename_to_filename: enter: from 'ffsydoam'
tablename_to_filename: exit: to 'ffsydoam'
tablename_to_filename: enter: from 'sqlsim0'
tablename_to_filename: exit: to 'sqlsim0'
build_table_filename: exit: buff: './ffsydoam/sqlsim0.TRG'
open_table: mutex: element->LOCK_table_share (0x61b0002700c0) locking
open_table: mutex: element->LOCK_table_share (0x61b0002700c0) locked
open_table: mutex: element->LOCK_table_share (0x61b0002700c0) unlocking
open_table: mutex: LOCK_table_cache (0x61e000000c88) locking
open_table: mutex: LOCK_table_cache (0x61e000000c88) locked
open_table: mutex: LOCK_table_cache (0x61e000000c88) unlocking
my_malloc: my: size: 16 flags: 16
my_malloc: info: global thd memory_used: 18712  size: 40
my_malloc: exit: ptr: 0x60e0008e6388
open_table: mutex: LOCK_thd_data (0x62b00015ffe8) locking
open_table: mutex: LOCK_thd_data (0x62b00015ffe8) locked
open_table: mutex: LOCK_thd_data (0x62b00015ffe8) unlocking
handle_table: info: table: 0x7f5470023d30  name: sqlsim0  db: ffsydoam  flags: 0
open_tables: THD::enter_stage: After opening tables at /root/mariadb/sql/sql_base.cc:4505
open_tables: THD::enter_stage: (null) at /root/mariadb/sql/sql_base.cc:4506
open_tables: open_tables: returning: 0
alloc_root: enter: root: 0x62b0001641a8
alloc_root: exit: ptr: 0x6290000e8d50
lock_tables_check: info: Adding mdl lock MDL_SHARED_WRITE to MDL_EXCLUSIVE
get_lock_data: info: count 1
alloc_root: enter: root: 0x62b0001641a8
alloc_root: exit: ptr: 0x6290000e8d60
get_lock_data: info: sql_lock->table_count 1 sql_lock->lock_count 0
mysql_lock_tables(sql_lock): THD::enter_stage: System lock at /root/mariadb/sql/lock.cc:337
lock_external: info: count 1
ha_innobase::external_lock: enter: lock_type: 1
ha_innobase::update_thd: ha_innobase::update_thd: user_thd: 0x62b00015e288 -> 0x62b00015e288
trans_register_ha: enter: stmt
mysql_lock_tables(sql_lock): THD::enter_stage: table lock at /root/mariadb/sql/lock.cc:342
mysql_lock_tables(sql_lock): THD::enter_stage: (null) at /root/mariadb/sql/lock.cc:357
THD::decide_logging_format: info: Query: CREATE SEQUENCE sqlsim0
THD::decide_logging_format: info: binlog_format: 1
THD::decide_logging_format: info: current_stmt_binlog_format: 1
THD::decide_logging_format: info: lex->get_stmt_unsafe_flags(): 0x0
THD::decide_logging_format: info: decision: no logging since mysql_bin_log.is_open() = 0 and (options & OPTION_BIN_LOG) = 0x40000 and binlog_format = 1 and binlog_filter->db_ok(db) = 1
sequence_insert: sequence: reserved: 1  start: 1  increment: 1  min_value: 1  max_value: 9223372036854775806  cache: 1000  round: 0
row_ins: row_ins: table: ffsydoam/sqlsim0
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locked
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) unlocking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locking
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) locked
btr_cur_search_to_nth_level: mutex: mutex (0x69a4520) unlocking
row_ins_clust_index_entry_low: ib_cur: insert `GEN_CLUST_INDEX` (8355) by 0 TUPLE (info_bits=0, 11 fields): {[6]      (0x000000000000),[6]      (0x000000000000),[7]       (0x80000000000000),[8]        (0x8000000000000001),[8]        (0x8000000000000001),[8]        (0xFFFFFFFFFFFFFFFE),[8]        (0x8000000000000001),[8]        (0x8000000000000001),[8]        (0x00000000000003E8),[1] (0x00),[8]        (0x8000000000000000)}
row_ins_clust_index_entry_low: mutex: mutex (0x69533c0) locking
row_ins_clust_index_entry_low: mutex: mutex (0x69533c0) locked
row_ins_clust_index_entry_low: mutex: mutex (0x69533c0) unlocking
wsrep_run_commit_hook: wsrep: Is_active: 0 is_real 1 has_changes 0 is_applying 0 is_ordered: 0
wsrep_run_commit_hook: wsrep: return: 0
ha_commit_trans: info: thd: 0x62b00015e288  option_bits: 2147748608  all: 0
ha_commit_trans: info: all: 0  thd->in_sub_stmt: 0  ha_info: 0x62b000160de8  is_real_trans: 1
ha_commit_trans: info: is_real_trans: 1  rw_trans:  0  rw_ha_count: 0
innobase_commit: enter: commit_trx: 0
innobase_commit: trans: ending transaction
