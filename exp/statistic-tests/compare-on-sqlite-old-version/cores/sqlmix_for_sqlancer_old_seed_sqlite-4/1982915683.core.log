GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000127,sig:06,src:017296+015390,time:37749885,execs:8608934,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;
PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;
PRAGMA page_size = 1024;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Halt             0    0    0               00 
SQL: [;
CREATE TABLE b(x UNIQUE);]
VDBE Trace:
   0 Init             0   39    0               00 Start at 39
  39 Transaction      0    1    1 0             01 usesStmtJournal=0
  40 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:3
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:2
  10 Close            0    0    0               00 
  11 Noop             0   22    0               00 
  12 CreateBtree      0    4    2               00 r[4]=root iDb=0 flags=2
REG[4] =  i:4
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 NewRowid         1    5    0               00 r[5]=rowid
REG[5] =  i:3
  15 String8          0    6    0 index         00 r[6]='index'
REG[6] =   t5[index](8)
  16 String8          0    7    0 sqlite_autoindex_b_1 00 r[7]='sqlite_autoindex_b_1'
REG[7] =   t20[sqlite_autoinde](8)
  17 String8          0    8    0 b             00 r[8]='b'
REG[8] =   t1[b](8)
  18 Copy             4    9    0               00 r[9]=r[4]
REG[9] =  i:4
  19 Null             0   10    0               00 r[10]=NULL
REG[10] =  NULL
  20 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s33[0617350F0100696E64657873716C6974..5...indexsqlit]
  21 Insert           1   11    5               18 intkey=r[5] data=r[11]
REG[11] =  s33[0617350F0100696E64657873716C6974..5...indexsqlit]
REG[5] =  i:3
  22 Close            0    0    0               00 
  23 Null             0   12   13               00 r[12..13]=NULL
REG[12] =  NULL
  24 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  25 Explain         25    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  26 SeekRowid        2   28    1               00 intkey=r[1]
REG[1] =  i:2
  27 Rowid            2   13    0               00 r[13]=rowid
REG[13] =  i:2
  28 IsNull          13   36    0               00 if r[13]==NULL goto 36
REG[13] =  i:2
  29 String8          0   14    0 table         00 r[14]='table'
REG[14] =   t5[table](8)
  30 String8          0   15    0 b             00 r[15]='b'
REG[15] =   t1[b](8)
  31 String8          0   16    0 b             00 r[16]='b'
REG[16] =   t1[b](8)
  32 Copy             2   17    0               00 r[17]=r[2]
REG[17] =  i:3
  33 String8          0   18    0 CREATE TABLE b(x UNIQUE) 00 r[18]='CREATE TABLE b(x UNIQUE)'
REG[18] =   t24[CREATE TABLE b(](8)
  34 MakeRecord      14    5   19 BBBDB         00 r[19]=mkrec(r[14..18])
REG[19] =  s38[06170F0F013D7461626C656262034352.....=tablebb.CR]
  35 Insert           2   19   13               00 intkey=r[13] data=r[19]
REG[19] =  s38[06170F0F013D7461626C656262034352.....=tablebb.CR]
REG[13] =  i:2
  36 SetCookie        0    1    2               00 
  37 ParseSchema      0    0    0 tbl_name='b' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 0             00 usesStmtJournal=0
  16 String8          0    2    0 b             00 r[2]='b'
REG[2] =   t1[b](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s1[b](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[b](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s24[CREATE TABLE b(](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[b](8)
REG[5] =  i:3
REG[6] =   s24[CREATE TABLE b(](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s1[b](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s20[sqlite_autoinde](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:4
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =  NULL
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s20[sqlite_autoinde](8)
REG[5] =  i:4
REG[6] =  NULL
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  38 Halt             0    0    0               00 
SQL: [pragma auto_vacuum = 0 ;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Halt             0    0    0               00 
SQL: [;
INSERT INTO b SELECT randomblob(400) FROM b;]
VDBE Trace:
   0 Init             0   33    0               00 Start at 33
  33 Transaction      0    1    2 0             01 usesStmtJournal=1
  34 Integer        400    4    0               00 r[4]=400
REG[4] =  i:400
  35 Goto             0    1    0               00 
   1 InitCoroutine    3    9    2               00 
   9 OpenEphemeral    1    1    0               00 nColumn=1
  10 Yield            3   15    0               00 
REG[3] =  i:1
REG[3] =  i:10
   2 OpenRead         0    3    0 0             00 root=3 iDb=0; b
   3 Explain          3    0    0 SCAN TABLE b  00 
   4 Rewind           0    8    0               00 
   8 EndCoroutine     3    0    0               00 
REG[3] =  i:10
  15 OpenWrite        2    3    0 1             00 root=3 iDb=0; b
  16 OpenWrite        3    4    0 k(2,,)        00 root=4 iDb=0; sqlite_autoindex_b_1
  17 Rewind           1   31    0               00 
  31 Close            1    0    0               00 
  32 Halt             0    0    0               00 
SQL: [ATTACH 'test.db' as db2;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 String8          0    1    0 test.db       00 r[1]='test.db'
REG[1] =   t7[test.db](8)
   2 String8          0    2    0 db2           00 r[2]='db2'
REG[2] =   t3[db2](8)
   3 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
   4 Function0        0    1    4 sqlite_attach(3) 03 r[4]=func(r[1..3])
REG[1] =   t7[test.db](8)
REG[2] =   t3[db2](8)
REG[3] =  NULL
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      2    0    5 0             00 usesStmtJournal=0
  12 TableLock        2    1    0 sqlite_master 00 iDb=2 root=1 write=0
  13 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    2 5             00 root=1 iDb=2; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s12[sqlite_stat1](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:2
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =   s39[CREATE TABLE sq](8)
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s12[sqlite_stat1](8)
REG[2] =  i:2
REG[3] =   s39[CREATE TABLE sq](8)
   9 Next             0    5    0               01 
  10 Halt             0    0    0               00 
VDBE Trace:
   0 Init             0   10    0               00 Start at 10
  10 Transaction      2    0    5 0             00 usesStmtJournal=0
  11 TableLock        2    2    0 sqlite_stat1  00 iDb=2 root=2 write=0
  12 Goto             0    1    0               00 
   1 OpenRead         0    2    2 3             00 root=2 iDb=2; sqlite_stat1
   2 Explain          2    0    0 SCAN TABLE sqlite_stat1 00 
   3 Rewind           0    9    0               00 
   9 Halt             0    0    0               00 
REG[4] =  NULL
   5 Expire           1    0    0               00 
   6 Halt             0    0    0               00 
SQL: [;
ATTACH ':memory:' as aux3;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 String8          0    1    0 :memory:      00 r[1]=':memory:'
REG[1] =   t8[:memory:](8)
   2 String8          0    2    0 aux3          00 r[2]='aux3'
REG[2] =   t4[aux3](8)
   3 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
   4 Function0        0    1    4 sqlite_attach(3) 03 r[4]=func(r[1..3])
REG[1] =   t8[:memory:](8)
REG[2] =   t4[aux3](8)
REG[3] =  NULL
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      3    0    0 0             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    3 5             00 root=1 iDb=3; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
  10 Halt             0    0    0               00 
REG[4] =  NULL
   5 Expire           1    0    0               00 
   6 Halt             0    0    0               00 
SQL: [PRAGMA journal_mode = off ;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 JournalMode      3    1    2               00 
REG[1] =   t3[off](8)
   2 JournalMode      2    1    2               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f555f61c859 in __GI_abort () at abort.c:79
#2  0x00007f555f61c729 in __assert_fail_base (fmt=0x7f555f7b2588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21b03a "p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd)", file=0x22873d "sqlite3.c", 
    line=51476, function=<optimized out>) at assert.c:92
#3  0x00007f555f62dfd6 in __GI___assert_fail (assertion=0x21b03a "p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd)", file=0x22873d "sqlite3.c", line=51476, function=0x20d272 "int assert_pager_state(Pager *)")
    at assert.c:101
#4  0x00000000002b12ea in assert_pager_state (p=0x26624e0) at sqlite3.c:51476
#5  0x00000000002bf529 in pager_end_transaction (pPager=0x26624e0, hasMaster=0, bCommit=0) at sqlite3.c:52631
#6  0x00000000002c2f59 in pager_playback (pPager=0x26624e0, isHot=1) at sqlite3.c:53572
#7  0x00000000002e4caf in sqlite3PagerSharedLock (pPager=0x26624e0) at sqlite3.c:55863
#8  0x00000000002e2708 in lockBtree (pBt=0x2661e30) at sqlite3.c:66249
#9  0x00000000002e10e9 in sqlite3BtreeBeginTrans (p=0x265caa0, wrflag=0, pSchemaVersion=0x0) at sqlite3.c:66624
#10 0x00000000003ed0bc in sqlite3BtreeSetVersion (pBtree=0x265caa0, iVersion=1) at sqlite3.c:73559
#11 0x00000000003dc86f in sqlite3VdbeExec (p=0x2650780) at sqlite3.c:90272
#12 0x0000000000411104 in sqlite3Step (p=0x2650780) at sqlite3.c:81930
#13 0x000000000029128d in sqlite3_step (pStmt=0x2650780) at sqlite3.c:81995
#14 0x00000000002570b9 in main (argc=1, argv=0x7fff84e30b58) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 5460] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
