GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000186,sig:06,src:005944+008000,time:7830346,execs:914688,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL-trace: ;
PRAGMA sql_trace=on;
SQL-trace: SELECT typeof( CAST('   -2.12e-01ABC' AS REAL) ),  CAST('   -2.12e-01ABC' AS REAL) ;
SQL-trace: SELECT length('aÀ') AS x;
SQL-trace: SELECT hex(trim('€€€ð€€€ÿ','ÿ€')) AS x;
SQL-trace: ;
DROP TABLE IF EXISTS t1;
SQL-trace: ;
CREATE TABLE a(b UNIQUE);
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='a' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
UPDATE a SET b=1, b=64;
SQL-trace: ;
CREATE VIEW temp_store_directory_test AS SELECT * FROM a;
SQL-trace: CREATE TRIGGER temp_table INSTEAD OF INSERT ON temp_store_directory_test BEGIN
        INSERT INTO a(b) VALUES(new.z+10000);
      END;
SQL-trace: ;
SELECT b, b, b FROM a 
          ORDER BY b, b desc, b;
SQL-trace: ;
UPDATE a SET b='abc_', b='a%7_';
SQL-trace: SELECT typeof( CAST(' 1 2 3 4' AS REAL) ),  CAST(' 1 2 3 4' AS REAL) ;
SQL-trace: CREATE TABLE t1(t1 INTEGER PRIMARY KEY);
SQL-trace: ;
PRAGMA automatic_index=ON;
SQL-trace: ;
UPDATE a SET b=1, b=2, b=3.0;
SQL-trace: ;
SELECT b=2 OR b=1 FROM a;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='temp_store_directory_test' AND type!='trigger' ORDER BY rowid;
SQL-trace: COMMIT;
SQL-trace: PRAGMA foreign_keys;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='x1' AND type='index' ORDER BY rowid;
SQL-trace: CREATE INDEX t1_mirror ON a(b, b);
SQL-trace: PRAGMA database_list;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1_mirror' AND type!='trigger' ORDER BY rowid;
SQL-trace: CREATE INDEX t1_mirror2 ON a(b);
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT coalesce(b-b,99) FROM a;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='a' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
UPDATE a SET b=32, b=NULL;
SQL-trace: ;
SELECT 1%0 FROM a;
SQL-trace: ;
WITH w1(t1_bu,y) AS ( 
      SELECT 1, 1
      UNION ALL
      SELECT t1_bu+1, y + 2*t1_bu + 1 FROM w1
    )
    SELECT * FROM w1 LIMIT 5;
SQL-trace: ;
SELECT b<b FROM a;
SQL-trace: DELETE FROM a WHERE oid = 12
      ;
SQL-trace: ;
CREATE TABLE t1_bi (
    t1_ai COLLATE nocase, t1_bu, t1_au UNIQUE, PRIMARY KEY(t1_bu, t1_ai)
  ) WITHOUT ROWID;
SQL-trace: CREATE INDEX t1_bd ON t1_bi(t1_au);
SQL-trace: ;
VACUUM;
SQL-trace: ATTACH '' AS vacuum_db;
SQL-trace: PRAGMA vacuum_db.synchronous=OFF
SQL-trace: BEGIN;
SQL-trace: SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14)   FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0
SQL-trace: CREATE TABLE vacuum_db.a(b UNIQUE)
SQL-trace: CREATE TABLE vacuum_db.t1(t1 INTEGER PRIMARY KEY)
SQL-trace: CREATE TABLE vacuum_db.t1_bi (
    t1_ai COLLATE nocase, t1_bu, t1_au UNIQUE, PRIMARY KEY(t1_bu, t1_ai)
  ) WITHOUT ROWID
SQL-trace: SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' 
SQL-trace: CREATE INDEX vacuum_db.t1_mirror ON a(b, b)
SQL-trace: CREATE INDEX vacuum_db.t1_mirror2 ON a(b)
SQL-trace: CREATE INDEX vacuum_db.t1_bd ON t1_bi(t1_au)
SQL-trace: SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21)   FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'
SQL-trace: SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';'FROM main.sqlite_master WHERE type = 'table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0
SQL-trace: INSERT INTO vacuum_db.'a' SELECT * FROM main.'a';
SQL-trace: INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';
SQL-trace: INSERT INTO vacuum_db.'t1_bi' SELECT * FROM main.'t1_bi';
SQL-trace: SELECT 'DELETE FROM vacuum_db.' || quote(name) || ';' FROM vacuum_db.sqlite_master WHERE name='sqlite_sequence' 
SQL-trace: SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';' FROM vacuum_db.sqlite_master WHERE name=='sqlite_sequence';
SQL-trace: INSERT INTO vacuum_db.sqlite_master   SELECT type, name, tbl_name, rootpage, sql    FROM main.sqlite_master   WHERE type='view' OR type='trigger'      OR (type='table' AND rootpage=0)
SQL-trace: CREATE TABLE t1_ad(t2 REFERENCES t1_bi , x);
SQL-trace: CREATE TABLE y (x1);
SQL-trace: CREATE TABLE z(x2 REFERENCES t1_bi , x3);
SQL-trace: PRAGMA count_changes = 1 ;
SQL-trace: UPDATE t1_bi SET t1_au=NULL WHERE t1_au=4;

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f4aae9b4859 in __GI_abort () at abort.c:79
#2  0x00007f4aae9b4729 in __assert_fail_base (fmt=0x7f4aaeb4a588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21f0e2 "memIsValid(&r.aMem[ii])", file=0x222c23 "sqlite3.c", line=80649, function=<optimized out>)
    at assert.c:92
#3  0x00007f4aae9c5fd6 in __GI___assert_fail (assertion=0x21f0e2 "memIsValid(&r.aMem[ii])", file=0x222c23 "sqlite3.c", line=80649, function=0x213a19 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003e29eb in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:80649
#5  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#6  0x000000000024b5e9 in main (argc=1, argv=0x7ffcbf85d7c8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 13890] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
