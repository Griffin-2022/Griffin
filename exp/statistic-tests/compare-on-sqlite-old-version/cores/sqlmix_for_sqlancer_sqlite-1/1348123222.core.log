GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000533,sig:11,src:021549+004710,time:32404948,execs:11481617,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    0 0             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
  10 Halt             0    0    0               00 
SQL: [CREATE TABLE t1(x NUM,t2);]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    0 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:0
   2 If               3    5    0               00 
REG[3] =  i:0
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:2
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:1
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:1
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:1
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:1
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 t1            00 r[7]='t1'
REG[7] =   t2[t1](8)
  20 String8          0    8    0 t1            00 r[8]='t1'
REG[8] =   t2[t1](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:2
  22 String8          0   10    0 CREATE TABLE t1(x NUM,t2) 00 r[10]='CREATE TABLE t1(x NUM,t2)'
REG[10] =   t25[CREATE TABLE t1](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s41[06171111013F7461626C657431743102.....?tablet1t1.]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s41[06171111013F7461626C657431743102.....?tablet1t1.]
REG[5] =  i:1
  25 SetCookie        0    1    1               00 
  26 ParseSchema      0    0    0 tbl_name='t1' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    1 0             00 usesStmtJournal=0
  16 String8          0    2    0 t1            00 r[2]='t1'
REG[2] =   t2[t1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[t1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:2
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s25[CREATE TABLE t1](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[t1](8)
REG[5] =  i:2
REG[6] =   s25[CREATE TABLE t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [CREATE INDEX a ON t1(t2);]
VDBE Trace:
   0 Init             0   33    0               00 Start at 33
  33 Transaction      0    1    1 0             01 usesStmtJournal=0
  34 Goto             0    1    0               00 
   1 Noop             0   32    0               00 
   2 CreateBtree      0    1    2               00 r[1]=root iDb=0 flags=2
REG[1] =  i:3
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:2
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 a             00 r[4]='a'
REG[4] =   t1[a](8)
   7 String8          0    5    0 t1            00 r[5]='t1'
REG[5] =   t2[t1](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:3
   9 String8          0    7    0 CREATE INDEX a ON t1(t2) 00 r[7]='CREATE INDEX a ON t1(t2)'
REG[7] =   t24[CREATE INDEX a ](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s39[06170F11013D696E6465786174310343.....=indexat1.C]
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s39[06170F11013D696E6465786174310343.....=indexat1.C]
REG[2] =  i:2
  12 SorterOpen       3    0    1 k(2,,)        00 
  13 OpenRead         1    2    0 2             00 root=2 iDb=0; t1
  14 Rewind           1   20    0               00 
  20 OpenWrite        2    1    0 k(2,,)        11 root=1 iDb=0
  21 SorterSort       3   26    0               00 
  26 Close            1    0    0               00 
  27 Close            2    0    0               00 
  28 Close            3    0    0               00 
  29 SetCookie        0    1    2               00 
  30 ParseSchema      0    0    0 name='a' AND type='index' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 0             00 usesStmtJournal=0
  16 String8          0    2    0 a             00 r[2]='a'
REG[2] =   t1[a](8)
  17 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[a](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[a](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[a](8)
REG[1] =   s1[a](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t5[index](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[a](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s24[CREATE INDEX a ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[a](8)
REG[5] =  i:3
REG[6] =   s24[CREATE INDEX a ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  31 Expire           0    1    0               00 
  32 Halt             0    0    0               00 
SQL: [;INSERT INTO t1 VALUES('12.36E+',7);]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    1    2 0             01 usesStmtJournal=0
  16 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 OpenWrite        1    3    0 k(2,,)        00 root=3 iDb=0; a
   3 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   4 String8          0    2    0 12.36E+       00 r[2]='12.36E+'
REG[2] =   t7[12.36E+](8)
   5 Integer          7    3    0               00 r[3]=7
REG[3] =  i:7
   6 Affinity         2    1    0 C             00 affinity(r[2])
   7 Noop             0    0    0               00 uniqueness check for a
   8 SCopy            3    5    0               00 r[5]=r[3]; t2
REG[5] =  i:7
   9 IntCopy          1    6    0               00 r[6]=r[1]; rowid
REG[6] =  i:1
  10 MakeRecord       5    2    4               00 r[4]=mkrec(r[5..6]); for a
REG[4] =  s4[03010907....]
  11 IdxInsert        1    4    5 2             10 key=r[4]
REG[4] =  s4[03010907....]
  12 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s11[031B0131322E3336452B07...12.36E+.]
  13 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s11[031B0131322E3336452B07...12.36E+.]
REG[1] =  i:1
  14 Halt             0    0    0               00 
SQL: [SELECT x FROM (
    SELECT * FROM (
      SELECT * FROM t1 WHERE x%1 OR (SELECT sum(x) OVER (ORDER BY x%2))
    ) 
    WHERE x=1 OR ( (SELECT sum(x) OVER (ORDER BY x%4)) AND x<=10 )
  ) 
  WHERE x=1 OR ((SELECT sum(x) OVER(ORDER BY x%8)) AND 10<=x)

;]
VDBE Trace:
   0 Init             0  265    0               00 Start at 265
 265 Transaction      0    0    2 0             01 usesStmtJournal=0
 266 Integer          1    3    0               00 r[3]=1
REG[3] =  i:1
 267 Integer          2   10    0               00 r[10]=2
REG[10] =  i:2
 268 Integer          4   30    0               00 r[30]=4
REG[30] =  i:4
 269 Integer         10   44    0               00 r[44]=10
REG[44] =  i:10
 270 Integer          8   51    0               00 r[51]=8
REG[51] =  i:8
 271 Goto             0    1    0               00 
   1 OpenRead         2    2    0 2             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           2  264    0               00 
   4 Column           2    0    2               00 r[2]=t1.x
REG[2] =   s7[12.36E+](8)
   5 Remainder        3    2    1               00 r[1]=r[2]%r[3]
REG[3] =  i:1
REG[2] =   s7[12.36E+](8)
REG[1] =  i:0
   6 If               1   89    0               00 
REG[1] =  i:0
   7 Explain          7    0    0 CORRELATED SCALAR SUBQUERY 1 00 
   8 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
REG[4] =  NULL
   9 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  10 OpenEphemeral    3    2    0               00 nColumn=2
  11 OpenDup          4    3    0               00 
  12 OpenDup          5    3    0               00 
  13 OpenDup          6    3    0               00 
  14 InitCoroutine    7   23   15               00 subquery_7
  23 Integer          1   11    0               00 r[11]=1; LIMIT counter
REG[11] =  i:1
  24 Integer          1   12    0               00 r[12]=1
REG[12] =  i:1
  25 Explain         25    7    0 SCAN SUBQUERY 7 00 
  26 InitCoroutine    7    0   15               00 
  27 Yield            7   63    0               00 next row of subquery_7
REG[7] =  i:14
REG[7] =  i:27
  15 Explain         15    7    0 CO-ROUTINE 7  00 
  16 Noop             8    4    0               00 
  17 Explain         17   15    0 SCAN CONSTANT ROW 00 
  18 Column           2    0    2               00 r[2]=t1.x
REG[2] =   s7[12.36E+](8)
  19 Remainder       10    2    8               00 r[8]=r[2]%r[10]
REG[10] =  i:2
REG[2] =   s7[12.36E+](8)
REG[8] =  i:0
  20 Column           2    0    9               00 r[9]=t1.x
REG[9] =   s7[12.36E+](8)
  21 Yield            7    0    0               00 
REG[7] =  i:27
REG[7] =  i:21
  28 Copy             8   14    0               00 r[14]=r[8]
REG[14] =  i:0
  29 Copy             9   15    0               00 r[15]=r[9]
REG[15] =   s7[12.36E+](8)
  30 MakeRecord      14    2   16               00 r[16]=mkrec(r[14..15])
REG[16] =  s10[03081B31322E3336452B...12.36E+]
  31 NewRowid         4   17    0               00 r[17]=rowid
REG[17] =  i:1
  32 Insert           4   16   17               00 intkey=r[17] data=r[16]
REG[16] =  s10[03081B31322E3336452B...12.36E+]
REG[17] =  i:1
  33 Ne              12   42   17               00 if r[17]!=r[12] goto 42
REG[12] =  i:1
REG[17] =  i:1
  34 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  35 Rewind           3    1    0               00 
  36 Rewind           6    1    0               00 
  37 Copy            14   18    0               00 r[18]=r[14]
REG[18] =  i:0
  38 Copy            18   19    0               00 r[19]=r[18]
REG[19] =  i:0
  39 Copy            18   20    0               00 r[20]=r[18]
REG[20] =  i:0
  40 Copy            18   21    0               00 r[21]=r[18]
REG[21] =  i:0
  41 Goto             0   62    0               00 
  62 Goto             0   27    0               00 
  27 Yield            7   63    0               00 next row of subquery_7
REG[7] =  i:21
REG[7] =  i:27
  22 EndCoroutine     7    0    0               00 
REG[7] =  i:27
  63 Rewind           4   82    0               00 
  64 Column           6    1   22               00 r[22]=
REG[22] =   s7[12.36E+](8)
  65 AggStep          0   22    5 sum(1)        01 accum=r[5] step(r[22])
REG[22] =   s7[12.36E+](8)
  66 Next             6   68    0               00 
  67 Goto             0   72    0               00 
  72 AggValue         5    1    6 sum(1)        00 r[6]=value N=1
  73 Gosub           13   84    0               00 
REG[13] =  i:73
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Copy             6    4    0               00 r[4]=r[6]
REG[4] =  r:12.36
  86 DecrJumpZero    11   88    0               00 if (--r[11])==0 goto 88
REG[11] =  i:1
  88 IfNot            4  263    1               00 
REG[4] =  r:12.36
  89 Column           2    0    1               00 r[1]=t1.x
REG[1] =   s7[12.36E+](8)
  90 Eq               3  175    1 (BINARY)      43 if r[1]==r[3] goto 175
REG[3] =  i:1
REG[1] =   s7[12.36E+](8)
  91 Explain         91    0    0 CORRELATED SCALAR SUBQUERY 3 00 
  92 Null             0   24   24               00 r[24..24]=NULL; Init subquery result
REG[24] =  NULL
  93 Null             0   25    0               00 r[25]=NULL
REG[25] =  NULL
  94 OpenEphemeral    9    2    0               00 nColumn=2
  95 OpenDup         10    9    0               00 
  96 OpenDup         11    9    0               00 
  97 OpenDup         12    9    0               00 
  98 InitCoroutine   27  107   99               00 subquery_8
 107 Integer          1   31    0               00 r[31]=1; LIMIT counter
REG[31] =  i:1
 108 Integer          1   32    0               00 r[32]=1
REG[32] =  i:1
 109 Explain        109   91    0 SCAN SUBQUERY 8 00 
 110 InitCoroutine   27    0   99               00 
 111 Yield           27  147    0               00 next row of subquery_8
REG[27] =  i:98
REG[27] =  i:111
  99 Explain         99   91    0 CO-ROUTINE 8  00 
 100 Noop            14    4    0               00 
 101 Explain        101   99    0 SCAN CONSTANT ROW 00 
 102 Column           1    0   23               00 r[23]=subquery_2.x

Program received signal SIGSEGV, Segmentation fault.
0x00000000003e1e8f in sqlite3VdbeCursorMoveto (pp=0x7ffd7170acc8, piCol=0x7ffd7170ac58) at sqlite3.c:79680
79680	  assert( p->eCurType==CURTYPE_BTREE || p->eCurType==CURTYPE_PSEUDO );
(gdb) #0  0x00000000003e1e8f in sqlite3VdbeCursorMoveto (pp=0x7ffd7170acc8, piCol=0x7ffd7170ac58) at sqlite3.c:79680
#1  0x00000000003c7ccb in sqlite3VdbeExec (p=0x187e650) at sqlite3.c:86079
#2  0x0000000000411104 in sqlite3Step (p=0x187e650) at sqlite3.c:81930
#3  0x000000000029128d in sqlite3_step (pStmt=0x187e650) at sqlite3.c:81995
#4  0x00000000002570b9 in main (argc=1, argv=0x7ffd7170afb8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 55708] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
