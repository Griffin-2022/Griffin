GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000125,sig:06,src:021215+009161,time:2271465,execs:373803,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;INSERT INTO t1 (x, t2) VALUES (888, 'ABCDEF');]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    1    1 0             01 usesStmtJournal=0
  16 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 Integer        888    1    0               00 r[1]=888
REG[1] =  i:888
   3 NotNull          1    5    0               00 if r[1]!=NULL goto 5
REG[1] =  i:888
   5 MustBeInt        1    0    0               00 
REG[1] =  i:888
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 String8          0    3    0 ABCDEF        00 r[3]='ABCDEF'
REG[3] =   t6[ABCDEF](8)
   8 Noop             0    0    0               00 uniqueness check for ROWID
   9 Abortable        0    0    0               00 
  10 NotExists        0   12    1               00 intkey=r[1]
REG[1] =  i:888
  12 MakeRecord       2    2    4 DB            00 r[4]=mkrec(r[2..3])
REG[4] =  s9[030019414243444546...ABCDEF]
  13 Insert           0    4    1 t1            31 intkey=r[1] data=r[4]
REG[4] =  s9[030019414243444546...ABCDEF]
REG[1] =  i:888
  14 Halt             0    0    0               00 
SQL: [;INSERT INTO t1 VALUES('0.0',1);]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    1    1 0             01 usesStmtJournal=0
  16 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 String8          0    1    0 0.0           00 r[1]='0.0'
REG[1] =   t3[0.0](8)
   3 NotNull          1    5    0               00 if r[1]!=NULL goto 5
REG[1] =   t3[0.0](8)
   5 MustBeInt        1    0    0               00 
REG[1] =   t3[0.0](8)
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 Integer          1    3    0               00 r[3]=1
REG[3] =  i:1
   8 Noop             0    0    0               00 uniqueness check for ROWID
   9 Abortable        0    0    0               00 
  10 NotExists        0   12    1               00 intkey=r[1]
REG[1] =  i:0
  12 MakeRecord       2    2    4 DB            00 r[4]=mkrec(r[2..3])
REG[4] =  s4[03000F31...1]
  13 Insert           0    4    1 t1            31 intkey=r[1] data=r[4]
REG[4] =  s4[03000F31...1]
REG[1] =  i:0
  14 Halt             0    0    0               00 
SQL: [CREATE INDEX a ON t1(x);]
VDBE Trace:
   0 Init             0   33    0               00 Start at 33
  33 Transaction      0    1    1 0             01 usesStmtJournal=0
  34 Goto             0    1    0               00 
   1 Noop             0   32    0               00 
   2 CreateBtree      0    1    2               00 r[1]=root iDb=0 flags=2
REG[1] =  i:3
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:2
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 a             00 r[4]='a'
REG[4] =   t1[a](8)
   7 String8          0    5    0 t1            00 r[5]='t1'
REG[5] =   t2[t1](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:3
   9 String8          0    7    0 CREATE INDEX a ON t1(x) 00 r[7]='CREATE INDEX a ON t1(x)'
REG[7] =   t23[CREATE INDEX a ](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s38[06170F11013B696E6465786174310343.....;indexat1.C]
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s38[06170F11013B696E6465786174310343.....;indexat1.C]
REG[2] =  i:2
  12 SorterOpen       3    0    1 k(2,,)        00 
  13 OpenRead         1    2    0 2             00 root=2 iDb=0; t1
  14 Rewind           1   20    0               00 
  15 Rowid            1   10    0               00 r[10]=rowid; t1.x
REG[10] =  i:0
  16 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:0
  17 MakeRecord      10    2    9               00 r[9]=mkrec(r[10..11])
REG[9] =  s3[030808...]
  18 SorterInsert     3    9    0               00 key=r[9]
REG[9] =  s3[030808...]
  19 Next             1   15    0               00 
  15 Rowid            1   10    0               00 r[10]=rowid; t1.x
REG[10] =  i:888
  16 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:888
  17 MakeRecord      10    2    9               00 r[9]=mkrec(r[10..11])
REG[9] =  s7[03020203780378....x.x]
  18 SorterInsert     3    9    0               00 key=r[9]
REG[9] =  s7[03020203780378....x.x]
  19 Next             1   15    0               00 
  20 OpenWrite        2    1    0 k(2,,)        11 root=1 iDb=0
  21 SorterSort       3   26    0               00 
  22 SorterData       3    9    2               00 r[9]=data
  23 SeekEnd          2    0    0               00 
  24 IdxInsert        2    9    0               10 key=r[9]
REG[9] =  s3[030808...]
  25 SorterNext       3   22    0               00 
  22 SorterData       3    9    2               00 r[9]=data
  23 SeekEnd          2    0    0               00 
  24 IdxInsert        2    9    0               10 key=r[9]
REG[9] =  s7[03020203780378....x.x]
  25 SorterNext       3   22    0               00 
  26 Close            1    0    0               00 
  27 Close            2    0    0               00 
  28 Close            3    0    0               00 
  29 SetCookie        0    1    2               00 
  30 ParseSchema      0    0    0 name='a' AND type='index' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 0             00 usesStmtJournal=0
  16 String8          0    2    0 a             00 r[2]='a'
REG[2] =   t1[a](8)
  17 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[a](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[a](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[a](8)
REG[1] =   s1[a](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t5[index](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[a](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s23[CREATE INDEX a ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[a](8)
REG[5] =  i:3
REG[6] =   s23[CREATE INDEX a ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  31 Expire           0    1    0               00 
  32 Halt             0    0    0               00 
SQL: [;INSERT INTO t1 (t2, t2, t2) VALUES (1, 'FACTOR', 18);]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    1    2 0             01 usesStmtJournal=0
  16 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 OpenWrite        1    3    0 k(2,,)        00 root=3 iDb=0; a
   3 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:889
   4 SoftNull         2    0    0               00 r[2]=NULL
   5 Integer          1    3    0               00 r[3]=1
REG[3] =  i:1
   6 Affinity         2    2    0 DB            00 affinity(r[2..3])
   7 Noop             0    0    0               00 uniqueness check for a
   8 SCopy            1    5    0               00 r[5]=r[1]; x
REG[5] =  i:889
   9 IntCopy          1    6    0               00 r[6]=r[1]; rowid
REG[6] =  i:889
  10 MakeRecord       5    2    4               00 r[4]=mkrec(r[5..6]); for a
REG[4] =  s7[03020203790379....y.y]
  11 IdxInsert        1    4    5 2             10 key=r[4]
REG[4] =  s7[03020203790379....y.y]
  12 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s4[03000F31...1]
  13 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s4[03000F31...1]
REG[1] =  i:889
  14 Halt             0    0    0               00 
SQL: [;INSERT INTO t1 (x, t2, t2) VALUES (2, 'SWIMM', 18);]
VDBE Trace:
   0 Init             0   22    0               00 Start at 22
  22 Transaction      0    1    2 0             01 usesStmtJournal=0
  23 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 OpenWrite        1    3    0 k(2,,)        00 root=3 iDb=0; a
   3 Integer          2    1    0               00 r[1]=2
REG[1] =  i:2
   4 NotNull          1    6    0               00 if r[1]!=NULL goto 6
REG[1] =  i:2
   6 MustBeInt        1    0    0               00 
REG[1] =  i:2
   7 SoftNull         2    0    0               00 r[2]=NULL
   8 String8          0    3    0 SWIMM         00 r[3]='SWIMM'
REG[3] =   t5[SWIMM](8)
   9 Noop             0    0    0               00 uniqueness check for ROWID
  10 Abortable        0    0    0               00 
  11 NotExists        0   13    1               00 intkey=r[1]
REG[1] =  i:2
  13 Affinity         2    2    0 DB            00 affinity(r[2..3])
  14 Noop             0    0    0               00 uniqueness check for a
  15 SCopy            1    5    0               00 r[5]=r[1]; x
REG[5] =  i:2
  16 IntCopy          1    6    0               00 r[6]=r[1]; rowid
REG[6] =  i:2
  17 MakeRecord       5    2    4               00 r[4]=mkrec(r[5..6]); for a
REG[4] =  s5[0301010202.....]
  18 IdxInsert        1    4    5 2             10 key=r[4]
REG[4] =  s5[0301010202.....]
  19 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s8[0300175357494D4D...SWIMM]
  20 Insert           0    7    1 t1            31 intkey=r[1] data=r[7]
REG[7] =  s8[0300175357494D4D...SWIMM]
REG[1] =  i:2
  21 Halt             0    0    0               00 
SQL: [;
;SELECT x FROM t1 WHERE x>'';]
VDBE Trace:
   0 Init             0   10    0               00 Start at 10
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Goto             0    1    0               00 
   1 OpenRead         1    3    0 k(2,,)        00 root=3 iDb=0; a
   2 Explain          2    0    0 SEARCH TABLE t1 USING COVERING INDEX a (x>?) 00 
   3 String8          0    1    0               00 r[1]=''
REG[1] =   t0[](8)
   4 Affinity         1    1    0 D             00 affinity(r[1])
   5 SeekGT           1    9    1 1             00 key=r[1]
REG[1] =   t0[](8)
   9 Halt             0    0    0               00 
SQL: [;INSERT INTO t1 (x, t2, t2) VALUES (1, 'ING', 18);]
VDBE Trace:
   0 Init             0   22    0               00 Start at 22
  22 Transaction      0    1    2 0             01 usesStmtJournal=0
  23 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 OpenWrite        1    3    0 k(2,,)        00 root=3 iDb=0; a
   3 Integer          1    1    0               00 r[1]=1
REG[1] =  i:1
   4 NotNull          1    6    0               00 if r[1]!=NULL goto 6
REG[1] =  i:1
   6 MustBeInt        1    0    0               00 
REG[1] =  i:1
   7 SoftNull         2    0    0               00 r[2]=NULL
   8 String8          0    3    0 ING           00 r[3]='ING'
REG[3] =   t3[ING](8)
   9 Noop             0    0    0               00 uniqueness check for ROWID
  10 Abortable        0    0    0               00 
  11 NotExists        0   13    1               00 intkey=r[1]
REG[1] =  i:1
  13 Affinity         2    2    0 DB            00 affinity(r[2..3])
  14 Noop             0    0    0               00 uniqueness check for a
  15 SCopy            1    5    0               00 r[5]=r[1]; x
REG[5] =  i:1
  16 IntCopy          1    6    0               00 r[6]=r[1]; rowid
REG[6] =  i:1
  17 MakeRecord       5    2    4               00 r[4]=mkrec(r[5..6]); for a
REG[4] =  s3[030909...]
  18 IdxInsert        1    4    5 2             10 key=r[4]
REG[4] =  s3[030909...]
  19 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s6[030013494E47...ING]
  20 Insert           0    7    1 t1            31 intkey=r[1] data=r[7]
REG[7] =  s6[030013494E47...ING]
REG[1] =  i:1
  21 Halt             0    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f2320e2f859 in __GI_abort () at abort.c:79
#2  0x00007f2320e2f729 in __assert_fail_base (fmt=0x7f2320fc5588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=<optimized out>)
    at assert.c:92
#3  0x00007f2320e40fd6 in __GI___assert_fail (assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=0x223e82 "int sqlite3Select(Parse *, Select *, SelectDest *)") at assert.c:101
#4  0x00000000002fcfa0 in sqlite3Select (pParse=0x7ffd51ed07c0, p=0x263dfb0, pDest=0x7ffd51ecf058) at sqlite3.c:130468
#5  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffd51ed07c0, pExpr=0x263db00) at sqlite3.c:99820
#6  0x000000000034bbfd in sqlite3ExprCodeTarget (pParse=0x7ffd51ed07c0, pExpr=0x263db00, target=7) at sqlite3.c:100770
#7  0x00000000003790ab in codeEqualityTerm (pParse=0x7ffd51ed07c0, pTerm=0x2637470, pLevel=0x26377d0, iEq=1, bRev=0, iTarget=7) at sqlite3.c:136648
#8  0x000000000037a706 in codeAllEqualityTerms (pParse=0x7ffd51ed07c0, pLevel=0x26377d0, bRev=0, nExtraReg=0, pzAff=0x7ffd51ecf5d8) at sqlite3.c:136869
#9  0x0000000000375cb8 in sqlite3WhereCodeOneLoopStart (pParse=0x7ffd51ed07c0, v=0x263ccf0, pWInfo=0x26373e0, iLevel=1, pLevel=0x26377d0, notReady=18446744073709551614) at sqlite3.c:137776
#10 0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7ffd51ed07c0, pTabList=0x264adf0, pWhere=0x263d650, pOrderBy=0x0, pResultSet=0x2647f10, wctrlFlags=0, iAuxArg=320) at sqlite3.c:145128
#11 0x00000000002fdcea in sqlite3Select (pParse=0x7ffd51ed07c0, p=0x263d1a0, pDest=0x7ffd51ecfbb0) at sqlite3.c:130695
#12 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffd51ecfde0, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffd51ed07c0) at sqlite3.c:151581
#13 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffd51ecfde0, yymajor=1, yyminor=...) at sqlite3.c:152877
#14 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffd51ed07c0, 
    zSql=0x264e791 ";DROP TABLE IF EXISTS t1;;CREATE TABLE b(c INT PRIMARY KEY, t1i1, t2i1);;SELECT t1i1 FROM b ORDER BY t1i1, t1i1;;INSERT INTO b VALUES(NULL,'one','t2i1');;REINDEX;;CREATE INDEX temptable ON b(c);", 
    pzErrMsg=0x7ffd51ed09a0) at sqlite3.c:154013
#15 0x00000000002a1683 in sqlite3Prepare (db=0x26312b0, 
    zSql=0x2632074 ";\n;SELECT\n    SrcWord, t1.x\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.x= (\n      SELECT BeginningId FROM (\n        SELECT"..., nBytes=547, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffd51ed0ad8, pzTail=0x7ffd51ed0ac0) at sqlite3.c:124303
#16 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x26312b0, 
    zSql=0x2632074 ";\n;SELECT\n    SrcWord, t1.x\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.x= (\n      SELECT BeginningId FROM (\n        SELECT"..., nBytes=547, prepFlags=128, pOld=0x0, ppStmt=0x7ffd51ed0ad8, pzTail=0x7ffd51ed0ac0) at sqlite3.c:124403
#17 0x000000000029247f in sqlite3_prepare_v2 (db=0x26312b0, 
    zSql=0x2632074 ";\n;SELECT\n    SrcWord, t1.x\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.x= (\n      SELECT BeginningId FROM (\n        SELECT"..., nBytes=547, ppStmt=0x7ffd51ed0ad8, pzTail=0x7ffd51ed0ac0) at sqlite3.c:124487
#18 0x0000000000256bd0 in main (argc=1, argv=0x7ffd51ed0c88) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 52046] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
