GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000293,sig:06,src:023615+020847,time:6578266,execs:834588,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;BEGIN;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 AutoCommit       0    0    0               00 
SQL: [;INSERT INTO t1 VALUES('IV', 'sixteen');]
VDBE Trace:
   0 Init             0    9    0               00 Start at 9
   9 Transaction      0    1    1 0             01 usesStmtJournal=0
  10 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  11 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 String8          0    2    0 IV            00 r[2]='IV'
REG[2] =   t2[IV](8)
   4 String8          0    3    0 sixteen       00 r[3]='sixteen'
REG[3] =   t7[sixteen](8)
   5 MakeRecord       2    2    4               00 r[4]=mkrec(r[2..3])
REG[4] =  s12[03111B49567369787465656E...IVsixteen](8)
   6 Insert           0    4    1 t1            1B intkey=r[1] data=r[4]
REG[4] =  s12[03111B49567369787465656E...IVsixteen](8)
REG[1] =  i:1
   7 Noop             0    0    0               00 
   8 Halt             0    0    0               00 
SQL: [PRAGMA journal_mode 
;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 JournalMode      0    1   -1               00 
REG[1] =   t6[memory](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   t6[memory](8)
   3 Halt             0    0    0               00 
SQL: [;
;INSERT INTO t1 SELECT t2, t2+10 FROM t1;]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    1 0             01 usesStmtJournal=0
  29 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  30 Integer         10    6    0               00 r[6]=10
REG[6] =  i:10
  31 Goto             0    1    0               00 
   1 InitCoroutine    4   11    2               00 
  11 OpenEphemeral    1    2    0               00 nColumn=2
  12 Yield            4   17    0               00 
REG[4] =  i:1
REG[4] =  i:12
   2 OpenRead         0    2    0 2             00 root=2 iDb=0; t1
   3 Explain          0    0    0 SCAN TABLE t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    1    2               00 r[2]=t1.t2
REG[2] =   s7[sixteen](8)
   6 Add              6    2    3               00 r[3]=r[6]+r[2]
REG[6] =  i:10
REG[2] =   s7[sixteen](8)
REG[3] =  i:10
   7 Yield            4    0    0               00 
REG[4] =  i:12
REG[4] =  i:7
  13 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s11[031B017369787465656E0A...sixteen.](8)
  14 NewRowid         1    8    0               00 r[8]=rowid
REG[8] =  i:1
  15 Insert           1    7    8               00 intkey=r[8] data=r[7]
REG[7] =  s11[031B017369787465656E0A...sixteen.](8)
REG[8] =  i:1
  16 Goto             0   12    0               00 
  12 Yield            4   17    0               00 
REG[4] =  i:7
REG[4] =  i:12
   8 Next             0    5    0               01 
   9 Close            0    0    0               00 
  10 EndCoroutine     4    0    0               00 
REG[4] =  i:12
  17 OpenWrite        2    2    0 2             00 root=2 iDb=0; t1
  18 Rewind           1   25    0               00 
  19 NewRowid         2    1    0               00 r[1]=rowid
REG[1] =  i:2
  20 Column           1    0    2               00 r[2]=
REG[2] =   s7[sixteen](8)
  21 Column           1    1    3               00 r[3]=
REG[3] =  i:10
  22 MakeRecord       2    2    8               00 r[8]=mkrec(r[2..3])
REG[8] =  s11[031B017369787465656E0A...sixteen.](8)
  23 Insert           2    8    1 t1            1B intkey=r[1] data=r[8]
REG[8] =  s11[031B017369787465656E0A...sixteen.](8)
REG[1] =  i:2
  24 Next             1   19    0               00 
  25 Close            1    0    0               00 
  26 Noop             2    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;CREATE TRIGGER a BEFORE INSERT ON t1 BEGIN
      UPDATE t1 SET x=x+1 WHERE t2=new.x;
      INSERT OR IGNORE INTO t1 VALUES(new.x,1);
    END;]
VDBE Trace:
   0 Init             0   14    0               00 Start at 14
  14 Transaction      0    1    1 0             01 usesStmtJournal=0
  15 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  16 Goto             0    1    0               00 
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   3 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
   4 String8          0    3    0 a             00 r[3]='a'
REG[3] =   t1[a](8)
   5 String8          0    4    0 t1            00 r[4]='t1'
REG[4] =   t2[t1](8)
   6 Integer          0    5    0               00 r[5]=0
REG[5] =  i:0
   7 String8          0    6    0 CREATE TRIGGER a BEFORE INSERT ON t1 BEGIN
      UPDATE t1 SET x=x+1 WHERE t2=new.x;
      INSERT OR IGNORE INTO t1 VALUES(new.x,1);
    END 00 r[6]='CREATE TRIGGER a BEFORE INSERT ON t1 BEGIN
      UPDATE t1 SET x=x+1 WHERE t2=new.x;
      IN
REG[6] =   t140[CREATE TRIGGER ](8)
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
REG[7] =  s157[071B0F11088225747269676765726174......%triggerat](8)
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
REG[7] =  s157[071B0F11088225747269676765726174......%triggerat](8)
REG[1] =  i:2
  10 Close            0    0    0               00 
  11 SetCookie        0    1    2               00 
  12 ParseSchema      0    0    0 type='trigger' AND name='a' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    2 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
  19 String8          0    4    0 a             00 r[4]='a'
REG[4] =   t1[a](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    3               00 r[3]=sqlite_master.name
REG[3] =   s1[a](8)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t1[a](8)
REG[3] =   s1[a](8)
   9 Copy             3    5    0               00 r[5]=r[3]
REG[5] =   s1[a](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:0
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s140[CREATE TRIGGER ](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s1[a](8)
REG[6] =  i:0
REG[7] =   s140[CREATE TRIGGER ](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  13 Halt             0    0    0               00 
SQL: [PRAGMA journal_mode 
;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 JournalMode      0    1   -1               00 
REG[1] =   t6[memory](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   t6[memory](8)
   3 Halt             0    0    0               00 
SQL: [INSERT INTO t1(x) VALUES(zeroblob(10000));]
VDBE Trace:
   0 Init             0   13    0               00 Start at 13
  13 Transaction      0    1    2 0             01 usesStmtJournal=0
  14 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  15 Integer       10000    7    0               00 r[7]=10000
REG[7] =  i:10000
  16 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
  17 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 Integer         -1    4    0               00 r[4]=-1
REG[4] =  i:-1
   3 Function0        1    7    5 zeroblob(1)   01 r[5]=func(r[7])
REG[7] =  i:10000
REG[5] =  s0[](8)+10000z
   4 Copy             5    8    0               00 r[8]=r[5]
REG[8] =  s10000[00000000000000000000000000000000................](8)
   5 Null             0    6    0               00 r[6]=NULL
REG[6] =  NULL
   6 Program          1   11    9 program       01 Call: a.default
   0 Init             0    0    0 -- TRIGGER a  00 Start at 0; Start: a.default (BEFORE INSERT ON t1)
   1 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
   2 OpenRead         0    2    0 2             00 root=2 iDb=0; t1
   3 Explain          0    0    0 SCAN TABLE t1 00 
   4 Rewind           0   11    0               00 
   5 Column           0    1    5               00 r[5]=t1.t2
REG[5] =   s7[sixteen](8)
   6 Param            4    6    0               00 new.x -> $6
REG[6] =  e0[](8)+10000z
   7 Ne               6   10    5 (BINARY)      51 if r[6]!=r[5] goto 10
REG[6] =  e0[](8)+10000z
REG[5] =   s7[sixteen](8)
  10 Next             0    5    0               01 
   5 Column           0    1    5               00 r[5]=t1.t2
REG[5] =  i:10
   6 Param            4    6    0               00 new.x -> $6
REG[6] =  e0[](8)+10000z
   7 Ne               6   10    5 (BINARY)      51 if r[6]!=r[5] goto 10
REG[6] =  e0[](8)+10000z
REG[5] =  i:10
  10 Next             0    5    0               01 
  11 Close            0    0    0               00 
  12 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
  13 RowSetRead       1   22    2               00 r[2]=rowset(1)
REG[1] =  NULL
REG[2] =  NULL
  22 Close            0    0    0               00 
  23 ResetCount       0    0    0               00 
  24 OpenWrite        1    2    0 2             00 root=2 iDb=0; t1
  25 Integer         -1   10    0               00 r[10]=-1
REG[10] =  i:-1
  26 Param            4   11    0               00 new.x -> $11
REG[11] =  e0[](8)+10000z
  27 Copy            11   13    0               00 r[13]=r[11]
REG[13] =  s10000[00000000000000000000000000000000................](8)
  28 Integer          1   12    0               00 r[12]=1
REG[12] =  i:1
  29 Copy            12   14    0               00 r[14]=r[12]
REG[14] =  i:1
  30 Program          7   36   15 program       01 Call: a.ignore
  31 NewRowid         1    7    0               00 r[7]=rowid
REG[7] =  i:3
  32 Copy            13    8    0               00 r[8]=r[13]
REG[8] =  s10000[00000000000000000000000000000000................](8)
  33 Copy            14    9    0               00 r[9]=r[14]
REG[9] =  i:1
  34 MakeRecord       8    2   16               00 r[16]=mkrec(r[8..9])
REG[16] =  s10005[05819C2C090000000000000000000000...,............](8)
  35 Insert           1   16    7 t1            1B intkey=r[7] data=r[16]
REG[16] =  s10005[05819C2C090000000000000000000000...,............](8)
REG[7] =  i:3
  36 Close            1    0    0               00 
  37 ResetCount       0    0    0               00 
  38 Halt             0    0    0               00 End: a.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:4
   8 Copy             8    2    0               00 r[2]=r[8]
REG[2] =  s10000[00000000000000000000000000000000................](8)
   9 MakeRecord       2    2   10               00 r[10]=mkrec(r[2..3])
REG[10] =  s10005[05819C2C000000000000000000000000...,............](8)
  10 Insert           0   10    1 t1            1B intkey=r[1] data=r[10]
REG[10] =  s10005[05819C2C000000000000000000000000...,............](8)
REG[1] =  i:4
  11 Noop             0    0    0               00 
  12 Halt             0    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f305e07f859 in __GI_abort () at abort.c:79
#2  0x00007f305e07f729 in __assert_fail_base (fmt=0x7f305e215588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", 
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=<optimized out>) at assert.c:92
#3  0x00007f305e090fd6 in __GI___assert_fail (
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=0x21e154 "int sqlite3VdbeCheckMemInvariants(Mem *)") at assert.c:101
#4  0x00000000002795e3 in sqlite3VdbeCheckMemInvariants (p=0x2695958) at sqlite3.c:68292
#5  0x00000000002c8632 in releaseMemArray (p=0x2695958, N=<optimized out>) at sqlite3.c:71417
#6  0x00000000002e366e in sqlite3VdbeHalt (p=0x25440f0) at sqlite3.c:71458
#7  0x00000000003e1666 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:77673
#8  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#9  0x000000000024b5e9 in main (argc=1, argv=0x7ffdf0491e18) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 42470] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
