GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000288,sig:06,src:020847+012765,time:6399727,execs:811988,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;
;INSERT INTO t1 SELECT x, x+10 FROM t1;]
VDBE Trace:
   0 Init             0   33    0               00 Start at 33
  33 Transaction      0    1    2 0             01 usesStmtJournal=1
  34 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  35 Integer         10    6    0               00 r[6]=10
REG[6] =  i:10
  36 Goto             0    1    0               00 
   1 InitCoroutine    4   11    2               00 
  11 OpenEphemeral    1    2    0               00 nColumn=2
  12 Yield            4   17    0               00 
REG[4] =  i:1
REG[4] =  i:12
   2 OpenRead         0    2    0 0             00 root=2 iDb=0; t1
   3 Explain          0    0    0 SCAN TABLE t1 00 
   4 Rewind           0    9    0               00 
   5 Rowid            0    2    0               00 r[2]=rowid
REG[2] =  i:0
   6 Add              6    2    3               00 r[3]=r[6]+r[2]
REG[6] =  i:10
REG[2] =  i:0
REG[3] =  i:10
   7 Yield            4    0    0               00 
REG[4] =  i:12
REG[4] =  i:7
  13 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s4[0308010A....](8)
  14 NewRowid         1    8    0               00 r[8]=rowid
REG[8] =  i:1
  15 Insert           1    7    8               00 intkey=r[8] data=r[7]
REG[7] =  s4[0308010A....](8)
REG[8] =  i:1
  16 Goto             0   12    0               00 
  12 Yield            4   17    0               00 
REG[4] =  i:7
REG[4] =  i:12
   8 Next             0    5    0               01 
   5 Rowid            0    2    0               00 r[2]=rowid
REG[2] =  i:2
   6 Add              6    2    3               00 r[3]=r[6]+r[2]
REG[6] =  i:10
REG[2] =  i:2
REG[3] =  i:12
   7 Yield            4    0    0               00 
REG[4] =  i:12
REG[4] =  i:7
  13 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s5[030101020C.....](8)
  14 NewRowid         1    8    0               00 r[8]=rowid
REG[8] =  i:2
  15 Insert           1    7    8               00 intkey=r[8] data=r[7]
REG[7] =  s5[030101020C.....](8)
REG[8] =  i:2
  16 Goto             0   12    0               00 
  12 Yield            4   17    0               00 
REG[4] =  i:7
REG[4] =  i:12
   8 Next             0    5    0               01 
   5 Rowid            0    2    0               00 r[2]=rowid
REG[2] =  i:5
   6 Add              6    2    3               00 r[3]=r[6]+r[2]
REG[6] =  i:10
REG[2] =  i:5
REG[3] =  i:15
   7 Yield            4    0    0               00 
REG[4] =  i:12
REG[4] =  i:7
  13 MakeRecord       2    2    7               00 r[7]=mkrec(r[2..3])
REG[7] =  s5[030101050F.....](8)
  14 NewRowid         1    8    0               00 r[8]=rowid
REG[8] =  i:3
  15 Insert           1    7    8               00 intkey=r[8] data=r[7]
REG[7] =  s5[030101050F.....](8)
REG[8] =  i:3
  16 Goto             0   12    0               00 
  12 Yield            4   17    0               00 
REG[4] =  i:7
REG[4] =  i:12
   8 Next             0    5    0               01 
   9 Close            0    0    0               00 
  10 EndCoroutine     4    0    0               00 
REG[4] =  i:12
  17 OpenWrite        2    2    0 2             00 root=2 iDb=0; t1
  18 Rewind           1   30    0               00 
  19 Column           1    0    1               00 r[1]=
REG[1] =  i:0
  20 NotNull          1   22    0               00 if r[1]!=NULL goto 22
REG[1] =  i:0
  22 MustBeInt        1    0    0               00 
REG[1] =  i:0
  23 SoftNull         2    0    0               00 r[2]=NULL
  24 Column           1    1    3               00 r[3]=
REG[3] =  i:10
  25 NotExists        2   27    1               00 intkey=r[1]
REG[1] =  i:0
  26 Halt          1555    2    0 t1.x          02 
SQL: [;CREATE TRIGGER t2i1 BEFORE INSERT ON t1 BEGIN
      UPDATE t1 SET t2=t2+1 WHERE t2=new.t2;
      INSERT OR IGNORE INTO t1 VALUES(new.t2,1);
    END;]
VDBE Trace:
   0 Init             0   14    0               00 Start at 14
  14 Transaction      0    1    2 0             01 usesStmtJournal=0
  15 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  16 Goto             0    1    0               00 
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:3
   3 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
   4 String8          0    3    0 t2i1          00 r[3]='t2i1'
REG[3] =   t4[t2i1](8)
   5 String8          0    4    0 t1            00 r[4]='t1'
REG[4] =   t2[t1](8)
   6 Integer          0    5    0               00 r[5]=0
REG[5] =  i:0
   7 String8          0    6    0 CREATE TRIGGER t2i1 BEFORE INSERT ON t1 BEGIN
      UPDATE t1 SET t2=t2+1 WHERE t2=new.t2;
      INSERT OR IGNORE INTO t1 VALUES(new.t2,1);
    END 00 r[6]='CREATE TRIGGER t2i1 BEFORE INSERT ON t1 BEGIN
      UPDATE t1 SET t2=t2+1 WHERE t2=new.t2;
  
REG[6] =   t147[CREATE TRIGGER ](8)
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
REG[7] =  s167[071B1511088233747269676765727432......3triggert2](8)
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
REG[7] =  s167[071B1511088233747269676765727432......3triggert2](8)
REG[1] =  i:3
  10 Close            0    0    0               00 
  11 SetCookie        0    1    3               00 
  12 ParseSchema      0    0    0 type='trigger' AND name='t2i1' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    3 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
  19 String8          0    4    0 t2i1          00 r[4]='t2i1'
REG[4] =   t4[t2i1](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    3               00 r[3]=sqlite_master.name
REG[3] =   s4[t2i1](8)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t4[t2i1](8)
REG[3] =   s4[t2i1](8)
   9 Copy             3    5    0               00 r[5]=r[3]
REG[5] =   s4[t2i1](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:0
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s147[CREATE TRIGGER ](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s4[t2i1](8)
REG[6] =  i:0
REG[7] =   s147[CREATE TRIGGER ](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  13 Halt             0    0    0               00 
SQL: [INSERT INTO t1(t2) VALUES(zeroblob(10000));]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    1    3 0             01 usesStmtJournal=0
  16 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  17 Integer       10000    7    0               00 r[7]=10000
REG[7] =  i:10000
  18 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
   2 Integer         -1    4    0               00 r[4]=-1
REG[4] =  i:-1
   3 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
   4 Function0        1    7    6 zeroblob(1)   01 r[6]=func(r[7])
REG[7] =  i:10000
REG[6] =  s0[](8)+10000z
   5 Copy             6    8    0               00 r[8]=r[6]
REG[8] =  s10000[00000000000000000000000000000000................](8)
   6 Affinity         5    2    0 DB            00 affinity(r[5..6])
   7 Program          1   13    9 program       01 Call: t2i1.default
   0 Init             0    0    0 -- TRIGGER t2i1 00 Start at 0; Start: t2i1.default (BEFORE INSERT ON t1)
   1 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
   2 OpenRead         0    2    0 2             00 root=2 iDb=0; t1
   3 Explain          0    0    0 SCAN TABLE t1 00 
   4 Rewind           0   11    0               00 
   5 Column           0    1    5               00 r[5]=t1.t2
REG[5] =  NULL
   6 Param            5    6    0               00 new.t2 -> $6
REG[6] =  e0[](8)+10000z
   7 Ne               6   10    5 (BINARY)      52 if r[6]!=r[5] goto 10
REG[6] =  e0[](8)+10000z
REG[5] =  NULL
  10 Next             0    5    0               01 
   5 Column           0    1    5               00 r[5]=t1.t2
REG[5] =   s3[two](8)
   6 Param            5    6    0               00 new.t2 -> $6
REG[6] =  e0[](8)+10000z
   7 Ne               6   10    5 (BINARY)      52 if r[6]!=r[5] goto 10
REG[6] =  e0[](8)+10000z
REG[5] =   s3[two](8)
  10 Next             0    5    0               01 
   5 Column           0    1    5               00 r[5]=t1.t2
REG[5] =   s4[five](8)
   6 Param            5    6    0               00 new.t2 -> $6
REG[6] =  e0[](8)+10000z
   7 Ne               6   10    5 (BINARY)      52 if r[6]!=r[5] goto 10
REG[6] =  e0[](8)+10000z
REG[5] =   s4[five](8)
  10 Next             0    5    0               01 
  11 Close            0    0    0               00 
  12 OpenWrite        0    2    0 2             00 root=2 iDb=0; t1
  13 RowSetRead       1   22    2               00 r[2]=rowset(1)
REG[1] =  NULL
REG[2] =  NULL
  22 Close            0    0    0               00 
  23 ResetCount       0    0    0               00 
  24 OpenWrite        1    2    0 2             00 root=2 iDb=0; t1
  25 Param            5   10    0               00 new.t2 -> $10
REG[10] =  e0[](8)+10000z
  26 NotNull         10   28    0               00 if r[10]!=NULL goto 28
REG[10] =  e0[](8)+10000z
  28 MustBeInt       10    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fe867263859 in __GI_abort () at abort.c:79
#2  0x00007fe867263729 in __assert_fail_base (fmt=0x7fe8673f9588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", 
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=<optimized out>) at assert.c:92
#3  0x00007fe867274fd6 in __GI___assert_fail (
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=0x21e154 "int sqlite3VdbeCheckMemInvariants(Mem *)") at assert.c:101
#4  0x00000000002795e3 in sqlite3VdbeCheckMemInvariants (p=0x23944e8) at sqlite3.c:68292
#5  0x00000000002c8632 in releaseMemArray (p=0x23944e8, N=<optimized out>) at sqlite3.c:71417
#6  0x00000000002e366e in sqlite3VdbeHalt (p=0x231c7e0) at sqlite3.c:71458
#7  0x00000000003df61a in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:83564
#8  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#9  0x000000000024b5e9 in main (argc=1, argv=0x7ffdbff46768) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 42435] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
