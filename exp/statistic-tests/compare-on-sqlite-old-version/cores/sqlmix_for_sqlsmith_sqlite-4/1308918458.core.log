GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000456,sig:06,src:023150+021249,time:17887798,execs:3067920,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;PRAGMA integrity_check;]
VDBE Trace:
   0 Init             0  107    0               00 Start at 107
 107 Transaction      0    0    2 0             01 usesStmtJournal=0
 108 Transaction      1    0    0 0             01 usesStmtJournal=0
 109 TableLock        0    2    0 v0            00 iDb=0 root=2 write=0
 110 Goto             0    1    0               00 
   1 Integer        100    1    0               00 r[1]=100
REG[1] =  i:100
   2 IfPos            1    4    0               00 if r[1]>0 then r[1]-=0, goto 4
REG[1] =  i:100
   4 IntegrityCk      2    4    1 [4]           00 
   5 IsNull           2   10    0               00 if r[2]==NULL goto 10
REG[2] =  NULL
  10 IfPos            1   12    0               00 if r[1]>0 then r[1]-=0, goto 12
REG[1] =  i:100
  12 OpenRead         1    2    0 8             00 root=2 iDb=0; v0
  13 OpenRead         2    4    0 k(2,,)        00 root=4 iDb=0; t1b
  14 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  15 Integer          0    8    0               00 r[8]=0
REG[8] =  i:0
  16 Rewind           1   85    0               00 
  17 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:0
  18 Column           1    1    3 0             80 r[3]=v0.v2
REG[3] =  i:26
  19 NotNull          3   25    0               00 if r[3]!=NULL goto 25
REG[3] =  i:26
  25 Column           1    2    3 N             80 r[3]=v0.v3
REG[3] =   s1[N](8)
  26 NotNull          3   32    0               00 if r[3]!=NULL goto 32
REG[3] =   s1[N](8)
  32 Column           1    3    3 0             00 r[3]=v0.x
REG[3] =  i:0
  33 RealAffinity     3    0    0               80 
REG[3] =  i:0
  34 NotNull          3   40    0               00 if r[3]!=NULL goto 40
REG[3] =  r:0
  40 Column           1    4    3 0             00 r[3]=v0.xyz
REG[3] =  i:0
  41 RealAffinity     3    0    0               80 
REG[3] =  i:0
  42 NotNull          3   48    0               00 if r[3]!=NULL goto 48
REG[3] =  r:0
  48 Column           1    5    3 0             00 r[3]=v0.t1
REG[3] =  i:0
  49 RealAffinity     3    0    0               80 
REG[3] =  i:0
  50 NotNull          3   56    0               00 if r[3]!=NULL goto 56
REG[3] =  r:0
  56 Column           1    6    3 2010          80 r[3]=v0.a
REG[3] =  i:2010
  57 NotNull          3   63    0               00 if r[3]!=NULL goto 63
REG[3] =  i:2010
  63 Column           1    7    3 0             80 r[3]=v0.b
REG[3] =  i:0
  64 NotNull          3   70    0               00 if r[3]!=NULL goto 70
REG[3] =  i:0
  70 Column           1    1   10 0             00 r[10]=v0.v2
REG[10] =  i:26
  71 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:-9223372036854775808
  72 AddImm           8    1    0               00 r[8]=r[8]+1
REG[8] =  i:0
  73 Found            2   84   10 2             00 key=r[10..11]
REG[10] =  i:26
REG[11] =  i:-9223372036854775808
  84 Next             1   17    0               00 
  85 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
  86 IfPos            1   88    0               00 if r[1]>0 then r[1]-=0, goto 88
REG[1] =  i:100
  88 Count            2    3    0               00 r[3]=count()
REG[3] =  i:1
  89 Eq               8   94    3               90 if r[8]==r[3] goto 94
REG[8] =  i:1
REG[3] =  i:1
  94 IfPos            1   96    0               00 if r[1]>0 then r[1]-=0, goto 96
REG[1] =  i:100
  96 IntegrityCk      2    1    1 ]             01 
  97 IsNull           2  102    0               00 if r[2]==NULL goto 102
REG[2] =  NULL
 102 AddImm           1 -100    0               00 r[1]=r[1]+-100
REG[1] =  i:100
 103 If               1  106    0               00 
REG[1] =  i:0
 104 String8          0    3    0 ok            00 r[3]='ok'
REG[3] =   t2[ok](8)
 105 ResultRow        3    1    0               00 output=r[3]
REG[3] =   t2[ok](8)
 106 Halt             0    0    0               00 
SQL: [;CREATE INDEX abc ON v0 (t1);]
VDBE Trace:
   0 Init             0   35    0               00 Start at 35
  35 Transaction      0    1    2 0             01 usesStmtJournal=0
  36 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  37 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  38 Goto             0    1    0               00 
   1 Noop             0   34    0               00 
   2 CreateIndex      0    1    0               00 r[1]=root iDb=0
REG[1] =  i:5
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:4
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 abc           00 r[4]='abc'
REG[4] =   t3[abc](8)
   7 String8          0    5    0 v0            00 r[5]='v0'
REG[5] =   t2[v0](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:5
   9 String8          0    7    0 CREATE INDEX abc ON v0 (t1) 00 r[7]='CREATE INDEX abc ON v0 (t1)'
REG[7] =   t27[CREATE INDEX ab](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s44[061713110143696E6465786162637630.....Cindexabcv0](8)
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s44[061713110143696E6465786162637630.....Cindexabcv0](8)
REG[2] =  i:4
  12 Close            0    0    0               00 
  13 SorterOpen       3    0    1 k(2,,)        00 
  14 OpenRead         1    2    0 8             00 root=2 iDb=0; v0
  15 Rewind           1   22    0               00 
  16 Column           1    5   10 0             00 r[10]=v0.t1
REG[10] =  i:0
  17 Noop            10    0    0               00 
  18 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:-9223372036854775808
  19 MakeRecord      10    2    9               00 r[9]=mkrec(r[10..11])
REG[9] =  s11[0308068000000000000000...........](8)
  20 SorterInsert     3    9    0               00 
REG[9] =  s11[0308068000000000000000...........](8)
  21 Next             1   16    0               00 
  22 OpenWrite        2    1    0 k(2,,)        11 root=1 iDb=0
  23 SorterSort       3   28    0               00 
  24 SorterData       3    9    2               00 r[9]=data
  25 Last             2    0   -1               00 
  26 IdxInsert        2    9    0               10 key=r[9]
REG[9] =  s11[0308068000000000000000...........](8)
  27 SorterNext       3   24    0               00 
  28 Close            1    0    0               00 
  29 Close            2    0    0               00 
  30 Close            3    0    0               00 
  31 SetCookie        0    1    3               00 
  32 ParseSchema      0    0    0 name='abc' AND type='index' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    3 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 abc           00 r[2]='abc'
REG[2] =   t3[abc](8)
  19 String8          0    4    0 index         00 r[4]='index'
REG[4] =   t5[index](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[v0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t3[abc](8)
REG[1] =   s2[v0](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t3[abc](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[t1b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t3[abc](8)
REG[1] =   s3[t1b](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[abc](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t3[abc](8)
REG[1] =   s3[abc](8)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s5[index](8)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t5[index](8)
REG[3] =   s5[index](8)
   9 Copy             1    5    0               00 r[5]=r[1]
REG[5] =   s3[abc](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:5
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s27[CREATE INDEX ab](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s3[abc](8)
REG[6] =  i:5
REG[7] =   s27[CREATE INDEX ab](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  33 Expire           0    0    0               00 
  34 Halt             0    0    0               00 
SQL: [;INSERT INTO v0(oid,v1,v1) VALUES(549755813888,35,'0000008000000000');]
VDBE Trace:
   0 Init             0   51    0               00 Start at 51
  51 Transaction      0    1    3 0             01 usesStmtJournal=0
  52 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  53 TableLock        0    3    1 sqlite_sequence 00 iDb=0 root=3 write=1
  54 OpenRead         0    3    0 2             00 root=3 iDb=0; sqlite_sequence
  55 String8          0    1    0 v0            00 r[1]='v0'
REG[1] =   t2[v0](8)
  56 Null             0    2    3               00 r[2..3]=NULL
REG[2] =  NULL
  57 Rewind           0   65    0               00 
  58 Column           0    0    2               00 r[2]=
REG[2] =   s2[v0](8)
  59 Ne               1   63    2               10 if r[1]!=r[2] goto 63
REG[1] =   t2[v0](8)
REG[2] =   s2[v0](8)
  60 Rowid            0    3    0               00 r[3]=rowid
REG[3] =  i:1
  61 Column           0    1    2               00 r[2]=
REG[2] =  i:0
  62 Goto             0   65    0               00 
  65 Close            0    0    0               00 
  66 Integer          0    6    0               00 r[6]=0
REG[6] =  i:0
  67 String8          0    7    0 N             00 r[7]='N'
REG[7] =   t1[N](8)
  68 Real             0    8    0 0             00 r[8]=0
REG[8] =  r:0
  69 Real             0    9    0 0             00 r[9]=0
REG[9] =  r:0
  70 Real             0   10    0 0             00 r[10]=0
REG[10] =  r:0
  71 Integer       2010   11    0               00 r[11]=2010
REG[11] =  i:2010
  72 Integer          0   12    0               00 r[12]=0
REG[12] =  i:0
  73 String8          0   17    0 Y             00 r[17]='Y'
REG[17] =   t1[Y](8)
  74 String8          0   18    0 N             00 r[18]='N'
REG[18] =   t1[N](8)
  75 Integer          0   19    0               00 r[19]=0
REG[19] =  i:0
  76 Integer         12   20    0               00 r[20]=12
REG[20] =  i:12
  77 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 8             00 root=2 iDb=0; v0
   2 OpenWrite        1    5    0 k(2,,)        00 root=5 iDb=0; abc
   3 OpenWrite        2    4    0 k(2,,)        00 root=4 iDb=0; t1b
   4 String8          0    4    0 0000008000000000 00 r[4]='0000008000000000'
REG[4] =   t16[000000800000000](8)
   5 NotNull          4    7    0               00 if r[4]!=NULL goto 7
REG[4] =   t16[000000800000000](8)
   7 MustBeInt        4    0    0               00 
REG[4] =   t16[000000800000000](8)
   8 MemMax           2    4    0               00 r[2]=max(r[2],r[4])
REG[4] =  i:8000000000
   9 SoftNull         5    0    0               00 r[5]=NULL
  10 HaltIfNull    1299    2    6 v0.v2         01 if r[6]=null halt
REG[6] =  i:0
  11 HaltIfNull    1299    2    7 v0.v3         01 if r[7]=null halt
REG[7] =   t1[N](8)
  12 HaltIfNull    1299    2    8 v0.x          01 if r[8]=null halt
REG[8] =  r:0
  13 HaltIfNull    1299    2    9 v0.xyz        01 if r[9]=null halt
REG[9] =  r:0
  14 HaltIfNull    1299    2   10 v0.t1         01 if r[10]=null halt
REG[10] =  r:0
  15 HaltIfNull    1299    2   11 v0.a          01 if r[11]=null halt
REG[11] =  i:2010
  16 HaltIfNull    1299    2   12 v0.b          01 if r[12]=null halt
REG[12] =  i:0
  17 Noop             0    0    0               00 begin IN expr
  18 SCopy            7   15    0               00 r[15]=r[7]
REG[15] =   t1[N](8)
  19 BitAnd          15   15   16               00 r[16]=r[15]&r[15]
REG[15] =   t1[N](8)
REG[15] =   t1[N](8)
REG[16] =  i:0
  20 Eq              15   24   17 (BINARY)      42 if r[15]==r[17] goto 24
REG[15] =   t1[N](8)
REG[17] =   t1[Y](8)
  21 Eq              15   24   18 (BINARY)      42 if r[15]==r[18] goto 24
REG[15] =   t1[N](8)
REG[18] =   t1[N](8)
  24 Goto             0   26    0               00 
  26 Lt              19   28   12 (BINARY)      44 if r[19]<r[12] goto 28
REG[19] =  i:0
REG[12] =  i:0
  27 Le              20   29   12 (BINARY)      54 if r[20]<=r[12] goto 29
REG[20] =  i:12
REG[12] =  i:0
  29 NotExists        0   31    4               00 intkey=r[4]
REG[4] =  i:8000000000
  31 Affinity         5    8    0 DDBEEEDD      00 affinity(r[5..12])
  32 SCopy           10   21    0               00 r[21]=r[10]; t1
REG[21] =  i:0
  33 IntCopy          4   22    0               00 r[22]=r[4]; rowid
REG[22] =  i:8000000000
  34 MakeRecord      21    2   13               00 r[13]=mkrec(r[21..22]); for abc
REG[13] =  s9[0308050001DCD65000.......P.](8)
  35 SCopy            6   21    0               00 r[21]=r[6]; v2
REG[21] =  i:0
  36 MakeRecord      21    2   14               00 r[14]=mkrec(r[21..22]); for t1b
REG[14] =  s9[0308050001DCD65000.......P.](8)
  37 IdxInsert        1   13    0               10 key=r[13]
REG[13] =  s9[0308050001DCD65000.......P.](8)
  38 IdxInsert        2   14    0               10 key=r[14]
REG[14] =  s9[0308050001DCD65000.......P.](8)
  39 MakeRecord       5    8   15               00 r[15]=mkrec(r[5..12])
REG[15] =  s12[0900080F08080802084E07DA.........N..](8)
  40 Insert           0   15    4 v0            13 intkey=r[4] data=r[15]
REG[15] =  s12[0900080F08080802084E07DA.........N..](8)
REG[4] =  i:8000000000
  41 Close            0    0    0               00 
  42 Close            1    0    0               00 
  43 Close            2    0    0               00 
  44 OpenWrite        0    3    0 2             00 root=3 iDb=0; sqlite_sequence
  45 NotNull          3   47    0               00 if r[3]!=NULL goto 47
REG[3] =  i:1
  47 MakeRecord       1    2   16               00 r[16]=mkrec(r[1..2])
REG[16] =  s11[03110576300001DCD65000...v0....P.](8)
  48 Insert           0   16    3               08 intkey=r[3] data=r[16]
REG[16] =  s11[03110576300001DCD65000...v0....P.](8)
REG[3] =  i:1
  49 Noop             0    0    0               00 
  50 Halt             0    0    0               00 
SQL: [;SELECT t1<=t1 FROM v0;]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    3 0             01 usesStmtJournal=0
  12 TableLock        0    2    0 v0            00 iDb=0 root=2 write=0
  13 Goto             0    1    0               00 
   1 OpenRead         1    5    0 k(2,,)        00 root=5 iDb=0; abc
   2 Explain          0    0    0 SCAN TABLE v0 USING COVERING INDEX abc 00 
   3 Rewind           1    9    1 0             00 
   4 Column           1    0    2 0             00 r[2]=v0.t1
REG[2] =  i:0
   5 RealAffinity     2    0    0               00 
REG[2] =  i:0
   6 Le               2    1    2 (BINARY)      63 if r[2]<=r[2] goto 1
REG[2] =  r:0
REG[2] =  r:0
REG[1] =  i:1
   7 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:1
   8 Next             1    4    0               01 
   4 Column           1    0    2 0             00 r[2]=v0.t1
REG[2] =  i:0
   5 RealAffinity     2    0    0               00 
REG[2] =  i:0
   6 Le               2    1    2 (BINARY)      63 if r[2]<=r[2] goto 1
REG[2] =  r:0
REG[2] =  r:0
REG[1] =  i:1
   7 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:1
   8 Next             1    4    0               01 
   9 Close            1    0    0               00 
  10 Halt             0    0    0               00 
SQL: [;BEGIN;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 AutoCommit       0    0    0               00 
SQL: [;CREATE UNIQUE INDEX c ON v0(v2);]
VDBE Trace:
   0 Init             0   37    0               00 Start at 37
  37 Transaction      0    1    3 0             01 usesStmtJournal=1
  38 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  39 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  40 Goto             0    1    0               00 
   1 Noop             0   36    0               00 
   2 CreateIndex      0    1    0               00 r[1]=root iDb=0
REG[1] =  i:6
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:5
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 c             00 r[4]='c'
REG[4] =   t1[c](8)
   7 String8          0    5    0 v0            00 r[5]='v0'
REG[5] =   t2[v0](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:6
   9 String8          0    7    0 CREATE UNIQUE INDEX c ON v0(v2) 00 r[7]='CREATE UNIQUE INDEX c ON v0(v2)'
REG[7] =   t31[CREATE UNIQUE I](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s46[06170F11014B696E6465786376300643.....Kindexcv0.C](8)
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s46[06170F11014B696E6465786376300643.....Kindexcv0.C](8)
REG[2] =  i:5
  12 Close            0    0    0               00 
  13 SorterOpen       3    0    1 k(1,)         00 
  14 OpenRead         1    2    0 8             00 root=2 iDb=0; v0
  15 Rewind           1   21    0               00 
  16 Column           1    1   10 0             00 r[10]=v0.v2
REG[10] =  i:26
  17 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:-9223372036854775808
  18 MakeRecord      10    2    9               00 r[9]=mkrec(r[10..11])
REG[9] =  s12[0301061A8000000000000000............](8)
  19 SorterInsert     3    9    0               00 
REG[9] =  s12[0301061A8000000000000000............](8)
  20 Next             1   16    0               00 
  16 Column           1    1   10 0             00 r[10]=v0.v2
REG[10] =  i:0
  17 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:8000000000
  18 MakeRecord      10    2    9               00 r[9]=mkrec(r[10..11])
REG[9] =  s9[0308050001DCD65000.......P.](8)
  19 SorterInsert     3    9    0               00 
REG[9] =  s9[0308050001DCD65000.......P.](8)
  20 Next             1   16    0               00 
  21 OpenWrite        2    1    0 k(1,)         11 root=1 iDb=0
  22 SorterSort       3   30    0               00 
  23 Goto             0   26    0               00 
  26 SorterData       3    9    2               00 r[9]=data
  27 Last             2    0   -1               00 
  28 IdxInsert        2    9    0               10 key=r[9]
REG[9] =  s9[0308050001DCD65000.......P.](8)
  29 SorterNext       3   24    0               00 
  24 SorterCompare    3   26    9 1             00 if key(3)!=trim(r[9],1) goto 26
  26 SorterData       3    9    2               00 r[9]=data
  27 Last             2    0   -1               00 
  28 IdxInsert        2    9    0               10 key=r[9]
REG[9] =  s12[0301061A8000000000000000............](8)
  29 SorterNext       3   24    0               00 
  30 Close            1    0    0               00 
  31 Close            2    0    0               00 
  32 Close            3    0    0               00 
  33 SetCookie        0    1    4               00 
  34 ParseSchema      0    0    0 name='c' AND type='index' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    4 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 c             00 r[2]='c'
REG[2] =   t1[c](8)
  19 String8          0    4    0 index         00 r[4]='index'
REG[4] =   t5[index](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[v0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s2[v0](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[t1b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s3[t1b](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[abc](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s3[abc](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[c](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s1[c](8)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s5[index](8)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t5[index](8)
REG[3] =   s5[index](8)
   9 Copy             1    5    0               00 r[5]=r[1]
REG[5] =   s1[c](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:6
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s31[CREATE UNIQUE I](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s1[c](8)
REG[6] =  i:6
REG[7] =   s31[CREATE UNIQUE I](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  35 Expire           0    0    0               00 
  36 Halt             0    0    0               00 
SQL: [SELECT v1,v1,v1 FROM v0 UNION SELECT v1,v1,v1 FROM v0
    ORDER BY v1 COLLATE BINARY DESC,v1,v1
  
;]
VDBE Trace:
   0 Init             0   53    0               00 Start at 53
  53 Transaction      0    0    4 0             01 usesStmtJournal=0
  54 TableLock        0    2    0 v0            00 iDb=0 root=2 write=0
  55 Goto             0    1    0               00 
   1 InitCoroutine    1   31    2               00 sqlite_sq_9CF850
  31 SorterOpen       6    7    0 k(3,-B,B,B)   00 
  32 Explain          0    0    0 SCAN SUBQUERY 1 00 
  33 InitCoroutine    1    0    2               00 
  34 Yield            1   44    0               00 next row of "sqlite_sq_9CF850"
REG[1] =  i:1
REG[1] =  i:34
   2 OpenEphemeral    3    3    0 k(3,B,B,B)    00 nColumn=3
   3 OpenRead         4    6    0 k(1,)         00 root=6 iDb=0; c
   4 Explain          2    0    0 SCAN TABLE v0 USING COVERING INDEX c 00 
   5 Rewind           4   12    2 0             00 
   6 IdxRowid         4    2    0               00 r[2]=rowid
REG[2] =  i:8000000000
   7 SCopy            2    3    0               00 r[3]=r[2]
REG[3] =  i:8000000000
   8 SCopy            2    4    0               00 r[4]=r[2]
REG[4] =  i:8000000000
   9 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
REG[5] =  s22[040505050001DCD650000001DCD65000........P.....P.](8)
  10 IdxInsert        3    5    0               00 key=r[5]
REG[5] =  s22[040505050001DCD650000001DCD65000........P.....P.](8)
  11 Next             4    6    0               01 
   6 IdxRowid         4    2    0               00 r[2]=rowid
REG[2] =  i:-9223372036854775808
   7 SCopy            2    3    0               00 r[3]=r[2]
REG[3] =  i:-9223372036854775808
   8 SCopy            2    4    0               00 r[4]=r[2]
REG[4] =  i:-9223372036854775808
   9 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
REG[5] =  s28[04060606800000000000000080000000................](8)
  10 IdxInsert        3    5    0               00 key=r[5]
REG[5] =  s28[04060606800000000000000080000000................](8)
  11 Next             4    6    0               01 
  12 Close            4    0    0               00 
  13 OpenRead         5    6    0 k(1,)         00 root=6 iDb=0; c
  14 Explain          3    0    0 SCAN TABLE v0 USING COVERING INDEX c 00 
  15 Rewind           5   22    6 0             00 
  16 IdxRowid         5    2    0               00 r[2]=rowid
REG[2] =  i:8000000000
  17 SCopy            2    3    0               00 r[3]=r[2]
REG[3] =  i:8000000000
  18 SCopy            2    4    0               00 r[4]=r[2]
REG[4] =  i:8000000000
  19 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
REG[5] =  s22[040505050001DCD650000001DCD65000........P.....P.](8)
  20 IdxInsert        3    5    0               00 key=r[5]
REG[5] =  s22[040505050001DCD650000001DCD65000........P.....P.](8)
  21 Next             5   16    0               01 
  16 IdxRowid         5    2    0               00 r[2]=rowid
REG[2] =  i:-9223372036854775808
  17 SCopy            2    3    0               00 r[3]=r[2]
REG[3] =  i:-9223372036854775808
  18 SCopy            2    4    0               00 r[4]=r[2]
REG[4] =  i:-9223372036854775808
  19 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
REG[5] =  s28[04060606800000000000000080000000................](8)
  20 IdxInsert        3    5    0               00 key=r[5]
REG[5] =  s28[04060606800000000000000080000000................](8)
  21 Next             5   16    0               01 
  22 Close            5    0    0               00 
  23 Rewind           3   29    0               00 
  24 Column           3    0    6               00 r[6]=
REG[6] =  i:-9223372036854775808
  25 Column           3    1    7               00 r[7]=
REG[7] =  i:-9223372036854775808
  26 Column           3    2    8               00 r[8]=
REG[8] =  i:-9223372036854775808
  27 Yield            1    0    0               00 
REG[1] =  i:34
REG[1] =  i:27
  35 Copy             6   12    0               00 r[12]=r[6]; sqlite_sq_9CF850.v1
REG[12] =  i:-9223372036854775808
  36 Copy             7   13    0               00 r[13]=r[7]; sqlite_sq_9CF850.v1:1
REG[13] =  i:-9223372036854775808
  37 Copy             8   14    0               00 r[14]=r[8]; sqlite_sq_9CF850.v1:2
REG[14] =  i:-9223372036854775808
  38 Copy            12    9    0               00 r[9]=r[12]
REG[9] =  i:-9223372036854775808
  39 Copy            12   10    0               00 r[10]=r[12]
REG[10] =  i:-9223372036854775808
  40 Copy            12   11    0               00 r[11]=r[12]
REG[11] =  i:-9223372036854775808
  41 MakeRecord       9    6   15               00 r[15]=mkrec(r[9..14])
REG[15] =  s55[07060606060606800000000000000080................](8)
  42 SorterInsert     6   15    0               00 
REG[15] =  s55[07060606060606800000000000000080................](8)
  43 Goto             0   34    0               00 
  34 Yield            1   44    0               00 next row of "sqlite_sq_9CF850"
REG[1] =  i:27
REG[1] =  i:34
  28 Next             3   24    0               00 
  24 Column           3    0    6               00 r[6]=
REG[6] =  i:8000000000
  25 Column           3    1    7               00 r[7]=
REG[7] =  i:8000000000
  26 Column           3    2    8               00 r[8]=
REG[8] =  i:8000000000
  27 Yield            1    0    0               00 
REG[1] =  i:34
REG[1] =  i:27
  35 Copy             6   12    0               00 r[12]=r[6]; sqlite_sq_9CF850.v1
REG[12] =  i:8000000000
  36 Copy             7   13    0               00 r[13]=r[7]; sqlite_sq_9CF850.v1:1
REG[13] =  i:8000000000
  37 Copy             8   14    0               00 r[14]=r[8]; sqlite_sq_9CF850.v1:2
REG[14] =  i:8000000000
  38 Copy            12    9    0               00 r[9]=r[12]
REG[9] =  i:8000000000
  39 Copy            12   10    0               00 r[10]=r[12]
REG[10] =  i:8000000000
  40 Copy            12   11    0               00 r[11]=r[12]
REG[11] =  i:8000000000
  41 MakeRecord       9    6   15               00 r[15]=mkrec(r[9..14])
REG[15] =  s43[070505050505050001DCD650000001DC...........P....](8)
  42 SorterInsert     6   15    0               00 
REG[15] =  s43[070505050505050001DCD650000001DC...........P....](8)
  43 Goto             0   34    0               00 
  34 Yield            1   44    0               00 next row of "sqlite_sq_9CF850"
REG[1] =  i:27
REG[1] =  i:34
  28 Next             3   24    0               00 
  29 Close            3    0    0               00 
  30 EndCoroutine     1    0    0               00 
REG[1] =  i:34
  44 OpenPseudo       7   16    7               00 7 columns in r[16]
  45 SorterSort       6   52    0               00 
  46 SorterData       6   16    7               00 r[16]=data
  47 Column           7    3   12               00 r[12]=v1
REG[12] =  i:8000000000
  48 Column           7    4   13               00 r[13]=v1:1
REG[13] =  i:8000000000
  49 Column           7    5   14               00 r[14]=v1:2
REG[14] =  i:8000000000
  50 ResultRow       12    3    0               00 output=r[12..14]
REG[12] =  i:8000000000
REG[13] =  i:8000000000
REG[14] =  i:8000000000
  51 SorterNext       6   46    0               00 
  46 SorterData       6   16    7               00 r[16]=data
  47 Column           7    3   12               00 r[12]=v1
REG[12] =  i:-9223372036854775808
  48 Column           7    4   13               00 r[13]=v1:1
REG[13] =  i:-9223372036854775808
  49 Column           7    5   14               00 r[14]=v1:2
REG[14] =  i:-9223372036854775808
  50 ResultRow       12    3    0               00 output=r[12..14]
REG[12] =  i:-9223372036854775808
REG[13] =  i:-9223372036854775808
REG[14] =  i:-9223372036854775808
  51 SorterNext       6   46    0               00 
  52 Halt             0    0    0               00 
SQL: [;CREATE UNIQUE INDEX def ON v0(x);]
VDBE Trace:
   0 Init             0   38    0               00 Start at 38
  38 Transaction      0    1    4 0             01 usesStmtJournal=1
  39 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  40 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  41 Goto             0    1    0               00 
   1 Noop             0   37    0               00 
   2 CreateIndex      0    1    0               00 r[1]=root iDb=0
REG[1] =  i:7
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:6
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 def           00 r[4]='def'
REG[4] =   t3[def](8)
   7 String8          0    5    0 v0            00 r[5]='v0'
REG[5] =   t2[v0](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:7
   9 String8          0    7    0 CREATE UNIQUE INDEX def ON v0(x) 00 r[7]='CREATE UNIQUE INDEX def ON v0(x)'
REG[7] =   t32[CREATE UNIQUE I](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s49[06171311014D696E6465786465667630.....Mindexdefv0](8)
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s49[06171311014D696E6465786465667630.....Mindexdefv0](8)
REG[2] =  i:6
  12 Close            0    0    0               00 
  13 SorterOpen       3    0    1 k(1,)         00 
  14 OpenRead         1    2    0 8             00 root=2 iDb=0; v0
  15 Rewind           1   22    0               00 
  16 Column           1    3   10 0             00 r[10]=v0.x
REG[10] =  i:0
  17 Noop            10    0    0               00 
  18 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:-9223372036854775808
  19 MakeRecord      10    2    9               00 r[9]=mkrec(r[10..11])
REG[9] =  s11[0308068000000000000000...........](8)
  20 SorterInsert     3    9    0               00 
REG[9] =  s11[0308068000000000000000...........](8)
  21 Next             1   16    0               00 
  16 Column           1    3   10 0             00 r[10]=v0.x
REG[10] =  i:0
  17 Noop            10    0    0               00 
  18 Rowid            1   11    0               00 r[11]=rowid
REG[11] =  i:8000000000
  19 MakeRecord      10    2    9               00 r[9]=mkrec(r[10..11])
REG[9] =  s9[0308050001DCD65000.......P.](8)
  20 SorterInsert     3    9    0               00 
REG[9] =  s9[0308050001DCD65000.......P.](8)
  21 Next             1   16    0               00 
  22 OpenWrite        2    1    0 k(1,)         11 root=1 iDb=0
  23 SorterSort       3   31    0               00 
  24 Goto             0   27    0               00 
  27 SorterData       3    9    2               00 r[9]=data
  28 Last             2    0   -1               00 
  29 IdxInsert        2    9    0               10 key=r[9]
REG[9] =  s11[0308068000000000000000...........](8)
  30 SorterNext       3   25    0               00 
  25 SorterCompare    3   27    9 1             00 if key(3)!=trim(r[9],1) goto 27
  26 Halt          2067    2    0 v0.x          02 
SQL: [SELECT x,x,x FROM v0 WHERE x>='def' INTERSECT SELECT x,x,x FROM v0
    ORDER BY x,x,x
  
;]
VDBE Trace:
   0 Init             0   79    0               00 Start at 79
  79 Transaction      0    0    4 0             01 usesStmtJournal=0
  80 TableLock        0    2    0 v0            00 iDb=0 root=2 write=0
  81 String8          0   10    0 def           00 r[10]='def'
REG[10] =   t3[def](8)
  82 Goto             0    1    0               00 
   1 Integer          0    1    0               00 r[1]=0
REG[1] =  i:0
   2 InitCoroutine    5   31    3               00 left SELECT
  31 InitCoroutine    6   73   32               00 right SELECT
  73 Yield            5   78    0               00 
REG[5] =  i:2
REG[5] =  i:73
   3 SorterOpen       2    9    0 k(5,B,B,B,B,B) 00 
   4 OpenRead         1    2    0 4             00 root=2 iDb=0; v0
   5 Explain          1    0    0 SCAN TABLE v0 00 
   6 Rewind           1   21    0               00 
   7 Column           1    3    9 0             00 r[9]=v0.x
REG[9] =  i:0
   8 RealAffinity     9    0    0               00 
REG[9] =  i:0
   9 Lt              10   20    9 (BINARY)      55 if r[10]<r[9] goto 20
REG[10] =   t3[def](8)
REG[9] =  r:0
  20 Next             1    7    0               01 
   7 Column           1    3    9 0             00 r[9]=v0.x
REG[9] =  i:0
   8 RealAffinity     9    0    0               00 
REG[9] =  i:0
   9 Lt              10   20    9 (BINARY)      55 if r[10]<r[9] goto 20
REG[10] =   t3[def](8)
REG[9] =  r:0
  20 Next             1    7    0               01 
  21 Close            1    0    0               00 
  22 OpenPseudo       3   20    9               00 9 columns in r[20]
  23 SorterSort       2   30    0               00 
  30 EndCoroutine     5    0    0               00 
REG[5] =  i:73
  78 Halt             0    0    0               00 
SQL: [;UPDATE v0 SET v3=zeroblob(600)
  
;]
VDBE Trace:
   0 Init             0   38    0               00 Start at 38
  38 Transaction      0    1    4 0             01 usesStmtJournal=1
  39 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  40 Integer        600   11    0               00 r[11]=600
REG[11] =  i:600
  41 String8          0   14    0 Y             00 r[14]='Y'
REG[14] =   t1[Y](8)
  42 String8          0   15    0 N             00 r[15]='N'
REG[15] =   t1[N](8)
  43 Goto             0    1    0               00 
   1 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
   2 OpenRead         0    2    0 0             00 root=2 iDb=0; v0
   3 Explain          0    0    0 SCAN TABLE v0 00 
   4 Rewind           0    8    0               00 
   5 Rowid            0    2    0               00 r[2]=rowid
REG[2] =  i:-9223372036854775808
   6 RowSetAdd        1    2    0               00 rowset(1)=r[2]
REG[1] =  NULL
REG[2] =  i:-9223372036854775808
   7 Next             0    5    0               01 
   5 Rowid            0    2    0               00 r[2]=rowid
REG[2] =  i:8000000000
   6 RowSetAdd        1    2    0               00 rowset(1)=r[2]
REG[1] =  (rowset)
REG[2] =  i:8000000000
   7 Next             0    5    0               01 
   8 Close            0    0    0               00 
   9 OpenWrite        0    2    0 8             00 root=2 iDb=0; v0
  10 RowSetRead       1   36    2               00 r[2]=rowset(1)
REG[1] =  (rowset)
REG[2] =  i:-9223372036854775808
  11 NotExists        0   10    2               00 intkey=r[2]
REG[2] =  i:-9223372036854775808
  12 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
  13 Column           0    1    4 0             00 r[4]=v0.v2
REG[4] =  i:26
  14 Function0        1   11    5 zeroblob(1)   01 r[5]=func(r[11])
REG[11] =  i:600
REG[5] =  s0[](8)+600z
  15 Column           0    3    6 0             00 r[6]=v0.x
REG[6] =  i:0
  16 RealAffinity     6    0    0               00 
REG[6] =  i:0
  17 Column           0    4    7 0             00 r[7]=v0.xyz
REG[7] =  i:0
  18 RealAffinity     7    0    0               00 
REG[7] =  i:0
  19 Column           0    5    8 0             00 r[8]=v0.t1
REG[8] =  i:0
  20 RealAffinity     8    0    0               00 
REG[8] =  i:0
  21 Column           0    6    9 2010          00 r[9]=v0.a
REG[9] =  i:2010
  22 Column           0    7   10 0             00 r[10]=v0.b
REG[10] =  i:0
  23 HaltIfNull    1299    2    5 v0.v3         01 if r[5]=null halt
REG[5] =  s0[](8)+600z
  24 Noop             0    0    0               00 begin IN expr
  25 SCopy            5   12    0               00 r[12]=r[5]
REG[12] =  e0[](8)+600z
  26 BitAnd          12   12   13               00 r[13]=r[12]&r[12]
REG[12] =  e0[](8)+600z
REG[12] =  e0[](8)+600z
REG[13] =  i:0
  27 Eq              12   31   14 (BINARY)      42 if r[12]==r[14] goto 31
REG[12] =  e0[](8)+600z
REG[14] =   t1[Y](8)
  28 Eq              12   31   15 (BINARY)      42 if r[12]==r[15] goto 31

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fb2e8c3e859 in __GI_abort () at abort.c:79
#2  0x00007fb2e8c3e729 in __assert_fail_base (fmt=0x7fb2e8dd4588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", 
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=<optimized out>) at assert.c:92
#3  0x00007fb2e8c4ffd6 in __GI___assert_fail (
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=0x21e154 "int sqlite3VdbeCheckMemInvariants(Mem *)") at assert.c:101
#4  0x00000000002795e3 in sqlite3VdbeCheckMemInvariants (p=0xa51c90) at sqlite3.c:68292
#5  0x00000000003bfcc6 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:77361
#6  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#7  0x000000000024b5e9 in main (argc=1, argv=0x7ffe3bc6c568) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 37609] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
