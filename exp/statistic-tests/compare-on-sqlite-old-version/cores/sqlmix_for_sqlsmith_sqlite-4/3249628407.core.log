GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000211,sig:06,src:022100+019599,time:5652263,execs:925094,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;UPDATE OR REPLACE v0 SET v1=null, v1=v1, v1=v1;]
VDBE Program Listing:
   0 Init             0   60    0               00 Start at 60
   1 Null             0    3    4               00 r[3..4]=NULL
   2 OpenRead         0    2    0 0             00 root=2 iDb=0; v0
   3 Explain          0    0    0 SCAN TABLE v0 00 
   4 Rewind           0    8    0               00 
   5 Rowid            0    4    0               00 r[4]=rowid
   6 RowSetAdd        3    4    0               00 rowset(3)=r[4]
   7 Next             0    5    0               01 
   8 Close            0    0    0               00 
   9 Integer          0   10    0               00 r[10]=0
  10 OpenWrite        0    2    0 2             00 root=2 iDb=0; v0
  11 OpenWrite        1    4    0 k(2,,)        00 root=4 iDb=0; v3
  12 OpenWrite        2    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_v0_1
  13 RowSetRead       3   55    4               00 r[4]=rowset(3)
  14 NotExists        0   13    4               00 intkey=r[4]
  15 Rowid            0    7    0               00 r[7]=rowid
  16 MustBeInt        7    0    0               00 
  17 Rowid            0    5    0               00 r[5]=rowid; v0.v1
  18 Null             0    6    0               00 r[6]=NULL
  19 Null             0    8    0               00 r[8]=NULL
  20 Column           0    1    9               00 r[9]=v0.v2
  21 Eq               7   27    4               90 if r[7]==r[4] goto 27
  22 NotExists        0   27    7               00 intkey=r[7]
  23 Column           0    1   11               00 r[11]=v0.v2
  24 Rowid            0   12    0               00 r[12]=rowid
  25 IdxDelete        1   11    2               00 key=r[11..12]
  26 IdxDelete        2   11    2               00 key=r[11..12]
  27 Affinity         8    1    0 D             00 affinity(r[8])
  28 SCopy            9   11    0               00 r[11]=r[9]; v2
  29 IntCopy          7   12    0               00 r[12]=r[7]; rowid
  30 MakeRecord      11    2    1               00 r[1]=mkrec(r[11..12]); for v3
  31 SCopy            9   11    0               00 r[11]=r[9]; v2
  32 MakeRecord      11    2    2               00 r[2]=mkrec(r[11..12]); for sqlite_autoindex_v0_1
  33 NoConflict       2   42   11 1             00 key=r[11]
  34 IdxRowid         2   13    0               00 r[13]=rowid
  35 Eq              13   42    4               90 if r[13]==r[4] goto 42
  36 NotExists        0   42   13 1             00 intkey=r[13]
  37 Column           0    1   14               00 r[14]=v0.v2
  38 Rowid            0   15    0               00 r[15]=rowid
  39 IdxDelete        1   14    2               00 key=r[14..15]
  40 IdxDelete        2   14    2               00 key=r[14..15]
  41 Delete           0    0    0 v0            00 
  42 NotExists        0   48    4               00 intkey=r[4]
  43 Column           0    1   14               00 r[14]=v0.v2
  44 Rowid            0   15    0               00 r[15]=rowid
  45 IdxDelete        1   14    2               00 key=r[14..15]
  46 IdxDelete        2   14    2               00 key=r[14..15]
  47 Delete           0    0    0               00 
  48 IdxInsert        1    1    0               00 key=r[1]
  49 IdxInsert        2    2    0               00 key=r[2]
  50 MakeRecord       8    2   16               00 r[16]=mkrec(r[8..9])
  51 Insert           0   16    7 v0            05 intkey=r[7] data=r[16]
  52 AddImm          10    1    0               00 r[10]=r[10]+1
  53 Program          4   13   17 program       01 Call: t1.replace
  54 Goto             0   13    0               00 
  55 Close            1    0    0               00 
  56 Close            2    0    0               00 
  57 Close            0    0    0               00 
  58 ResultRow       10    1    0               00 output=r[10]
  59 Halt             0    0    0               00 
  60 Transaction      0    1    5 1             01 usesStmtJournal=0
  61 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  62 Goto             0    1    0               00 
SQL: [;INSERT INTO v0(v2) VALUES(1.23456);]
VDBE Program Listing:
   0 Init             0   26    0               00 Start at 26
   1 Integer          0    4    0               00 r[4]=0
   2 OpenWrite        0    2    0 2             00 root=2 iDb=0; v0
   3 OpenWrite        1    4    0 k(2,,)        00 root=4 iDb=0; v3
   4 OpenWrite        2    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_v0_1
   5 NewRowid         0    1    0               00 r[1]=rowid
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 Real             0    3    0 1.23456       00 r[3]=1.23456
   8 Affinity         2    1    0 D             00 affinity(r[2])
   9 SCopy            3    7    0               00 r[7]=r[3]; v2
  10 IntCopy          1    8    0               00 r[8]=r[1]; rowid
  11 MakeRecord       7    2    5               00 r[5]=mkrec(r[7..8]); for v3
  12 SCopy            3    7    0               00 r[7]=r[3]; v2
  13 MakeRecord       7    2    6               00 r[6]=mkrec(r[7..8]); for sqlite_autoindex_v0_1
  14 NoConflict       2   16    7 1             00 key=r[7]
  15 Halt          2067    3    0 v0.v2         02 
  16 IdxInsert        1    5    0               10 key=r[5]
  17 IdxInsert        2    6    0               10 key=r[6]
  18 MakeRecord       2    2   10               00 r[10]=mkrec(r[2..3])
  19 Insert           0   10    1 v0            1B intkey=r[1] data=r[10]
  20 AddImm           4    1    0               00 r[4]=r[4]+1
  21 Close            0    0    0               00 
  22 Close            1    0    0               00 
  23 Close            2    0    0               00 
  24 ResultRow        4    1    0               00 output=r[4]
  25 Halt             0    0    0               00 
  26 Transaction      0    1    5 1             01 usesStmtJournal=0
  27 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  28 Goto             0    1    0               00 
SQL: [;INSERT INTO v0(v2) VALUES(NULL);]
VDBE Program Listing:
   0 Init             0   26    0               00 Start at 26
   1 Integer          0    4    0               00 r[4]=0
   2 OpenWrite        0    2    0 2             00 root=2 iDb=0; v0
   3 OpenWrite        1    4    0 k(2,,)        00 root=4 iDb=0; v3
   4 OpenWrite        2    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_v0_1
   5 NewRowid         0    1    0               00 r[1]=rowid
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 Null             0    3    0               00 r[3]=NULL
   8 Affinity         2    1    0 D             00 affinity(r[2])
   9 SCopy            3    7    0               00 r[7]=r[3]; v2
  10 IntCopy          1    8    0               00 r[8]=r[1]; rowid
  11 MakeRecord       7    2    5               00 r[5]=mkrec(r[7..8]); for v3
  12 SCopy            3    7    0               00 r[7]=r[3]; v2
  13 MakeRecord       7    2    6               00 r[6]=mkrec(r[7..8]); for sqlite_autoindex_v0_1
  14 NoConflict       2   16    7 1             00 key=r[7]
  15 Halt          2067    3    0 v0.v2         02 
  16 IdxInsert        1    5    0               10 key=r[5]
  17 IdxInsert        2    6    0               10 key=r[6]
  18 MakeRecord       2    2   10               00 r[10]=mkrec(r[2..3])
  19 Insert           0   10    1 v0            1B intkey=r[1] data=r[10]
  20 AddImm           4    1    0               00 r[4]=r[4]+1
  21 Close            0    0    0               00 
  22 Close            1    0    0               00 
  23 Close            2    0    0               00 
  24 ResultRow        4    1    0               00 output=r[4]
  25 Halt             0    0    0               00 
  26 Transaction      0    1    5 1             01 usesStmtJournal=0
  27 TableLock        0    2    1 v0            00 iDb=0 root=2 write=1
  28 Goto             0    1    0               00 
SQL: [;SELECT * FROM x;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 OpenRead         0    5    0 1             00 root=5 iDb=0; x
   2 Explain          0    0    0 SCAN TABLE x  00 
   3 Rewind           0    7    0               00 
   4 Column           0    0    1               00 r[1]=x.xyz
   5 ResultRow        1    1    0               00 output=r[1]
   6 Next             0    4    0               01 
   7 Close            0    0    0               00 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    5 1             01 usesStmtJournal=0
  10 TableLock        0    5    0 x             00 iDb=0 root=5 write=0
  11 Goto             0    1    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f96933b1859 in __GI_abort () at abort.c:79
#2  0x00007f96933b1729 in __assert_fail_base (fmt=0x7f9693547588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x212700 "memIsValid(&aMem[pOp->p1])", file=0x222c23 "sqlite3.c", line=77360, function=<optimized out>)
    at assert.c:92
#3  0x00007f96933c2fd6 in __GI___assert_fail (assertion=0x212700 "memIsValid(&aMem[pOp->p1])", file=0x222c23 "sqlite3.c", line=77360, function=0x213a19 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003e2946 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:77360
#5  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#6  0x000000000024b5e9 in main (argc=1, argv=0x7ffc6dcc8518) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 35626] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
