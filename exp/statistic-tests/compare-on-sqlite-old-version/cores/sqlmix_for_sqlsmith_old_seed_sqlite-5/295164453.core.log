GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000264,sig:06,src:009751+005569,time:18303816,execs:2598593,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;
PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [DROP TABLE IF EXISTS t4;]
VDBE Trace:
   0 Init             0    2    0               00 Start at 2
   2 Transaction      0    0    1 0             01 usesStmtJournal=0
   3 Goto             0    1    0               00 
   1 Halt             0    0    0               00 
SQL: [SELECT hex('à') AS x;]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 String8          0    2    0 à             00 r[2]='à'
REG[2] =   t2[..](16LE)
   5 Goto             0    1    0               00 
   1 Function0        1    2    1 hex(1)        01 r[1]=func(r[2])
REG[2] =   t2[..](16LE)
REG[1] =   s8[F.D.F.F.](16LE)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s8[F.D.F.F.](16LE)
   3 Halt             0    0    0               00 
SQL: [;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='t2' AND type='table' ORDER BY rowid;]
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    1 0             01 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 t2            00 r[2]='t2'
REG[2] =   t4[t.2.](16LE)
  19 String8          0    4    0 table         00 r[4]='table'
REG[4] =   t10[t.a.b.l.e.](16LE)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s4[t.1.](16LE)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t4[t.2.](16LE)
REG[1] =   s4[t.1.](16LE)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
SQL: [;
PRAGMA sql_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
SQL-trace: ;
PRAGMA sql_trace=on;
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;
CREATE TABLE y(t2);]
VDBE Trace:
   0 Init             0   30    0               00 Start at 30
SQL-trace: ;
CREATE TABLE y(t2);
  30 Transaction      0    1    1 0             01 usesStmtJournal=0
  31 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  32 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateTable      0    2    0               00 r[2]=root iDb=0
REG[2] =  i:3
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......](16LE)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......](16LE)
REG[1] =  i:2
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain          0    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 MustBeInt        1   18    0               00 
REG[1] =  i:2
  16 NotExists        1   18    1               00 intkey=r[1]; pk
REG[1] =  i:2
  17 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:2
  18 IsNull           5   26    0               00 if r[5]==NULL goto 26
REG[5] =  i:2
  19 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t10[t.a.b.l.e.](16LE)
  20 String8          0    7    0 y             00 r[7]='y'
REG[7] =   t2[y.](16LE)
  21 String8          0    8    0 y             00 r[8]='y'
REG[8] =   t2[y.](16LE)
  22 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:3
  23 String8          0   10    0 CREATE TABLE y(t2) 00 r[10]='CREATE TABLE y(t2)'
REG[10] =   t36[C.R.E.A.T.E. .T](16LE)
  24 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s57[0621111101557400610062006C006500.!...Ut.a.b.l.e.](8)
  25 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s57[0621111101557400610062006C006500.!...Ut.a.b.l.e.](8)
REG[5] =  i:2
  26 Close            1    0    0               00 
  27 SetCookie        0    1    2               00 
  28 ParseSchema      0    0    0 tbl_name='y' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    2 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 y             00 r[2]='y'
REG[2] =   t2[y.](16LE)
  19 String8          0    4    0 trigger       00 r[4]='trigger'
REG[4] =   t14[t.r.i.g.g.e.r.](16LE)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s4[t.1.](16LE)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t2[y.](16LE)
REG[1] =   s4[t.1.](16LE)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[y.](16LE)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t2[y.](16LE)
REG[1] =   s2[y.](16LE)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s10[t.a.b.l.e.](16LE)
   8 Eq               4   13    3 (BINARY)      52 if r[4]==r[3] goto 13
REG[4] =   t14[t.r.i.g.g.e.r.](16LE)
REG[3] =   s10[t.a.b.l.e.](16LE)
   9 Column           0    1    5               00 r[5]=sqlite_master.name
REG[5] =   s2[y.](16LE)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:3
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s36[C.R.E.A.T.E. .T](16LE)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s2[y.](16LE)
REG[6] =  i:3
REG[7] =   s36[C.R.E.A.T.E. .T](16LE)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  29 Halt             0    0    0               00 
SQL: [CREATE TRIGGER i1y AFTER INSERT ON t1 WHEN new.x=1 BEGIN
       INSERT INTO t1(x) VALUES(new.x);
     END;]
VDBE Trace:
   0 Init             0   14    0               00 Start at 14
SQL-trace: CREATE TRIGGER i1y AFTER INSERT ON t1 WHEN new.x=1 BEGIN
       INSERT INTO t1(x) VALUES(new.x);
     END;
  14 Transaction      0    1    2 0             01 usesStmtJournal=0
  15 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  16 Goto             0    1    0               00 
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:3
   3 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t14[t.r.i.g.g.e.r.](16LE)
   4 String8          0    3    0 i1y           00 r[3]='i1y'
REG[3] =   t6[i.1.y.](16LE)
   5 String8          0    4    0 t1            00 r[4]='t1'
REG[4] =   t4[t.1.](16LE)
   6 Integer          0    5    0               00 r[5]=0
REG[5] =  i:0
   7 String8          0    6    0 CREATE TRIGGER i1y AFTER INSERT ON t1 WHEN new.x=1 BEGIN
       INSERT INTO t1(x) VALUES(new.x);
     END 00 r[6]='CREATE TRIGGER i1y AFTER INSERT ON t1 WHEN new.x=1 BEGIN
       INSERT INTO t1(x) VALUES(new.
REG[6] =   t210[C.R.E.A.T.E. .T](16LE)
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
REG[7] =  s241[07291915088331740072006900670067.)....1t.r.i.g.g](8)
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
REG[7] =  s241[07291915088331740072006900670067.)....1t.r.i.g.g](8)
REG[1] =  i:3
  10 Close            0    0    0               00 
  11 SetCookie        0    1    3               00 
  12 ParseSchema      0    0    0 type='trigger' AND name='i1y' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    3 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t14[t.r.i.g.g.e.r.](16LE)
  19 String8          0    4    0 i1y           00 r[4]='i1y'
REG[4] =   t6[i.1.y.](16LE)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s10[t.a.b.l.e.](16LE)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t14[t.r.i.g.g.e.r.](16LE)
REG[1] =   s10[t.a.b.l.e.](16LE)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s10[t.a.b.l.e.](16LE)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t14[t.r.i.g.g.e.r.](16LE)
REG[1] =   s10[t.a.b.l.e.](16LE)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s14[t.r.i.g.g.e.r.](16LE)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t14[t.r.i.g.g.e.r.](16LE)
REG[1] =   s14[t.r.i.g.g.e.r.](16LE)
   7 Column           0    1    3               00 r[3]=sqlite_master.name
REG[3] =   s6[i.1.y.](16LE)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t6[i.1.y.](16LE)
REG[3] =   s6[i.1.y.](16LE)
   9 Copy             3    5    0               00 r[5]=r[3]
REG[5] =   s6[i.1.y.](16LE)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:0
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s210[C.R.E.A.T.E. .T](16LE)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s6[i.1.y.](16LE)
REG[6] =  i:0
REG[7] =   s210[C.R.E.A.T.E. .T](16LE)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  13 Halt             0    0    0               00 
SQL: [INSERT INTO t1 VALUES(zeroblob(8188*1020));]
VDBE Trace:
   0 Init             0    9    0               00 Start at 9
SQL-trace: INSERT INTO t1 VALUES(zeroblob(8188*1020));
   9 Transaction      0    1    3 0             01 usesStmtJournal=0
  10 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  11 Integer       8188    6    0               00 r[6]=8188
REG[6] =  i:8188
  12 Integer       1020    7    0               00 r[7]=1020
REG[7] =  i:1020
  13 Multiply         7    6    3               00 r[3]=r[7]*r[6]
REG[7] =  i:1020
REG[6] =  i:8188
REG[3] =  i:8351760
  14 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Function0        1    3    2 zeroblob(1)   01 r[2]=func(r[3])
REG[3] =  i:8351760
REG[2] =  s0[](8)+8351760z
   4 MakeRecord       2    1    4               00 r[4]=mkrec(r[2])
REG[4] =  s5[0587FBC02C....,](8)+8351760z
   5 Insert           0    4    1 t1            1B intkey=r[1] data=r[4]
REG[4] =  s5[0587FBC02C....,](8)+8351760z
REG[1] =  i:1
   6 Program         -1    7    5 program       01 Call: i1y.default
   0 Init             0    0    0 -- TRIGGER i1y 00 Start at 0; Start: i1y.default (AFTER INSERT ON t1)
SQL-trace: -- TRIGGER i1y
   1 Param            3    1    0               00 new.x -> $1
REG[1] =  e0[](8)+8351760z
   2 Integer          1    2    0               00 r[2]=1
REG[2] =  i:1
   3 Ne               2   12    1 (BINARY)      51 if r[2]!=r[1] goto 12
REG[2] =  i:1
REG[1] =  e0[](8)+8351760z
  12 Halt             0    0    0               00 End: i1y.default
   7 Noop             0    0    0               00 
   8 Halt             0    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007ff8f0331859 in __GI_abort () at abort.c:79
#2  0x00007ff8f0331729 in __assert_fail_base (fmt=0x7ff8f04c7588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", 
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=<optimized out>) at assert.c:92
#3  0x00007ff8f0342fd6 in __GI___assert_fail (
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=0x21e154 "int sqlite3VdbeCheckMemInvariants(Mem *)") at assert.c:101
#4  0x00000000002795e3 in sqlite3VdbeCheckMemInvariants (p=0x1c2c100) at sqlite3.c:68292
#5  0x00000000002c8632 in releaseMemArray (p=0x1c2c100, N=<optimized out>) at sqlite3.c:71417
#6  0x00000000002e366e in sqlite3VdbeHalt (p=0x1c218b0) at sqlite3.c:71458
#7  0x00000000003e1666 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:77673
#8  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#9  0x000000000024b5e9 in main (argc=1, argv=0x7ffffa2f2308) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 120830] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
