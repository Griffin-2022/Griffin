GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000012,sig:06,src:006001+005602,time:2600120,execs:239052,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL-trace: ;
PRAGMA sql_trace=on;
SQL-trace: ;
pragma main.page_count ;
SQL-trace: ;
CREATE VIEW t1 AS SELECT x AS 'xyz', x+x AS 'pqr', x-x FROM t1;
SQL-trace: CREATE VIEW x(x,x,z) AS SELECT x, x+x, x-x FROM t1;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: PRAGMA auto_vacuum = 0;
SQL-trace: SELECT sql FROM sqlite_master WHERE oid = 16
  ;
SQL-trace: ;
CREATE TABLE y(t2 TEXT COLLATE BINARY);
SQL-trace: ;
CREATE INDEX i1y ON y(t2);
SQL-trace: ;
insert into y(t2, t2) values(1,'Test3');
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='x' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT 1 FROM y LIMIT 1;
SQL-trace: ;
CREATE VIEW a AS
      SELECT t1.x AS v, t1.x AS w FROM t1 JOIN t1 USING(x);
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;
SQL-trace: ANALYZE;
SQL-trace: SELECT tbl,idx,stat FROM 'main'.sqlite_stat1
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='m' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='sqlite_stat1' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='a' AND type!='trigger' ORDER BY rowid;
SQL-trace: SELECT 
        (SELECT sum(t2) FROM y)==(SELECT sum(t2*5-10) FROM y WHERE (t2%5)==0)
    ;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='y' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT t2, t2 FROM y WHERE t2 = 2 AND t2 IN (2, 4, 5) ORDER BY t2 ASC, t2 DESC;
SQL-trace: ;
CREATE INDEX b ON y(t2 DESC, t2 DESC) ;
SQL-trace: ;
SELECT t2, t2 FROM y WHERE t2 = 3 AND t2 IN (2, 4, 5) ORDER BY t2 DESC, t2 ASC;
SQL-trace: ;
SELECT t2, t2 FROM y WHERE t2 = 4 AND t2 IN (2, 4, 5) ORDER BY t2 DESC, t2 DESC;
SQL-trace: CREATE TRIGGER sqlsim0 AFTER INSERT ON y BEGIN
    SELECT * FROM y WHERE abc.t2 = 1;
  END;
SQL-trace: ;
VACUUM;
SQL-trace: ATTACH '' AS vacuum_db;
SQL-trace: PRAGMA vacuum_db.synchronous=OFF
SQL-trace: BEGIN;
SQL-trace: SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14)   FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0
SQL-trace: CREATE TABLE vacuum_db.y(t2 TEXT COLLATE BINARY)
SQL-trace: CREATE TABLE vacuum_db.sqlite_stat1(tbl,idx,stat)
SQL-trace: SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' 
SQL-trace: CREATE INDEX vacuum_db.i1y ON y(t2)
SQL-trace: CREATE INDEX vacuum_db.b ON y(t2 DESC, t2 DESC) 
SQL-trace: SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21)   FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'
SQL-trace: SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';'FROM main.sqlite_master WHERE type = 'table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f33ef590859 in __GI_abort () at abort.c:79
#2  0x00007f33ef590729 in __assert_fail_base (fmt=0x7f33ef726588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x227729 "sqlite3_stricmp(sqlite3StrBINARY, zColl)!=0 || sqlite3StrBINARY==zColl", 
    file=0x222c23 "sqlite3.c", line=108020, function=<optimized out>) at assert.c:92
#3  0x00007f33ef5a1fd6 in __GI___assert_fail (assertion=0x227729 "sqlite3_stricmp(sqlite3StrBINARY, zColl)!=0 || sqlite3StrBINARY==zColl", file=0x222c23 "sqlite3.c", line=108020, 
    function=0x20a00b "int xferOptimization(Parse *, Table *, Select *, int, int)") at assert.c:101
#4  0x0000000000345560 in sqlite3Insert (pParse=<optimized out>, pTabList=<optimized out>, pSelect=<optimized out>, pColumn=0x0, onError=<optimized out>) at sqlite3.c:108019
#5  0x00000000003066b3 in yy_reduce (yypParser=0x1be0b70, yyruleno=<optimized out>) at sqlite3.c:133484
#6  0x00000000002fef8e in sqlite3Parser (yyp=0x1be0b70, yymajor=<optimized out>, yyminor=..., pParse=<optimized out>) at sqlite3.c:134258
#7  0x00000000002fc544 in sqlite3RunParser (pParse=0x1bbcb40, zSql=0x1c3ff90 "INSERT INTO vacuum_db.'y' SELECT * FROM main.'y';", pzErrMsg=0x7ffc36fd1b78) at sqlite3.c:135186
#8  0x00000000002facac in sqlite3Prepare (db=0x1bbda80, zSql=0x1c3ff90 "INSERT INTO vacuum_db.'y' SELECT * FROM main.'y';", nBytes=<optimized out>, saveSqlFlag=0, pReprepare=<optimized out>, ppStmt=0x7ffc36fd1c38, 
    pzTail=0x0) at sqlite3.c:112596
#9  0x00000000002fa0f4 in sqlite3LockAndPrepare (db=0x1bbda80, zSql=0x1c3ff90 "INSERT INTO vacuum_db.'y' SELECT * FROM main.'y';", nBytes=-1, saveSqlFlag=0, pOld=0x0, ppStmt=<optimized out>, pzTail=0x0) at sqlite3.c:112688
#10 0x00000000003fb16b in execSql (db=0x1bbda80, pzErrMsg=0x1bd2718, zSql=<optimized out>) at sqlite3.c:112752
#11 0x00000000003fb5ec in execExecSql (db=0x1bbda80, pzErrMsg=0x1bd2718, zSql=<optimized out>) at sqlite3.c:120748
#12 0x00000000003de49e in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:120939
#13 0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#14 0x000000000024b5e9 in main (argc=1, argv=0x7ffc36fd23d8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 118797] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
