GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000097,sig:06,src:008324+008844,time:6348742,execs:700948,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL-trace: ;
PRAGMA sql_trace=on;
SQL-trace: SELECT typeof( CAST (-2.3e-5 AS text) ),  CAST (-2.3e-5 AS text) ;
SQL-trace: PRAGMA writable_schema = 1;
SQL-trace: ;
CREATE TABLE t1(x integer primary key, y str unique);
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: CREATE TABLE t2(i1y, a, b);
SQL-trace: ;
ATTACH 'test.db' as db5;
SQL-trace: CREATE UNIQUE INDEX sqlsim0
         ON t1(y, y, y);
SQL-trace: CREATE INDEX sqlsim1 ON t1(y);
SQL-trace: ;
PRAGMA auto_vacuum = 1;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='sqlsim0' AND type='index' ORDER BY rowid;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
pragma locking_mode=exclusive ;
SQL-trace: ;CREATE TABLE sqlsim2
          (sqlsim3 INTEGER NOT NULL PRIMARY KEY,
           sqlsim4 TEXT NOT NULL,
           sqlsim5 TEXT NOT NULL,
           n TEXT
               CHECK (n IS NULL OR n <> ''),
           t5 INTEGER NOT NULL DEFAULT 0,
           m TEXT NOT NULL,
           o TEXT NOT NULL DEFAULT 'unknown',
           t4 TEXT NOT NULL,
           p TEXT NOT NULL DEFAULT '');
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: CREATE TRIGGER sqlsim0 AFTER DELETE ON t1 BEGIN
    INSERT INTO t1 VALUES('after delete', old.y, old.y);
  END;
SQL-trace: ;
DROP TABLE t2;
SQL-trace: ;
PRAGMA journal_mode = off;
SQL-trace: PRAGMA integrity_check;
SQL-trace: ;
PRAGMA page_size;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='sqlsim2' AND type!='trigger' ORDER BY rowid;
SQL-trace: INSERT INTO sqlite_stat1
     VALUES('raw_contacts','raw_contact_sort_key2_index','1600 4');
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='b' AND type!='trigger' ORDER BY rowid;
SQL-trace: PRAGMA foreign_keys;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
CREATE TABLE t(i1,t a,id, UNIQUE(i1) ON CONFLICT IGNORE);
SQL-trace: VACUUM;
SQL-trace: ATTACH '' AS vacuum_db;
SQL-trace: PRAGMA vacuum_db.synchronous=OFF
SQL-trace: BEGIN;
SQL-trace: SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14)   FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0
SQL-trace: CREATE TABLE vacuum_db.t1(x integer primary key, y str unique)
SQL-trace: CREATE TABLE vacuum_db.sqlsim2
          (sqlsim3 INTEGER NOT NULL PRIMARY KEY,
           sqlsim4 TEXT NOT NULL,
           sqlsim5 TEXT NOT NULL,
           n TEXT
               CHECK (n IS NULL OR n <> ''),
           t5 INTEGER NOT NULL DEFAULT 0,
           m TEXT NOT NULL,
           o TEXT NOT NULL DEFAULT 'unknown',
           t4 TEXT NOT NULL,
           p TEXT NOT NULL DEFAULT '')
SQL-trace: CREATE TABLE vacuum_db.t(i1,t a,id, UNIQUE(i1) ON CONFLICT IGNORE)
SQL-trace: SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' 
SQL-trace: CREATE INDEX vacuum_db.sqlsim1 ON t1(y)
SQL-trace: SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21)   FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'
SQL-trace: CREATE UNIQUE INDEX vacuum_db.sqlsim0
         ON t1(y, y, y)
SQL-trace: SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';'FROM main.sqlite_master WHERE type = 'table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0
SQL-trace: INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';
SQL-trace: INSERT INTO vacuum_db.'sqlsim2' SELECT * FROM main.'sqlsim2';
SQL-trace: INSERT INTO vacuum_db.'t' SELECT * FROM main.'t';
SQL-trace: SELECT 'DELETE FROM vacuum_db.' || quote(name) || ';' FROM vacuum_db.sqlite_master WHERE name='sqlite_sequence' 
SQL-trace: SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';' FROM vacuum_db.sqlite_master WHERE name=='sqlite_sequence';
SQL-trace: INSERT INTO vacuum_db.sqlite_master   SELECT type, name, tbl_name, rootpage, sql    FROM main.sqlite_master   WHERE type='view' OR type='trigger'      OR (type='table' AND rootpage=0)
SQL-trace: ;
BEGIN;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: CREATE TABLE name(persons int, person_id int);
SQL-trace: SELECT 1 FROM sqlite_master ;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT randomblob($pgsz);
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: DROP table "sqlsim2";
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='i1' AND type='index' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t' AND type!='trigger' ORDER BY rowid;
SQL-trace: SELECT randomblob($pgsz);
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t' AND type!='trigger' ORDER BY rowid;
SQL-trace: DELETE FROM t;
SQL-trace: ;
SELECT * FROM name;
SQL-trace: CREATE TEMP TABLE sqlsim0(directors);
SQL-trace: SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='name' ORDER BY rowid;
SQL-trace: ;
SELECT * FROM sqlsim0
  ;
SQL-trace: ;
SELECT * FROM name;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t' AND type!='trigger' ORDER BY rowid;
SQL-trace:  VALUES(11,22);
SQL-trace: SELECT id FROM t;
SQL-trace: SELECT t.id, t1.x FROM t1, t;
SQL-trace: SELECT * FROM sqlsim0 AS sqlsim0, sqlsim0 AS b;
SQL-trace: ;
CREATE TABLE writers(r1,r2);
SQL-trace: ;SELECT min(persons), min(persons) FROM name;
SQL-trace: SELECT Max(y) FROM t1;
SQL-trace: ;SELECT coalesce(max(id),'xyzzy') FROM t;
SQL-trace: SELECT max(coalesce(id,'xyzzy')) FROM t;
SQL-trace: SELECT sum(id) FROM t;
SQL-trace: SELECT SUM(min(id,i1)) FROM t;
SQL-trace: ;SELECT x FROM t1 WHERE x>11;
SQL-trace: SELECT y FROM t1 WHERE min(y,y)!=11;
SQL-trace: SELECT person_id FROM name ORDER BY min(person_id,persons);
SQL-trace: ;
SELECT * FROM t1 ORDER BY 1 DESC, y;
SQL-trace: CREATE TABLE r3(tbl text, c text);
SQL-trace: INSERT INTO writers VALUES('abc','xyz');
SQL-trace: SELECT person_id as "xyzzy" FROM name ORDER BY person_id;
SQL-trace: ;
PRAGMA full_column_names=OFF;
SQL-trace: ;
SELECT x FROM t1 UNION SELECT x FROM t1
    ORDER BY x;
SQL-trace: 
   ;SELECT persons FROM name WHERE persons IN 
        (SELECT persons FROM name WHERE persons<='persons' UNION SELECT '3' AS x
                 ORDER BY 1 DESC LIMIT 1)
   ;
SQL-trace: 
  ;SELECT id-23 AS x FROM t ORDER BY abs(x)
  ;
SQL-trace: SELECT 1,'hello',2
  ;
SQL-trace: ;;
create TABLE a7(a8, a9, a10, PRIMARY KEY(a8, a9));
SQL-trace: DROP TABLE a7;
SQL-trace: SELECT * FROM sqlite_master WHERE rowid>10;
SQL-trace: ;
SELECT * FROM sqlite_master WHERE rowid=10;
SQL-trace: ;
PRAGMA locking_mode;
[Inferior 1 (process 119459) exited normally]
(gdb) (gdb) quit
