GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000157,sig:06,src:021371+020954,time:5179227,execs:1068034,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;PRAGMA sql_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
SQL-trace: ;PRAGMA sql_trace=on;
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;INSERT INTO blue(red, red) VALUES (1,1);]
VDBE Trace:
   0 Init             0   31    0               00 Start at 31
SQL-trace: ;INSERT INTO blue(red, red) VALUES (1,1);
  31 Transaction      0    1    1 0             01 usesStmtJournal=0
  32 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; blue
   2 OpenWrite        1    4    0 k(3,,,)       00 root=4 iDb=0; sqlite_autoindex_blue_2
   3 OpenWrite        2    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_blue_1
   4 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   5 Integer          1    2    0               00 r[2]=1
REG[2] =  i:1
   6 Noop             0    0    0               00 uniqueness check for sqlite_autoindex_blue_2
   7 SCopy            2    4    0               00 r[4]=r[2]; red
REG[4] =  i:1
   8 SCopy            2    5    0               00 r[5]=r[2]; red
REG[5] =  i:1
   9 IntCopy          1    6    0               00 r[6]=r[1]; rowid
REG[6] =  i:1
  10 MakeRecord       4    3    3               00 r[3]=mkrec(r[4..6]); for sqlite_autoindex_blue_2
REG[3] =  sx4[04090909|....]
  11 NoConflict       1   19    4 2             00 key=r[4..5]
REG[4] =  i:1
REG[5] =  i:1
  19 Noop             0    0    0               00 uniqueness check for sqlite_autoindex_blue_1
  20 SCopy            2    8    0               00 r[8]=r[2]; red
REG[8] =  i:1
  21 IntCopy          1    9    0               00 r[9]=r[1]; rowid
REG[9] =  i:1
  22 MakeRecord       8    2    7               00 r[7]=mkrec(r[8..9]); for sqlite_autoindex_blue_1
REG[7] =  sx3[030909|...]
  23 Abortable        0    0    0               00 
  24 NoConflict       2   26    8 1             00 key=r[8]
REG[8] =  i:1
  26 MakeRecord       2    1   10               00 r[10]=mkrec(r[2])
REG[10] =  sx2[0209|..]
  27 IdxInsert        1    3    4 3             10 key=r[3]
REG[3] =  sx4[04090909|....]
  28 IdxInsert        2    7    8 2             10 key=r[7]
REG[7] =  sx3[030909|...]
  29 Insert           0   10    1 blue          39 intkey=r[1] data=r[10]
REG[10] =  sx2[0209|..]
REG[1] =  i:1
  30 Halt             0    0    0               00 
SQL: [;INSERT INTO blue(red,red) VALUES(1,1);]
VDBE Trace:
   0 Init             0   31    0               00 Start at 31
SQL-trace: ;INSERT INTO blue(red,red) VALUES(1,1);
  31 Transaction      0    1    1 0             01 usesStmtJournal=0
  32 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; blue
   2 OpenWrite        1    4    0 k(3,,,)       00 root=4 iDb=0; sqlite_autoindex_blue_2
   3 OpenWrite        2    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_blue_1
   4 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   5 Integer          1    2    0               00 r[2]=1
REG[2] =  i:1
   6 Noop             0    0    0               00 uniqueness check for sqlite_autoindex_blue_2
   7 SCopy            2    4    0               00 r[4]=r[2]; red
REG[4] =  i:1
   8 SCopy            2    5    0               00 r[5]=r[2]; red
REG[5] =  i:1
   9 IntCopy          1    6    0               00 r[6]=r[1]; rowid
REG[6] =  i:2
  10 MakeRecord       4    3    3               00 r[3]=mkrec(r[4..6]); for sqlite_autoindex_blue_2
REG[3] =  sx5[0409090102|.....]
  11 NoConflict       1   19    4 2             00 key=r[4..5]
REG[4] =  i:1
REG[5] =  i:1
  12 IdxRowid         1   11    0               00 r[11]=rowid
REG[11] =  i:1
  13 NotExists        0   19   11 1             00 intkey=r[11]
REG[11] =  i:1
  14 Column           0    0   12               00 r[12]=blue.red
REG[12] =  i:1
  15 Rowid            0   13    0               00 r[13]=rowid
REG[13] =  i:1
  16 IdxDelete        2   12    2               00 key=r[12..13]
  17 Delete           0    0    0 blue          00 
  18 Delete           1    0    0               00 
  19 Noop             0    0    0               00 uniqueness check for sqlite_autoindex_blue_1
  20 SCopy            2    8    0               00 r[8]=r[2]; red
REG[8] =  i:1
  21 IntCopy          1    9    0               00 r[9]=r[1]; rowid
REG[9] =  i:2
  22 MakeRecord       8    2    7               00 r[7]=mkrec(r[8..9]); for sqlite_autoindex_blue_1
REG[7] =  sx4[03090102|....]
  23 Abortable        0    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f418e388859 in __GI_abort () at abort.c:79
#2  0x00007f418e388729 in __assert_fail_base (fmt=0x7f418e51e588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21422e "p->nWrite==0 || p->usesStmtJournal", file=0x2291f4 "sqlite3.c", line=77257, 
    function=<optimized out>) at assert.c:92
#3  0x00007f418e399fd6 in __GI___assert_fail (assertion=0x21422e "p->nWrite==0 || p->usesStmtJournal", file=0x2291f4 "sqlite3.c", line=77257, function=0x227c04 "void sqlite3VdbeAssertAbortable(Vdbe *)") at assert.c:101
#4  0x00000000003eb94c in sqlite3VdbeAssertAbortable (p=0x26b15b0) at sqlite3.c:77257
#5  0x00000000003ea7df in sqlite3VdbeExec (p=0x26b15b0) at sqlite3.c:91638
#6  0x000000000041ba74 in sqlite3Step (p=0x26b15b0) at sqlite3.c:82300
#7  0x0000000000293d5d in sqlite3_step (pStmt=0x26b15b0) at sqlite3.c:82365
#8  0x0000000000258a39 in main (argc=1, argv=0x7fff2b604b28) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 44678] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
