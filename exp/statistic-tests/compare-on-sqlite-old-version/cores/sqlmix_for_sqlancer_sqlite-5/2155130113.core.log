GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000366,sig:06,src:020463+021582,time:10308978,execs:2339389,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [END;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    0    0               00 
SQL: [SELECT * FROM pragma_index_list('t2') 
;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    1 0             01 usesStmtJournal=0
  16 Goto             0    1    0               00 
   1 VOpen            0    0    0 vtab:131B9B0  00 
   2 Explain          2    0    0 SCAN TABLE pragma_index_list VIRTUAL TABLE INDEX 0: 00 
   3 String8          0    3    0 t2            00 r[3]='t2'
REG[3] =   t2[t2](8)
   4 Integer          0    1    0               00 r[1]=0
REG[1] =  i:0
   5 Integer          1    2    0               00 r[2]=1
REG[2] =  i:1
   6 VFilter          0   14    1               00 iplan=r[1] zplan=''
REG[1] =  i:0
SQL: [PRAGMA index_list='t2']
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Halt             0    0    0               00 
  14 Halt             0    0    0               00 
SQL: [PRAGMA index_list='t2'
;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Halt             0    0    0               00 
SQL: [;
;CREATE TABLE c1(t1 INTEGER PRIMARY KEY AUTOINCREMENT, a);]
VDBE Trace:
   0 Init             0   54    0               00 Start at 54
  54 Transaction      0    1    1 0             01 usesStmtJournal=0
  55 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:3
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:2
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:2
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:2
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:2
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 c1            00 r[7]='c1'
REG[7] =   t2[c1](8)
  20 String8          0    8    0 c1            00 r[8]='c1'
REG[8] =   t2[c1](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:3
  22 String8          0   10    0 CREATE TABLE c1(t1 INTEGER PRIMARY KEY AUTOINCREMENT, a) 00 r[10]='CREATE TABLE c1(t1 INTEGER PRIMARY KEY AUTOINCREMENT, a)'
REG[10] =   t56[CREATE TABLE c1](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s72[06171111017D7461626C656331633103.....}tablec1c1.]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s72[06171111017D7461626C656331633103.....}tablec1c1.]
REG[5] =  i:2
  25 SetCookie        0    1    2               00 
  26 ReadCookie       0   14    2               00 
REG[14] =  i:4
  27 If              14   30    0               00 
REG[14] =  i:4
  30 CreateBtree      0   13    1               00 r[13]=root iDb=0 flags=1
REG[13] =  i:4
  31 OpenWrite        0    1    0 5             00 root=1 iDb=0
  32 NewRowid         0   12    0               00 r[12]=rowid
REG[12] =  i:3
  33 Blob             6   14    0              00 r[14]= (len=6)
REG[14] =  t6[060000000000......]
  34 Insert           0   14   12               08 intkey=r[12] data=r[14]
REG[14] =  t6[060000000000......]
REG[12] =  i:3
  35 Close            0    0    0               00 
  36 Close            0    0    0               00 
  37 Null             0   15   16               00 r[15..16]=NULL
REG[15] =  NULL
  38 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  39 Explain         39    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  40 SeekRowid        2   42   12               00 intkey=r[12]
REG[12] =  i:3
  41 Rowid            2   16    0               00 r[16]=rowid
REG[16] =  i:3
  42 IsNull          16   50    0               00 if r[16]==NULL goto 50
REG[16] =  i:3
  43 String8          0   17    0 table         00 r[17]='table'
REG[17] =   t5[table](8)
  44 String8          0   18    0 sqlite_sequence 00 r[18]='sqlite_sequence'
REG[18] =   t15[sqlite_sequence](8)
  45 String8          0   19    0 sqlite_sequence 00 r[19]='sqlite_sequence'
REG[19] =   t15[sqlite_sequence](8)
  46 Copy            13   20    0               00 r[20]=r[13]
REG[20] =  i:4
  47 String8          0   21    0 CREATE TABLE sqlite_sequence(name,seq) 00 r[21]='CREATE TABLE sqlite_sequence(name,seq)'
REG[21] =   t38[CREATE TABLE sq](8)
  48 MakeRecord      17    5   22 BBBDB         00 r[22]=mkrec(r[17..21])
REG[22] =  s80[06172B2B01597461626C6573716C6974..++.Ytablesqlit]
  49 Insert           2   22   16               00 intkey=r[16] data=r[22]
REG[22] =  s80[06172B2B01597461626C6573716C6974..++.Ytablesqlit]
REG[16] =  i:3
  50 SetCookie        0    1    2               00 
  51 ParseSchema      0    0    0 tbl_name='sqlite_sequence' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 0             00 usesStmtJournal=0
  16 String8          0    2    0 sqlite_sequence 00 r[2]='sqlite_sequence'
REG[2] =   t15[sqlite_sequence](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s2[t0](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s2[c1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s15[sqlite_sequence](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s15[sqlite_sequence](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:4
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s38[CREATE TABLE sq](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s15[sqlite_sequence](8)
REG[5] =  i:4
REG[6] =   s38[CREATE TABLE sq](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  52 ParseSchema      0    0    0 tbl_name='c1' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 0             00 usesStmtJournal=0
  16 String8          0    2    0 c1            00 r[2]='c1'
REG[2] =   t2[c1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c1](8)
REG[1] =   s2[t0](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c1](8)
REG[1] =   s2[c1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[c1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s56[CREATE TABLE c1](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[c1](8)
REG[5] =  i:3
REG[6] =   s56[CREATE TABLE c1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c1](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  53 Halt             0    0    0               00 
SQL: [SELECT*FROM"temp".sqlite_master WHERE tbl_name='c1' AND type!='trigger' ORDER BY rowid
;]
VDBE Trace:
   0 Init             0   17    0               00 Start at 17
  17 Transaction      1    0    0 0             01 usesStmtJournal=0
  18 String8          0    2    0 c1            00 r[2]='c1'
REG[2] =   t2[c1](8)
  19 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    7    0               00 
   2 OpenRead         0    1    1 5             00 root=1 iDb=1; sqlite_temp_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   16    0               00 
  16 Halt             0    0    0               00 
SQL: [;
;DROP TABLE t0;]
VDBE Trace:
   0 Init             0   38    0               00 Start at 38
  38 Transaction      0    1    2 0             01 usesStmtJournal=1
  39 String8          0    3    0 t0            00 r[3]='t0'
REG[3] =   t2[t0](8)
  40 String8          0    4    0 trigger       00 r[4]='trigger'
REG[4] =   t7[trigger](8)
  41 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[t0](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t2[t0](8)
REG[2] =   s2[t0](8)
   7 Column           0    0    2               00 r[2]=sqlite_master.type
REG[2] =   s5[table](8)
   8 Eq               4   12    2 (BINARY)      52 if r[2]==r[4] goto 12
REG[4] =   t7[trigger](8)
REG[2] =   s5[table](8)
   9 Rowid            0    5    0               00 r[5]=rowid
REG[5] =  i:1
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[c1](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t2[t0](8)
REG[2] =   s2[c1](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s15[sqlite_sequence](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t2[t0](8)
REG[2] =   s15[sqlite_sequence](8)
  12 Next             0    5    0               01 
  13 Destroy          2    2    0               00 
REG[2] =  i:0
  14 Null             0    6    7               00 r[6..7]=NULL
REG[6] =  NULL
  15 IfNot            2   24    1               00 
REG[2] =  i:0
  24 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  25 RowSetRead       6   35    7               00 r[7]=rowset(6)
REG[6] =  NULL
REG[7] =  NULL
  35 DropTable        0    0    0 t0            00 
  36 SetCookie        0    1    3               00 
  37 Halt             0    0    0               00 
SQL: [;INSERT INTO c1(a) VALUES(NULL);]
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    1    3 0             01 usesStmtJournal=0
  17 OpenRead         0    4    0 2             00 root=4 iDb=0; sqlite_sequence
  18 String8          0    1    0 c1            00 r[1]='c1'
REG[1] =   t2[c1](8)
  19 Null             0    2    4               00 r[2..4]=NULL
REG[2] =  NULL
  20 Rewind           0   29    0               00 
  29 Integer          0    2    0               00 r[2]=0
REG[2] =  i:0
  30 Close            0    0    0               00 
  31 Goto             0    1    0               00 
   1 OpenWrite        0    3    0 2             00 root=3 iDb=0; c1
   2 NewRowid         0    5    2               00 r[5]=rowid
REG[2] =  i:0
REG[5] =  i:1
   3 MemMax           2    5    0               00 r[2]=max(r[2],r[5])
REG[5] =  i:1
   4 SoftNull         6    0    0               00 r[6]=NULL
   5 Null             0    7    0               00 r[7]=NULL
REG[7] =  NULL
   6 MakeRecord       6    2    8 D             00 r[8]=mkrec(r[6..7])
REG[8] =  s3[030000...]
   7 Insert           0    8    5 c1            39 intkey=r[5] data=r[8]
REG[8] =  s3[030000...]
REG[5] =  i:1
   8 Le               4   15    2               00 if r[2]<=r[4] goto 15
REG[4] =  NULL
REG[2] =  i:1
   9 OpenWrite        0    4    0 2             00 root=4 iDb=0; sqlite_sequence
  10 NotNull          3   12    0               00 if r[3]!=NULL goto 12
REG[3] =  NULL
  11 NewRowid         0    3    0               00 r[3]=rowid
REG[3] =  i:1
  12 MakeRecord       1    2    9               00 r[9]=mkrec(r[1..2])
REG[9] =  s5[0311096331...c1]
  13 Insert           0    9    3               08 intkey=r[3] data=r[9]
REG[9] =  s5[0311096331...c1]
REG[3] =  i:1
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
SQL: [;SELECT 1, * FROM main.sqlite_sequence;]
VDBE Trace:
   0 Init             0   10    0               00 Start at 10
  10 Transaction      0    0    3 0             01 usesStmtJournal=0
  11 Goto             0    1    0               00 
   1 OpenRead         0    4    0 2             00 root=4 iDb=0; sqlite_sequence
   2 Explain          2    0    0 SCAN TABLE sqlite_sequence 00 
   3 Rewind           0    9    0               00 
   4 Integer          1    1    0               00 r[1]=1
REG[1] =  i:1
   5 Column           0    0    2               00 r[2]=sqlite_sequence.name
REG[2] =   s2[c1](8)
   6 Column           0    1    3               00 r[3]=sqlite_sequence.seq
REG[3] =  i:1
   7 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =  i:1
REG[2] =   s2[c1](8)
REG[3] =  i:1
   8 Next             0    4    0               01 
   9 Halt             0    0    0               00 
SQL: [;CREATE TABLE b(c TEXT, CHECK(c BETWEEN +c AND 999999));]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    3 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:2
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:4
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:4
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:4
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:4
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:4
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 b             00 r[7]='b'
REG[7] =   t1[b](8)
  20 String8          0    8    0 b             00 r[8]='b'
REG[8] =   t1[b](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:2
  22 String8          0   10    0 CREATE TABLE b(c TEXT, CHECK(c BETWEEN +c AND 999999)) 00 r[10]='CREATE TABLE b(c TEXT, CHECK(c BETWEEN +c AND 999999))'
REG[10] =   t54[CREATE TABLE b(](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s68[06170F0F01797461626C656262024352.....ytablebb.CR]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s68[06170F0F01797461626C656262024352.....ytablebb.CR]
REG[5] =  i:4
  25 SetCookie        0    1    4               00 
  26 ParseSchema      0    0    0 tbl_name='b' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    4 0             00 usesStmtJournal=0
  16 String8          0    2    0 b             00 r[2]='b'
REG[2] =   t1[b](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s2[c1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s1[b](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[b](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:2
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s54[CREATE TABLE b(](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[b](8)
REG[5] =  i:2
REG[6] =   s54[CREATE TABLE b(](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [
;
;
;CREATE TABLE t1a(t2 INTEGER PRIMARY KEY AUTOINCREMENT, t1bc);]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    4 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:5
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:5
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:5
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:5
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:5
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:5
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 t1a           00 r[7]='t1a'
REG[7] =   t3[t1a](8)
  20 String8          0    8    0 t1a           00 r[8]='t1a'
REG[8] =   t3[t1a](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:5
  22 String8          0   10    0 CREATE TABLE t1a(t2 INTEGER PRIMARY KEY AUTOINCREMENT, t1bc) 00 r[10]='CREATE TABLE t1a(t2 INTEGER PRIMARY KEY AUTOINCREMENT, t1bc)'
REG[10] =   t60[CREATE TABLE t1](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s79[071713130181057461626C6574316174.......tablet1at]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s79[071713130181057461626C6574316174.......tablet1at]
REG[5] =  i:5
  25 SetCookie        0    1    5               00 
  26 ParseSchema      0    0    0 tbl_name='t1a' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    5 0             00 usesStmtJournal=0
  16 String8          0    2    0 t1a           00 r[2]='t1a'
REG[2] =   t3[t1a](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[t1a](8)
REG[1] =   s2[c1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[t1a](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[t1a](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[t1a](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[t1a](8)
REG[1] =   s3[t1a](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s3[t1a](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:5
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s60[CREATE TABLE t1](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s3[t1a](8)
REG[5] =  i:5
REG[6] =   s60[CREATE TABLE t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;INSERT INTO b(c) VALUES(NULL);]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    1    5 0             01 usesStmtJournal=0
  12 Integer       999999    4    0               00 r[4]=999999
REG[4] =  i:999999
  13 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; b
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Null             0    2    0               00 r[2]=NULL
REG[2] =  NULL
   4 Abortable        0    0    0               00 
   5 Lt               2    7    2 (BINARY)      42 if r[2]<r[2] goto 7
REG[2] =  NULL
REG[2] =  NULL
   6 Le               4    8    2 (BINARY)      52 if r[2]<=r[4] goto 8
REG[4] =  i:999999
REG[2] =  NULL
   8 MakeRecord       2    1    3 B             00 r[3]=mkrec(r[2])
REG[3] =  s2[0200..]
   9 Insert           0    3    1 b             39 intkey=r[1] data=r[3]
REG[3] =  s2[0200..]
REG[1] =  i:1
  10 Halt             0    0    0               00 
SQL: [;CREATE TABLE d(e INTEGER, f REAL, PRIMARY KEY(e AUTOINCREMENT));]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    5 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:6
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:6
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:6
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:6
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:6
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:6
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 d             00 r[7]='d'
REG[7] =   t1[d](8)
  20 String8          0    8    0 d             00 r[8]='d'
REG[8] =   t1[d](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:6
  22 String8          0   10    0 CREATE TABLE d(e INTEGER, f REAL, PRIMARY KEY(e AUTOINCREMENT)) 00 r[10]='CREATE TABLE d(e INTEGER, f REAL, PRIMARY KEY(e AUTOINCREMENT))'
REG[10] =   t63[CREATE TABLE d(](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s78[07170F0F01810B7461626C6564640643.......tabledd.C]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s78[07170F0F01810B7461626C6564640643.......tabledd.C]
REG[5] =  i:6
  25 SetCookie        0    1    6               00 
  26 ParseSchema      0    0    0 tbl_name='d' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    6 0             00 usesStmtJournal=0
  16 String8          0    2    0 d             00 r[2]='d'
REG[2] =   t1[d](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s2[c1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[t1a](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s3[t1a](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[d](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s1[d](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[d](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:6
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s63[CREATE TABLE d(](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[d](8)
REG[5] =  i:6
REG[6] =   s63[CREATE TABLE d(](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;INSERT INTO b(c) VALUES(234);]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    1    6 0             01 usesStmtJournal=0
  12 Integer       999999    4    0               00 r[4]=999999
REG[4] =  i:999999
  13 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; b
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   3 Integer        234    2    0               00 r[2]=234
REG[2] =  i:234
   4 Abortable        0    0    0               00 
   5 Lt               2    7    2 (BINARY)      42 if r[2]<r[2] goto 7

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f51cf8c3859 in __GI_abort () at abort.c:79
#2  0x00007f51cf8c3729 in __assert_fail_base (fmt=0x7f51cfa59588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=<optimized out>) at assert.c:92
#3  0x00007f51cf8d4fd6 in __GI___assert_fail (assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=0x216524 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003c5c6a in sqlite3VdbeExec (p=0x130f5a0) at sqlite3.c:85580
#5  0x0000000000411104 in sqlite3Step (p=0x130f5a0) at sqlite3.c:81930
#6  0x000000000029128d in sqlite3_step (pStmt=0x130f5a0) at sqlite3.c:81995
#7  0x00000000002570b9 in main (argc=1, argv=0x7ffe8b83eec8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 53477] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
