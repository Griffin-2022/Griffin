GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000105,sig:06,src:020705+017806,time:2378335,execs:342935,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;SELECT *, '|'
      FROM pragma_foreign_key_check AS x
      ORDER BY x."table";]
VDBE Program Listing:
   0 Init             0   27    0               00 Start at 27
   1 SorterOpen       1    7    0 k(1,B)        00 
   2 VOpen            0    0    0 vtab:DB5F20   00 
   3 Explain          3    0    0 SCAN TABLE pragma_foreign_key_check AS x VIRTUAL TABLE INDEX 0: 00 
   4 Integer          0    1    0               00 r[1]=0
   5 Integer          0    2    0               00 r[2]=0
   6 VFilter          0   15    1               00 iplan=r[1] zplan=''
   7 VColumn          0    1    4               00 r[4]=vcolumn(1); pragma_foreign_key_check.rowid
   8 VColumn          0    2    5               00 r[5]=vcolumn(2); pragma_foreign_key_check.parent
   9 VColumn          0    3    6               00 r[6]=vcolumn(3); pragma_foreign_key_check.fkid
  10 String8          0    7    0 |             00 r[7]='|'
  11 VColumn          0    0    3               00 r[3]=vcolumn(0); pragma_foreign_key_check.table
  12 MakeRecord       3    5    9               00 r[9]=mkrec(r[3..7])
  13 SorterInsert     1    9    3 5             00 key=r[9]
  14 VNext            0    7    0               00 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2   10    7               00 7 columns in r[10]
  17 SorterSort       1   26    0               00 
  18 SorterData       1   10    2               00 r[10]=data
  19 Column           2    4    8               00 r[8]='|'
  20 Column           2    3    7               00 r[7]=fkid
  21 Column           2    2    6               00 r[6]=parent
  22 Column           2    1    5               00 r[5]=rowid
  23 Column           2    0    4               00 r[4]=table
  24 ResultRow        4    5    0               00 output=r[4..8]
  25 SorterNext       1   18    0               00 
  26 Halt             0    0    0               00 
  27 Transaction      0    0    1 0             01 usesStmtJournal=0
  28 Goto             0    1    0               00 
SQL: [PRAGMA foreign_key_check]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Halt             0    0    0               00 
SQL: [;
;DROP TABLE t0;]
VDBE Program Listing:
   0 Init             0   38    0               00 Start at 38
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
   7 Column           0    0    2               00 r[2]=sqlite_master.type
   8 Eq               4   12    2 (BINARY)      52 if r[2]==r[4] goto 12
   9 Rowid            0    5    0               00 r[5]=rowid
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
  13 Destroy          2    2    0               00 
  14 Null             0    6    7               00 r[6..7]=NULL
  15 IfNot            2   24    1               00 
  16 OpenRead         1    1    0 4             00 root=1 iDb=0; sqlite_master
  17 Explain         17    0    0 SCAN TABLE sqlite_master 00 
  18 Rewind           1   24    0               00 
  19 Column           1    3   13               00 r[13]=sqlite_master.rootpage
  20 Ne               2   23   13 (BINARY)      54 if r[13]!=r[2] goto 23
  21 Rowid            1    7    0               00 r[7]=rowid
  22 RowSetAdd        6    7    0               00 rowset(6)=r[7]
  23 Next             1   19    0               01 
  24 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  25 RowSetRead       6   35    7               00 r[7]=rowset(6)
  26 NotExists        1   25    7               00 intkey=r[7]
  27 Column           1    0    8               00 r[8]=sqlite_master.type
  28 Column           1    1    9               00 r[9]=sqlite_master.name
  29 Column           1    2   10               00 r[10]=sqlite_master.tbl_name
  30 Integer          2   11    0               00 r[11]=2
  31 Column           1    4   12               00 r[12]=sqlite_master.sql
  32 MakeRecord       8    5   13 BBBDB         00 r[13]=mkrec(r[8..12])
  33 Insert           1   13    7               00 intkey=r[7] data=r[13]
  34 Goto             0   25    0               00 
  35 DropTable        0    0    0 t0            00 
  36 SetCookie        0    1    2               00 
  37 Halt             0    0    0               00 
  38 Transaction      0    1    1 0             01 usesStmtJournal=1
  39 String8          0    3    0 t0            00 r[3]='t0'
  40 String8          0    4    0 trigger       00 r[4]='trigger'
  41 Goto             0    1    0               00 
SQL: [;CREATE TABLE t0(c0 TEXT, CHECK(c0 BETWEEN +c0 AND 999999));]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t0            00 r[7]='t0'
  20 String8          0    8    0 t0            00 r[8]='t0'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t0(c0 TEXT, CHECK(c0 BETWEEN +c0 AND 999999)) 00 r[10]='CREATE TABLE t0(c0 TEXT, CHECK(c0 BETWEEN +c0 AND 999999))'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    3               00 
  26 ParseSchema      0    0    0 tbl_name='t0' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    2 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    3 0             00 usesStmtJournal=0
  16 String8          0    2    0 t0            00 r[2]='t0'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO t0(c0) VALUES(NULL),(5);]
VDBE Program Listing:
   0 Init             0   19    0               00 Start at 19
   1 InitCoroutine    3    8    2               00 
   2 Explain          2    0    0 SCAN 2 CONSTANT ROWS 00 
   3 Null             0    2    0               00 r[2]=NULL
   4 Yield            3    0    0               00 
   5 Integer          5    2    0               00 r[2]=5
   6 Yield            3    0    0               00 
   7 EndCoroutine     3    0    0               00 
   8 OpenWrite        0    2    0 1             00 root=2 iDb=0; t0
   9 Yield            3   18    0               00 
  10 NewRowid         0    1    0               00 r[1]=rowid
  11 Abortable        0    0    0               00 
  12 Lt               2   14    2 (BINARY)      42 if r[2]<r[2] goto 14
  13 Le               5   15    2 (BINARY)      52 if r[2]<=r[5] goto 15
  14 Halt           275    2    0 t0            03 
  15 MakeRecord       2    1    4 B             00 r[4]=mkrec(r[2])
  16 Insert           0    4    1 t0            39 intkey=r[1] data=r[4]
  17 Goto             0    9    0               00 
  18 Halt             0    0    0               00 
  19 Transaction      0    1    3 0             01 usesStmtJournal=1
  20 Integer       999999    5    0               00 r[5]=999999
  21 Goto             0    1    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fc9474f2859 in __GI_abort () at abort.c:79
#2  0x00007fc9474f2729 in __assert_fail_base (fmt=0x7fc947688588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=<optimized out>) at assert.c:92
#3  0x00007fc947503fd6 in __GI___assert_fail (assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=0x216524 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003c5c6a in sqlite3VdbeExec (p=0xda00e0) at sqlite3.c:85580
#5  0x0000000000411104 in sqlite3Step (p=0xda00e0) at sqlite3.c:81930
#6  0x000000000029128d in sqlite3_step (pStmt=0xda00e0) at sqlite3.c:81995
#7  0x00000000002570b9 in main (argc=1, argv=0x7ffdd7fe0f18) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 50980] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
