GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000340,sig:06,src:018260+019592,time:8851729,execs:1931377,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;SELECT coalesce(max(quote(c1)),10) FROM t0 GROUP BY c1;]
VDBE Trace:
   0 Init             0   45    0               00 Start at 45
  45 Transaction      0    0    4 0             01 usesStmtJournal=0
  46 Goto             0    1    0               00 
   1 SorterOpen       1    1    0 k(1,B)        00 
   2 Integer          0    4    0               00 r[4]=0; clear abort flag
REG[4] =  i:0
   3 Null             0    7    7               00 r[7..7]=NULL
REG[7] =  NULL
   4 Gosub            6   41    0               00 
REG[6] =  i:4
  41 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
  42 Integer          0    3    0               00 r[3]=0; indicate accumulator empty
REG[3] =  i:0
  43 Return           6    0    0               00 
REG[6] =  i:4
   5 OpenRead         0    2    0 2             00 root=2 iDb=0; t0
   6 Explain          6    0    0 SCAN TABLE t0 00 
   7 Rewind           0   13    0               00 
   8 Explain          8    0    0 USE TEMP B-TREE FOR GROUP BY 00 
   9 Column           0    1    9               00 r[9]=t0.c1
REG[9] =  i:100000000000000001
  10 MakeRecord       9    1   10               00 r[10]=mkrec(r[9])
REG[10] =  s10[0206016345785D8A0001...cEx]...]
  11 SorterInsert     1   10    0               00 key=r[10]
REG[10] =  s10[0206016345785D8A0001...cEx]...]
  12 Next             0    8    0               01 
   8 Explain          8    0    0 USE TEMP B-TREE FOR GROUP BY 00 
   9 Column           0    1    9               00 r[9]=t0.c1
REG[9] =  NULL
  10 MakeRecord       9    1   10               00 r[10]=mkrec(r[9])
REG[10] =  s2[0200..]
  11 SorterInsert     1   10    0               00 key=r[10]
REG[10] =  s2[0200..]
  12 Next             0    8    0               01 
  13 OpenPseudo       2    9    1               00 1 columns in r[9]
  14 SorterSort       1   44    0               00 GROUP BY sort
  15 SorterData       1    9    2               00 r[9]=data
  16 Column           2    0    8               00 r[8]=
REG[8] =  NULL
  17 Compare          7    8    1 k(1,B)        00 r[7] <-> r[8]
REG[7] =  NULL
REG[8] =  NULL
  18 Jump            19   23   19               00 
  23 Column           2    0   11               00 r[11]=
REG[11] =  NULL
  24 Function0        0   11   10 quote(1)      01 r[10]=func(r[11])
REG[11] =  NULL
REG[10] =   t4[NULL](8)
  25 CollSeq          0    0    0 (BINARY)      00 
  26 AggStep          0   10    1 max(1)        01 accum=r[1] step(r[10])
REG[10] =   t4[NULL](8)
  27 Integer          1    3    0               00 r[3]=1; indicate data in accumulator
REG[3] =  i:1
  28 SorterNext       1   15    0               00 
  15 SorterData       1    9    2               00 r[9]=data
  16 Column           2    0    8               00 r[8]=
REG[8] =  i:100000000000000001
  17 Compare          7    8    1 k(1,B)        00 r[7] <-> r[8]
REG[7] =  NULL
REG[8] =  i:100000000000000001
  18 Jump            19   23   19               00 
  19 Move             8    7    1               00 r[7]=r[8]
REG[7] =  i:100000000000000001
  20 Gosub            5   33    0               00 output one row
REG[5] =  i:20
  33 IfPos            3   35    0               00 if r[3]>0 then r[3]-=0, goto 35; Groupby result generator entry point
REG[3] =  i:1
  35 AggFinal         1    1    0 max(1)        00 accum=r[1] N=1
  36 SCopy            1   12    0               00 r[12]=r[1]
REG[12] =   t4[NULL](8)
  37 NotNull         12   39    0               00 if r[12]!=NULL goto 39
REG[12] =   t4[NULL](8)
  39 ResultRow       12    1    0               00 output=r[12]
REG[12] =   s4[NULL](8)
  40 Return           5    0    0               00 end groupby result generator
REG[5] =  i:20
  21 IfPos            4   44    0               00 if r[4]>0 then r[4]-=0, goto 44; check abort flag
REG[4] =  i:0
  22 Gosub            6   41    0               00 reset accumulator
REG[6] =  i:22
  41 Null             0    1    2               00 r[1..2]=NULL

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f1811a1b859 in __GI_abort () at abort.c:79
#2  0x00007f1811a1b729 in __assert_fail_base (fmt=0x7f1811bb1588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x221a82 "(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)", file=0x22873d "sqlite3.c", 
    line=75351, function=<optimized out>) at assert.c:92
#3  0x00007f1811a2cfd6 in __GI___assert_fail (assertion=0x221a82 "(mFlags&MEM_Str)==0 || (pMem->n==pX->n && pMem->z==pX->z)", file=0x22873d "sqlite3.c", line=75351, 
    function=0x208940 "void sqlite3VdbeMemAboutToChange(Vdbe *, Mem *)") at assert.c:101
#4  0x00000000003e1103 in sqlite3VdbeMemAboutToChange (pVdbe=0x257a1e0, pMem=0x25798c8) at sqlite3.c:75351
#5  0x00000000003c031d in sqlite3VdbeExec (p=0x257a1e0) at sqlite3.c:84329
#6  0x0000000000411104 in sqlite3Step (p=0x257a1e0) at sqlite3.c:81930
#7  0x000000000029128d in sqlite3_step (pStmt=0x257a1e0) at sqlite3.c:81995
#8  0x00000000002570b9 in main (argc=1, argv=0x7ffe8cd291f8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 53295] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
