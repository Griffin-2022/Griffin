GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000124,sig:06,src:020907+021530,time:2589810,execs:402225,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;
;CREATE TABLE c(v1,xyz);]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    2 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:3
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:3
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:3
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:3
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:3
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:3
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 c             00 r[7]='c'
REG[7] =   t1[c](8)
  20 String8          0    8    0 c             00 r[8]='c'
REG[8] =   t1[c](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:3
  22 String8          0   10    0 CREATE TABLE c(v1,xyz) 00 r[10]='CREATE TABLE c(v1,xyz)'
REG[10] =   t22[CREATE TABLE c(](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s36[06170F0F01397461626C656363034352.....9tablecc.CR]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s36[06170F0F01397461626C656363034352.....9tablecc.CR]
REG[5] =  i:3
  25 SetCookie        0    1    3               00 
  26 ParseSchema      0    0    0 tbl_name='c' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    3 0             00 usesStmtJournal=0
  16 String8          0    2    0 c             00 r[2]='c'
REG[2] =   t1[c](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[c](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[c](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[c](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[c](8)
REG[1] =   s1[c](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[c](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s22[CREATE TABLE c(](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[c](8)
REG[5] =  i:3
REG[6] =   s22[CREATE TABLE c(](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;
;ATTACH ':memory:' AS aux1;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 String8          0    1    0 :memory:      00 r[1]=':memory:'
REG[1] =   t8[:memory:](8)
   2 String8          0    2    0 aux1          00 r[2]='aux1'
REG[2] =   t4[aux1](8)
   3 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
   4 Function0        0    1    4 sqlite_attach(3) 03 r[4]=func(r[1..3])
REG[1] =   t8[:memory:](8)
REG[2] =   t4[aux1](8)
REG[3] =  NULL
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      2    0    0 0             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    2 5             00 root=1 iDb=2; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
  10 Halt             0    0    0               00 
REG[4] =  NULL
   5 Expire           1    0    0               00 
   6 Halt             0    0    0               00 
SQL: [;
;pragma recursive_triggers = off 
;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;CREATE TRIGGER tt1 BEFORE INSERT ON t1 BEGIN
        INSERT INTO t1(a) VALUES('before1');
        INSERT INTO t1(a) VALUES('before2');
      END;]
VDBE Trace:
   0 Init             0   13    0               00 Start at 13
  13 Transaction      0    1    3 0             01 usesStmtJournal=0
  14 Goto             0    1    0               00 
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:4
   3 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
   4 String8          0    3    0 tt1           00 r[3]='tt1'
REG[3] =   t3[tt1](8)
   5 String8          0    4    0 t1            00 r[4]='t1'
REG[4] =   t2[t1](8)
   6 Integer          0    5    0               00 r[5]=0
REG[5] =  i:0
   7 String8          0    6    0 CREATE TRIGGER tt1 BEFORE INSERT ON t1 BEGIN
        INSERT INTO t1(a) VALUES('before1');
        INSERT INTO t1(a) VALUES('before2');
      END 00 r[6]='CREATE TRIGGER tt1 BEFORE INSERT ON t1 BEGIN
        INSERT INTO t1(a) VALUES('before1');
   
REG[6] =   t144[CREATE TRIGGER ](8)
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
REG[7] =  s163[071B131108822D747269676765727474......-triggertt]
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
REG[7] =  s163[071B131108822D747269676765727474......-triggertt]
REG[1] =  i:4
  10 SetCookie        0    1    4               00 
  11 ParseSchema      0    0    0 type='trigger' AND name='tt1' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    4 0             00 usesStmtJournal=0
  16 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
  17 String8          0    3    0 tt1           00 r[3]='tt1'
REG[3] =   t3[tt1](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s4[view](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s4[view](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[tt1](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t3[tt1](8)
REG[1] =   s3[tt1](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s3[tt1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:0
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s144[CREATE TRIGGER ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s3[tt1](8)
REG[5] =  i:0
REG[6] =   s144[CREATE TRIGGER ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  12 Halt             0    0    0               00 
SQL: [;CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN
        INSERT INTO t1(a) VALUES('after1');
        INSERT INTO t1(a) VALUES('after2');
      END;]
VDBE Trace:
   0 Init             0   13    0               00 Start at 13
  13 Transaction      0    1    4 0             01 usesStmtJournal=0
  14 Goto             0    1    0               00 
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:5
   3 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
   4 String8          0    3    0 tr1           00 r[3]='tr1'
REG[3] =   t3[tr1](8)
   5 String8          0    4    0 t1            00 r[4]='t1'
REG[4] =   t2[t1](8)
   6 Integer          0    5    0               00 r[5]=0
REG[5] =  i:0
   7 String8          0    6    0 CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN
        INSERT INTO t1(a) VALUES('after1');
        INSERT INTO t1(a) VALUES('after2');
      END 00 r[6]='CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN
        INSERT INTO t1(a) VALUES('after1');
     
REG[6] =   t141[CREATE TRIGGER ](8)
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
REG[7] =  s160[071B1311088227747269676765727472......'triggertr]
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
REG[7] =  s160[071B1311088227747269676765727472......'triggertr]
REG[1] =  i:5
  10 SetCookie        0    1    5               00 
  11 ParseSchema      0    0    0 type='trigger' AND name='tr1' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    5 0             00 usesStmtJournal=0
  16 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
  17 String8          0    3    0 tr1           00 r[3]='tr1'
REG[3] =   t3[tr1](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s4[view](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s4[view](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[tt1](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t3[tr1](8)
REG[1] =   s3[tt1](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[tr1](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t3[tr1](8)
REG[1] =   s3[tr1](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s3[tr1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:0
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s141[CREATE TRIGGER ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s3[tr1](8)
REG[5] =  i:0
REG[6] =   s141[CREATE TRIGGER ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  12 Halt             0    0    0               00 
SQL: [;SELECT * FROM t1 ORDER BY a;]
VDBE Trace:
   0 Init             0   17    0               00 Start at 17
  17 Transaction      0    0    5 0             01 usesStmtJournal=0
  18 Goto             0    1    0               00 
   1 SorterOpen       1    3    0 k(1,B)        00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    9    0               00 
   9 Explain          9    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  10 OpenPseudo       2    4    3               00 3 columns in r[4]
  11 SorterSort       1   16    0               00 
  16 Halt             0    0    0               00 
SQL: [;INSERT INTO t1(a) VALUES(NULL);]
VDBE Trace:
   0 Init             0   12    0               00 Start at 12
  12 Transaction      0    1    5 0             01 usesStmtJournal=0
  13 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   2 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   3 Null             0    4    0               00 r[4]=NULL
REG[4] =  NULL
   4 Copy             4    5    0               00 r[5]=r[4]
REG[5] =  NULL
   5 Program          1   11    6 program       01 Call: tt1.default
   0 Init             0    1    0 -- TRIGGER tt1 00 Start at 1; Start: tt1.default (BEFORE INSERT ON t1)
   1 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('before1') 00 
   2 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   3 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   4 String8          0    4    0 before1       00 r[4]='before1'
REG[4] =   t7[before1](8)
   5 Copy             4    5    0               00 r[5]=r[4]
REG[5] =   t7[before1](8)
   6 Program          1   12    6 program       01 Call: tt1.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   8 Copy             5    2    0               00 r[2]=r[5]
REG[2] =   t7[before1](8)
   9 MakeRecord       2    1    7               00 r[7]=mkrec(r[2])
REG[7] =  s9[021B6265666F726531..before1]
  10 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s9[021B6265666F726531..before1]
REG[1] =  i:1
  11 Program         -1   12    8 program       01 Call: tr1.default
   0 Init             0    1    0 -- TRIGGER tr1 00 Start at 1; Start: tr1.default (AFTER INSERT ON t1)
   1 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('after1') 00 
   2 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   3 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   4 String8          0    4    0 after1        00 r[4]='after1'
REG[4] =   t6[after1](8)
   5 Copy             4    5    0               00 r[5]=r[4]
REG[5] =   t6[after1](8)
   6 Program          1   12    6 program       01 Call: tt1.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   8 Copy             5    2    0               00 r[2]=r[5]
REG[2] =   t6[after1](8)
   9 MakeRecord       2    1    7               00 r[7]=mkrec(r[2])
REG[7] =  s8[0219616674657231..after1]
  10 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s8[0219616674657231..after1]
REG[1] =  i:2
  11 Program         -1   12    8 program       01 Call: tr1.default
  12 ResetCount       0    0    0               00 
  13 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('after2') 00 
  14 OpenWrite        1    2    0 1             00 root=2 iDb=0; t1
  15 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
  16 String8          0    4    0 after2        00 r[4]='after2'
REG[4] =   t6[after2](8)
  17 Copy             4   11    0               00 r[11]=r[4]
REG[11] =   t6[after2](8)
  18 Program          1   24   12 program       01 Call: tt1.default
  19 NewRowid         1    9    0               00 r[9]=rowid
REG[9] =  i:3
  20 Copy            11   10    0               00 r[10]=r[11]
REG[10] =   t6[after2](8)
  21 MakeRecord      10    1   13               00 r[13]=mkrec(r[10])
REG[13] =  s8[0219616674657232..after2]
  22 Insert           1   13    9 t1            39 intkey=r[9] data=r[13]
REG[13] =  s8[0219616674657232..after2]
REG[9] =  i:3
  23 Program          7   24   14 program       01 Call: tr1.default
  24 ResetCount       0    0    0               00 
  25 Halt             0    0    0               00 End: tr1.default
  12 ResetCount       0    0    0               00 
  13 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('before2') 00 
  14 OpenWrite        1    2    0 1             00 root=2 iDb=0; t1
  15 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
  16 String8          0    4    0 before2       00 r[4]='before2'
REG[4] =   t7[before2](8)
  17 Copy             4   11    0               00 r[11]=r[4]
REG[11] =   t7[before2](8)
  18 Program          1   24   12 program       01 Call: tt1.default
  19 NewRowid         1    9    0               00 r[9]=rowid
REG[9] =  i:4
  20 Copy            11   10    0               00 r[10]=r[11]
REG[10] =   t7[before2](8)
  21 MakeRecord      10    1   13               00 r[13]=mkrec(r[10])
REG[13] =  s9[021B6265666F726532..before2]
  22 Insert           1   13    9 t1            39 intkey=r[9] data=r[13]
REG[13] =  s9[021B6265666F726532..before2]
REG[9] =  i:4
  23 Program          7   24   14 program       01 Call: tr1.default
   0 Init             1    1    0 -- TRIGGER tr1 00 Start at 1; Start: tr1.default (AFTER INSERT ON t1)
   1 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('after1') 00 
   2 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   3 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   4 String           6    4    0 after1        00 r[4]='after1' (len=6)
REG[4] =   t6[after1](8)
   5 Copy             4    5    0               00 r[5]=r[4]
REG[5] =   t6[after1](8)
   6 Program          1   12    6 program       01 Call: tt1.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:5
   8 Copy             5    2    0               00 r[2]=r[5]
REG[2] =   t6[after1](8)
   9 MakeRecord       2    1    7               00 r[7]=mkrec(r[2])
REG[7] =  s8[0219616674657231..after1]
  10 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s8[0219616674657231..after1]
REG[1] =  i:5
  11 Program         -1   12    8 program       01 Call: tr1.default
  12 ResetCount       0    0    0               00 
  13 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('after2') 00 
  14 OpenWrite        1    2    0 1             00 root=2 iDb=0; t1
  15 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
  16 String           6    4    0 after2        00 r[4]='after2' (len=6)
REG[4] =   t6[after2](8)
  17 Copy             4   11    0               00 r[11]=r[4]
REG[11] =   t6[after2](8)
  18 Program          1   24   12 program       01 Call: tt1.default
  19 NewRowid         1    9    0               00 r[9]=rowid
REG[9] =  i:6
  20 Copy            11   10    0               00 r[10]=r[11]
REG[10] =   t6[after2](8)
  21 MakeRecord      10    1   13               00 r[13]=mkrec(r[10])
REG[13] =  s8[0219616674657232..after2]
  22 Insert           1   13    9 t1            39 intkey=r[9] data=r[13]
REG[13] =  s8[0219616674657232..after2]
REG[9] =  i:6
  23 Program          7   24   14 program       01 Call: tr1.default
  24 ResetCount       0    0    0               00 
  25 Halt             0    0    0               00 End: tr1.default
  24 ResetCount       0    0    0               00 
  25 Halt             0    0    0               00 End: tt1.default
   6 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:7
   7 Copy             5    2    0               00 r[2]=r[5]
REG[2] =  NULL
   8 MakeRecord       2    1    7               00 r[7]=mkrec(r[2])
REG[7] =  s2[0200..]
   9 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s2[0200..]
REG[1] =  i:7
  10 Program         -1   11    8 program       01 Call: tr1.default
   0 Init             2    1    0 -- TRIGGER tr1 00 Start at 1; Start: tr1.default (AFTER INSERT ON t1)
   1 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('after1') 00 
   2 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   3 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   4 String           6    4    0 after1        00 r[4]='after1' (len=6)
REG[4] =   t6[after1](8)
   5 Copy             4    5    0               00 r[5]=r[4]
REG[5] =   t6[after1](8)
   6 Program          1   12    6 program       01 Call: tt1.default
   0 Init             1    1    0 -- TRIGGER tt1 00 Start at 1; Start: tt1.default (BEFORE INSERT ON t1)
   1 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('before1') 00 
   2 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   3 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   4 String           7    4    0 before1       00 r[4]='before1' (len=7)
REG[4] =   t7[before1](8)
   5 Copy             4    5    0               00 r[5]=r[4]
REG[5] =   t7[before1](8)
   6 Program          1   12    6 program       01 Call: tt1.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:8
   8 Copy             5    2    0               00 r[2]=r[5]
REG[2] =   t7[before1](8)
   9 MakeRecord       2    1    7               00 r[7]=mkrec(r[2])
REG[7] =  s9[021B6265666F726531..before1]
  10 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s9[021B6265666F726531..before1]
REG[1] =  i:8
  11 Program         -1   12    8 program       01 Call: tr1.default
  12 ResetCount       0    0    0               00 
  13 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('before2') 00 
  14 OpenWrite        1    2    0 1             00 root=2 iDb=0; t1
  15 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
  16 String           7    4    0 before2       00 r[4]='before2' (len=7)
REG[4] =   t7[before2](8)
  17 Copy             4   11    0               00 r[11]=r[4]
REG[11] =   t7[before2](8)
  18 Program          1   24   12 program       01 Call: tt1.default
  19 NewRowid         1    9    0               00 r[9]=rowid
REG[9] =  i:9
  20 Copy            11   10    0               00 r[10]=r[11]
REG[10] =   t7[before2](8)
  21 MakeRecord      10    1   13               00 r[13]=mkrec(r[10])
REG[13] =  s9[021B6265666F726532..before2]
  22 Insert           1   13    9 t1            39 intkey=r[9] data=r[13]
REG[13] =  s9[021B6265666F726532..before2]
REG[9] =  i:9
  23 Program          7   24   14 program       01 Call: tr1.default
  24 ResetCount       0    0    0               00 
  25 Halt             0    0    0               00 End: tt1.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:10
   8 Copy             5    2    0               00 r[2]=r[5]
REG[2] =   t6[after1](8)
   9 MakeRecord       2    1    7               00 r[7]=mkrec(r[2])
REG[7] =  s8[0219616674657231..after1]
  10 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s8[0219616674657231..after1]
REG[1] =  i:10
  11 Program         -1   12    8 program       01 Call: tr1.default
  12 ResetCount       0    0    0               00 
  13 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('after2') 00 
  14 OpenWrite        1    2    0 1             00 root=2 iDb=0; t1
  15 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
  16 String           6    4    0 after2        00 r[4]='after2' (len=6)
REG[4] =   t6[after2](8)
  17 Copy             4   11    0               00 r[11]=r[4]
REG[11] =   t6[after2](8)
  18 Program          1   24   12 program       01 Call: tt1.default
   0 Init             2    1    0 -- TRIGGER tt1 00 Start at 1; Start: tt1.default (BEFORE INSERT ON t1)
   1 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('before1') 00 
   2 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   3 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   4 String           7    4    0 before1       00 r[4]='before1' (len=7)
REG[4] =   t7[before1](8)
   5 Copy             4    5    0               00 r[5]=r[4]
REG[5] =   t7[before1](8)
   6 Program          1   12    6 program       01 Call: tt1.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:11
   8 Copy             5    2    0               00 r[2]=r[5]
REG[2] =   t7[before1](8)
   9 MakeRecord       2    1    7               00 r[7]=mkrec(r[2])
REG[7] =  s9[021B6265666F726531..before1]
  10 Insert           0    7    1 t1            39 intkey=r[1] data=r[7]
REG[7] =  s9[021B6265666F726531..before1]
REG[1] =  i:11
  11 Program         -1   12    8 program       01 Call: tr1.default
  12 ResetCount       0    0    0               00 
  13 Trace         2147483647    1    0 -- INSERT INTO t1(a) VALUES('before2') 00 
  14 OpenWrite        1    2    0 1             00 root=2 iDb=0; t1
  15 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
  16 String           7    4    0 before2       00 r[4]='before2' (len=7)
REG[4] =   t7[before2](8)
  17 Copy             4   11    0               00 r[11]=r[4]
REG[11] =   t7[before2](8)
  18 Program          1   24   12 program       01 Call: tt1.default
  19 NewRowid         1    9    0               00 r[9]=rowid
REG[9] =  i:12
  20 Copy            11   10    0               00 r[10]=r[11]
REG[10] =   t7[before2](8)
  21 MakeRecord      10    1   13               00 r[13]=mkrec(r[10])
REG[13] =  s9[021B6265666F726532..before2]
  22 Insert           1   13    9 t1            39 intkey=r[9] data=r[13]
REG[13] =  s9[021B6265666F726532..before2]
REG[9] =  i:12
  23 Program          7   24   14 program       01 Call: tr1.default
  24 ResetCount       0    0    0               00 
  25 Halt             0    0    0               00 End: tt1.default
  19 NewRowid         1    9    0               00 r[9]=rowid
REG[9] =  i:13
  20 Copy            11   10    0               00 r[10]=r[11]
REG[10] =   t6[after2](8)
  21 MakeRecord      10    1   13               00 r[13]=mkrec(r[10])
REG[13] =  s8[0219616674657232..after2]
  22 Insert           1   13    9 t1            39 intkey=r[9] data=r[13]
REG[13] =  s8[0219616674657232..after2]
REG[9] =  i:13
  23 Program          7   24   14 program       01 Call: tr1.default
  24 ResetCount       0    0    0               00 
  25 Halt             0    0    0               00 End: tr1.default
  11 Halt             0    0    0               00 
SQL: [SELECT a=='2', rank() OVER (ORDER BY a) FROM t1

;]
VDBE Trace:
   0 Init             0   91    0               00 Start at 91
  91 Transaction      0    0    5 0             01 usesStmtJournal=0
  92 String8          0   22    0 2             00 r[22]='2'
REG[22] =   t1[2](8)
  93 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    2    0               00 nColumn=2
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   26    7               00 subquery_2
  26 Integer          1    9    0               00 r[9]=1
REG[9] =  i:1
  27 Explain         27    0    0 SCAN SUBQUERY 2 00 
  28 InitCoroutine    3    0    7               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:29
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    4    0 k(1,B)        00 
   9 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   17    0               00 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s7[before1](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s7[before1](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s17[031B1B6265666F7265316265666F7265...before1before]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s17[031B1B6265666F7265316265666F7265...before1before]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s6[after1](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s6[after1](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s15[031919616674657231616674657231...after1after1]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s15[031919616674657231616674657231...after1after1]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s6[after2](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s6[after2](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s15[031919616674657232616674657232...after2after2]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s15[031919616674657232616674657232...after2after2]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s7[before2](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s7[before2](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s17[031B1B6265666F7265326265666F7265...before2before]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s17[031B1B6265666F7265326265666F7265...before2before]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s6[after1](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s6[after1](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s15[031919616674657231616674657231...after1after1]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s15[031919616674657231616674657231...after1after1]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s6[after2](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s6[after2](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s15[031919616674657232616674657232...after2after2]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s15[031919616674657232616674657232...after2after2]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =  NULL
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =  NULL
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s3[030000...]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s3[030000...]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s7[before1](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s7[before1](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s17[031B1B6265666F7265316265666F7265...before1before]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s17[031B1B6265666F7265316265666F7265...before1before]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s7[before2](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s7[before2](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s17[031B1B6265666F7265326265666F7265...before2before]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s17[031B1B6265666F7265326265666F7265...before2before]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s6[after1](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s6[after1](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s15[031919616674657231616674657231...after1after1]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s15[031919616674657231616674657231...after1after1]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s7[before1](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s7[before1](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s17[031B1B6265666F7265316265666F7265...before1before]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s17[031B1B6265666F7265316265666F7265...before1before]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s7[before2](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s7[before2](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s17[031B1B6265666F7265326265666F7265...before2before]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s17[031B1B6265666F7265326265666F7265...before2before]
  16 Next             0   12    0               01 
  12 Column           0    0    5               00 r[5]=t1.a
REG[5] =   s6[after2](8)
  13 Column           0    0    4               00 r[4]=t1.a
REG[4] =   s6[after2](8)
  14 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
REG[7] =  s15[031919616674657232616674657232...after2after2]
  15 SorterInsert     6    7    4 2             00 key=r[7]
REG[7] =  s15[031919616674657232616674657232...after2after2]
  16 Next             0   12    0               01 
  17 Explain         17    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  18 OpenPseudo       7    8    4               00 4 columns in r[8]
  19 SorterSort       6   25    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =  NULL
  22 Column           7    1    5               00 r[5]=
REG[5] =  NULL
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =  NULL
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =  NULL
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s3[030000...]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:1
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s3[030000...]
REG[14] =  i:1
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:1
  36 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  37 Rewind           1    1    0               00 
  38 Rewind           4    1    0               00 
  39 Copy            12   15    0               00 r[15]=r[12]
REG[15] =  NULL
  40 Copy            15   16    0               00 r[16]=r[15]
REG[16] =  NULL
  41 Copy            15   17    0               00 r[17]=r[15]
REG[17] =  NULL
  42 Copy            15   18    0               00 r[18]=r[15]
REG[18] =  NULL
  43 Goto             0   63    0               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s6[after1](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s6[after1](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s6[after1](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s6[after1](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s15[031919616674657231616674657231...after1after1]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:2
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s15[031919616674657231616674657231...after1after1]
REG[14] =  i:2
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:2
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =  NULL
REG[12] =   s6[after1](8)
  45 Jump            46   63   46               00 
  46 Copy            12   15    0               00 r[15]=r[12]
REG[15] =   s6[after1](8)
  47 AggStep          0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s6[after1](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =  NULL
REG[19] =   s6[after1](8)
  52 Jump            53   47   53               00 
  53 Copy            19   18    0               00 r[18]=r[19]
REG[18] =   s6[after1](8)
  54 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =  NULL
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =  NULL
REG[20] =  NULL
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:1
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  NULL
REG[21] =  i:1
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s6[after1](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =  NULL
REG[19] =   s6[after1](8)
  61 Jump            62   55   62               00 
  62 Copy            19   17    0               00 r[17]=r[19]
REG[17] =   s6[after1](8)
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s6[after1](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s6[after1](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s6[after1](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s6[after1](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s15[031919616674657231616674657231...after1after1]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:3
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s15[031919616674657231616674657231...after1after1]
REG[14] =  i:3
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:3
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s6[after1](8)
REG[12] =   s6[after1](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s6[after1](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s6[after1](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s6[after1](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s6[after1](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s15[031919616674657231616674657231...after1after1]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:4
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s15[031919616674657231616674657231...after1after1]
REG[14] =  i:4
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:4
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s6[after1](8)
REG[12] =   s6[after1](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s6[after2](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s6[after2](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s6[after2](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s6[after2](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s15[031919616674657232616674657232...after2after2]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:5
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s15[031919616674657232616674657232...after2after2]
REG[14] =  i:5
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:5
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s6[after1](8)
REG[12] =   s6[after2](8)
  45 Jump            46   63   46               00 
  46 Copy            12   15    0               00 r[15]=r[12]
REG[15] =   s6[after2](8)
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s6[after1](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s6[after1](8)
REG[19] =   s6[after1](8)
  52 Jump            53   47   53               00 
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s6[after1](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s6[after1](8)
REG[19] =   s6[after1](8)
  52 Jump            53   47   53               00 
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s6[after2](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s6[after1](8)
REG[19] =   s6[after2](8)
  52 Jump            53   47   53               00 
  53 Copy            19   18    0               00 r[18]=r[19]
REG[18] =   s6[after2](8)
  54 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s6[after1](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s6[after1](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:2
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:2
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s6[after1](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s6[after1](8)
REG[19] =   s6[after1](8)
  61 Jump            62   55   62               00 
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s6[after1](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s6[after1](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:2
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:2
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s6[after1](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s6[after1](8)
REG[19] =   s6[after1](8)
  61 Jump            62   55   62               00 
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s6[after1](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s6[after1](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:2
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:2
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s6[after2](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s6[after1](8)
REG[19] =   s6[after2](8)
  61 Jump            62   55   62               00 
  62 Copy            19   17    0               00 r[17]=r[19]
REG[17] =   s6[after2](8)
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s6[after2](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s6[after2](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s6[after2](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s6[after2](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s15[031919616674657232616674657232...after2after2]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:6
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s15[031919616674657232616674657232...after2after2]
REG[14] =  i:6
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:6
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s6[after2](8)
REG[12] =   s6[after2](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s6[after2](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s6[after2](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s6[after2](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s6[after2](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s15[031919616674657232616674657232...after2after2]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:7
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s15[031919616674657232616674657232...after2after2]
REG[14] =  i:7
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:7
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s6[after2](8)
REG[12] =   s6[after2](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s7[before1](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s7[before1](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s7[before1](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s7[before1](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s17[031B1B6265666F7265316265666F7265...before1before]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:8
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s17[031B1B6265666F7265316265666F7265...before1before]
REG[14] =  i:8
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:8
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s6[after2](8)
REG[12] =   s7[before1](8)
  45 Jump            46   63   46               00 
  46 Copy            12   15    0               00 r[15]=r[12]
REG[15] =   s7[before1](8)
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s6[after2](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s6[after2](8)
REG[19] =   s6[after2](8)
  52 Jump            53   47   53               00 
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s6[after2](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s6[after2](8)
REG[19] =   s6[after2](8)
  52 Jump            53   47   53               00 
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s7[before1](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s6[after2](8)
REG[19] =   s7[before1](8)
  52 Jump            53   47   53               00 
  53 Copy            19   18    0               00 r[18]=r[19]
REG[18] =   s7[before1](8)
  54 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s6[after2](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s6[after2](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:5
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:5
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s6[after2](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s6[after2](8)
REG[19] =   s6[after2](8)
  61 Jump            62   55   62               00 
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s6[after2](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s6[after2](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:5
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:5
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s6[after2](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s6[after2](8)
REG[19] =   s6[after2](8)
  61 Jump            62   55   62               00 
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s6[after2](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s6[after2](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:5
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:5
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s7[before1](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s6[after2](8)
REG[19] =   s7[before1](8)
  61 Jump            62   55   62               00 
  62 Copy            19   17    0               00 r[17]=r[19]
REG[17] =   s7[before1](8)
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s7[before1](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s7[before1](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s7[before1](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s7[before1](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s17[031B1B6265666F7265316265666F7265...before1before]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:9
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s17[031B1B6265666F7265316265666F7265...before1before]
REG[14] =  i:9
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:9
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s7[before1](8)
REG[12] =   s7[before1](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s7[before1](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s7[before1](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s7[before1](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s7[before1](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s17[031B1B6265666F7265316265666F7265...before1before]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:10
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s17[031B1B6265666F7265316265666F7265...before1before]
REG[14] =  i:10
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:10
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s7[before1](8)
REG[12] =   s7[before1](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s7[before2](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s7[before2](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s7[before2](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s7[before2](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s17[031B1B6265666F7265326265666F7265...before2before]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:11
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s17[031B1B6265666F7265326265666F7265...before2before]
REG[14] =  i:11
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:11
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s7[before1](8)
REG[12] =   s7[before2](8)
  45 Jump            46   63   46               00 
  46 Copy            12   15    0               00 r[15]=r[12]
REG[15] =   s7[before2](8)
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s7[before1](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s7[before1](8)
REG[19] =   s7[before1](8)
  52 Jump            53   47   53               00 
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s7[before1](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s7[before1](8)
REG[19] =   s7[before1](8)
  52 Jump            53   47   53               00 
  47 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  48 Next             4   50    0               00 
  50 Column           4    1   19               00 r[19]=
REG[19] =   s7[before2](8)
  51 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s7[before1](8)
REG[19] =   s7[before2](8)
  52 Jump            53   47   53               00 
  53 Copy            19   18    0               00 r[18]=r[19]
REG[18] =   s7[before2](8)
  54 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s7[before1](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s7[before1](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:8
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:8
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s7[before1](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s7[before1](8)
REG[19] =   s7[before1](8)
  61 Jump            62   55   62               00 
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s7[before1](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s7[before1](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:8
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:8
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s7[before1](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s7[before1](8)
REG[19] =   s7[before1](8)
  61 Jump            62   55   62               00 
  55 Gosub           10   84    0               00 
REG[10] =  i:55
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s7[before1](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s7[before1](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:8
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:8
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:55
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  59 Column           1    1   19               00 r[19]=
REG[19] =   s7[before2](8)
  60 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s7[before1](8)
REG[19] =   s7[before2](8)
  61 Jump            62   55   62               00 
  62 Copy            19   17    0               00 r[17]=r[19]
REG[17] =   s7[before2](8)
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s7[before2](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s7[before2](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s7[before2](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s7[before2](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s17[031B1B6265666F7265326265666F7265...before2before]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:12
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s17[031B1B6265666F7265326265666F7265...before2before]
REG[14] =  i:12
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:12
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s7[before2](8)
REG[12] =   s7[before2](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  20 SorterData       6    8    7               00 r[8]=data
  21 Column           7    0    6               00 r[6]=
REG[6] =   s7[before2](8)
  22 Column           7    1    5               00 r[5]=
REG[5] =   s7[before2](8)
  23 Yield            3    0    0               00 
REG[3] =  i:29
REG[3] =  i:23
  30 Copy             5   11    0               00 r[11]=r[5]
REG[11] =   s7[before2](8)
  31 Copy             6   12    0               00 r[12]=r[6]
REG[12] =   s7[before2](8)
  32 MakeRecord      11    2   13               00 r[13]=mkrec(r[11..12])
REG[13] =  s17[031B1B6265666F7265326265666F7265...before2before]
  33 NewRowid         2   14    0               00 r[14]=rowid
REG[14] =  i:13
  34 Insert           2   13   14               00 intkey=r[14] data=r[13]
REG[13] =  s17[031B1B6265666F7265326265666F7265...before2before]
REG[14] =  i:13
  35 Ne               9   44   14               00 if r[14]!=r[9] goto 44
REG[9] =  i:1
REG[14] =  i:13
  44 Compare         15   12    1 k(1,B)        00 r[15] <-> r[12]
REG[15] =   s7[before2](8)
REG[12] =   s7[before2](8)
  45 Jump            46   63   46               00 
  63 Goto             0   29    0               00 
  29 Yield            3   64    0               00 next row of subquery_2
REG[3] =  i:23
REG[3] =  i:29
  24 SorterNext       6   20    0               00 
  25 EndCoroutine     3    0    0               00 
REG[3] =  i:29
  64 Rewind           2   82    0               00 
  65 AggStep          0   19    1 rank(0)       00 accum=r[1] step(r[19])
  66 Next             4   68    0               00 
  68 Column           4    1   19               00 r[19]=
REG[19] =   s7[before2](8)
  69 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s7[before2](8)
REG[19] =   s7[before2](8)
  70 Jump            71   65   71               00 
  65 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  66 Next             4   68    0               00 
  68 Column           4    1   19               00 r[19]=
REG[19] =   s7[before2](8)
  69 Compare         18   19    1 k(1,B)        00 r[18] <-> r[19]
REG[18] =   s7[before2](8)
REG[19] =   s7[before2](8)
  70 Jump            71   65   71               00 
  65 AggStep1         0   19    1 rank(0)       00 accum=r[1] step(r[19])
  66 Next             4   68    0               00 
  67 Goto             0   72    0               00 
  72 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
  73 Gosub           10   84    0               00 
REG[10] =  i:73
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s7[before2](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s7[before2](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:11
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:11
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:73
  74 Delete           1    0    0               02 
  75 Next             1   77    0               00 
  77 Column           1    1   19               00 r[19]=
REG[19] =   s7[before2](8)
  78 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s7[before2](8)
REG[19] =   s7[before2](8)
  79 Jump            80   73   80               00 
  73 Gosub           10   84    0               00 
REG[10] =  i:73
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s7[before2](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s7[before2](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:11
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:11
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:73
  74 Delete           1    0    0               02 
  75 Next             1   77    0               00 
  77 Column           1    1   19               00 r[19]=
REG[19] =   s7[before2](8)
  78 Compare         17   19    1 k(1,B)        00 r[17] <-> r[19]
REG[17] =   s7[before2](8)
REG[19] =   s7[before2](8)
  79 Jump            80   73   80               00 
  73 Gosub           10   84    0               00 
REG[10] =  i:73
  84 Noop             0    0    0               00 inner-loop subroutine
  85 Column           1    0   19               00 r[19]=
REG[19] =   s7[before2](8)
  86 Eq              22   20   19               61 r[20] = (r[19]==r[22])
REG[22] =   t1[2](8)
REG[19] =   s7[before2](8)
REG[20] =  i:0
  87 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:11
  88 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:0
REG[21] =  i:11
  89 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:73
  74 Delete           1    0    0               02 
  75 Next             1   77    0               00 
  76 Goto             0   82    0               00 
  82 ResetSorter      1    0    0               00 
  83 Goto             0   90    0               00 
  90 Halt             0    0    0               00 
SQL: [;CREATE TABLE t2(tr2 TEXT, CHECK(tr2 NOT BETWEEN 0 AND +tr2));]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    5 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:4
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:6
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:6
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:6
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:6
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:6
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 t2            00 r[7]='t2'
REG[7] =   t2[t2](8)
  20 String8          0    8    0 t2            00 r[8]='t2'
REG[8] =   t2[t2](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:4
  22 String8          0   10    0 CREATE TABLE t2(tr2 TEXT, CHECK(tr2 NOT BETWEEN 0 AND +tr2)) 00 r[10]='CREATE TABLE t2(tr2 TEXT, CHECK(tr2 NOT BETWEEN 0 AND +tr2))'
REG[10] =   t60[CREATE TABLE t2](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s77[071711110181057461626C6574327432.......tablet2t2]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s77[071711110181057461626C6574327432.......tablet2t2]
REG[5] =  i:6
  25 SetCookie        0    1    6               00 
  26 ParseSchema      0    0    0 tbl_name='t2' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    6 0             00 usesStmtJournal=0
  16 String8          0    2    0 t2            00 r[2]='t2'
REG[2] =   t2[t2](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t2](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t2](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[c](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t2](8)
REG[1] =   s1[c](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t2](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t2](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t2](8)
REG[1] =   s2[t2](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[t2](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:4
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s60[CREATE TABLE t2](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[t2](8)
REG[5] =  i:4
REG[6] =   s60[CREATE TABLE t2](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [SELECT*FROM"temp".sqlite_master WHERE tbl_name='t2' AND type!='trigger' ORDER BY rowid
;]
VDBE Trace:
   0 Init             0   17    0               00 Start at 17
  17 Transaction      1    0    0 0             01 usesStmtJournal=0
  18 String8          0    2    0 t2            00 r[2]='t2'
REG[2] =   t2[t2](8)
  19 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    7    0               00 
   2 OpenRead         0    1    1 5             00 root=1 iDb=1; sqlite_temp_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   16    0               00 
  16 Halt             0    0    0               00 
SQL: [;CREATE TRIGGER x AFTER UPDATE ON c 
        WHEN typeof(new.v1)=='integer' BEGIN
           INSERT INTO c(v1) VALUES('after-int-' || new.v1);
      END;]
VDBE Trace:
   0 Init             0   13    0               00 Start at 13
  13 Transaction      0    1    6 0             01 usesStmtJournal=0
  14 Goto             0    1    0               00 
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:7
   3 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
   4 String8          0    3    0 x             00 r[3]='x'
REG[3] =   t1[x](8)
   5 String8          0    4    0 c             00 r[4]='c'
REG[4] =   t1[c](8)
   6 Integer          0    5    0               00 r[5]=0
REG[5] =  i:0
   7 String8          0    6    0 CREATE TRIGGER x AFTER UPDATE ON c 
        WHEN typeof(new.v1)=='integer' BEGIN
           INSERT INTO c(v1) VALUES('after-int-' || new.v1);
      END 00 r[6]='CREATE TRIGGER x AFTER UPDATE ON c 
        WHEN typeof(new.v1)=='integer' BEGIN
           I
REG[6] =   t151[CREATE TRIGGER ](8)
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
REG[7] =  s167[071B0F0F08823B747269676765727863......;triggerxc]
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
REG[7] =  s167[071B0F0F08823B747269676765727863......;triggerxc]
REG[1] =  i:7
  10 SetCookie        0    1    7               00 
  11 ParseSchema      0    0    0 type='trigger' AND name='x' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    7 0             00 usesStmtJournal=0
  16 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
  17 String8          0    3    0 x             00 r[3]='x'
REG[3] =   t1[x](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s4[view](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s4[view](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[tt1](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t1[x](8)
REG[1] =   s3[tt1](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s3[tr1](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t1[x](8)
REG[1] =   s3[tr1](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[x](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t1[x](8)
REG[1] =   s1[x](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[x](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:0
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s151[CREATE TRIGGER ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[x](8)
REG[5] =  i:0
REG[6] =   s151[CREATE TRIGGER ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  12 Halt             0    0    0               00 
SQL: [;DELETE FROM c WHERE xyz!=1;]
VDBE Trace:
   0 Init             0   12    0               00 Start at 12
  12 Transaction      0    1    7 0             01 usesStmtJournal=0
  13 Integer          1    3    0               00 r[3]=1
REG[3] =  i:1
  14 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenWrite        0    3    0 2             00 root=3 iDb=0; c
   3 Explain          3    0    0 SCAN TABLE c  00 
   4 Rewind           0   11    0               00 
  11 Halt             0    0    0               00 
SQL: [;UPDATE c SET xyz=456 WHERE xyz=1;]
VDBE Trace:
   0 Init             0   23    0               00 Start at 23
  23 Transaction      0    1    7 0             01 usesStmtJournal=0
  24 Integer          1    9    0               00 r[9]=1
REG[9] =  i:1
  25 Goto             0    1    0               00 
   1 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; c
   3 Explain          3    0    0 SCAN TABLE c  00 
   4 Rewind           0   10    0               00 
  10 OpenWrite        0    3    0 2             00 root=3 iDb=0; c
  11 RowSetRead       1   22    2               00 r[2]=rowset(1)
REG[1] =  NULL
REG[2] =  NULL
  22 Halt             0    0    0               00 
SQL: [;INSERT INTO t2 VALUES(300);]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    1    7 0             01 usesStmtJournal=0
  12 Integer          0    4    0               00 r[4]=0
REG[4] =  i:0
  13 Goto             0    1    0               00 
   1 OpenWrite        0    4    0 1             00 root=4 iDb=0; t2
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Integer        300    2    0               00 r[2]=300
REG[2] =  i:300
   4 Abortable        0    0    0               00 
   5 Lt               4    8    2 (BINARY)      52 if r[2]<r[4] goto 8
REG[4] =  i:0
REG[2] =  i:300
   6 Gt               2    8    2 (BINARY)      52 if r[2]>r[2] goto 8

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f7c890a2859 in __GI_abort () at abort.c:79
#2  0x00007f7c890a2729 in __assert_fail_base (fmt=0x7f7c89238588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=<optimized out>) at assert.c:92
#3  0x00007f7c890b3fd6 in __GI___assert_fail (assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=0x216524 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003c5c6a in sqlite3VdbeExec (p=0x248dfa0) at sqlite3.c:85580
#5  0x0000000000411104 in sqlite3Step (p=0x248dfa0) at sqlite3.c:81930
#6  0x000000000029128d in sqlite3_step (pStmt=0x248dfa0) at sqlite3.c:81995
#7  0x00000000002570b9 in main (argc=1, argv=0x7ffc505f3748) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 51211] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
