GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000543,sig:11,src:019938+020032,time:35049251,execs:12234604,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT c, sum(b) OVER (
    ORDER BY b
    ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
  ) FROM t1

;]
VDBE Trace:
   0 Init             0   89    0               00 Start at 89
  89 Transaction      0    0    2 0             01 usesStmtJournal=0
  90 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
  28 Integer          1   10    0               00 r[10]=1
REG[10] =  i:1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   67    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:31
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    2    0 3             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    2    5               00 r[5]=t1.c
REG[5] =   s3[six](8)
  13 Column           0    1    6               00 r[6]=t1.b
REG[6] =   s4[even](8)
  14 Column           0    1    4               00 r[4]=t1.b
REG[4] =   s4[even](8)
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
REG[8] =  s15[041513156576656E7369786576656E....evensixeven]
  16 SorterInsert     6    8    4 3             00 key=r[8]
REG[8] =  s15[041513156576656E7369786576656E....evensixeven]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    0    7               00 r[7]=
REG[7] =   s4[even](8)
  23 Column           7    2    6               00 r[6]=
REG[6] =   s4[even](8)
  24 Column           7    1    5               00 r[5]=
REG[5] =   s3[six](8)
  25 Yield            3    0    0               00 
REG[3] =  i:31
REG[3] =  i:25
  32 Copy             5   12    0               00 r[12]=r[5]
REG[12] =   s3[six](8)
  33 Copy             6   13    0               00 r[13]=r[6]
REG[13] =   s4[even](8)
  34 Copy             7   14    0               00 r[14]=r[7]
REG[14] =   s4[even](8)
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
REG[15] =  s15[041315157369786576656E6576656E....sixeveneven]
  36 NewRowid         2   16    0               00 r[16]=rowid
REG[16] =  i:1
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
REG[15] =  s15[041315157369786576656E6576656E....sixeveneven]
REG[16] =  i:1
  38 Ne              10   54   16               00 if r[16]!=r[10] goto 54
REG[10] =  i:1
REG[16] =  i:1
  39 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  40 Integer          1   17    0               00 r[17]=1
REG[17] =  i:1
  41 Integer          0   20    0               00 r[20]=0
REG[20] =  i:0
  42 MustBeInt       17   44    0               00 
REG[17] =  i:1
  43 Ge              20   45   17               00 if r[17]>=r[20] goto 45
REG[20] =  i:0
REG[17] =  i:1
  45 Integer          1   18    0               00 r[18]=1
REG[18] =  i:1
  46 Integer          0   20    0               00 r[20]=0
REG[20] =  i:0
  47 MustBeInt       18   49    0               00 
REG[18] =  i:1
  48 Ge              20   50   18               00 if r[18]>=r[20] goto 50
REG[20] =  i:0
REG[18] =  i:1
  50 Rewind           3    1    0               00 
  51 Rewind           1    1    0               00 
  52 Rewind           4    1    0               00 
  53 Goto             0   66    0               00 
  66 Goto             0   31    0               00 
  31 Yield            3   67    0               00 next row of subquery_2
REG[3] =  i:25
REG[3] =  i:31
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
REG[3] =  i:31
  67 Rewind           2   81    0               00 
  68 Column           4    2   19               00 r[19]=
REG[19] =   s4[even](8)
  69 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
REG[19] =   s4[even](8)
  70 Next             4   71    0               00 
  71 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  72 Gosub           11   83    0               00 
REG[11] =  i:72
  83 Noop             0    0    0               00 inner-loop subroutine
  84 Column           1    0   21               00 r[21]=
REG[21] =   s3[six](8)
  85 Copy             2   22    0               00 r[22]=r[2]
REG[22] =  r:0
  86 ResultRow       21    2    0               00 output=r[21..22]
REG[21] =   s3[six](8)
REG[22] =  r:0
  87 Return          11    0    0               00 end inner-loop subroutine
REG[11] =  i:72
  73 Next             1   75    0               00 
  74 Goto             0   81    0               00 
  81 ResetSorter      1    0    0               00 
  82 Goto             0   88    0               00 
  88 Halt             0    0    0               00 
SQL: [PRAGMA case_sensitive_like = 0 
;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Halt             0    0    0               00 
SQL: [SELECT v1, sum(b) OVER (
    ORDER BY b 
    ROWS BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING
  ) FROM t1

;]
VDBE Trace:
   0 Init             0   75    0               00 Start at 75
  75 Transaction      0    0    2 0             01 usesStmtJournal=0
  76 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
  28 Integer          1   10    0               00 r[10]=1
REG[10] =  i:1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   53    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:31
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    2    0 4             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    3    5               00 r[5]=t1.v1
REG[5] =  i:6
  13 Column           0    1    6               00 r[6]=t1.b
REG[6] =   s4[even](8)
  14 Column           0    1    4               00 r[4]=t1.b
REG[4] =   s4[even](8)
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
REG[8] =  s13[041501156576656E066576656E....even.even]
  16 SorterInsert     6    8    4 3             00 key=r[8]
REG[8] =  s13[041501156576656E066576656E....even.even]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    0    7               00 r[7]=
REG[7] =   s4[even](8)
  23 Column           7    2    6               00 r[6]=
REG[6] =   s4[even](8)
  24 Column           7    1    5               00 r[5]=
REG[5] =  i:6
  25 Yield            3    0    0               00 
REG[3] =  i:31
REG[3] =  i:25
  32 Copy             5   12    0               00 r[12]=r[5]
REG[12] =  i:6
  33 Copy             6   13    0               00 r[13]=r[6]
REG[13] =   s4[even](8)
  34 Copy             7   14    0               00 r[14]=r[7]
REG[14] =   s4[even](8)
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
REG[15] =  s13[04011515066576656E6576656E.....eveneven]
  36 NewRowid         2   16    0               00 r[16]=rowid
REG[16] =  i:1
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
REG[15] =  s13[04011515066576656E6576656E.....eveneven]
REG[16] =  i:1
  38 Ne              10   49   16               00 if r[16]!=r[10] goto 49
REG[10] =  i:1
REG[16] =  i:1
  39 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  40 Integer          2   17    0               00 r[17]=2
REG[17] =  i:2
  41 Integer          0   19    0               00 r[19]=0
REG[19] =  i:0
  42 MustBeInt       17   44    0               00 
REG[17] =  i:2
  43 Ge              19   45   17               00 if r[17]>=r[19] goto 45
REG[19] =  i:0
REG[17] =  i:2
  45 Rewind           3    1    0               00 
  46 Rewind           1    1    0               00 
  47 Rewind           4    1    0               00 
  48 Goto             0   52    0               00 
  52 Goto             0   31    0               00 
  31 Yield            3   53    0               00 next row of subquery_2
REG[3] =  i:25
REG[3] =  i:31
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
REG[3] =  i:31
  53 Rewind           2   67    0               00 
  54 Column           4    2   18               00 r[18]=
REG[18] =   s4[even](8)
  55 AggStep          0   18    1 sum(1)        01 accum=r[1] step(r[18])
REG[18] =   s4[even](8)
  56 Next             4   57    0               00 
  57 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  58 Gosub           11   69    0               00 
REG[11] =  i:58
  69 Noop             0    0    0               00 inner-loop subroutine
  70 Column           1    0   20               00 r[20]=
REG[20] =  i:6
  71 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  r:0
  72 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:6
REG[21] =  r:0
  73 Return          11    0    0               00 end inner-loop subroutine
REG[11] =  i:58
  59 Next             1   61    0               00 
  60 Goto             0   67    0               00 
  67 ResetSorter      1    0    0               00 
  68 Goto             0   74    0               00 
  74 Halt             0    0    0               00 
SQL: [SELECT b, sum(a) OVER (
    PARTITION BY a
    ORDER BY a 
    ROWS BETWEEN 1 PRECEDING AND 0 PRECEDING
  ) FROM t1

;]
VDBE Trace:
   0 Init             0   88    0               00 Start at 88
  88 Transaction      0    0    2 0             01 usesStmtJournal=0
  89 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   19    7               00 subquery_2
  19 Null             0    8    8               00 r[8..8]=NULL
REG[8] =  NULL
  20 Integer          1    9    0               00 r[9]=1
REG[9] =  i:1
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   70    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:23
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    7    0               00 
   9 OpenRead         0    2    0 2             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    1    4               00 r[4]=t1.b
REG[4] =   s4[even](8)
  13 Rowid            0    5    0               00 r[5]=rowid
REG[5] =  i:6
  14 Rowid            0    6    0               00 r[6]=rowid
REG[6] =  i:6
  15 Rowid            0    7    0               00 r[7]=rowid
REG[7] =  i:6
  16 Yield            3    0    0               00 
REG[3] =  i:23
REG[3] =  i:16
  24 Copy             4   11    0               00 r[11]=r[4]
REG[11] =   s4[even](8)
  25 Copy             5   12    0               00 r[12]=r[5]
REG[12] =  i:6
  26 Copy             6   13    0               00 r[13]=r[6]
REG[13] =  i:6
  27 Copy             7   14    0               00 r[14]=r[7]
REG[14] =  i:6
  28 MakeRecord      11    4   15               00 r[15]=mkrec(r[11..14])
REG[15] =  s12[05150101016576656E060606.....even...]
  29 Compare         12    8    1 k(1,B)        00 r[12] <-> r[8]
REG[12] =  i:6
REG[8] =  NULL
  30 Jump            31   33   31               00 
  31 Gosub           19   71    0               00 call flush_partition
REG[19] =  i:31
  71 Rewind           2   79    0               00 
  79 ResetSorter      1    0    0               00 
  80 Return          19    0    0               00 
REG[19] =  i:31
  32 Copy            12    8    0               00 r[8]=r[12]
REG[8] =  i:6
  33 NewRowid         2   16    0               00 r[16]=rowid
REG[16] =  i:1
  34 Insert           2   15   16               00 intkey=r[16] data=r[15]
REG[15] =  s12[05150101016576656E060606.....even...]
REG[16] =  i:1
  35 Ne               9   57   16               00 if r[16]!=r[9] goto 57
REG[9] =  i:1
REG[16] =  i:1
  36 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  37 Integer          1   17    0               00 r[17]=1
REG[17] =  i:1
  38 Integer          0   21    0               00 r[21]=0
REG[21] =  i:0
  39 MustBeInt       17   41    0               00 
REG[17] =  i:1
  40 Ge              21   42   17               00 if r[17]>=r[21] goto 42
REG[21] =  i:0
REG[17] =  i:1
  42 Integer          0   18    0               00 r[18]=0
REG[18] =  i:0
  43 Integer          0   21    0               00 r[21]=0
REG[21] =  i:0
  44 MustBeInt       18   46    0               00 
REG[18] =  i:0
  45 Ge              21   47   18               00 if r[18]>=r[21] goto 47
REG[21] =  i:0
REG[18] =  i:0
  47 Le              17   53   18               00 if r[18]<=r[17] goto 53
REG[17] =  i:1
REG[18] =  i:0
  53 Rewind           3    1    0               00 
  54 Rewind           1    1    0               00 
  55 Rewind           4    1    0               00 
  56 Goto             0   69    0               00 
  69 Goto             0   23    0               00 
  23 Yield            3   70    0               00 next row of subquery_2
REG[3] =  i:16
REG[3] =  i:23
  17 Next             0   12    0               01 
  18 EndCoroutine     3    0    0               00 
REG[3] =  i:23
  70 Integer         80   19    0               00 r[19]=80
REG[19] =  i:80
  71 Rewind           2   79    0               00 
  72 IfPos           18   76    1               00 if r[18]>0 then r[18]-=1, goto 76
REG[18] =  i:0
  73 Column           4    3   20               00 r[20]=
REG[20] =  i:6
  74 AggStep          0   20    1 sum(1)        01 accum=r[1] step(r[20])
REG[20] =  i:6
  75 Next             4   76    0               00 
  76 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  77 Gosub           10   82    0               00 
REG[10] =  i:77
  82 Noop             0    0    0               00 inner-loop subroutine
  83 Column           1    0   22               00 r[22]=
REG[22] =   s4[even](8)
  84 Copy             2   23    0               00 r[23]=r[2]
REG[23] =  i:6
  85 ResultRow       22    2    0               00 output=r[22..23]
REG[22] =   s4[even](8)
REG[23] =  i:6
  86 Return          10    0    0               00 end inner-loop subroutine
REG[10] =  i:77
  78 Next             1   79    0               00 
  79 ResetSorter      1    0    0               00 
  80 Return          19    0    0               00 
REG[19] =  i:80
  81 Goto             0   87    0               00 
  87 Halt             0    0    0               00 
SQL: [SELECT 'abcxyz' GLOB 'abc*' 
;]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    2    0 abc*          00 r[2]='abc*'
REG[2] =   t4[abc*](8)
   6 String8          0    3    0 abcxyz        00 r[3]='abcxyz'
REG[3] =   t6[abcxyz](8)
   7 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Function0        3    2    1 glob(2)       02 r[1]=func(r[2..3])
REG[2] =   t4[abc*](8)
REG[3] =   t6[abcxyz](8)
REG[1] =  i:1
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:1
   4 Halt             0    0    0               00 
SQL: [SELECT c, sum(c) OVER (
    PARTITION BY c
    ORDER BY c 
    ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING
  ) FROM t1

;]
VDBE Trace:
   0 Init             0   85    0               00 Start at 85
  85 Transaction      0    0    2 0             01 usesStmtJournal=0
  86 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   31    7               00 subquery_2
  31 Null             0   12   12               00 r[12..12]=NULL
REG[12] =  NULL
  32 Integer          1   13    0               00 r[13]=1
REG[13] =  i:1
  33 Explain         33    0    0 SCAN SUBQUERY 2 00 
  34 InitCoroutine    3    0    7               00 
  35 Yield            3   66    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:35
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    7    0 k(2,B,B)      00 
   9 OpenRead         0    2    0 3             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   20    0               00 
  12 Column           0    2    6               00 r[6]=t1.c
REG[6] =   s3[six](8)
  13 Column           0    2    7               00 r[7]=t1.c
REG[7] =   s3[six](8)
  14 Column           0    2    8               00 r[8]=t1.c
REG[8] =   s3[six](8)
  15 Column           0    2    4               00 r[4]=t1.c
REG[4] =   s3[six](8)
  16 Column           0    2    5               00 r[5]=t1.c
REG[5] =   s3[six](8)
  17 MakeRecord       4    5   10               00 r[10]=mkrec(r[4..8])
REG[10] =  s21[06131313131373697873697873697873......sixsixsixs]
  18 SorterInsert     6   10    4 5             00 key=r[10]
REG[10] =  s21[06131313131373697873697873697873......sixsixsixs]
  19 Next             0   12    0               01 
  20 Explain         20    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  21 OpenPseudo       7   11    7               00 7 columns in r[11]
  22 SorterSort       6   30    0               00 
  23 SorterData       6   11    7               00 r[11]=data
  24 Column           7    1    9               00 r[9]=
REG[9] =   s3[six](8)
  25 Column           7    4    8               00 r[8]=
REG[8] =   s3[six](8)
  26 Column           7    3    7               00 r[7]=
REG[7] =   s3[six](8)
  27 Column           7    2    6               00 r[6]=
REG[6] =   s3[six](8)
  28 Yield            3    0    0               00 
REG[3] =  i:35
REG[3] =  i:28
  36 Copy             6   15    0               00 r[15]=r[6]
REG[15] =   s3[six](8)
  37 Copy             7   16    0               00 r[16]=r[7]
REG[16] =   s3[six](8)
  38 Copy             8   17    0               00 r[17]=r[8]
REG[17] =   s3[six](8)
  39 Copy             9   18    0               00 r[18]=r[9]
REG[18] =   s3[six](8)
  40 MakeRecord      15    4   19               00 r[19]=mkrec(r[15..18])
REG[19] =  s17[05131313137369787369787369787369.....sixsixsixsi]
  41 Compare         16   12    1 k(1,B)        00 r[16] <-> r[12]
REG[16] =   s3[six](8)
REG[12] =  NULL
  42 Jump            43   45   43               00 
  43 Gosub           22   67    0               00 call flush_partition
REG[22] =  i:43
  67 Rewind           2   76    0               00 
  76 ResetSorter      1    0    0               00 
  77 Return          22    0    0               00 
REG[22] =  i:43
  44 Copy            16   12    0               00 r[12]=r[16]
REG[12] =   s3[six](8)
  45 NewRowid         2   20    0               00 r[20]=rowid
REG[20] =  i:1
  46 Insert           2   19   20               00 intkey=r[20] data=r[19]
REG[19] =  s17[05131313137369787369787369787369.....sixsixsixsi]
REG[20] =  i:1
  47 Ne              13   57   20               00 if r[20]!=r[13] goto 57
REG[13] =  i:1
REG[20] =  i:1
  48 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  49 Integer          2   21    0               00 r[21]=2
REG[21] =  i:2
  50 Integer          0   24    0               00 r[24]=0
REG[24] =  i:0
  51 MustBeInt       21   53    0               00 
REG[21] =  i:2
  52 Ge              24   54   21               00 if r[21]>=r[24] goto 54
REG[24] =  i:0
REG[21] =  i:2
  54 Rewind           1    1    0               00 
  55 Rewind           4    1    0               00 
  56 Goto             0   65    0               00 
  65 Goto             0   35    0               00 
  35 Yield            3   66    0               00 next row of subquery_2
REG[3] =  i:28
REG[3] =  i:35
  29 SorterNext       6   23    0               00 
  30 EndCoroutine     3    0    0               00 
REG[3] =  i:35
  66 Integer         77   22    0               00 r[22]=77
REG[22] =  i:77
  67 Rewind           2   76    0               00 
  68 IfPos           21   73    1               00 if r[21]>0 then r[21]-=1, goto 73
REG[21] =  i:2
  73 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  74 Gosub           14   79    0               00 
REG[14] =  i:74
  79 Noop             0    0    0               00 inner-loop subroutine
  80 Column           1    0   25               00 r[25]=
REG[25] =   s3[six](8)
  81 Copy             2   26    0               00 r[26]=r[2]
REG[26] =  NULL
  82 ResultRow       25    2    0               00 output=r[25..26]
REG[25] =   s3[six](8)
REG[26] =  NULL
  83 Return          14    0    0               00 end inner-loop subroutine
REG[14] =  i:74
  75 Next             1   76    0               00 
  76 ResetSorter      1    0    0               00 
  77 Return          22    0    0               00 
REG[22] =  i:77
  78 Goto             0   84    0               00 
  84 Halt             0    0    0               00 
SQL: [SELECT 'abcxyz' GLOB 'abc???' 
;]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    2    0 abc???        00 r[2]='abc???'
REG[2] =   t6[abc???](8)
   6 String8          0    3    0 abcxyz        00 r[3]='abcxyz'
REG[3] =   t6[abcxyz](8)
   7 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Function0        3    2    1 glob(2)       02 r[1]=func(r[2..3])
REG[2] =   t6[abc???](8)
REG[3] =   t6[abcxyz](8)
REG[1] =  i:1
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:1
   4 Halt             0    0    0               00 
SQL: [SELECT v1, sum(v1) OVER (
    PARTITION BY v1%2
    ORDER BY v1 
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM t1

;]
VDBE Trace:
   0 Init             0   80    0               00 Start at 80
  80 Transaction      0    0    2 0             01 usesStmtJournal=0
  81 Integer          2   11    0               00 r[11]=2
REG[11] =  i:2
  82 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   31    7               00 subquery_2
  31 Null             0   14   14               00 r[14..14]=NULL
REG[14] =  NULL
  32 Integer          1   15    0               00 r[15]=1
REG[15] =  i:1
  33 Explain         33    0    0 SCAN SUBQUERY 2 00 
  34 InitCoroutine    3    0    7               00 
  35 Yield            3   57    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:35
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    7    0 k(2,B,B)      00 
   9 OpenRead         0    2    0 4             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   20    0               00 
  12 Column           0    3    6               00 r[6]=t1.v1
REG[6] =  i:6
  13 Column           0    3    7               00 r[7]=t1.v1
REG[7] =  i:6
  14 Column           0    3   10               00 r[10]=t1.v1
REG[10] =  i:6
  15 Remainder       11   10    4               00 r[4]=r[10]%r[11]
REG[11] =  i:2
REG[10] =  i:6
REG[4] =  i:0
  16 Column           0    3    5               00 r[5]=t1.v1
REG[5] =  i:6
  17 MakeRecord       4    4   12               00 r[12]=mkrec(r[4..7])
REG[12] =  s8[0508010101060606........]
  18 SorterInsert     6   12    4 4             00 key=r[12]
REG[12] =  s8[0508010101060606........]
  19 Next             0   12    0               01 
  20 Explain         20    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  21 OpenPseudo       7   13    7               00 7 columns in r[13]
  22 SorterSort       6   30    0               00 
  23 SorterData       6   13    7               00 r[13]=data
  24 Column           7    1    9               00 r[9]=
REG[9] =  i:6
  25 Column           7    3    8               00 r[8]=
REG[8] =  i:6
  26 Column           7    0    7               00 r[7]=
REG[7] =  i:0
  27 Column           7    2    6               00 r[6]=
REG[6] =  i:6
  28 Yield            3    0    0               00 
REG[3] =  i:35
REG[3] =  i:28
  36 Copy             6   17    0               00 r[17]=r[6]
REG[17] =  i:6
  37 Copy             7   18    0               00 r[18]=r[7]
REG[18] =  i:0
  38 Copy             8   19    0               00 r[19]=r[8]
REG[19] =  i:6
  39 Copy             9   20    0               00 r[20]=r[9]
REG[20] =  i:6
  40 MakeRecord      17    4   21               00 r[21]=mkrec(r[17..20])
REG[21] =  s8[0501080101060606........]
  41 Compare         18   14    1 k(1,B)        00 r[18] <-> r[14]
REG[18] =  i:0
REG[14] =  NULL
  42 Jump            43   45   43               00 
  43 Gosub           23   58    0               00 call flush_partition
REG[23] =  i:43
  58 Rewind           2   71    0               00 
  71 ResetSorter      1    0    0               00 
  72 Return          23    0    0               00 
REG[23] =  i:43
  44 Copy            18   14    0               00 r[14]=r[18]
REG[14] =  i:0
  45 NewRowid         2   22    0               00 r[22]=rowid
REG[22] =  i:1
  46 Insert           2   21   22               00 intkey=r[22] data=r[21]
REG[21] =  s8[0501080101060606........]
REG[22] =  i:1
  47 Ne              15   53   22               00 if r[22]!=r[15] goto 53
REG[15] =  i:1
REG[22] =  i:1
  48 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  49 Rewind           3    1    0               00 
  50 Rewind           1    1    0               00 
  51 Rewind           4    1    0               00 
  52 Goto             0   56    0               00 
  56 Goto             0   35    0               00 
  35 Yield            3   57    0               00 next row of subquery_2
REG[3] =  i:28
REG[3] =  i:35
  29 SorterNext       6   23    0               00 
  30 EndCoroutine     3    0    0               00 
REG[3] =  i:35
  57 Integer         72   23    0               00 r[23]=72
REG[23] =  i:72
  58 Rewind           2   71    0               00 
  59 Column           4    3   24               00 r[24]=
REG[24] =  i:6
  60 AggStep          0   24    1 sum(1)        01 accum=r[1] step(r[24])
REG[24] =  i:6
  61 Next             4   62    0               00 
  62 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  63 Gosub           16   74    0               00 
REG[16] =  i:63
  74 Noop             0    0    0               00 inner-loop subroutine
  75 Column           1    0   25               00 r[25]=
REG[25] =  i:6
  76 Copy             2   26    0               00 r[26]=r[2]
REG[26] =  i:6
  77 ResultRow       25    2    0               00 output=r[25..26]
REG[25] =  i:6
REG[26] =  i:6
  78 Return          16    0    0               00 end inner-loop subroutine
REG[16] =  i:63
  64 Next             1   66    0               00 
  65 Goto             0   71    0               00 
  71 ResetSorter      1    0    0               00 
  72 Return          23    0    0               00 
REG[23] =  i:72
  73 Goto             0   79    0               00 
  79 Halt             0    0    0               00 
SQL: [SELECT 'ABCxyz' GLOB 'abc*' 
;]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    2    0 abc*          00 r[2]='abc*'
REG[2] =   t4[abc*](8)
   6 String8          0    3    0 ABCxyz        00 r[3]='ABCxyz'
REG[3] =   t6[ABCxyz](8)
   7 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Function0        3    2    1 glob(2)       02 r[1]=func(r[2..3])
REG[2] =   t4[abc*](8)
REG[3] =   t6[ABCxyz](8)
REG[1] =  i:0
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:0
   4 Halt             0    0    0               00 
SQL: [SELECT v1, sum(v1) OVER (
    ORDER BY v1/2
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  ) FROM t1

;]
VDBE Trace:
   0 Init             0   70    0               00 Start at 70
  70 Transaction      0    0    2 0             01 usesStmtJournal=0
  71 Integer          2    9    0               00 r[9]=2
REG[9] =  i:2
  72 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   29    7               00 subquery_2
  29 Integer          1   12    0               00 r[12]=1
REG[12] =  i:1
  30 Explain         30    0    0 SCAN SUBQUERY 2 00 
  31 InitCoroutine    3    0    7               00 
  32 Yield            3   52    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:32
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    2    0 4             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   19    0               00 
  12 Column           0    3    5               00 r[5]=t1.v1
REG[5] =  i:6
  13 Column           0    3    6               00 r[6]=t1.v1
REG[6] =  i:6
  14 Column           0    3    8               00 r[8]=t1.v1
REG[8] =  i:6
  15 Divide           9    8    4               00 r[4]=r[8]/r[9]
REG[9] =  i:2
REG[8] =  i:6
REG[4] =  i:3
  16 MakeRecord       4    3   10               00 r[10]=mkrec(r[4..6])
REG[10] =  s7[04010101030606.......]
  17 SorterInsert     6   10    4 3             00 key=r[10]
REG[10] =  s7[04010101030606.......]
  18 Next             0   12    0               01 
  19 Explain         19    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  20 OpenPseudo       7   11    5               00 5 columns in r[11]
  21 SorterSort       6   28    0               00 
  22 SorterData       6   11    7               00 r[11]=data
  23 Column           7    2    7               00 r[7]=
REG[7] =  i:6
  24 Column           7    0    6               00 r[6]=
REG[6] =  i:3
  25 Column           7    1    5               00 r[5]=
REG[5] =  i:6
  26 Yield            3    0    0               00 
REG[3] =  i:32
REG[3] =  i:26
  33 Copy             5   14    0               00 r[14]=r[5]
REG[14] =  i:6
  34 Copy             6   15    0               00 r[15]=r[6]
REG[15] =  i:3
  35 Copy             7   16    0               00 r[16]=r[7]
REG[16] =  i:6
  36 MakeRecord      14    3   17               00 r[17]=mkrec(r[14..16])
REG[17] =  s7[04010101060306.......]
  37 NewRowid         2   18    0               00 r[18]=rowid
REG[18] =  i:1
  38 Insert           2   17   18               00 intkey=r[18] data=r[17]
REG[17] =  s7[04010101060306.......]
REG[18] =  i:1
  39 Ne              12   44   18               00 if r[18]!=r[12] goto 44
REG[12] =  i:1
REG[18] =  i:1
  40 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  41 Rewind           1    1    0               00 
  42 Rewind           4    1    0               00 
  43 Goto             0   51    0               00 
  51 Goto             0   32    0               00 
  32 Yield            3   52    0               00 next row of subquery_2
REG[3] =  i:26
REG[3] =  i:32
  27 SorterNext       6   22    0               00 
  28 EndCoroutine     3    0    0               00 
REG[3] =  i:32
  52 Rewind           2   62    0               00 
  53 Column           4    2   19               00 r[19]=
REG[19] =  i:6
  54 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
REG[19] =  i:6
  55 Next             4   56    0               00 
  56 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  57 Gosub           13   64    0               00 
REG[13] =  i:57
  64 Noop             0    0    0               00 inner-loop subroutine
  65 Column           1    0   20               00 r[20]=
REG[20] =  i:6
  66 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:6
  67 ResultRow       20    2    0               00 output=r[20..21]
REG[20] =  i:6
REG[21] =  i:6
  68 Return          13    0    0               00 end inner-loop subroutine
REG[13] =  i:57
  58 Delete           1    0    0               02 
  59 Next             1   61    0               00 
  60 Goto             0   62    0               00 
  62 ResetSorter      1    0    0               00 
  63 Goto             0   69    0               00 
  69 Halt             0    0    0               00 
SQL: [;
;SELECT c, sum(b) OVER (
    PARTITION BY (b%10)
    ORDER BY b
    RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  ) FROM t1 ORDER BY c;]
VDBE Trace:
   0 Init             0  119    0               00 Start at 119
 119 Transaction      0    0    2 0             01 usesStmtJournal=0
 120 Integer         10   12    0               00 r[12]=10
REG[12] =  i:10
 121 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   33    7               00 subquery_2
  33 SorterOpen       8    4    0 k(1,B)        00 
  34 Null             0   15   15               00 r[15..15]=NULL
REG[15] =  NULL
  35 Integer          1   16    0               00 r[16]=1
REG[16] =  i:1
  36 Explain         36    0    0 SCAN SUBQUERY 2 00 
  37 InitCoroutine    3    0    7               00 
  38 Yield            3   81    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:38
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    8    0 k(2,B,B)      00 
   9 OpenRead         0    2    0 3             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   21    0               00 
  12 Column           0    2    6               00 r[6]=t1.c
REG[6] =   s3[six](8)
  13 Column           0    2    7               00 r[7]=t1.c
REG[7] =   s3[six](8)
  14 Column           0    1    8               00 r[8]=t1.b
REG[8] =   s4[even](8)
  15 Column           0    1   11               00 r[11]=t1.b
REG[11] =   s4[even](8)
  16 Remainder       12   11    4               00 r[4]=r[11]%r[12]
REG[12] =  i:10
REG[11] =   s4[even](8)
REG[4] =  i:0
  17 Column           0    1    5               00 r[5]=t1.b
REG[5] =   s4[even](8)
  18 MakeRecord       4    5   13               00 r[13]=mkrec(r[4..8])
REG[13] =  s20[0608151313156576656E736978736978......evensixsix]
  19 SorterInsert     6   13    4 5             00 key=r[13]
REG[13] =  s20[0608151313156576656E736978736978......evensixsix]
  20 Next             0   12    0               01 
  21 Explain         21    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  22 OpenPseudo       7   14    8               00 8 columns in r[14]
  23 SorterSort       6   32    0               00 
  24 SorterData       6   14    7               00 r[14]=data
  25 Column           7    1   10               00 r[10]=
REG[10] =   s4[even](8)
  26 Column           7    4    9               00 r[9]=
REG[9] =   s4[even](8)
  27 Column           7    0    8               00 r[8]=
REG[8] =  i:0
  28 Column           7    3    7               00 r[7]=
REG[7] =   s3[six](8)
  29 Column           7    2    6               00 r[6]=
REG[6] =   s3[six](8)
  30 Yield            3    0    0               00 
REG[3] =  i:38
REG[3] =  i:30
  39 Copy             6   18    0               00 r[18]=r[6]
REG[18] =   s3[six](8)
  40 Copy             7   19    0               00 r[19]=r[7]
REG[19] =   s3[six](8)
  41 Copy             8   20    0               00 r[20]=r[8]
REG[20] =  i:0
  42 Copy             9   21    0               00 r[21]=r[9]
REG[21] =   s4[even](8)
  43 Copy            10   22    0               00 r[22]=r[10]
REG[22] =   s4[even](8)
  44 MakeRecord      18    5   23               00 r[23]=mkrec(r[18..22])
REG[23] =  s20[0613130815157369787369786576656E......sixsixeven]
  45 Compare         20   15    1 k(1,B)        00 r[20] <-> r[15]
REG[20] =  i:0
REG[15] =  NULL
  46 Jump            47   49   47               00 
  47 Gosub           29   82    0               00 call flush_partition
REG[29] =  i:47
  82 Rewind           2  101    0               00 
 101 ResetSorter      1    0    0               00 
 102 Return          29    0    0               00 
REG[29] =  i:47
  48 Copy            20   15    0               00 r[15]=r[20]
REG[15] =  i:0
  49 NewRowid         2   24    0               00 r[24]=rowid
REG[24] =  i:1
  50 Insert           2   23   24               00 intkey=r[24] data=r[23]
REG[23] =  s20[0613130815157369787369786576656E......sixsixeven]
REG[24] =  i:1
  51 Ne              16   60   24               00 if r[24]!=r[16] goto 60
REG[16] =  i:1
REG[24] =  i:1
  52 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  53 Rewind           1    1    0               00 
  54 Rewind           4    1    0               00 
  55 Copy            21   25    0               00 r[25]=r[21]
REG[25] =   s4[even](8)
  56 Copy            25   26    0               00 r[26]=r[25]
REG[26] =   s4[even](8)
  57 Copy            25   27    0               00 r[27]=r[25]
REG[27] =   s4[even](8)
  58 Copy            25   28    0               00 r[28]=r[25]
REG[28] =   s4[even](8)
  59 Goto             0   80    0               00 
  80 Goto             0   38    0               00 
  38 Yield            3   81    0               00 next row of subquery_2
REG[3] =  i:30
REG[3] =  i:38
  31 SorterNext       6   24    0               00 
  32 EndCoroutine     3    0    0               00 
REG[3] =  i:38
  81 Integer        102   29    0               00 r[29]=102
REG[29] =  i:102
  82 Rewind           2  101    0               00 
  83 Column           4    4   30               00 r[30]=
REG[30] =   s4[even](8)
  84 AggStep          0   30    1 sum(1)        01 accum=r[1] step(r[30])
REG[30] =   s4[even](8)
  85 Next             4   87    0               00 
  86 Goto             0   91    0               00 
  91 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  92 Gosub           17  104    0               00 
REG[17] =  i:92
 104 Noop             0    0    0               00 inner-loop subroutine
 105 Copy             2   33    0               00 r[33]=r[2]
REG[33] =  r:0
 106 Column           1    1   32               00 r[32]=
REG[32] =   s3[six](8)
 107 MakeRecord      32    2   35               00 r[35]=mkrec(r[32..33])
REG[35] =  s14[0313077369780000000000000000...six........]
 108 SorterInsert     8   35   32 2             00 key=r[35]
REG[35] =  s14[0313077369780000000000000000...six........]
 109 Return          17    0    0               00 end inner-loop subroutine
REG[17] =  i:92
  93 Delete           1    0    0               02 
  94 Next             1   96    0               00 
  95 Goto             0  101    0               00 
 101 ResetSorter      1    0    0               00 
 102 Return          29    0    0               00 
REG[29] =  i:102
 103 Goto             0  110    0               00 
 110 Explain        110    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 111 OpenPseudo       9   36    4               00 4 columns in r[36]
 112 SorterSort       8  118    0               00 
 113 SorterData       8   36    9               00 r[36]=data
 114 Column           9    1   34               00 r[34]=sum(b) OVER (
    PARTITION BY (b%10)
    ORDER BY b
    RANGE BETWEEN UNBOUNDED PRECEDING AN
REG[34] =  r:0
 115 Column           9    0   33               00 r[33]=c
REG[33] =   s3[six](8)
 116 ResultRow       33    2    0               00 output=r[33..34]
REG[33] =   s3[six](8)
REG[34] =  r:0
 117 SorterNext       8  113    0               00 
 118 Halt             0    0    0               00 
SQL: [;
;SELECT c, sum(c) OVER (
    ORDER BY c
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  ) FROM t1 ORDER BY c;]
VDBE Trace:
   0 Init             0   69    0               00 Start at 69
  69 Transaction      0    0    2 0             01 usesStmtJournal=0
  70 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
  28 Integer          1   10    0               00 r[10]=1
REG[10] =  i:1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   51    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:31
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    2    0 3             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    2    5               00 r[5]=t1.c
REG[5] =   s3[six](8)
  13 Column           0    2    6               00 r[6]=t1.c
REG[6] =   s3[six](8)
  14 Column           0    2    4               00 r[4]=t1.c
REG[4] =   s3[six](8)
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
REG[8] =  s13[04131313736978736978736978....sixsixsix]
  16 SorterInsert     6    8    4 3             00 key=r[8]
REG[8] =  s13[04131313736978736978736978....sixsixsix]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    0    7               00 r[7]=
REG[7] =   s3[six](8)
  23 Column           7    2    6               00 r[6]=
REG[6] =   s3[six](8)
  24 Column           7    1    5               00 r[5]=
REG[5] =   s3[six](8)
  25 Yield            3    0    0               00 
REG[3] =  i:31
REG[3] =  i:25
  32 Copy             5   12    0               00 r[12]=r[5]
REG[12] =   s3[six](8)
  33 Copy             6   13    0               00 r[13]=r[6]
REG[13] =   s3[six](8)
  34 Copy             7   14    0               00 r[14]=r[7]
REG[14] =   s3[six](8)
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
REG[15] =  s13[04131313736978736978736978....sixsixsix]
  36 NewRowid         2   16    0               00 r[16]=rowid
REG[16] =  i:1
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
REG[15] =  s13[04131313736978736978736978....sixsixsix]
REG[16] =  i:1
  38 Ne              10   43   16               00 if r[16]!=r[10] goto 43
REG[10] =  i:1
REG[16] =  i:1
  39 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  40 Rewind           1    1    0               00 
  41 Rewind           4    1    0               00 
  42 Goto             0   50    0               00 
  50 Goto             0   31    0               00 
  31 Yield            3   51    0               00 next row of subquery_2
REG[3] =  i:25
REG[3] =  i:31
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
REG[3] =  i:31
  51 Rewind           2   61    0               00 
  52 Column           4    2   17               00 r[17]=
REG[17] =   s3[six](8)
  53 AggStep          0   17    1 sum(1)        01 accum=r[1] step(r[17])
REG[17] =   s3[six](8)
  54 Next             4   55    0               00 
  55 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  56 Gosub           11   63    0               00 
REG[11] =  i:56
  63 Noop             0    0    0               00 inner-loop subroutine
  64 Column           1    0   18               00 r[18]=
REG[18] =   s3[six](8)
  65 Copy             2   19    0               00 r[19]=r[2]
REG[19] =  r:0
  66 ResultRow       18    2    0               00 output=r[18..19]
REG[18] =   s3[six](8)
REG[19] =  r:0
  67 Return          11    0    0               00 end inner-loop subroutine
REG[11] =  i:56
  57 Delete           1    0    0               02 
  58 Next             1   60    0               00 
  59 Goto             0   61    0               00 
  61 ResetSorter      1    0    0               00 
  62 Goto             0   68    0               00 
  68 Halt             0    0    0               00 
SQL: [;
;SELECT a, sum(a) OVER (
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM t1 ORDER BY 1, 2;]
VDBE Trace:
   0 Init             0  121    0               00 Start at 121
 121 Transaction      0    0    2 0             01 usesStmtJournal=0
 122 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   69    7               00 subquery_2
  69 SorterOpen      11    5    0 k(2,B,B)      00 
  70 Integer          1   24    0               00 r[24]=1
REG[24] =  i:1
  71 Explain         71    0    0 SCAN SUBQUERY 2 00 
  72 InitCoroutine    3    0    7               00 
  73 Yield            3   91    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:73
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
REG[4] =  NULL
   9 OpenEphemeral    6    4    0               00 nColumn=4
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   25   14               00 subquery_3
  25 Integer          1   11    0               00 r[11]=1
REG[11] =  i:1
  26 Explain         26    7    0 SCAN SUBQUERY 3 00 
  27 InitCoroutine    6    0   14               00 
  28 Yield            6   46    0               00 next row of subquery_3
REG[6] =  i:13
REG[6] =  i:28
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 OpenRead         0    2    0 0             00 root=2 iDb=0; t1
  16 Explain         16   14    0 SCAN TABLE t1 00 
  17 Rewind           0   24    0               00 
  18 Rowid            0    7    0               00 r[7]=rowid
REG[7] =  i:6
  19 Rowid            0    8    0               00 r[8]=rowid
REG[8] =  i:6
  20 Rowid            0    9    0               00 r[9]=rowid
REG[9] =  i:6
  21 Rowid            0   10    0               00 r[10]=rowid
REG[10] =  i:6
  22 Yield            6    0    0               00 
REG[6] =  i:28
REG[6] =  i:22
  29 Copy             7   13    0               00 r[13]=r[7]
REG[13] =  i:6
  30 Copy             8   14    0               00 r[14]=r[8]
REG[14] =  i:6
  31 Copy             9   15    0               00 r[15]=r[9]
REG[15] =  i:6
  32 Copy            10   16    0               00 r[16]=r[10]
REG[16] =  i:6
  33 MakeRecord      13    4   17               00 r[17]=mkrec(r[13..16])
REG[17] =  s9[050101010106060606.........]
  34 NewRowid         7   18    0               00 r[18]=rowid
REG[18] =  i:1
  35 Insert           7   17   18               00 intkey=r[18] data=r[17]
REG[17] =  s9[050101010106060606.........]
REG[18] =  i:1
  36 Ne              11   42   18               00 if r[18]!=r[11] goto 42
REG[11] =  i:1
REG[18] =  i:1
  37 Null             0    4    0               00 r[4]=NULL
REG[4] =  NULL
  38 Rewind           8    1    0               00 
  39 Rewind           6    1    0               00 
  40 Rewind           9    1    0               00 
  41 Goto             0   45    0               00 
  45 Goto             0   28    0               00 
  28 Yield            6   46    0               00 next row of subquery_3
REG[6] =  i:22
REG[6] =  i:28
  23 Next             0   18    0               01 
  24 EndCoroutine     6    0    0               00 
REG[6] =  i:28
  46 Rewind           7   59    0               00 
  47 Column           9    3   19               00 r[19]=
REG[19] =  i:6
  48 AggStep          0   19    4 sum(1)        01 accum=r[4] step(r[19])
REG[19] =  i:6
  49 Next             9   50    0               00 
  50 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  51 Gosub           12   61    0               00 
REG[12] =  i:51
  61 Noop             0    0    0               00 inner-loop subroutine
  62 Column           6    0   20               00 r[20]=
REG[20] =  i:6
  63 Column           6    1   21               00 r[21]=
REG[21] =  i:6
  64 Copy             5   22    0               00 r[22]=r[5]
REG[22] =  i:6
  65 Column           6    2   23               00 r[23]=
REG[23] =  i:6
  66 Yield            3    0    0               00 
REG[3] =  i:73
REG[3] =  i:66
  74 Copy            20   26    0               00 r[26]=r[20]
REG[26] =  i:6
  75 Copy            21   27    0               00 r[27]=r[21]
REG[27] =  i:6
  76 Copy            22   28    0               00 r[28]=r[22]
REG[28] =  i:6
  77 Copy            23   29    0               00 r[29]=r[23]
REG[29] =  i:6
  78 MakeRecord      26    4   30               00 r[30]=mkrec(r[26..29])
REG[30] =  s9[050101010106060606.........]
  79 NewRowid         2   31    0               00 r[31]=rowid
REG[31] =  i:1
  80 Insert           2   30   31               00 intkey=r[31] data=r[30]
REG[30] =  s9[050101010106060606.........]
REG[31] =  i:1
  81 Ne              24   87   31               00 if r[31]!=r[24] goto 87
REG[24] =  i:1
REG[31] =  i:1
  82 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  83 Rewind           3    1    0               00 
  84 Rewind           1    1    0               00 
  85 Rewind           4    1    0               00 
  86 Goto             0   90    0               00 
  90 Goto             0   73    0               00 
  73 Yield            3   91    0               00 next row of subquery_2
REG[3] =  i:66
REG[3] =  i:73
  67 Return          12    0    0               00 end inner-loop subroutine
REG[12] =  i:51
  52 Next             6   54    0               00 
  53 Goto             0   59    0               00 
  59 ResetSorter      6    0    0               00 
  60 Goto             0   68    0               00 
  68 EndCoroutine     3    0    0               00 
REG[3] =  i:73
  91 Rewind           2  104    0               00 
  92 Column           4    3   32               00 r[32]=
REG[32] =  i:6
  93 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
REG[32] =  i:6
  94 Next             4   95    0               00 
  95 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  96 Gosub           25  106    0               00 
REG[25] =  i:96
 106 Noop             0    0    0               00 inner-loop subroutine
 107 Column           1    1   33               00 r[33]=
REG[33] =  i:6
 108 Column           1    2   34               00 r[34]=
REG[34] =  i:6
 109 MakeRecord      33    2   37               00 r[37]=mkrec(r[33..34])
REG[37] =  s5[0301010606.....]
 110 SorterInsert    11   37   33 2             00 key=r[37]
REG[37] =  s5[0301010606.....]
 111 Return          25    0    0               00 end inner-loop subroutine
REG[25] =  i:96
  97 Next             1   99    0               00 
  98 Goto             0  104    0               00 
 104 ResetSorter      1    0    0               00 
 105 Goto             0  112    0               00 
 112 Explain        112    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 113 OpenPseudo      12   38    5               00 5 columns in r[38]
 114 SorterSort      11  120    0               00 
 115 SorterData      11   38   12               00 r[38]=data
 116 Column          12    1   36               00 r[36]=sum(a) OVER (
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  )
REG[36] =  i:6
 117 Column          12    0   35               00 r[35]=a
REG[35] =  i:6
 118 ResultRow       35    2    0               00 output=r[35..36]
REG[35] =  i:6
REG[36] =  i:6
 119 SorterNext      11  115    0               00 
 120 Halt             0    0    0               00 
SQL: [;CREATE TABLE tr1(t2 INTEGER, tr2 INTEGER);]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    2 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:4
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:3
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:3
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:3
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:3
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:3
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 tr1           00 r[7]='tr1'
REG[7] =   t3[tr1](8)
  20 String8          0    8    0 tr1           00 r[8]='tr1'
REG[8] =   t3[tr1](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:4
  22 String8          0   10    0 CREATE TABLE tr1(t2 INTEGER, tr2 INTEGER) 00 r[10]='CREATE TABLE tr1(t2 INTEGER, tr2 INTEGER)'
REG[10] =   t41[CREATE TABLE tr](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s59[06171313015F7461626C657472317472....._tabletr1tr]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s59[06171313015F7461626C657472317472....._tabletr1tr]
REG[5] =  i:3
  25 SetCookie        0    1    3               00 
  26 ParseSchema      0    0    0 tbl_name='tr1' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    3 0             00 usesStmtJournal=0
  16 String8          0    2    0 tr1           00 r[2]='tr1'
REG[2] =   t3[tr1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tr1](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[xyz](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tr1](8)
REG[1] =   s3[xyz](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[tr1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tr1](8)
REG[1] =   s3[tr1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s3[tr1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:4
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s41[CREATE TABLE tr](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s3[tr1](8)
REG[5] =  i:4
REG[6] =   s41[CREATE TABLE tr](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;INSERT INTO tr1 VALUES(3, 3);]
VDBE Trace:
   0 Init             0    8    0               00 Start at 8
   8 Transaction      0    1    3 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
   1 OpenWrite        0    4    0 2             00 root=4 iDb=0; tr1
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Integer          3    2    0               00 r[2]=3
REG[2] =  i:3
   4 Integer          3    3    0               00 r[3]=3
REG[3] =  i:3
   5 MakeRecord       2    2    4 DD            00 r[4]=mkrec(r[2..3])
REG[4] =  s5[0301010303.....]
   6 Insert           0    4    1 tr1           39 intkey=r[1] data=r[4]
REG[4] =  s5[0301010303.....]
REG[1] =  i:1
   7 Halt             0    0    0               00 
SQL: [;
;SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t1;]
VDBE Trace:
   0 Init             0  112    0               00 Start at 112
 112 Transaction      0    0    3 0             01 usesStmtJournal=0
 113 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    1    0               00 nColumn=1
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   67    7               00 subquery_2
  67 Integer          1   16    0               00 r[16]=1
REG[16] =  i:1
  68 Explain         68    0    0 SCAN SUBQUERY 2 00 
  69 InitCoroutine    3    0    7               00 
  70 Yield            3   92    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:70
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
REG[4] =  NULL
   9 OpenEphemeral    6    1    0               00 nColumn=1
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   22   14               00 subquery_3
  22 Integer          1    8    0               00 r[8]=1
REG[8] =  i:1
  23 OpenDup         11    6    0               00 
  24 Explain         24    7    0 SCAN SUBQUERY 3 00 
  25 InitCoroutine    6    0   14               00 
  26 Yield            6   47    0               00 next row of subquery_3
REG[6] =  i:13
REG[6] =  i:26
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 OpenRead         0    2    0 0             00 root=2 iDb=0; t1
  16 Explain         16   14    0 SCAN TABLE t1 00 
  17 Rewind           0   21    0               00 
  18 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  19 Yield            6    0    0               00 
REG[6] =  i:26
REG[6] =  i:19
  27 Copy             7   10    0               00 r[10]=r[7]
REG[10] =  i:0
  28 MakeRecord      10    1   11               00 r[11]=mkrec(r[10])
REG[11] =  s2[0208..]
  29 NewRowid         7   12    0               00 r[12]=rowid
REG[12] =  i:1
  30 Insert           7   11   12               00 intkey=r[12] data=r[11]
REG[11] =  s2[0208..]
REG[12] =  i:1
  31 Ne               8   36   12               00 if r[12]!=r[8] goto 36
REG[8] =  i:1
REG[12] =  i:1
  32 Null             0    4    0               00 r[4]=NULL
REG[4] =  NULL
  33 Rewind           6    1    0               00 
  34 Rewind           9    1    0               00 
  35 Goto             0   46    0               00 
  46 Goto             0   26    0               00 
  26 Yield            6   47    0               00 next row of subquery_3
REG[6] =  i:19
REG[6] =  i:26
  20 Next             0   18    0               01 
  21 EndCoroutine     6    0    0               00 
REG[6] =  i:26
  47 Rewind           7   60    0               00 
  48 Column           9    0   13               00 r[13]=
REG[13] =  i:0
  49 Next             9   50    0               00 
  50 AggValue         4    1    5 lag(1)        00 r[5]=value N=1
  51 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  52 Rowid            6   14    0               00 r[14]=rowid
REG[14] =  i:1
  53 AddImm          14   -1    0               00 r[14]=r[14]+-1
REG[14] =  i:1
  54 SeekRowid       11   56   14               00 intkey=r[14]
REG[14] =  i:0
  56 Gosub            9   62    0               00 
REG[9] =  i:56
  62 Noop             0    0    0               00 inner-loop subroutine
  63 Copy             5   15    0               00 r[15]=r[5]
REG[15] =  NULL
  64 Yield            3    0    0               00 
REG[3] =  i:70
REG[3] =  i:64
  71 Copy            15   18    0               00 r[18]=r[15]
REG[18] =  NULL
  72 MakeRecord      18    1   19               00 r[19]=mkrec(r[18])
REG[19] =  s2[0200..]
  73 NewRowid         2   20    0               00 r[20]=rowid
REG[20] =  i:1
  74 Insert           2   19   20               00 intkey=r[20] data=r[19]
REG[19] =  s2[0200..]
REG[20] =  i:1
  75 Ne              16   80   20               00 if r[20]!=r[16] goto 80
REG[16] =  i:1
REG[20] =  i:1
  76 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
  77 Rewind           1    1    0               00 
  78 Rewind           4    1    0               00 
  79 Goto             0   91    0               00 
  91 Goto             0   70    0               00 
  70 Yield            3   92    0               00 next row of subquery_2
REG[3] =  i:64
REG[3] =  i:70
  65 Return           9    0    0               00 end inner-loop subroutine
REG[9] =  i:56
  57 Next             6   59    0               00 
  58 Goto             0   60    0               00 
  60 ResetSorter      6    0    0               00 
  61 Goto             0   66    0               00 
  66 EndCoroutine     3    0    0               00 
REG[3] =  i:70
  92 Rewind           2  104    0               00 
  93 AggStep          0   21    1 dense_rank(0) 00 accum=r[1] step(r[21])
  94 Next             4   96    0               00 
  95 Goto             0   97    0               00 
  97 AggValue         1    0    2 dense_rank(0) 00 r[2]=value N=0
  98 Gosub           17  106    0               00 
REG[17] =  i:98
 106 Noop             0    0    0               00 inner-loop subroutine
 107 Copy             2   21    0               00 r[21]=r[2]
REG[21] =  i:1
 108 Column           1    0   22               00 r[22]=
REG[22] =  NULL
 109 ResultRow       21    2    0               00 output=r[21..22]
REG[21] =  i:1
REG[22] =  NULL
 110 Return          17    0    0               00 end inner-loop subroutine
REG[17] =  i:98
  99 Delete           1    0    0               02 
 100 Next             1  102    0               00 
 101 Goto             0  104    0               00 
 104 ResetSorter      1    0    0               00 
 105 Goto             0  111    0               00 
 111 Halt             0    0    0               00 

Program received signal SIGSEGV, Segmentation fault.
0x00000000003a15d8 in sqlite3WindowRewrite (pParse=0x7fff9a3570c0, p=0x19de170) at sqlite3.c:146356
146356	      pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList);
(gdb) #0  0x00000000003a15d8 in sqlite3WindowRewrite (pParse=0x7fff9a3570c0, p=0x19de170) at sqlite3.c:146356
#1  0x00000000002fc6de in sqlite3Select (pParse=0x7fff9a3570c0, p=0x19de170, pDest=0x7fff9a355ad0) at sqlite3.c:130281
#2  0x0000000000355337 in sqlite3CodeRhsOfIN (pParse=0x7fff9a3570c0, pExpr=0x19dfd90, iTab=2) at sqlite3.c:99650
#3  0x0000000000353c7b in sqlite3FindInIndex (pParse=0x7fff9a3570c0, pX=0x19dfd90, inFlags=4, prRhsHasNull=0x0, aiMap=0x19cb570, piTab=0x7fff9a355d04) at sqlite3.c:99448
#4  0x00000000003795bd in codeEqualityTerm (pParse=0x7fff9a3570c0, pTerm=0x19cbfe0, pLevel=0x19cc268, iEq=0, bRev=0, iTarget=1) at sqlite3.c:136693
#5  0x0000000000374503 in sqlite3WhereCodeOneLoopStart (pParse=0x7fff9a3570c0, v=0x19d09d0, pWInfo=0x19cbed0, iLevel=0, pLevel=0x19cc268, notReady=18446744073709551615) at sqlite3.c:137510
#6  0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7fff9a3570c0, pTabList=0x19e2310, pWhere=0x19cd640, pOrderBy=0x0, pResultSet=0x19ddcc0, wctrlFlags=0, iAuxArg=320) at sqlite3.c:145128
#7  0x00000000002fdcea in sqlite3Select (pParse=0x7fff9a3570c0, p=0x19d9fd0, pDest=0x7fff9a3564b0) at sqlite3.c:130695
#8  0x00000000002ecaa8 in yy_reduce (yypParser=0x7fff9a3566e0, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7fff9a3570c0) at sqlite3.c:151581
#9  0x00000000002e92f8 in sqlite3Parser (yyp=0x7fff9a3566e0, yymajor=1, yyminor=...) at sqlite3.c:152877
#10 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7fff9a3570c0, 
    zSql=0x19d6341 ";;\n;SELECT c, sum(c) OVER win1 FROM t1 \n  WINDOW win1 AS (ORDER BY c)\n\n;SELECT b, sum(b) OVER win1 FROM t1 \n  WINDOW win1 AS (PARTITION BY 1 ORDER BY a)\n\n;", pzErrMsg=0x7fff9a3572a0)
    at sqlite3.c:154013
#11 0x00000000002a1683 in sqlite3Prepare (db=0x19c3270, 
    zSql=0x19c40a5 ";\n;SELECT * FROM t1 WHERE \n      (0, t1.a) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t1);;\n;SELECT c, sum(c) OVER win1 FROM t1 \n  WINDOW win1 AS (ORDER BY c)\n\n;SELECT b, sum(b) OVER win1 FROM"..., nBytes=252, prepFlags=128, pReprepare=0x0, ppStmt=0x7fff9a3573d8, pzTail=0x7fff9a3573c0) at sqlite3.c:124303
#12 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x19c3270, 
    zSql=0x19c40a5 ";\n;SELECT * FROM t1 WHERE \n      (0, t1.a) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t1);;\n;SELECT c, sum(c) OVER win1 FROM t1 \n  WINDOW win1 AS (ORDER BY c)\n\n;SELECT b, sum(b) OVER win1 FROM"..., nBytes=252, prepFlags=128, pOld=0x0, ppStmt=0x7fff9a3573d8, pzTail=0x7fff9a3573c0) at sqlite3.c:124403
#13 0x000000000029247f in sqlite3_prepare_v2 (db=0x19c3270, 
    zSql=0x19c40a5 ";\n;SELECT * FROM t1 WHERE \n      (0, t1.a) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t1);;\n;SELECT c, sum(c) OVER win1 FROM t1 \n  WINDOW win1 AS (ORDER BY c)\n\n;SELECT b, sum(b) OVER win1 FROM"..., nBytes=252, ppStmt=0x7fff9a3573d8, pzTail=0x7fff9a3573c0) at sqlite3.c:124487
#14 0x0000000000256bd0 in main (argc=1, argv=0x7fff9a357588) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 54817] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
