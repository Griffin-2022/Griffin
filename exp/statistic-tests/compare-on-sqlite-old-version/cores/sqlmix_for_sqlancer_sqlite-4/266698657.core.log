GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000550,sig:06,src:026272+022099,time:35523685,execs:12335154,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    0 0             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
  10 Halt             0    0    0               00 
SQL: [;CREATE TABLE t1(a TEXT, CHECK(a<>+a));]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    0 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:0
   2 If               3    5    0               00 
REG[3] =  i:0
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:2
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:1
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:1
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:1
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:1
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 t1            00 r[7]='t1'
REG[7] =   t2[t1](8)
  20 String8          0    8    0 t1            00 r[8]='t1'
REG[8] =   t2[t1](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:2
  22 String8          0   10    0 CREATE TABLE t1(a TEXT, CHECK(a<>+a)) 00 r[10]='CREATE TABLE t1(a TEXT, CHECK(a<>+a))'
REG[10] =   t37[CREATE TABLE t1](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s53[0617111101577461626C657431743102.....Wtablet1t1.]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s53[0617111101577461626C657431743102.....Wtablet1t1.]
REG[5] =  i:1
  25 SetCookie        0    1    1               00 
  26 ParseSchema      0    0    0 tbl_name='t1' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    1 0             00 usesStmtJournal=0
  16 String8          0    2    0 t1            00 r[2]='t1'
REG[2] =   t2[t1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[t1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:2
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s37[CREATE TABLE t1](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[t1](8)
REG[5] =  i:2
REG[6] =   s37[CREATE TABLE t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;
;PRAGMA integrity_check;]
VDBE Trace:
   0 Init             0   52   49               00 Start at 52
  52 Transaction      0    0    1 0             01 usesStmtJournal=0
  53 Transaction      1    0    0 0             01 usesStmtJournal=0
  54 Goto             0    1    0               00 
   1 Integer         99    1    0               00 r[1]=99
REG[1] =  i:99
   2 IntegrityCk      2    2    1 [2,1]         00 
   3 IsNull           2    9    0               00 if r[2]==NULL goto 9
REG[2] =  NULL
   9 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  10 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  11 Rewind           1   22    0               00 
  22 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
  23 OpenRead         1    1    0 5             00 root=1 iDb=0; sqlite_master
  24 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  25 Rewind           1   29    0               00 
  26 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:0
  27 Column           1    4    3               80 r[3]=
REG[3] =   s37[CREATE TABLE t1](8)
  28 Next             1   26    0               00 
  29 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
  30 IntegrityCk      2    1    1 [1]           01 
  31 IsNull           2   37    0               00 if r[2]==NULL goto 37
REG[2] =  NULL
  37 OpenRead         1    1    1 5             00 root=1 iDb=1; sqlite_temp_master
  38 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  39 Rewind           1   43    0               00 
  43 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
  44 AddImm           1  -99    0               00 r[1]=r[1]+-99
REG[1] =  i:99
  45 IfNotZero        1   48    0               00 if r[1]!=0 then r[1]--, goto 48
REG[1] =  i:0
  46 String8          0    3    0 ok            00 r[3]='ok'
REG[3] =   t2[ok](8)
  47 ResultRow        3    1    0               00 output=r[3]
REG[3] =   t2[ok](8)
  48 Halt             0    0    0               00 
SQL: [;WITH RECURSIVE t1(i) AS (VALUES(1) UNION ALL SELECT i+1 FROM t1 WHERE i<100)
      INSERT INTO t1(a,a) SELECT i, zeroblob(200) FROM t1;]
VDBE Trace:
   0 Init             0   48    0               00 Start at 48
  48 Transaction      0    1    1 0             01 usesStmtJournal=1
  49 Integer        100   10    0               00 r[10]=100
REG[10] =  i:100
  50 Integer          1   11    0               00 r[11]=1
REG[11] =  i:1
  51 Integer        200   16    0               00 r[16]=200
REG[16] =  i:200
  52 Function0        1   16   14 zeroblob(1)   01 r[14]=func(r[16])
REG[16] =  i:200
REG[14] =  s0[]+200z
  53 Goto             0    1    0               00 
   1 InitCoroutine    3   37    2               00 
  37 OpenWrite        3    2    0 1             00 root=2 iDb=0; t1
  38 Yield            3   47    0               00 
REG[3] =  i:1
REG[3] =  i:38
   2 InitCoroutine    4   29    3               00 t1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    4    0    3               00 
  31 Yield            4   36    0               00 next row of t1
REG[4] =  i:2
REG[4] =  i:31
   3 Explain          3    0    0 CO-ROUTINE 2  00 
   4 OpenPseudo       1    5    1               00 1 columns in r[5]
   5 OpenEphemeral    2    1    0               00 nColumn=1; Queue table
   6 Explain          6    3    0 SETUP         00 
   7 Explain          7    6    0 SCAN CONSTANT ROW 00 
   8 Integer          1    6    0               00 r[6]=1
REG[6] =  i:1
   9 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s2[0209..]
  10 NewRowid         2    8    0               00 r[8]=rowid
REG[8] =  i:1
  11 Insert           2    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s2[0209..]
REG[8] =  i:1
  12 Rewind           2   28    0               00 
  13 NullRow          1    0    0               00 
  14 RowData          2    5    0               00 r[5]=data
REG[5] =  s2[0209..]
  15 Delete           2    0    0               00 
  16 Column           1    0    9               00 r[9]=
REG[9] =  i:1
  17 Yield            4    0    0               00 
REG[4] =  i:31
REG[4] =  i:17
  32 Copy             9   12    0               00 r[12]=r[9]; t1.i
REG[12] =  i:1
  33 Copy            14   13    0               00 r[13]=r[14]
REG[13] =  s200[00000000000000000000000000000000................]
  34 Yield            3    0    0               00 
REG[3] =  i:38
REG[3] =  i:34
  39 NewRowid         3    1    0               00 r[1]=rowid
REG[1] =  i:1
  40 SCopy           12    2    0               00 r[2]=r[12]
REG[2] =  i:1
  41 Abortable        0    0    0               00 
  42 Ne               2   44    2 (BINARY)      52 if r[2]!=r[2] goto 44

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fe090124859 in __GI_abort () at abort.c:79
#2  0x00007fe090124729 in __assert_fail_base (fmt=0x7fe0902ba588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=<optimized out>) at assert.c:92
#3  0x00007fe090135fd6 in __GI___assert_fail (assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=0x216524 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003c5c6a in sqlite3VdbeExec (p=0x2398820) at sqlite3.c:85580
#5  0x0000000000411104 in sqlite3Step (p=0x2398820) at sqlite3.c:81930
#6  0x000000000029128d in sqlite3_step (pStmt=0x2398820) at sqlite3.c:81995
#7  0x00000000002570b9 in main (argc=1, argv=0x7fffaefe95d8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 54866] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
