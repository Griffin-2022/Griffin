GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000032,sig:06,src:019505+018419,time:1201558,execs:134534,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT 'abcxyz' NOT GLOB NULL 
;]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
   6 String8          0    4    0 abcxyz        00 r[4]='abcxyz'
REG[4] =   t6[abcxyz](8)
   7 Function0        3    3    2 glob(2)       02 r[2]=func(r[3..4])
REG[3] =  NULL
REG[4] =   t6[abcxyz](8)
REG[2] =  NULL
   8 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Not              2    1    0               00 r[1]= !r[2]
REG[2] =  NULL
REG[1] =  NULL
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =  NULL
   4 Halt             0    0    0               00 
SQL: [;CREATE TABLE tt1 (
      tr1      INTEGER     PRIMARY KEY AUTOINCREMENT,
      t2    INTEGER     NOT NULL,
      tr2     INTEGER
    );]
VDBE Trace:
   0 Init             0   54    0               00 Start at 54
  54 Transaction      0    1    3 0             01 usesStmtJournal=0
  55 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:5
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:4
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:4
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:4
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:4
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:4
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 tt1           00 r[7]='tt1'
REG[7] =   t3[tt1](8)
  20 String8          0    8    0 tt1           00 r[8]='tt1'
REG[8] =   t3[tt1](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:5
  22 String8          0   10    0 CREATE TABLE tt1 (
      tr1      INTEGER     PRIMARY KEY AUTOINCREMENT,
      t2    INTEGER     NOT NULL,
      tr2     INTEGER
    ) 00 r[10]='CREATE TABLE tt1 (
      tr1      INTEGER     PRIMARY KEY AUTOINCREMENT,
      t2    INTEGER
REG[10] =   t134[CREATE TABLE tt](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s153[071713130182197461626C6574743174.......tablett1t]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s153[071713130182197461626C6574743174.......tablett1t]
REG[5] =  i:4
  25 SetCookie        0    1    4               00 
  26 ReadCookie       0   14    2               00 
REG[14] =  i:4
  27 If              14   30    0               00 
REG[14] =  i:4
  30 CreateBtree      0   13    1               00 r[13]=root iDb=0 flags=1
REG[13] =  i:6
  31 OpenWrite        0    1    0 5             00 root=1 iDb=0
  32 NewRowid         0   12    0               00 r[12]=rowid
REG[12] =  i:5
  33 Blob             6   14    0              00 r[14]= (len=6)
REG[14] =  t6[060000000000......]
  34 Insert           0   14   12               08 intkey=r[12] data=r[14]
REG[14] =  t6[060000000000......]
REG[12] =  i:5
  35 Close            0    0    0               00 
  36 Close            0    0    0               00 
  37 Null             0   15   16               00 r[15..16]=NULL
REG[15] =  NULL
  38 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  39 Explain         39    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  40 SeekRowid        2   42   12               00 intkey=r[12]
REG[12] =  i:5
  41 Rowid            2   16    0               00 r[16]=rowid
REG[16] =  i:5
  42 IsNull          16   50    0               00 if r[16]==NULL goto 50
REG[16] =  i:5
  43 String8          0   17    0 table         00 r[17]='table'
REG[17] =   t5[table](8)
  44 String8          0   18    0 sqlite_sequence 00 r[18]='sqlite_sequence'
REG[18] =   t15[sqlite_sequence](8)
  45 String8          0   19    0 sqlite_sequence 00 r[19]='sqlite_sequence'
REG[19] =   t15[sqlite_sequence](8)
  46 Copy            13   20    0               00 r[20]=r[13]
REG[20] =  i:6
  47 String8          0   21    0 CREATE TABLE sqlite_sequence(name,seq) 00 r[21]='CREATE TABLE sqlite_sequence(name,seq)'
REG[21] =   t38[CREATE TABLE sq](8)
  48 MakeRecord      17    5   22 BBBDB         00 r[22]=mkrec(r[17..21])
REG[22] =  s80[06172B2B01597461626C6573716C6974..++.Ytablesqlit]
  49 Insert           2   22   16               00 intkey=r[16] data=r[22]
REG[22] =  s80[06172B2B01597461626C6573716C6974..++.Ytablesqlit]
REG[16] =  i:5
  50 SetCookie        0    1    4               00 
  51 ParseSchema      0    0    0 tbl_name='sqlite_sequence' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    4 0             00 usesStmtJournal=0
  16 String8          0    2    0 sqlite_sequence 00 r[2]='sqlite_sequence'
REG[2] =   t15[sqlite_sequence](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[tt1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s3[tt1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t15[sqlite_sequence](8)
REG[1] =   s15[sqlite_sequence](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s15[sqlite_sequence](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:6
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s38[CREATE TABLE sq](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s15[sqlite_sequence](8)
REG[5] =  i:6
REG[6] =   s38[CREATE TABLE sq](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  52 ParseSchema      0    0    0 tbl_name='tt1' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    4 0             00 usesStmtJournal=0
  16 String8          0    2    0 tt1           00 r[2]='tt1'
REG[2] =   t3[tt1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tt1](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tt1](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tt1](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[tt1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tt1](8)
REG[1] =   s3[tt1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s3[tt1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:5
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s134[CREATE TABLE tt](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s3[tt1](8)
REG[5] =  i:5
REG[6] =   s134[CREATE TABLE tt](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[tt1](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  53 Halt             0    0    0               00 
SQL: [;CREATE TABLE x (
      t1i1      INTEGER PRIMARY KEY AUTOINCREMENT,
      t2i1  INTEGER NOT NULL,
      t0  INTEGER NOT NULL
    );]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    4 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:7
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:6
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:6
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:6
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:6
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:6
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 x             00 r[7]='x'
REG[7] =   t1[x](8)
  20 String8          0    8    0 x             00 r[8]='x'
REG[8] =   t1[x](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:7
  22 String8          0   10    0 CREATE TABLE x (
      t1i1      INTEGER PRIMARY KEY AUTOINCREMENT,
      t2i1  INTEGER NOT NULL,
      t0  INTEGER NOT NULL
    ) 00 r[10]='CREATE TABLE x (
      t1i1      INTEGER PRIMARY KEY AUTOINCREMENT,
      t2i1  INTEGER NOT 
REG[10] =   t130[CREATE TABLE x ](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s145[07170F0F0182117461626C6578780743.......tablexx.C]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s145[07170F0F0182117461626C6578780743.......tablexx.C]
REG[5] =  i:6
  25 SetCookie        0    1    5               00 
  26 ParseSchema      0    0    0 tbl_name='x' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    5 0             00 usesStmtJournal=0
  16 String8          0    2    0 x             00 r[2]='x'
REG[2] =   t1[x](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[x](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[x](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[x](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[tt1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[x](8)
REG[1] =   s3[tt1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[x](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[x](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[x](8)
REG[1] =   s1[x](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[x](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:7
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s130[CREATE TABLE x ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[x](8)
REG[5] =  i:7
REG[6] =   s130[CREATE TABLE x ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;insert into b (c) values (2);]
VDBE Trace:
   0 Init             0    7    0               00 Start at 7
   7 Transaction      0    1    5 0             01 usesStmtJournal=0
   8 Goto             0    1    0               00 
   1 OpenWrite        0    3    0 1             00 root=3 iDb=0; b
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Integer          2    2    0               00 r[2]=2
REG[2] =  i:2
   4 MakeRecord       2    1    3 D             00 r[3]=mkrec(r[2])
REG[3] =  s3[020102...]
   5 Insert           0    3    1 b             39 intkey=r[1] data=r[3]
REG[3] =  s3[020102...]
REG[1] =  i:1
   6 Halt             0    0    0               00 
SQL: [;insert into t1 (a, a, a)
    values (4469, 2, 2);]
VDBE Trace:
   0 Init             0    7    0               00 Start at 7
   7 Transaction      0    1    5 0             01 usesStmtJournal=0
   8 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Integer       4469    2    0               00 r[2]=4469
REG[2] =  i:4469
   4 MakeRecord       2    1    3 D             00 r[3]=mkrec(r[2])
REG[3] =  s4[02021175...u]
   5 Insert           0    3    1 t1            39 intkey=r[1] data=r[3]
REG[3] =  s4[02021175...u]
REG[1] =  i:1
   6 Halt             0    0    0               00 
SQL: [;insert into v1 (xyz, xyz, xyz)
    values (0, 0, NULL);]
VDBE Trace:
   0 Init             0    7    0               00 Start at 7
   7 Transaction      0    1    5 0             01 usesStmtJournal=0
   8 Goto             0    1    0               00 
   1 OpenWrite        0    4    0 1             00 root=4 iDb=0; v1
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Integer          0    2    0               00 r[2]=0
REG[2] =  i:0
   4 MakeRecord       2    1    3               00 r[3]=mkrec(r[2])
REG[3] =  s2[0208..]
   5 Insert           0    3    1 v1            39 intkey=r[1] data=r[3]
REG[3] =  s2[0208..]
REG[1] =  i:1
   6 Halt             0    0    0               00 
SQL: [;insert into b (c, c, c)
    values (2, 4312, 2);]
VDBE Trace:
   0 Init             0    7    0               00 Start at 7
   7 Transaction      0    1    5 0             01 usesStmtJournal=0
   8 Goto             0    1    0               00 
   1 OpenWrite        0    3    0 1             00 root=3 iDb=0; b
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   3 Integer          2    2    0               00 r[2]=2
REG[2] =  i:2
   4 MakeRecord       2    1    3 D             00 r[3]=mkrec(r[2])
REG[3] =  s3[020102...]
   5 Insert           0    3    1 b             39 intkey=r[1] data=r[3]
REG[3] =  s3[020102...]
REG[1] =  i:2
   6 Halt             0    0    0               00 
SQL: [;
;DROP TABLE IF EXISTS tt1;]
VDBE Trace:
   0 Init             0   48    0               00 Start at 48
  48 Transaction      0    1    5 0             01 usesStmtJournal=1
  49 String8          0    3    0 tt1           00 r[3]='tt1'
REG[3] =   t3[tt1](8)
  50 String8          0    6    0 trigger       00 r[6]='trigger'
REG[6] =   t7[trigger](8)
  51 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenWrite        0    6    0 2             00 root=6 iDb=0; sqlite_sequence
   3 Explain          3    0    0 SCAN TABLE sqlite_sequence 00 
   4 Rewind           0   11    0               00 
  11 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  12 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  13 Explain         13    0    0 SCAN TABLE sqlite_master 00 
  14 Rewind           1   23    0               00 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[t1](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t3[tt1](8)
REG[2] =   s2[t1](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[b](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t3[tt1](8)
REG[2] =   s1[b](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[v1](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t3[tt1](8)
REG[2] =   s2[v1](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s3[tt1](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t3[tt1](8)
REG[2] =   s3[tt1](8)
  17 Column           1    0    2               00 r[2]=sqlite_master.type
REG[2] =   s5[table](8)
  18 Eq               6   22    2 (BINARY)      52 if r[2]==r[6] goto 22
REG[6] =   t7[trigger](8)
REG[2] =   s5[table](8)
  19 Rowid            1    7    0               00 r[7]=rowid
REG[7] =  i:4
  20 Once             0   21    0               00 
  21 Delete           1    0    0               02 
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s15[sqlite_sequence](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t3[tt1](8)
REG[2] =   s15[sqlite_sequence](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[x](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t3[tt1](8)
REG[2] =   s1[x](8)
  22 Next             1   15    0               01 
  23 Destroy          5    2    0               00 
REG[2] =  i:0
  24 Null             0    8    9               00 r[8..9]=NULL
REG[8] =  NULL
  25 IfNot            2   34    1               00 
REG[2] =  i:0
  34 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  35 RowSetRead       8   45    9               00 r[9]=rowset(8)
REG[8] =  NULL
REG[9] =  NULL
  45 DropTable        0    0    0 tt1           00 
  46 SetCookie        0    1    6               00 
  47 Halt             0    0    0               00 
SQL: [;CREATE TABLE c0 (
      v2 INTEGER PRIMARY KEY AUTOINCREMENT,
      c1 INTEGER
    );]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    6 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:5
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:7
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:7
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:7
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:7
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:7
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 c0            00 r[7]='c0'
REG[7] =   t2[c0](8)
  20 String8          0    8    0 c0            00 r[8]='c0'
REG[8] =   t2[c0](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:5
  22 String8          0   10    0 CREATE TABLE c0 (
      v2 INTEGER PRIMARY KEY AUTOINCREMENT,
      c1 INTEGER
    ) 00 r[10]='CREATE TABLE c0 (
      v2 INTEGER PRIMARY KEY AUTOINCREMENT,
      c1 INTEGER
    )'
REG[10] =   t84[CREATE TABLE c0](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s101[071711110181357461626C6563306330......5tablec0c0]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s101[071711110181357461626C6563306330......5tablec0c0]
REG[5] =  i:7
  25 SetCookie        0    1    7               00 
  26 ParseSchema      0    0    0 tbl_name='c0' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    7 0             00 usesStmtJournal=0
  16 String8          0    2    0 c0            00 r[2]='c0'
REG[2] =   t2[c0](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c0](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c0](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c0](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c0](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[x](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c0](8)
REG[1] =   s1[x](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[c0](8)
REG[1] =   s2[c0](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[c0](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:5
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s84[CREATE TABLE c0](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[c0](8)
REG[5] =  i:5
REG[6] =   s84[CREATE TABLE c0](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;CREATE TABLE d (
      t1abd INTEGER PRIMARY KEY AUTOINCREMENT,
      t1abc INTEGER
    );]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    7 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:8
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:8
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:8
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:8
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:8
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:8
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 d             00 r[7]='d'
REG[7] =   t1[d](8)
  20 String8          0    8    0 d             00 r[8]='d'
REG[8] =   t1[d](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:8
  22 String8          0   10    0 CREATE TABLE d (
      t1abd INTEGER PRIMARY KEY AUTOINCREMENT,
      t1abc INTEGER
    ) 00 r[10]='CREATE TABLE d (
      t1abd INTEGER PRIMARY KEY AUTOINCREMENT,
      t1abc INTEGER
    )'
REG[10] =   t89[CREATE TABLE d ](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s104[07170F0F01813F7461626C6564640843......?tabledd.C]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s104[07170F0F01813F7461626C6564640843......?tabledd.C]
REG[5] =  i:8
  25 SetCookie        0    1    8               00 
  26 ParseSchema      0    0    0 tbl_name='d' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    8 0             00 usesStmtJournal=0
  16 String8          0    2    0 d             00 r[2]='d'
REG[2] =   t1[d](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[x](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s1[x](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s2[c0](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[d](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[d](8)
REG[1] =   s1[d](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[d](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:8
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s89[CREATE TABLE d ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[d](8)
REG[5] =  i:8
REG[6] =   s89[CREATE TABLE d ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;CREATE TABLE t3 (
      rins2 INTEGER,
      rins INTEGER,
      m INTEGER
    );]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    8 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:9
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:9
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:9
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:9
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:9
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:9
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 t3            00 r[7]='t3'
REG[7] =   t2[t3](8)
  20 String8          0    8    0 t3            00 r[8]='t3'
REG[8] =   t2[t3](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:9
  22 String8          0   10    0 CREATE TABLE t3 (
      rins2 INTEGER,
      rins INTEGER,
      m INTEGER
    ) 00 r[10]='CREATE TABLE t3 (
      rins2 INTEGER,
      rins INTEGER,
      m INTEGER
    )'
REG[10] =   t80[CREATE TABLE t3](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s97[0717111101812D7461626C6574337433......-tablet3t3]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s97[0717111101812D7461626C6574337433......-tablet3t3]
REG[5] =  i:9
  25 SetCookie        0    1    9               00 
  26 ParseSchema      0    0    0 tbl_name='t3' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    9 0             00 usesStmtJournal=0
  16 String8          0    2    0 t3            00 r[2]='t3'
REG[2] =   t2[t3](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[x](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s1[x](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s2[c0](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[d](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s1[d](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t3](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t3](8)
REG[1] =   s2[t3](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[t3](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:9
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s80[CREATE TABLE t3](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[t3](8)
REG[5] =  i:9
REG[6] =   s80[CREATE TABLE t3](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;INSERT INTO t3 VALUES(4469,2,98),(4469,1,99),(4469,3,97);]
VDBE Trace:
   0 Init             0   23    0               00 Start at 23
  23 Transaction      0    1    9 0             01 usesStmtJournal=0
  24 Goto             0    1    0               00 
   1 InitCoroutine    5   16    2               00 
  16 OpenWrite        0    9    0 3             00 root=9 iDb=0; t3
  17 Yield            5   22    0               00 
REG[5] =  i:1
REG[5] =  i:17
   2 Explain          2    0    0 SCAN 3 CONSTANT ROWS 00 
   3 Integer       4469    2    0               00 r[2]=4469
REG[2] =  i:4469
   4 Integer          2    3    0               00 r[3]=2
REG[3] =  i:2
   5 Integer         98    4    0               00 r[4]=98
REG[4] =  i:98
   6 Yield            5    0    0               00 
REG[5] =  i:17
REG[5] =  i:6
  18 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
  19 MakeRecord       2    3    6 DDD           00 r[6]=mkrec(r[2..4])
REG[6] =  s8[0402010111750262.....u.b]
  20 Insert           0    6    1 t3            39 intkey=r[1] data=r[6]
REG[6] =  s8[0402010111750262.....u.b]
REG[1] =  i:1
  21 Goto             0   17    0               00 
  17 Yield            5   22    0               00 
REG[5] =  i:6
REG[5] =  i:17
   7 Integer       4469    2    0               00 r[2]=4469
REG[2] =  i:4469
   8 Integer          1    3    0               00 r[3]=1
REG[3] =  i:1
   9 Integer         99    4    0               00 r[4]=99
REG[4] =  i:99
  10 Yield            5    0    0               00 
REG[5] =  i:17
REG[5] =  i:10
  18 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
  19 MakeRecord       2    3    6 DDD           00 r[6]=mkrec(r[2..4])
REG[6] =  s7[04020901117563.....uc]
  20 Insert           0    6    1 t3            39 intkey=r[1] data=r[6]
REG[6] =  s7[04020901117563.....uc]
REG[1] =  i:2
  21 Goto             0   17    0               00 
  17 Yield            5   22    0               00 
REG[5] =  i:10
REG[5] =  i:17
  11 Integer       4469    2    0               00 r[2]=4469
REG[2] =  i:4469
  12 Integer          3    3    0               00 r[3]=3
REG[3] =  i:3
  13 Integer         97    4    0               00 r[4]=97
REG[4] =  i:97
  14 Yield            5    0    0               00 
REG[5] =  i:17
REG[5] =  i:14
  18 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:3
  19 MakeRecord       2    3    6 DDD           00 r[6]=mkrec(r[2..4])
REG[6] =  s8[0402010111750361.....u.a]
  20 Insert           0    6    1 t3            39 intkey=r[1] data=r[6]
REG[6] =  s8[0402010111750361.....u.a]
REG[1] =  i:3
  21 Goto             0   17    0               00 
  17 Yield            5   22    0               00 
REG[5] =  i:14
REG[5] =  i:17
  15 EndCoroutine     5    0    0               00 
REG[5] =  i:17
  22 Halt             0    0    0               00 
SQL: [;CREATE TABLE aaa (
      bbb INTEGER
    );]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    9 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:10
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:10
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:10
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:10
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:10
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:10
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 aaa           00 r[7]='aaa'
REG[7] =   t3[aaa](8)
  20 String8          0    8    0 aaa           00 r[8]='aaa'
REG[8] =   t3[aaa](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:10
  22 String8          0   10    0 CREATE TABLE aaa (
      bbb INTEGER
    ) 00 r[10]='CREATE TABLE aaa (
      bbb INTEGER
    )'
REG[10] =   t42[CREATE TABLE aa](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s60[0617131301617461626C656161616161.....atableaaaaa]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s60[0617131301617461626C656161616161.....atableaaaaa]
REG[5] =  i:10
  25 SetCookie        0    1   10               00 
  26 ParseSchema      0    0    0 tbl_name='aaa' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0   10 0             00 usesStmtJournal=0
  16 String8          0    2    0 aaa           00 r[2]='aaa'
REG[2] =   t3[aaa](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[x](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s1[x](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[c0](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[d](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s1[d](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t3](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[t3](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[aaa](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s3[aaa](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s3[aaa](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:10
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s42[CREATE TABLE aa](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s3[aaa](8)
REG[5] =  i:10
REG[6] =   s42[CREATE TABLE aa](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;SELECT
     (SELECT sum(xyz==xyz) FROM v1)
    FROM
     (SELECT t1i1 as xyz, max(t2i1) AS pqr
        FROM x
       GROUP BY t0);]
VDBE Trace:
   0 Init             0   73    0               00 Start at 73
  73 Transaction      0    0   10 0             01 usesStmtJournal=0
  74 Goto             0    1    0               00 
   1 InitCoroutine    1   48    2               00 subquery_2
  48 Explain         48    0    0 SCAN SUBQUERY 2 00 
  49 InitCoroutine    1    0    2               00 
  50 Yield            1   72    0               00 next row of subquery_2
REG[1] =  i:1
REG[1] =  i:50
   2 Explain          2    0    0 CO-ROUTINE 2  00 
   3 SorterOpen       3    3    0 k(1,B)        00 
   4 Integer          0    6    0               00 r[6]=0; clear abort flag
REG[6] =  i:0
   5 Null             0    9    9               00 r[9..9]=NULL
REG[9] =  NULL
   6 Gosub            8   44    0               00 
REG[8] =  i:6
  44 Null             0    2    4               00 r[2..4]=NULL
REG[2] =  NULL
  45 Integer          0    5    0               00 r[5]=0; indicate accumulator empty
REG[5] =  i:0
  46 Return           8    0    0               00 
REG[8] =  i:6
   7 OpenRead         1    7    0 3             00 root=7 iDb=0; x
   8 Explain          8    2    0 SCAN TABLE x  00 
   9 Rewind           1   17    0               00 
  17 OpenPseudo       4   14    3               00 3 columns in r[14]
  18 SorterSort       3   47    0               00 GROUP BY sort
  47 EndCoroutine     1    0    0               00 
REG[1] =  i:50
  72 Halt             0    0    0               00 
SQL: [;DROP TABLE IF EXISTS aaa;]
VDBE Trace:
   0 Init             0   38    0               00 Start at 38
  38 Transaction      0    1   10 0             01 usesStmtJournal=1
  39 String8          0    3    0 aaa           00 r[3]='aaa'
REG[3] =   t3[aaa](8)
  40 String8          0    4    0 trigger       00 r[4]='trigger'
REG[4] =   t7[trigger](8)
  41 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[t1](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s2[t1](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[b](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s1[b](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[v1](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s2[v1](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s15[sqlite_sequence](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s15[sqlite_sequence](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[x](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s1[x](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[c0](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s2[c0](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[d](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s1[d](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[t3](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s2[t3](8)
  12 Next             0    5    0               01 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s3[aaa](8)
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
REG[3] =   t3[aaa](8)
REG[2] =   s3[aaa](8)
   7 Column           0    0    2               00 r[2]=sqlite_master.type
REG[2] =   s5[table](8)
   8 Eq               4   12    2 (BINARY)      52 if r[2]==r[4] goto 12
REG[4] =   t7[trigger](8)
REG[2] =   s5[table](8)
   9 Rowid            0    5    0               00 r[5]=rowid
REG[5] =  i:10
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
  13 Destroy         10    2    0               00 
REG[2] =  i:0
  14 Null             0    6    7               00 r[6..7]=NULL
REG[6] =  NULL
  15 IfNot            2   24    1               00 
REG[2] =  i:0
  24 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  25 RowSetRead       6   35    7               00 r[7]=rowset(6)
REG[6] =  NULL
REG[7] =  NULL
  35 DropTable        0    0    0 aaa           00 
  36 SetCookie        0    1   11               00 
  37 Halt             0    0    0               00 
SQL: [;DROP TABLE IF EXISTS x;]
VDBE Trace:
   0 Init             0   48    0               00 Start at 48
  48 Transaction      0    1   11 0             01 usesStmtJournal=1
  49 String8          0    3    0 x             00 r[3]='x'
REG[3] =   t1[x](8)
  50 String8          0    6    0 trigger       00 r[6]='trigger'
REG[6] =   t7[trigger](8)
  51 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenWrite        0    6    0 2             00 root=6 iDb=0; sqlite_sequence
   3 Explain          3    0    0 SCAN TABLE sqlite_sequence 00 
   4 Rewind           0   11    0               00 
  11 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  12 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  13 Explain         13    0    0 SCAN TABLE sqlite_master 00 
  14 Rewind           1   23    0               00 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[t1](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s2[t1](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[b](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s1[b](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[v1](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s2[v1](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s15[sqlite_sequence](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s15[sqlite_sequence](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[x](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s1[x](8)
  17 Column           1    0    2               00 r[2]=sqlite_master.type
REG[2] =   s5[table](8)
  18 Eq               6   22    2 (BINARY)      52 if r[2]==r[6] goto 22
REG[6] =   t7[trigger](8)
REG[2] =   s5[table](8)
  19 Rowid            1    7    0               00 r[7]=rowid
REG[7] =  i:6
  20 Once             0   21    0               00 
  21 Delete           1    0    0               02 
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[c0](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s2[c0](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s1[d](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s1[d](8)
  22 Next             1   15    0               01 
  15 Column           1    2    2               00 r[2]=sqlite_master.tbl_name
REG[2] =   s2[t3](8)
  16 Ne               3   22    2 (BINARY)      52 if r[2]!=r[3] goto 22
REG[3] =   t1[x](8)
REG[2] =   s2[t3](8)
  22 Next             1   15    0               01 
  23 Destroy          7    2    0               00 
REG[2] =  i:0
  24 Null             0    8    9               00 r[8..9]=NULL
REG[8] =  NULL
  25 IfNot            2   34    1               00 
REG[2] =  i:0
  34 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  35 RowSetRead       8   45    9               00 r[9]=rowset(8)
REG[8] =  NULL
REG[9] =  NULL
  45 DropTable        0    0    0 x             00 
  46 SetCookie        0    1   12               00 
  47 Halt             0    0    0               00 
SQL: [;CREATE TABLE aaa(aa, bbb);]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1   12 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:7
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:10
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:10
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:10
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:10
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:10
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 aaa           00 r[7]='aaa'
REG[7] =   t3[aaa](8)
  20 String8          0    8    0 aaa           00 r[8]='aaa'
REG[8] =   t3[aaa](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:7
  22 String8          0   10    0 CREATE TABLE aaa(aa, bbb) 00 r[10]='CREATE TABLE aaa(aa, bbb)'
REG[10] =   t25[CREATE TABLE aa](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s43[06171313013F7461626C656161616161.....?tableaaaaa]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s43[06171313013F7461626C656161616161.....?tableaaaaa]
REG[5] =  i:10
  25 SetCookie        0    1   13               00 
  26 ParseSchema      0    0    0 tbl_name='aaa' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0   13 0             00 usesStmtJournal=0
  16 String8          0    2    0 aaa           00 r[2]='aaa'
REG[2] =   t3[aaa](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[c0](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[d](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s1[d](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t3](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s2[t3](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[aaa](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t3[aaa](8)
REG[1] =   s3[aaa](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s3[aaa](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:7
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s25[CREATE TABLE aa](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s3[aaa](8)
REG[5] =  i:7
REG[6] =   s25[CREATE TABLE aa](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;
;SELECT max(xyz), (SELECT count(*) FROM c0 WHERE c1=xyz)
      FROM v1
     GROUP BY xyz;]
VDBE Trace:
   0 Init             0   59    0               00 Start at 59
  59 Transaction      0    0   13 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
   1 SorterOpen       2    1    0 k(1,B)        00 
   2 Integer          0    4    0               00 r[4]=0; clear abort flag
REG[4] =  i:0
   3 Null             0    7    7               00 r[7..7]=NULL
REG[7] =  NULL
   4 Gosub            6   55    0               00 
REG[6] =  i:4
  55 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
  56 Integer          0    3    0               00 r[3]=0; indicate accumulator empty
REG[3] =  i:0
  57 Return           6    0    0               00 
REG[6] =  i:4
   5 OpenRead         0    4    0 1             00 root=4 iDb=0; v1
   6 Explain          6    0    0 SCAN TABLE v1 00 
   7 Rewind           0   13    0               00 
   8 Explain          8    0    0 USE TEMP B-TREE FOR GROUP BY 00 
   9 Column           0    0    9               00 r[9]=v1.xyz
REG[9] =  i:0
  10 MakeRecord       9    1   10               00 r[10]=mkrec(r[9])
REG[10] =  s2[0208..]
  11 SorterInsert     2   10    0               00 key=r[10]
REG[10] =  s2[0208..]
  12 Next             0    8    0               01 
  13 OpenPseudo       3    9    1               00 1 columns in r[9]
  14 SorterSort       2   58    0               00 GROUP BY sort
  15 SorterData       2    9    3               00 r[9]=data
  16 Column           3    0    8               00 r[8]=
REG[8] =  i:0
  17 Compare          7    8    1 k(1,B)        00 r[7] <-> r[8]
REG[7] =  NULL
REG[8] =  i:0
  18 Jump            19   23   19               00 
  19 Move             8    7    1               00 r[7]=r[8]
REG[7] =  i:0
  20 Gosub            5   34    0               00 output one row
REG[5] =  i:20
  34 IfPos            3   36    0               00 if r[3]>0 then r[3]-=0, goto 36; Groupby result generator entry point
REG[3] =  i:0
  35 Return           5    0    0               00 
REG[5] =  i:20
  21 IfPos            4   58    0               00 if r[4]>0 then r[4]-=0, goto 58; check abort flag
REG[4] =  i:0
  22 Gosub            6   55    0               00 reset accumulator
REG[6] =  i:22
  55 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
  56 Integer          0    3    0               00 r[3]=0; indicate accumulator empty
REG[3] =  i:0
  57 Return           6    0    0               00 
REG[6] =  i:22
  23 Column           3    0   10               00 r[10]=
REG[10] =  i:0
  24 CollSeq         11    0    0 (BINARY)      00 
  25 AggStep          0   10    1 max(1)        01 accum=r[1] step(r[10])
REG[10] =  i:0
  26 If              11   28    0               00 
REG[11] =  i:0
  27 Column           3    0    2               00 r[2]=
REG[2] =  i:0
  28 Integer          1    3    0               00 r[3]=1; indicate data in accumulator
REG[3] =  i:1
  29 SorterNext       2   15    0               00 
  30 Gosub            5   34    0               00 output final row
REG[5] =  i:30
  34 IfPos            3   36    0               00 if r[3]>0 then r[3]-=0, goto 36; Groupby result generator entry point
REG[3] =  i:1
  36 AggFinal         1    1    0 max(1)        00 accum=r[1] N=1
  37 Copy             1   12    0               00 r[12]=r[1]
REG[12] =  i:0
  38 Explain         38    0    0 CORRELATED SCALAR SUBQUERY 1 00 
  39 Null             0   14   14               00 r[14..14]=NULL; Init subquery result
REG[14] =  NULL
  40 Integer          1   15    0               00 r[15]=1; LIMIT counter
REG[15] =  i:1
  41 Null             0   16   16               00 r[16..16]=NULL
REG[16] =  NULL
  42 OpenRead         1    5    0 2             00 root=5 iDb=0; c0
  43 Explain         43   38    0 SCAN TABLE c0 00 
  44 Rewind           1   49    0               00 
  49 AggFinal        16    0    0 count(0)      00 accum=r[16] N=0
  50 Copy            16   14    0               00 r[14]=r[16]
REG[14] =  i:0
  51 DecrJumpZero    15   52    0               00 if (--r[15])==0 goto 52
REG[15] =  i:1
  52 Copy            14   13    0               00 r[13]=r[14]
REG[13] =  i:0
  53 ResultRow       12    2    0               00 output=r[12..13]
REG[12] =  i:0
REG[13] =  i:0
  54 Return           5    0    0               00 end groupby result generator
REG[5] =  i:30
  31 Goto             0   58    0               00 
  58 Halt             0    0    0               00 
SQL: [;
;SELECT c1, (SELECT sum(xyz=c1) FROM v1)
      FROM c0;]
VDBE Trace:
   0 Init             0   24    0               00 Start at 24
  24 Transaction      0    0   13 0             01 usesStmtJournal=0
  25 Goto             0    1    0               00 
   1 OpenRead         0    5    0 2             00 root=5 iDb=0; c0
   2 Explain          2    0    0 SCAN TABLE c0 00 
   3 Rewind           0   23    0               00 
  23 Halt             0    0    0               00 
SQL: [;
;SELECT v2, (SELECT sum(v2=v2) FROM c0)
      FROM c0
     WHERE v2 IN (SELECT max(v2) FROM c0 GROUP BY c1);]
VDBE Trace:
   0 Init             0   77    0               00 Start at 77
  77 Transaction      0    0   13 0             01 usesStmtJournal=0
  78 Goto             0    1    0               00 
   1 OpenRead         0    5    0 0             00 root=5 iDb=0; c0
   2 Explain          2    0    0 SEARCH TABLE c0 USING INTEGER PRIMARY KEY (rowid=?) 00 
   3 Integer         49    2    0               00 r[2]=49; return address
REG[2] =  i:49
   4 Once             0   49    0               00 
   5 OpenEphemeral    3    1    0 k(1,)         00 nColumn=1; Result of SELECT 2
   6 Explain          6    0    0 LIST SUBQUERY 2 00 
   7 SorterOpen       4    2    0 k(1,B)        00 
   8 Integer          0    6    0               00 r[6]=0; clear abort flag
REG[6] =  i:0
   9 Null             0    9    9               00 r[9..9]=NULL
REG[9] =  NULL
  10 Gosub            8   46    0               00 
REG[8] =  i:10
  46 Null             0    3    4               00 r[3..4]=NULL
REG[3] =  NULL
  47 Integer          0    5    0               00 r[5]=0; indicate accumulator empty
REG[5] =  i:0
  48 Return           8    0    0               00 
REG[8] =  i:10
  11 OpenRead         2    5    0 2             00 root=5 iDb=0; c0
  12 Explain         12    6    0 SCAN TABLE c0 00 
  13 Rewind           2   20    0               00 
  20 OpenPseudo       5   13    2               00 2 columns in r[13]
  21 SorterSort       4   49    0               00 GROUP BY sort
  49 Return           2    0    0               00 
REG[2] =  i:49
  50 Rewind           3   76    0               00 
  76 Halt             0    0    0               00 
SQL: [
;SELECT max(c), (SELECT sum(v2=c) FROM c0)
      FROM b
     GROUP BY c;]
VDBE Trace:
   0 Init             0   59    0               00 Start at 59
  59 Transaction      0    0   13 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
   1 SorterOpen       2    1    0 k(1,B)        00 
   2 Integer          0    4    0               00 r[4]=0; clear abort flag
REG[4] =  i:0
   3 Null             0    7    7               00 r[7..7]=NULL
REG[7] =  NULL
   4 Gosub            6   55    0               00 
REG[6] =  i:4
  55 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
  56 Integer          0    3    0               00 r[3]=0; indicate accumulator empty
REG[3] =  i:0
  57 Return           6    0    0               00 
REG[6] =  i:4
   5 OpenRead         0    3    0 1             00 root=3 iDb=0; b
   6 Explain          6    0    0 SCAN TABLE b  00 
   7 Rewind           0   13    0               00 
   8 Explain          8    0    0 USE TEMP B-TREE FOR GROUP BY 00 
   9 Column           0    0    9               00 r[9]=b.c
REG[9] =  i:2
  10 MakeRecord       9    1   10               00 r[10]=mkrec(r[9])
REG[10] =  s3[020102...]
  11 SorterInsert     2   10    0               00 key=r[10]
REG[10] =  s3[020102...]
  12 Next             0    8    0               01 
   8 Explain          8    0    0 USE TEMP B-TREE FOR GROUP BY 00 
   9 Column           0    0    9               00 r[9]=b.c
REG[9] =  i:2
  10 MakeRecord       9    1   10               00 r[10]=mkrec(r[9])
REG[10] =  s3[020102...]
  11 SorterInsert     2   10    0               00 key=r[10]
REG[10] =  s3[020102...]
  12 Next             0    8    0               01 
  13 OpenPseudo       3    9    1               00 1 columns in r[9]
  14 SorterSort       2   58    0               00 GROUP BY sort
  15 SorterData       2    9    3               00 r[9]=data
  16 Column           3    0    8               00 r[8]=
REG[8] =  i:2
  17 Compare          7    8    1 k(1,B)        00 r[7] <-> r[8]
REG[7] =  NULL
REG[8] =  i:2
  18 Jump            19   23   19               00 
  19 Move             8    7    1               00 r[7]=r[8]
REG[7] =  i:2
  20 Gosub            5   34    0               00 output one row
REG[5] =  i:20
  34 IfPos            3   36    0               00 if r[3]>0 then r[3]-=0, goto 36; Groupby result generator entry point
REG[3] =  i:0
  35 Return           5    0    0               00 
REG[5] =  i:20
  21 IfPos            4   58    0               00 if r[4]>0 then r[4]-=0, goto 58; check abort flag
REG[4] =  i:0
  22 Gosub            6   55    0               00 reset accumulator
REG[6] =  i:22
  55 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
  56 Integer          0    3    0               00 r[3]=0; indicate accumulator empty
REG[3] =  i:0
  57 Return           6    0    0               00 
REG[6] =  i:22
  23 Column           3    0   10               00 r[10]=
REG[10] =  i:2
  24 CollSeq         11    0    0 (BINARY)      00 
  25 AggStep          0   10    1 max(1)        01 accum=r[1] step(r[10])
REG[10] =  i:2
  26 If              11   28    0               00 
REG[11] =  i:0
  27 Column           3    0    2               00 r[2]=
REG[2] =  i:2
  28 Integer          1    3    0               00 r[3]=1; indicate data in accumulator
REG[3] =  i:1
  29 SorterNext       2   15    0               00 
  15 SorterData       2    9    3               00 r[9]=data
  16 Column           3    0    8               00 r[8]=
REG[8] =  i:2
  17 Compare          7    8    1 k(1,B)        00 r[7] <-> r[8]
REG[7] =  i:2
REG[8] =  i:2
  18 Jump            19   23   19               00 
  23 Column           3    0   10               00 r[10]=
REG[10] =  i:2
  24 CollSeq         11    0    0 (BINARY)      00 
  25 AggStep1         0   10    1 max(1)        01 accum=r[1] step(r[10])
REG[10] =  i:2
  26 If              11   28    0               00 
REG[11] =  i:1
  28 Integer          1    3    0               00 r[3]=1; indicate data in accumulator
REG[3] =  i:1
  29 SorterNext       2   15    0               00 
  30 Gosub            5   34    0               00 output final row
REG[5] =  i:30
  34 IfPos            3   36    0               00 if r[3]>0 then r[3]-=0, goto 36; Groupby result generator entry point
REG[3] =  i:1
  36 AggFinal         1    1    0 max(1)        00 accum=r[1] N=1
  37 Copy             1   12    0               00 r[12]=r[1]
REG[12] =  i:2
  38 Explain         38    0    0 CORRELATED SCALAR SUBQUERY 1 00 
  39 Null             0   14   14               00 r[14..14]=NULL; Init subquery result
REG[14] =  NULL
  40 Integer          1   15    0               00 r[15]=1; LIMIT counter
REG[15] =  i:1
  41 Null             0   16   17               00 r[16..17]=NULL
REG[16] =  NULL
  42 OpenRead         1    5    0 0             00 root=5 iDb=0; c0
  43 Explain         43   38    0 SCAN TABLE c0 00 
  44 Rewind           1   49    0               00 
  49 AggFinal        16    1    0 sum(1)        00 accum=r[16] N=1
  50 Copy            16   14    0               00 r[14]=r[16]
REG[14] =  NULL
  51 DecrJumpZero    15   52    0               00 if (--r[15])==0 goto 52
REG[15] =  i:1
  52 Copy            14   13    0               00 r[13]=r[14]
REG[13] =  NULL
  53 ResultRow       12    2    0               00 output=r[12..13]
REG[12] =  i:2
REG[13] =  NULL
  54 Return           5    0    0               00 end groupby result generator
REG[5] =  i:30
  31 Goto             0   58    0               00 
  58 Halt             0    0    0               00 
SQL: [;
;DROP TABLE IF EXISTS aa;]
VDBE Trace:
   0 Init             0    2    0               00 Start at 2
   2 Transaction      0    0   13 0             01 usesStmtJournal=0
   3 Goto             0    1    0               00 
   1 Halt             0    0    0               00 
SQL: [;CREATE TABLE bb(cc INT);]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1   13 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:10
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:11
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:11
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:11
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:11
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:11
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 bb            00 r[7]='bb'
REG[7] =   t2[bb](8)
  20 String8          0    8    0 bb            00 r[8]='bb'
REG[8] =   t2[bb](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:10
  22 String8          0   10    0 CREATE TABLE bb(cc INT) 00 r[10]='CREATE TABLE bb(cc INT)'
REG[10] =   t23[CREATE TABLE bb](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s39[06171111013B7461626C65626262620A.....;tablebbbb.]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s39[06171111013B7461626C65626262620A.....;tablebbbb.]
REG[5] =  i:11
  25 SetCookie        0    1   14               00 
  26 ParseSchema      0    0    0 tbl_name='bb' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0   14 0             00 usesStmtJournal=0
  16 String8          0    2    0 bb            00 r[2]='bb'
REG[2] =   t2[bb](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[v1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s2[v1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s15[sqlite_sequence](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s15[sqlite_sequence](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[c0](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s2[c0](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[d](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s1[d](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t3](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s2[t3](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s3[aaa](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s3[aaa](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[bb](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[bb](8)
REG[1] =   s2[bb](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[bb](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:10
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s23[CREATE TABLE bb](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[bb](8)
REG[5] =  i:10
REG[6] =   s23[CREATE TABLE bb](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;SELECT (SELECT sum(rins+(SELECT v2)) FROM c0) FROM t3;]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    0   14 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 Null             0    1    2               00 r[1..2]=NULL
REG[1] =  NULL
   2 OpenRead         0    9    0 2             00 root=9 iDb=0; t3
   3 Explain          3    0    0 SCAN TABLE t3 00 
   4 Rewind           0   15    0               00 
   5 Column           0    1    4               00 r[4]=t3.rins
REG[4] =  i:2
   6 Explain          6    0    0 CORRELATED SCALAR SUBQUERY 1 00 
   7 Null             0    6    6               00 r[6..6]=NULL; Init subquery result
REG[6] =  NULL
   8 Integer          1    7    0               00 r[7]=1; LIMIT counter
REG[7] =  i:1
   9 Explain          9    6    0 SCAN CONSTANT ROW 00 
  10 Rowid            1    6    0               00 r[6]=rowid

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f5d9e07a859 in __GI_abort () at abort.c:79
#2  0x00007f5d9e07a729 in __assert_fail_base (fmt=0x7f5d9e210588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x22026f "pC!=0", file=0x22873d "sqlite3.c", line=88542, function=<optimized out>) at assert.c:92
#3  0x00007f5d9e08bfd6 in __GI___assert_fail (assertion=0x22026f "pC!=0", file=0x22873d "sqlite3.c", line=88542, function=0x216524 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003d4060 in sqlite3VdbeExec (p=0xcd7f50) at sqlite3.c:88542
#5  0x0000000000411104 in sqlite3Step (p=0xcd7f50) at sqlite3.c:81930
#6  0x000000000029128d in sqlite3_step (pStmt=0xcd7f50) at sqlite3.c:81995
#7  0x00000000002570b9 in main (argc=1, argv=0x7ffc13eb9608) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 49691] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
