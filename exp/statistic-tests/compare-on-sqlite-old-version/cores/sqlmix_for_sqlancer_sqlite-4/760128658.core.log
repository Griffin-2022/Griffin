GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000292,sig:06,src:023370+012652,time:6810317,execs:1455033,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
parser: [[[;CREATE TABLE t1(a TEXT PRIMARY KEY, b INT);;
;SELECT (1, 2, 3) == (1, 2, 3)
;;INSERT INTO t1 VALUES(5,'abc'),(7,'b'),(9,'oops');SELECT (1, 2, 3) != (1, 2, 3)
;SELECT (1, 2, 3) IS NOT (1, 2, 3)
;;INSERT INTO t1 VALUES(11,7),(22,19);SELECT (SELECT 1, 2, 3) == (SELECT 1, 2, 3)
;;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[ecmd CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[ecmd createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: [[[CREATE TABLE x(type text,name text,tbl_name text,rootpage int,sql text)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'RP' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'DOT' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE x(type text,name text,tbl_name text,rootpage int,sql text)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'COMMA' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'RP' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[ecmd create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[ecmd create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[ecmd create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[ecmd create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: [[[INSERT INTO 'main'.sqlite_master VALUES('index','sqlite_autoindex_t1_1','t1',#4,NULL);]]]
parser: Input 'INSERT' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[with insert_cmd INTO]
parser: Input 'STRING' in state 164
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with insert_cmd INTO STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with insert_cmd INTO nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with insert_cmd INTO nm DOT ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'VARIABLE' in state 107
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'NULL' in state 107
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[ecmd create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[ecmd create_table LP columnlist COMMA nm ID]
parser: Input 'RP' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[ecmd create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='t1', tbl_name='t1', rootpage=#2, sql='CREATE TABLE t1(a TEXT PRIMARY KEY, b INT)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t1(a TEXT PRIMARY KEY, b INT)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP columnlist COMMA nm ID]
parser: Input 'RP' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;
;SELECT (1, 2, 3) == (1, 2, 3)
;;INSERT INTO t1 VALUES(5,'abc'),(7,'b'),(9,'oops');SELECT (1, 2, 3) != (1, 2, 3)
;SELECT (1, 2, 3) IS NOT (1, 2, 3)
;;INSERT INTO t1 VALUES(11,7),(22,19);SELECT (SELECT 1, 2, 3) == (SELECT 1, 2, 3)
;;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;INSERT INTO t1 VALUES(5,'abc'),(7,'b'),(9,'oops');SELECT (1, 2, 3) != (1, 2, 3)
;SELECT (1, 2, 3) IS NOT (1, 2, 3)
;;INSERT INTO t1 VALUES(11,7),(22,19);SELECT (SELECT 1, 2, 3) == (SELECT 1, 2, 3)
;;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'COMMA' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Shift 'COMMA', go to state 531
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA]
parser: Input 'LP' in state 531
parser: Shift 'LP', go to state 29
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP]
parser: Input 'INTEGER' in state 29
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 29.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 29.
parser: ... then shift 'nexprlist', go to state 414
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 29.
parser: ... then shift 'nexprlist', go to state 414
parser: Shift 'RP', pending reduce 90
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist RP]
parser: Input 'COMMA' with pending reduce 90
parser: Reduce 90 [values ::= values COMMA LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Shift 'COMMA', go to state 531
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA]
parser: Input 'LP' in state 531
parser: Shift 'LP', go to state 29
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP]
parser: Input 'INTEGER' in state 29
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 29.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 29.
parser: ... then shift 'nexprlist', go to state 414
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 29.
parser: ... then shift 'nexprlist', go to state 414
parser: Shift 'RP', pending reduce 90
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 90
parser: Reduce 90 [values ::= values COMMA LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, 2, 3) != (1, 2, 3)
;SELECT (1, 2, 3) IS NOT (1, 2, 3)
;;INSERT INTO t1 VALUES(11,7),(22,19);SELECT (SELECT 1, 2, 3) == (SELECT 1, 2, 3)
;;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'NE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 2, 3) IS NOT (1, 2, 3)
;;INSERT INTO t1 VALUES(11,7),(22,19);SELECT (SELECT 1, 2, 3) == (SELECT 1, 2, 3)
;;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'NOT' in state 110
parser: Shift 'NOT', go to state 97
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT]
parser: Input 'LP' in state 97
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 97.
parser: ... then shift 'expr', go to state 125
parser: Reduce 193 [expr ::= expr IS NOT expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO t1 VALUES(11,7),(22,19);SELECT (SELECT 1, 2, 3) == (SELECT 1, 2, 3)
;;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'COMMA' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Shift 'COMMA', go to state 531
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA]
parser: Input 'LP' in state 531
parser: Shift 'LP', go to state 29
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP]
parser: Input 'INTEGER' in state 29
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 29.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 29.
parser: ... then shift 'nexprlist', go to state 414
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 29.
parser: ... then shift 'nexprlist', go to state 414
parser: Shift 'RP', pending reduce 90
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt values COMMA LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 90
parser: Reduce 90 [values ::= values COMMA LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (SELECT 1, 2, 3) == (SELECT 1, 2, 3)
;;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;PRAGMA foreign_key_check='t1'
;PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'PRAGMA' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'PRAGMA', go to state 215
parser: Return. Stack=[ecmd PRAGMA]
parser: Input 'ID' in state 215
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd PRAGMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 215.
parser: ... then shift 'nm', go to state 295
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 392
parser: Shift 'EQ', go to state 31
parser: Return. Stack=[ecmd PRAGMA nm dbnm EQ]
parser: Input 'STRING' in state 31
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[ecmd PRAGMA nm dbnm EQ STRING]
parser: Input 'SEMI' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 31.
parser: ... then shift 'nm', pending reduce 234
parser: Reduce 234 [cmd ::= PRAGMA nm dbnm EQ nmnum], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[PRAGMA foreign_key_check='t1'
;SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'PRAGMA' in state 0
parser: Shift 'PRAGMA', go to state 215
parser: Return. Stack=[PRAGMA]
parser: Input 'ID' in state 215
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[PRAGMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 215.
parser: ... then shift 'nm', go to state 295
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 392
parser: Shift 'EQ', go to state 31
parser: Return. Stack=[PRAGMA nm dbnm EQ]
parser: Input 'STRING' in state 31
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[PRAGMA nm dbnm EQ STRING]
parser: Input 'SEMI' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 31.
parser: ... then shift 'nm', pending reduce 234
parser: Reduce 234 [cmd ::= PRAGMA nm dbnm EQ nmnum], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT 1, 2, 3) != (SELECT 1, 2, 3)
;SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'NE' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 0, 3) IS (1, 2, 3)
;SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'LP' in state 110
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 110.
parser: ... then shift 'expr', go to state 127
parser: Reduce 192 [expr ::= expr IS expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 0, 3) IS NOT (1, 2, 3)
;;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'NOT' in state 110
parser: Shift 'NOT', go to state 97
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT]
parser: Input 'LP' in state 97
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 97.
parser: ... then shift 'expr', go to state 125
parser: Reduce 193 [expr ::= expr IS NOT expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;
;PRAGMA journal_mode = off;SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'PRAGMA' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'PRAGMA', go to state 215
parser: Return. Stack=[cmdlist PRAGMA]
parser: Input 'ID' in state 215
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist PRAGMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 215.
parser: ... then shift 'nm', go to state 295
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 392
parser: Shift 'EQ', go to state 31
parser: Return. Stack=[cmdlist PRAGMA nm dbnm EQ]
parser: Input 'ID' in state 31
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist PRAGMA nm dbnm EQ ID]
parser: Input 'SEMI' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 31.
parser: ... then shift 'nm', pending reduce 234
parser: Reduce 234 [cmd ::= PRAGMA nm dbnm EQ nmnum], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'NE' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 2, NULL) == (1, 2, 3)
;;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;
;SELECT printf('|%,d|%,d|',1234567890,-1234567890);;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID]
parser: Input 'LP' in state 416
parser: Shift 'LP', go to state 266
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP]
parser: Input 'STRING' in state 266
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 11
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP distinct STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 11.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 11.
parser: ... then shift 'nexprlist', go to state 517
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP distinct nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP distinct nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 11.
parser: ... then shift 'nexprlist', go to state 517
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP distinct nexprlist COMMA]
parser: Input 'MINUS' in state 107
parser: Shift 'MINUS', go to state 103
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP distinct nexprlist COMMA MINUS]
parser: Input 'INTEGER' in state 103
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP distinct nexprlist COMMA MINUS INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 103.
parser: ... then shift 'term', go to state 147
parser: Reduce 196 [expr ::= PLUS|MINUS expr], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 11.
parser: ... then shift 'nexprlist', go to state 517
parser: Reduce 353 [exprlist ::= nexprlist], go to state 11.
parser: ... then shift 'exprlist', go to state 482
parser: Shift 'RP', go to state 192
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID LP distinct exprlist RP]
parser: Input 'SEMI' in state 192
parser: Reduce 173 [expr ::= ID|INDEXED LP distinct exprlist RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;SELECT b FROM t1 WHERE b IS NULL ORDER BY 1;SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE ID]
parser: Input 'IS' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IS', go to state 110
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr IS]
parser: Input 'NULL' in state 110
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr IS NULL]
parser: Input 'ORDER' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 110.
parser: ... then shift 'term', go to state 127
parser: Reduce 192 [expr ::= expr IS expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[ecmd SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[ecmd SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'INTEGER' in state 26
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY INTEGER]
parser: Input 'SEMI' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 26.
parser: ... then shift 'term', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, 2, NULL) != (1, 2, 3)
;;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'NE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;BEGIN;;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'BEGIN' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'BEGIN', go to state 268
parser: Return. Stack=[ecmd BEGIN]
parser: Input 'SEMI' in state 268
parser: Reduce 4 [transtype ::=].
parser: ... then shift 'transtype', go to state 367
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', pending reduce 3
parser: Reduce 3 [cmd ::= BEGIN transtype trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;BEGIN;;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'BEGIN' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'BEGIN', go to state 268
parser: Return. Stack=[ecmd BEGIN]
parser: Input 'SEMI' in state 268
parser: Reduce 4 [transtype ::=].
parser: ... then shift 'transtype', go to state 367
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', pending reduce 3
parser: Reduce 3 [cmd ::= BEGIN transtype trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;ROLLBACK;SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'ROLLBACK' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'ROLLBACK', go to state 365
parser: Return. Stack=[ecmd ROLLBACK]
parser: Input 'SEMI' in state 365
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', go to state 539
parser: Reduce 9 [cmd ::= ROLLBACK trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, 2, NULL) == (1, 2, NULL)
;SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'NOT' in state 110
parser: Shift 'NOT', go to state 97
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT]
parser: Input 'LP' in state 97
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 97.
parser: ... then shift 'expr', go to state 125
parser: Reduce 193 [expr ::= expr IS NOT expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'NULL' in state 4
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'NULL' in state 4
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;ROLLBACK;SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'ROLLBACK' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'ROLLBACK', go to state 365
parser: Return. Stack=[ecmd ROLLBACK]
parser: Input 'SEMI' in state 365
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', go to state 539
parser: Reduce 9 [cmd ::= ROLLBACK trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'NULL' in state 4
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'NOT' in state 110
parser: Shift 'NOT', go to state 97
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT]
parser: Input 'LP' in state 97
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP]
parser: Input 'NULL' in state 4
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 97.
parser: ... then shift 'expr', go to state 125
parser: Reduce 193 [expr ::= expr IS NOT expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'NULL' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'NULL' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'NULL' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'NULL' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'NULL' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'NULL' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, NULL, 1) != (1, 1, 1)
;;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'NE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;ROLLBACK;SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'ROLLBACK' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'ROLLBACK', go to state 365
parser: Return. Stack=[ecmd ROLLBACK]
parser: Input 'SEMI' in state 365
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', go to state 539
parser: Reduce 9 [cmd ::= ROLLBACK trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'NOT' in state 110
parser: Shift 'NOT', go to state 97
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT]
parser: Input 'LP' in state 97
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 97.
parser: ... then shift 'expr', go to state 125
parser: Reduce 193 [expr ::= expr IS NOT expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'NULL' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'NULL' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'NE' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr NE LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;BEGIN;SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'BEGIN' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'BEGIN', go to state 268
parser: Return. Stack=[ecmd BEGIN]
parser: Input 'SEMI' in state 268
parser: Reduce 4 [transtype ::=].
parser: ... then shift 'transtype', go to state 367
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', pending reduce 3
parser: Reduce 3 [cmd ::= BEGIN transtype trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, NULL, 1) IS (1, 1, 2)
;;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'LP' in state 110
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 110.
parser: ... then shift 'expr', go to state 127
parser: Reduce 192 [expr ::= expr IS expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;BEGIN;SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'BEGIN' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'BEGIN', go to state 268
parser: Return. Stack=[ecmd BEGIN]
parser: Input 'SEMI' in state 268
parser: Reduce 4 [transtype ::=].
parser: ... then shift 'transtype', go to state 367
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', pending reduce 3
parser: Reduce 3 [cmd ::= BEGIN transtype trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS]
parser: Input 'NOT' in state 110
parser: Shift 'NOT', go to state 97
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT]
parser: Input 'LP' in state 97
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr IS NOT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 97.
parser: ... then shift 'expr', go to state 125
parser: Reduce 193 [expr ::= expr IS NOT expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;BEGIN;SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'BEGIN' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'BEGIN', go to state 268
parser: Return. Stack=[ecmd BEGIN]
parser: Input 'SEMI' in state 268
parser: Reduce 4 [transtype ::=].
parser: ... then shift 'transtype', go to state 367
parser: Reduce 323 [trans_opt ::=].
parser: ... then shift 'trans_opt', pending reduce 3
parser: Reduce 3 [cmd ::= BEGIN transtype trans_opt], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, 1, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 1, 3) <= (1, 2, 3)
;SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 2, 3) < (1, 2, 3)
;SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 2, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 3, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 3, 3) < (1, NULL, 3)
;SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 3, 3) > (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 3, 3) > (1, NULL, 3)
;SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, NULL, 3) < (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'LT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, NULL, 3) > (1, NULL, 3)
;SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, NULL, 3) <= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'LE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr LE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'NOT' in state 93
parser: Shift 'NOT', go to state 105
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT]
parser: Input 'LP' in state 105
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Shift 'GE', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'NULL' in state 91
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE NOT expr GE LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 105.
parser: ... then shift 'expr', go to state 75
parser: Reduce 194 [expr ::= NOT expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE c(v1, xyz);;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='c', tbl_name='c', rootpage=#2, sql='CREATE TABLE c(v1, xyz)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='c' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE c(v1, xyz)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO c VALUES(1, 1);;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;INSERT INTO c VALUES(2, 4);SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT (1, 1) == (SELECT b,a FROM t1 ORDER BY b, a)
;SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT * FROM t1 ORDER BY b, a) == (SELECT * FROM t1 ORDER BY b, a)
  
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b, a DESC)
  
;SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA expr DESC]
parser: Input 'RP' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 14.
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (3, 6) == (SELECT b,b FROM t1 ORDER BY b DESC, b DESC)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'COMMA' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA expr DESC]
parser: Input 'RP' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 14.
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY a DESC, a DESC)
  
;SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'COMMA' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA expr DESC]
parser: Input 'RP' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 14.
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT ((3, 5)) == (SELECT * FROM t1 ORDER BY b DESC, a)
;SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'LP' in state 4
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP LP nexprlist COMMA term RP]
parser: Input 'RP' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Shift 'RP', pending reduce 162
parser: Return. Stack=[SELECT distinct sclp scanpt LP expr RP]
parser: Input 'EQ' with pending reduce 162
parser: Reduce 162 [expr ::= LP expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'COMMA' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (SELECT 0, 0) == (SELECT * FROM t1 ORDER BY b DESC, a)
  
;SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt LP select RP]
parser: Input 'EQ' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ORDER' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'COMMA' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (3, 4) IN (SELECT * FROM c)
;SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IN' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[SELECT distinct sclp scanpt expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 16.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (NULL, 4) IN (SELECT * FROM c)
;SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'NULL' in state 4
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IN' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[SELECT distinct sclp scanpt expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 16.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (NULL, 0) IN (SELECT * FROM c)
;SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'NULL' in state 4
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'IN' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[SELECT distinct sclp scanpt expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 16.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT (NULL, 4) NOT IN (SELECT * FROM c)
;;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt LP]
parser: Input 'NULL' in state 4
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[SELECT distinct sclp scanpt LP NULL]
parser: Input 'COMMA' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt LP nexprlist COMMA term RP]
parser: Input 'NOT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'NOT', go to state 384
parser: Return. Stack=[SELECT distinct sclp scanpt expr NOT]
parser: Input 'IN' in state 384
parser: Shift 'IN', pending reduce 201
parser: Return. Stack=[SELECT distinct sclp scanpt expr NOT IN]
parser: Input 'LP' with pending reduce 201
parser: Reduce 201 [in_op ::= NOT IN], go to state 16.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[SELECT distinct sclp scanpt expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO t1 VALUES('abc', 1, 'i');;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;INSERT INTO c VALUES('ABC', 1, 'ii');;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;INSERT INTO t1 VALUES('def', 2, 'iii');;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;INSERT INTO t1 VALUES('DEF', 2, 'iv');;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;CREATE INDEX tt1 ON t1(b, a);;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[ecmd CREATE]
parser: Input 'INDEX' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 221 [uniqueflag ::=].
parser: ... then shift 'uniqueflag', go to state 453
parser: Shift 'INDEX', go to state 315
parser: Return. Stack=[ecmd createkw uniqueflag INDEX]
parser: Input 'ID' in state 315
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 225
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists ID]
parser: Input 'ON' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 225.
parser: ... then shift 'nm', go to state 314
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 452
parser: Shift 'ON', go to state 224
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists nm dbnm ON]
parser: Input 'ID' in state 224
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists nm dbnm ON ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 224.
parser: ... then shift 'nm', go to state 451
parser: Shift 'LP', go to state 18
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP]
parser: Input 'ID' in state 18
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 18.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 18.
parser: ... then shift 'sortlist', go to state 400
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 18.
parser: ... then shift 'sortlist', go to state 400
parser: Shift 'RP', go to state 313
parser: Return. Stack=[ecmd createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP]
parser: Input 'SEMI' in state 313
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', pending reduce 219
parser: Reduce 219 [cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt], go to state 1.
parser: [[[INSERT INTO 'main'.sqlite_master VALUES('index','tt1','t1',#1,'CREATE INDEX tt1 ON t1(b, a)');]]]
parser: Input 'INSERT' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[with insert_cmd INTO]
parser: Input 'STRING' in state 164
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with insert_cmd INTO STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with insert_cmd INTO nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with insert_cmd INTO nm DOT ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'VARIABLE' in state 107
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='tt1' AND type='index' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr EQ STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE INDEX tt1 ON t1(b, a)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'INDEX' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 221 [uniqueflag ::=].
parser: ... then shift 'uniqueflag', go to state 453
parser: Shift 'INDEX', go to state 315
parser: Return. Stack=[createkw uniqueflag INDEX]
parser: Input 'ID' in state 315
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 225
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists ID]
parser: Input 'ON' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 225.
parser: ... then shift 'nm', go to state 314
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 452
parser: Shift 'ON', go to state 224
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists nm dbnm ON]
parser: Input 'ID' in state 224
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists nm dbnm ON ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 224.
parser: ... then shift 'nm', go to state 451
parser: Shift 'LP', go to state 18
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP]
parser: Input 'ID' in state 18
parser: Shift 'ID', go to state 416
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 18.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 18.
parser: ... then shift 'sortlist', go to state 400
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 18.
parser: ... then shift 'sortlist', go to state 400
parser: Shift 'RP', go to state 313
parser: Return. Stack=[createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP]
parser: Input 'SEMI' in state 313
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', pending reduce 219
parser: Reduce 219 [cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;
;SELECT b FROM t1 WHERE (b, b) = (SELECT 'abc' COLLATE nocase, 1);;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT]
parser: Input 'STRING' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt STRING]
parser: Input 'COLLATE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Shift 'COLLATE', go to state 415
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt term COLLATE]
parser: Input 'ID' in state 415
parser: Shift 'ID', pending reduce 171
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt term COLLATE ID]
parser: Input 'COMMA' with pending reduce 171
parser: Reduce 171 [expr ::= expr COLLATE ID|STRING], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT a FROM t1 WHERE b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT]
parser: Input 'STRING' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt STRING]
parser: Input 'COLLATE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Shift 'COLLATE', go to state 415
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt term COLLATE]
parser: Input 'ID' in state 415
parser: Shift 'ID', pending reduce 171
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt term COLLATE ID]
parser: Input 'RP' with pending reduce 171
parser: Reduce 171 [expr ::= expr COLLATE ID|STRING], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP select RP]
parser: Input 'AND' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT b FROM t1 WHERE +b = (SELECT 'abc' COLLATE nocase) AND b = (SELECT 1);;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'PLUS' in state 93
parser: Shift 'PLUS', go to state 103
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE PLUS]
parser: Input 'ID' in state 103
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE PLUS ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 103.
parser: ... then shift 'expr', go to state 147
parser: Reduce 196 [expr ::= PLUS|MINUS expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT]
parser: Input 'STRING' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt STRING]
parser: Input 'COLLATE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Shift 'COLLATE', go to state 415
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt term COLLATE]
parser: Input 'ID' in state 415
parser: Shift 'ID', pending reduce 171
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt term COLLATE ID]
parser: Input 'RP' with pending reduce 171
parser: Reduce 171 [expr ::= expr COLLATE ID|STRING], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP select RP]
parser: Input 'AND' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT a FROM t1 WHERE a = (SELECT 'abc') COLLATE nocase AND b = (SELECT 1);
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT]
parser: Input 'STRING' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ LP select RP]
parser: Input 'COLLATE' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Shift 'COLLATE', go to state 415
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ expr COLLATE]
parser: Input 'ID' in state 415
parser: Shift 'ID', pending reduce 171
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr EQ expr COLLATE ID]
parser: Input 'AND' with pending reduce 171
parser: Reduce 171 [expr ::= expr COLLATE ID|STRING], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr AND expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[
;SELECT b FROM t1 WHERE (a COLLATE nocase, b) = (SELECT 'def', 2);;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COLLATE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Shift 'COLLATE', go to state 415
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP expr COLLATE]
parser: Input 'ID' in state 415
parser: Shift 'ID', pending reduce 171
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP expr COLLATE ID]
parser: Input 'COMMA' with pending reduce 171
parser: Reduce 171 [expr ::= expr COLLATE ID|STRING], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'EQ' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'LP' in state 117
parser: Shift 'LP', go to state 4
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr EQ LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr EQ LP SELECT]
parser: Input 'STRING' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr EQ LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr EQ LP select RP]
parser: Input 'SEMI' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2);;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[cmdlist CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[cmdlist createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[cmdlist create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[cmdlist create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[cmdlist create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[cmdlist create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[cmdlist create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='tr1', tbl_name='tr1', rootpage=#2, sql='CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='tr1' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE tr1(t2 INTEGER PRIMARY KEY, x, tr2)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO c VALUES(2, 2, 2);;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;EXPLAIN QUERY PLAN SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'EXPLAIN' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'EXPLAIN', go to state 418
parser: Return. Stack=[cmdlist EXPLAIN]
parser: Input 'QUERY' in state 418
parser: Shift 'QUERY', go to state 417
parser: Return. Stack=[cmdlist EXPLAIN QUERY]
parser: Input 'PLAN' in state 417
parser: Shift 'PLAN', pending reduce 1
parser: Return. Stack=[cmdlist EXPLAIN QUERY PLAN]
parser: Input 'SELECT' with pending reduce 1
parser: Reduce 1 [explain ::= EXPLAIN QUERY PLAN], go to state 1.
parser: ... then shift 'explain', go to state 2
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist explain SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist explain SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IS', go to state 110
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE expr IS]
parser: Input 'LP' in state 110
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE expr IS LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE expr IS LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE expr IS LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE expr IS LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist explain SELECT distinct selcollist from WHERE expr IS LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 110.
parser: ... then shift 'expr', go to state 127
parser: Reduce 192 [expr ::= expr IS expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 2.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 2.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 2.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 2.
parser: ... then shift 'cmdx', pending reduce 322
parser: Reduce 322 [ecmd ::= explain cmdx], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[cmdlist SEMI]
parser: Popping SEMI
parser: Popping cmdlist
parser: [[[SELECT * FROM t1 WHERE (b, a) IS (2, 2)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'IS' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IS', go to state 110
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr IS]
parser: Input 'LP' in state 110
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr IS LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr IS LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr IS LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr IS LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr IS LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 110.
parser: ... then shift 'expr', go to state 127
parser: Reduce 192 [expr ::= expr IS expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) < (2, 3)
;SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'EXPLAIN' in state 0
parser: Shift 'EXPLAIN', go to state 418
parser: Return. Stack=[EXPLAIN]
parser: Input 'QUERY' in state 418
parser: Shift 'QUERY', go to state 417
parser: Return. Stack=[EXPLAIN QUERY]
parser: Input 'PLAN' in state 417
parser: Shift 'PLAN', pending reduce 1
parser: Return. Stack=[EXPLAIN QUERY PLAN]
parser: Input 'SELECT' with pending reduce 1
parser: Reduce 1 [explain ::= EXPLAIN QUERY PLAN], go to state 0.
parser: ... then shift 'explain', go to state 2
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[explain SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[explain SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[explain SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[explain SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 2.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 2.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 2.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 2.
parser: ... then shift 'cmdx', pending reduce 322
parser: Reduce 322 [ecmd ::= explain cmdx], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Popping SEMI
parser: Popping ecmd
parser: [[[SELECT * FROM c WHERE (v1, xyz) > (2, 1)
;EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[EXPLAIN QUERY PLAN SELECT * FROM c WHERE (xyz, xyz) > ('2', 1)
;SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'EXPLAIN' in state 0
parser: Shift 'EXPLAIN', go to state 418
parser: Return. Stack=[EXPLAIN]
parser: Input 'QUERY' in state 418
parser: Shift 'QUERY', go to state 417
parser: Return. Stack=[EXPLAIN QUERY]
parser: Input 'PLAN' in state 417
parser: Shift 'PLAN', pending reduce 1
parser: Return. Stack=[EXPLAIN QUERY PLAN]
parser: Input 'SELECT' with pending reduce 1
parser: Reduce 1 [explain ::= EXPLAIN QUERY PLAN], go to state 0.
parser: ... then shift 'explain', go to state 2
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[explain SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[explain SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[explain SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[explain SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'STRING' in state 4
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr GT LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[explain SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 2.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 2.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 2.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 2.
parser: ... then shift 'cmdx', pending reduce 322
parser: Reduce 322 [ecmd ::= explain cmdx], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Popping SEMI
parser: Popping ecmd
parser: [[[SELECT * FROM t1 WHERE (b, b) > ('2', 1)
;CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'STRING' in state 4
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t1i1(t2i1);;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='t1i1', tbl_name='t1i1', rootpage=#2, sql='CREATE TABLE t1i1(t2i1)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1i1' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t1i1(t2i1)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;
;SELECT * FROM t1 WHERE (select min(b) FROM t1) IN (?, ?, ?)

;CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID]
parser: Input 'LP' in state 416
parser: Shift 'LP', go to state 266
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID LP]
parser: Input 'ID' in state 266
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 11
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID LP distinct ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 11.
parser: ... then shift 'expr', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 11.
parser: ... then shift 'nexprlist', go to state 517
parser: Reduce 353 [exprlist ::= nexprlist], go to state 11.
parser: ... then shift 'exprlist', go to state 482
parser: Shift 'RP', go to state 192
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID LP distinct exprlist RP]
parser: Input 'FROM' in state 192
parser: Reduce 173 [expr ::= ID|INDEXED LP distinct exprlist RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP select RP]
parser: Input 'IN' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 63.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP]
parser: Input 'VARIABLE' in state 3
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 3.
parser: ... then shift 'expr', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 3.
parser: ... then shift 'nexprlist', go to state 517
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP nexprlist COMMA]
parser: Input 'VARIABLE' in state 107
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP nexprlist COMMA VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 3.
parser: ... then shift 'nexprlist', go to state 517
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP nexprlist COMMA]
parser: Input 'VARIABLE' in state 107
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP nexprlist COMMA VARIABLE]
parser: Input 'RP' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 3.
parser: ... then shift 'nexprlist', go to state 517
parser: Reduce 353 [exprlist ::= nexprlist], go to state 3.
parser: ... then shift 'exprlist', go to state 519
parser: Shift 'RP', pending reduce 202
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP exprlist RP]
parser: Input 'SEMI' with pending reduce 202
parser: Reduce 202 [expr ::= expr in_op LP exprlist RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2);;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='t0', tbl_name='t0', rootpage=#2, sql='CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t0' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1, v2)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO c VALUES(1, 1, 1);;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;INSERT INTO tr1 VALUES(5, 5, 5);;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;SELECT xyz FROM c WHERE (v1, xyz) > (2, 1)
;CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'SEMI' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[CREATE TABLE d(t1abc);;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='d', tbl_name='d', rootpage=#2, sql='CREATE TABLE d(t1abc)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='d' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE d(t1abc)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO t1i1(t2i1) VALUES('X');;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Shift 'LP', go to state 173
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname LP]
parser: Input 'ID' in state 173
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 173.
parser: ... then shift 'nm', pending reduce 161
parser: Reduce 161 [idlist ::= nm], go to state 173.
parser: ... then shift 'idlist', go to state 397
parser: Shift 'RP', pending reduce 159
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname LP idlist RP]
parser: Input 'VALUES' with pending reduce 159
parser: Reduce 159 [idlist_opt ::= LP idlist RP], go to state 298.
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;CREATE TABLE t1abd(t3);
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[cmdlist CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[cmdlist createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[cmdlist create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[cmdlist create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='t1abd', tbl_name='t1abd', rootpage=#2, sql='CREATE TABLE t1abd(t3)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1abd' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t1abd(t3)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[
;DROP TABLE IF EXISTS tr1;;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'DROP' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'DROP', go to state 385
parser: Return. Stack=[ecmd DROP]
parser: Input 'TABLE' in state 385
parser: Shift 'TABLE', go to state 304
parser: Return. Stack=[ecmd DROP TABLE]
parser: Input 'IF' in state 304
parser: Shift 'IF', go to state 431
parser: Return. Stack=[ecmd DROP TABLE IF]
parser: Input 'EXISTS' in state 431
parser: Shift 'EXISTS', pending reduce 75
parser: Return. Stack=[ecmd DROP TABLE IF EXISTS]
parser: Input 'ID' with pending reduce 75
parser: Reduce 75 [ifexists ::= IF EXISTS], go to state 304.
parser: ... then shift 'ifexists', go to state 171
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd DROP TABLE ifexists ID]
parser: Input 'SEMI' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 171.
parser: ... then shift 'nm', go to state 459
parser: Reduce 110 [fullname ::= nm], go to state 171.
parser: ... then shift 'fullname', pending reduce 74
parser: Reduce 74 [cmd ::= DROP TABLE ifexists fullname], go to state 1.
parser: [[[DELETE FROM 'main'.sqlite_master WHERE tbl_name='tr1' and type!='trigger']]]
parser: Input 'DELETE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'DELETE', go to state 430
parser: Return. Stack=[with DELETE]
parser: Input 'FROM' in state 430
parser: Shift 'FROM', go to state 166
parser: Return. Stack=[with DELETE FROM]
parser: Input 'STRING' in state 166
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with DELETE FROM STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 166.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with DELETE FROM nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with DELETE FROM nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 166.
parser: ... then shift 'xfullname', go to state 272
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 300
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND expr NE STRING]
parser: Input 'SEMI' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 300.
parser: ... then shift 'where_opt', pending reduce 142
parser: Reduce 142 [cmd ::= with DELETE FROM xfullname indexed_opt where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: [[[UPDATE 'main'.sqlite_master SET rootpage=6 WHERE #2 AND rootpage=#2]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'INTEGER' in state 84
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ INTEGER]
parser: Input 'WHERE' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'VARIABLE' in state 93
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE VARIABLE]
parser: Input 'AND' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;CREATE TABLE m(rins,rins2);;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[ecmd CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[ecmd createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[ecmd create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[ecmd create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[ecmd create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='m', tbl_name='m', rootpage=#2, sql='CREATE TABLE m(rins,rins2)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='m' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE m(rins,rins2)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO t1i1 VALUES(3,4);CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[CREATE TABLE aaa(bbb);SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='aaa', tbl_name='aaa', rootpage=#2, sql='CREATE TABLE aaa(bbb)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='aaa' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE aaa(bbb)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'CASE' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'CASE', go to state 27
parser: Return. Stack=[SELECT distinct sclp scanpt CASE]
parser: Input 'LP' in state 27
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt CASE LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT distinct sclp scanpt CASE LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt CASE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct sclp scanpt CASE LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt CASE LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[SELECT distinct sclp scanpt CASE LP select RP]
parser: Input 'WHEN' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 27.
parser: ... then shift 'expr', go to state 69
parser: Reduce 212 [case_operand ::= expr], go to state 27.
parser: ... then shift 'case_operand', go to state 356
parser: Shift 'WHEN', go to state 99
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN]
parser: Input 'LP' in state 99
parser: Shift 'LP', go to state 4
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN LP nexprlist COMMA term RP]
parser: Input 'THEN' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 99.
parser: ... then shift 'expr', go to state 51
parser: Shift 'THEN', go to state 98
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN expr THEN]
parser: Input 'INTEGER' in state 98
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand WHEN expr THEN INTEGER]
parser: Input 'ELSE' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 98.
parser: ... then shift 'term', go to state 66
parser: Reduce 209 [case_exprlist ::= WHEN expr THEN expr], go to state 356.
parser: ... then shift 'case_exprlist', go to state 286
parser: Shift 'ELSE', go to state 100
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand case_exprlist ELSE]
parser: Input 'INTEGER' in state 100
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand case_exprlist ELSE INTEGER]
parser: Input 'END' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 100.
parser: ... then shift 'term', go to state 67
parser: FALLBACK END => ID
parser: Reduce 210 [case_else ::= ELSE expr], go to state 286.
parser: ... then shift 'case_else', go to state 525
parser: Shift 'END', pending reduce 207
parser: Return. Stack=[SELECT distinct sclp scanpt CASE case_operand case_exprlist case_else END]
parser: Input 'SEMI' with pending reduce 207
parser: Reduce 207 [expr ::= CASE case_operand case_exprlist case_else END], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE aa(bb PRIMARY KEY, cc);;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'PRIMARY' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: [[[INSERT INTO 'main'.sqlite_master VALUES('index','sqlite_autoindex_aa_1','aa',#4,NULL);]]]
parser: Input 'INSERT' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[with insert_cmd INTO]
parser: Input 'STRING' in state 164
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with insert_cmd INTO STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with insert_cmd INTO nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with insert_cmd INTO nm DOT ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'VARIABLE' in state 107
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'NULL' in state 107
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='aa', tbl_name='aa', rootpage=#2, sql='CREATE TABLE aa(bb PRIMARY KEY, cc)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='aa' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE aa(bb PRIMARY KEY, cc)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'PRIMARY' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz);
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[ecmd CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[ecmd createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[ecmd create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[ecmd create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[ecmd create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[ecmd create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[ecmd create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[ecmd create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='xx', tbl_name='xx', rootpage=#2, sql='CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='xx' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE xx(yy INTEGER PRIMARY KEY, zz)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[
;CREATE TABLE y(dual,dummy,t4);;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[ecmd CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[ecmd createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[ecmd create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[ecmd create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[ecmd create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[ecmd create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='y', tbl_name='y', rootpage=#2, sql='CREATE TABLE y(dual,dummy,t4)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='y' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE y(dual,dummy,t4)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO d VALUES(1,2,3);;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;CREATE TABLE t5(i);;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[ecmd CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[ecmd createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[ecmd create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[ecmd create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='t5', tbl_name='t5', rootpage=#2, sql='CREATE TABLE t5(i)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t5' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t5(i)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO t1abd(t3) VALUES(1);;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Shift 'LP', go to state 173
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname LP]
parser: Input 'ID' in state 173
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname LP ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 173.
parser: ... then shift 'nm', pending reduce 161
parser: Reduce 161 [idlist ::= nm], go to state 173.
parser: ... then shift 'idlist', go to state 397
parser: Shift 'RP', pending reduce 159
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname LP idlist RP]
parser: Input 'VALUES' with pending reduce 159
parser: Reduce 159 [idlist_opt ::= LP idlist RP], go to state 298.
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;CREATE TABLE t(u1, z, i1, b1, b1x);;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[cmdlist CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[cmdlist createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[cmdlist create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[cmdlist create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='t', tbl_name='t', rootpage=#2, sql='CREATE TABLE t(u1, z, i1, b1, b1x)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t(u1, z, i1, b1, b1x)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO m VALUES(1, 'rins2', 'rins2', 'rins', 'rins');;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;INSERT INTO y VALUES(2, 'w', 'x', 'y', 'z');;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[cmdlist with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[cmdlist with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'RP' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[cmdlist with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;CREATE TABLE c1x(e, t7);;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[cmdlist CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[cmdlist createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[cmdlist create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[cmdlist create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='c1x', tbl_name='c1x', rootpage=#2, sql='CREATE TABLE c1x(e, t7)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='c1x' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE c1x(e, t7)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;
;CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) );;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[cmdlist CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[cmdlist createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[cmdlist create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA]
parser: Input 'PRIMARY' in state 34
parser: Shift 'PRIMARY', go to state 472
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA PRIMARY]
parser: Input 'KEY' in state 472
parser: Shift 'KEY', go to state 471
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA PRIMARY KEY]
parser: Input 'LP' in state 471
parser: Shift 'LP', go to state 20
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA PRIMARY KEY LP]
parser: Input 'ID' in state 20
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA PRIMARY KEY LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 20.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 20.
parser: ... then shift 'sortlist', go to state 277
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA PRIMARY KEY LP sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA PRIMARY KEY LP sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 20.
parser: ... then shift 'sortlist', go to state 277
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', go to state 470
parser: Shift 'RP', go to state 328
parser: Return. Stack=[cmdlist create_table LP columnlist COMMA PRIMARY KEY LP sortlist autoinc RP]
parser: Input 'RP' in state 328
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', pending reduce 63
parser: Reduce 63 [tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf], go to state 34.
parser: [[[INSERT INTO 'main'.sqlite_master VALUES('index','sqlite_autoindex_t7_idx_00000062_1','t7_idx_00000062',#4,NULL);]]]
parser: Input 'INSERT' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[with insert_cmd INTO]
parser: Input 'STRING' in state 164
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with insert_cmd INTO STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with insert_cmd INTO nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with insert_cmd INTO nm DOT ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'STRING' in state 28
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'STRING' in state 107
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'VARIABLE' in state 107
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA]
parser: Input 'NULL' in state 107
parser: Shift 'NULL', pending reduce 167
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist COMMA NULL]
parser: Input 'RP' with pending reduce 167
parser: Reduce 167 [term ::= NULL|FLOAT|BLOB], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'tcons', go to state 278
parser: Reduce 341 [conslist_opt ::= COMMA conslist], go to state 362.
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[cmdlist create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='t7_idx_00000062', tbl_name='t7_idx_00000062', rootpage=#2, sql='CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) )' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t7_idx_00000062' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE t7_idx_00000062 ( t7_idx_00000061, r1, PRIMARY KEY (t7_idx_00000061, r1) )]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'PRIMARY' in state 34
parser: Shift 'PRIMARY', go to state 472
parser: Return. Stack=[create_table LP columnlist COMMA PRIMARY]
parser: Input 'KEY' in state 472
parser: Shift 'KEY', go to state 471
parser: Return. Stack=[create_table LP columnlist COMMA PRIMARY KEY]
parser: Input 'LP' in state 471
parser: Shift 'LP', go to state 20
parser: Return. Stack=[create_table LP columnlist COMMA PRIMARY KEY LP]
parser: Input 'ID' in state 20
parser: Shift 'ID', go to state 416
parser: Return. Stack=[create_table LP columnlist COMMA PRIMARY KEY LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 20.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 20.
parser: ... then shift 'sortlist', go to state 277
parser: Shift 'COMMA', go to state 95
parser: Return. Stack=[create_table LP columnlist COMMA PRIMARY KEY LP sortlist COMMA]
parser: Input 'ID' in state 95
parser: Shift 'ID', go to state 416
parser: Return. Stack=[create_table LP columnlist COMMA PRIMARY KEY LP sortlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 95.
parser: ... then shift 'expr', go to state 14
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 129
parser: Reduce 129 [sortlist ::= sortlist COMMA expr sortorder], go to state 20.
parser: ... then shift 'sortlist', go to state 277
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', go to state 470
parser: Shift 'RP', go to state 328
parser: Return. Stack=[create_table LP columnlist COMMA PRIMARY KEY LP sortlist autoinc RP]
parser: Input 'RP' in state 328
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', pending reduce 63
parser: Reduce 63 [tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf], go to state 34.
parser: ... then shift 'tcons', go to state 278
parser: Reduce 341 [conslist_opt ::= COMMA conslist], go to state 362.
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;INSERT INTO aa VALUES (1);;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'INSERT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'INSERT', go to state 311
parser: Return. Stack=[ecmd with INSERT]
parser: Input 'INTO' in state 311
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', pending reduce 156
parser: Reduce 156 [insert_cmd ::= INSERT orconf], go to state 219.
parser: ... then shift 'insert_cmd', go to state 427
parser: Shift 'INTO', go to state 164
parser: Return. Stack=[ecmd with insert_cmd INTO]
parser: Input 'ID' in state 164
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd with insert_cmd INTO ID]
parser: Input 'VALUES' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 164.
parser: ... then shift 'nm', go to state 393
parser: Reduce 112 [xfullname ::= nm], go to state 164.
parser: ... then shift 'xfullname', go to state 298
parser: Reduce 158 [idlist_opt ::=].
parser: ... then shift 'idlist_opt', go to state 35
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd with insert_cmd INTO xfullname idlist_opt VALUES LP nexprlist RP]
parser: Input 'SEMI' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 35.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 35.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 35.
parser: ... then shift 'select', go to state 297
parser: Reduce 152 [upsert ::=].
parser: ... then shift 'upsert', pending reduce 150
parser: Reduce 150 [cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;SELECT * FROM t1i1 WHERE (SELECT t1i1.t3, t1i1.t3) IN ( SELECT t3, t3 FROM t1abd )

;;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 77.
parser: ... then shift 'nm', go to state 491
parser: Shift 'DOT', go to state 205
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT]
parser: Input 'ID' in state 205
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 205.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 77.
parser: ... then shift 'nm', go to state 491
parser: Shift 'DOT', go to state 205
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT]
parser: Input 'ID' in state 205
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 205.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP select RP]
parser: Input 'IN' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 63.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1 JOIN t1abd ON t1abd.bbb = t1.bbb
  WHERE (SELECT t1.bbb, t1.bbb) IN ( SELECT bbb, bbb FROM aaa );;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'JOIN' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Shift 'JOIN', pending reduce 116
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM seltablist JOIN]
parser: Input 'ID' with pending reduce 116
parser: Reduce 116 [joinop ::= COMMA|JOIN], go to state 263.
parser: ... then shift 'joinop', pending reduce 102
parser: Reduce 102 [stl_prefix ::= seltablist joinop], go to state 197.
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ON' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Shift 'ON', go to state 92
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON]
parser: Input 'ID' in state 92
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 92.
parser: ... then shift 'nm', go to state 535
parser: Shift 'DOT', go to state 249
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON nm DOT]
parser: Input 'ID' in state 249
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON nm DOT ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 249.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 92.
parser: ... then shift 'expr', go to state 62
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ]
parser: Input 'ID' in state 117
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 117.
parser: ... then shift 'nm', go to state 535
parser: Shift 'DOT', go to state 249
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ nm DOT]
parser: Input 'ID' in state 249
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 249.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 92.
parser: ... then shift 'expr', go to state 62
parser: Reduce 120 [on_opt ::= ON expr], go to state 348.
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 77.
parser: ... then shift 'nm', go to state 491
parser: Shift 'DOT', go to state 205
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT]
parser: Input 'ID' in state 205
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 205.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 77.
parser: ... then shift 'nm', go to state 491
parser: Shift 'DOT', go to state 205
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT]
parser: Input 'ID' in state 205
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP SELECT distinct sclp scanpt nm DOT ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 205.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP select RP]
parser: Input 'IN' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 63.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM m JOIN t0 ON t0.t2i1 = m.t2i1
  WHERE (VALUES(m.t2i1, m.t2i1)) IN ( SELECT t2i1, t2i1 FROM t1i1 );;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'JOIN' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Shift 'JOIN', pending reduce 116
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM seltablist JOIN]
parser: Input 'ID' with pending reduce 116
parser: Reduce 116 [joinop ::= COMMA|JOIN], go to state 263.
parser: ... then shift 'joinop', pending reduce 102
parser: Reduce 102 [stl_prefix ::= seltablist joinop], go to state 197.
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'ON' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Shift 'ON', go to state 92
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON]
parser: Input 'ID' in state 92
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 92.
parser: ... then shift 'nm', go to state 535
parser: Shift 'DOT', go to state 249
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON nm DOT]
parser: Input 'ID' in state 249
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON nm DOT ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 249.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 92.
parser: ... then shift 'expr', go to state 62
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ]
parser: Input 'ID' in state 117
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 117.
parser: ... then shift 'nm', go to state 535
parser: Shift 'DOT', go to state 249
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ nm DOT]
parser: Input 'ID' in state 249
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix nm dbnm as indexed_opt ON expr EQ nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 249.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 92.
parser: ... then shift 'expr', go to state 62
parser: Reduce 120 [on_opt ::= ON expr], go to state 348.
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'VALUES' in state 4
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP]
parser: Input 'ID' in state 28
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 28.
parser: ... then shift 'nm', go to state 535
parser: Shift 'DOT', go to state 249
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP nm DOT]
parser: Input 'ID' in state 249
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP nm DOT ID]
parser: Input 'COMMA' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 249.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 28.
parser: ... then shift 'expr', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP nexprlist COMMA]
parser: Input 'ID' in state 107
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP nexprlist COMMA ID]
parser: Input 'DOT' in state 416
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 107.
parser: ... then shift 'nm', go to state 535
parser: Shift 'DOT', go to state 249
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP nexprlist COMMA nm DOT]
parser: Input 'ID' in state 249
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP nexprlist COMMA nm DOT ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 249.
parser: ... then shift 'nm', go to state 534
parser: Reduce 165 [expr ::= nm DOT nm], go to state 107.
parser: ... then shift 'expr', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP VALUES LP nexprlist RP]
parser: Input 'RP' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 4.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP select RP]
parser: Input 'IN' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 63.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;DROP TABLE IF EXISTS t5;;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'DROP' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'DROP', go to state 385
parser: Return. Stack=[cmdlist DROP]
parser: Input 'TABLE' in state 385
parser: Shift 'TABLE', go to state 304
parser: Return. Stack=[cmdlist DROP TABLE]
parser: Input 'IF' in state 304
parser: Shift 'IF', go to state 431
parser: Return. Stack=[cmdlist DROP TABLE IF]
parser: Input 'EXISTS' in state 431
parser: Shift 'EXISTS', pending reduce 75
parser: Return. Stack=[cmdlist DROP TABLE IF EXISTS]
parser: Input 'ID' with pending reduce 75
parser: Reduce 75 [ifexists ::= IF EXISTS], go to state 304.
parser: ... then shift 'ifexists', go to state 171
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist DROP TABLE ifexists ID]
parser: Input 'SEMI' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 171.
parser: ... then shift 'nm', go to state 459
parser: Reduce 110 [fullname ::= nm], go to state 171.
parser: ... then shift 'fullname', pending reduce 74
parser: Reduce 74 [cmd ::= DROP TABLE ifexists fullname], go to state 1.
parser: [[[DELETE FROM 'main'.sqlite_master WHERE tbl_name='t5' and type!='trigger']]]
parser: Input 'DELETE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'DELETE', go to state 430
parser: Return. Stack=[with DELETE]
parser: Input 'FROM' in state 430
parser: Shift 'FROM', go to state 166
parser: Return. Stack=[with DELETE FROM]
parser: Input 'STRING' in state 166
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with DELETE FROM STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 166.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with DELETE FROM nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with DELETE FROM nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 166.
parser: ... then shift 'xfullname', go to state 272
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 300
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with DELETE FROM xfullname indexed_opt WHERE expr AND expr NE STRING]
parser: Input 'SEMI' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 300.
parser: ... then shift 'where_opt', pending reduce 142
parser: Reduce 142 [cmd ::= with DELETE FROM xfullname indexed_opt where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: [[[UPDATE 'main'.sqlite_master SET rootpage=16 WHERE #2 AND rootpage=#2]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'INTEGER' in state 84
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ INTEGER]
parser: Input 'WHERE' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'VARIABLE' in state 93
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE VARIABLE]
parser: Input 'AND' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr AND expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;CREATE TABLE r2(p INTEGER PRIMARY KEY,q);;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'CREATE' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[ecmd CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 1.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[ecmd createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 1.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[ecmd create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[ecmd create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[ecmd create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[ecmd create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[ecmd create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[ecmd create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: [[[UPDATE 'main'.sqlite_master SET type='table', name='r2', tbl_name='r2', rootpage=#2, sql='CREATE TABLE r2(p INTEGER PRIMARY KEY,q)' WHERE rowid=#1]]]
parser: Input 'UPDATE' in state 0
parser: Reduce 374 [with ::=].
parser: ... then shift 'with', go to state 219
parser: Shift 'UPDATE', go to state 299
parser: Return. Stack=[with UPDATE]
parser: Input 'STRING' in state 299
parser: Reduce 70 [orconf ::=].
parser: ... then shift 'orconf', go to state 165
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[with UPDATE orconf STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 165.
parser: ... then shift 'nm', go to state 393
parser: Shift 'DOT', go to state 218
parser: Return. Stack=[with UPDATE orconf nm DOT]
parser: Input 'ID' in state 218
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf nm DOT ID]
parser: Input 'SET' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 218.
parser: ... then shift 'nm', go to state 429
parser: Reduce 113 [xfullname ::= nm DOT nm], go to state 165.
parser: ... then shift 'xfullname', go to state 271
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 428
parser: Shift 'SET', go to state 153
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET]
parser: Input 'ID' in state 153
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 153.
parser: ... then shift 'nm', go to state 442
parser: Shift 'EQ', go to state 84
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ]
parser: Input 'STRING' in state 84
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 84.
parser: ... then shift 'term', go to state 58
parser: Reduce 148 [setlist ::= nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'COMMA' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'VARIABLE' in state 86
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ VARIABLE]
parser: Input 'COMMA' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 86.
parser: ... then shift 'expr', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'COMMA', go to state 202
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA]
parser: Input 'ID' in state 202
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA ID]
parser: Input 'EQ' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 202.
parser: ... then shift 'nm', go to state 444
parser: Shift 'EQ', go to state 86
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ]
parser: Input 'STRING' in state 86
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist COMMA nm EQ STRING]
parser: Input 'WHERE' in state 537
parser: Reduce 168 [term ::= STRING], go to state 86.
parser: ... then shift 'term', go to state 60
parser: Reduce 146 [setlist ::= setlist COMMA nm EQ expr], go to state 153.
parser: ... then shift 'setlist', go to state 270
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ]
parser: Input 'VARIABLE' in state 117
parser: Shift 'VARIABLE', pending reduce 170
parser: Return. Stack=[with UPDATE orconf xfullname indexed_opt SET setlist WHERE expr EQ VARIABLE]
parser: Input 'SEMI' with pending reduce 170
parser: Reduce 170 [expr ::= VARIABLE], go to state 117.
parser: ... then shift 'expr', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 270.
parser: ... then shift 'where_opt', pending reduce 145
parser: Reduce 145 [cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist where_opt], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Input '$' with pending reduce 321
parser: Reduce 321 [ecmd ::= cmdx SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Reduce 317 [input ::= cmdlist], go to state 0.
parser: ... then shift 'input', pending reduce -2
parser: Accept!
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='r2' AND type!='trigger' ORDER BY rowid]]]
parser: Input 'SELECT' in state 0
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[SELECT]
parser: Input 'ID' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[SELECT distinct selcollist COMMA]
parser: Input 'ID' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct sclp scanpt ID]
parser: Input 'FROM' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[SELECT distinct selcollist FROM]
parser: Input 'STRING' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'STRING', pending reduce 332
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix STRING]
parser: Input 'DOT' with pending reduce 332
parser: Reduce 332 [nm ::= STRING], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Shift 'DOT', go to state 245
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT]
parser: Input 'ID' in state 245
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[SELECT distinct selcollist FROM stl_prefix nm DOT ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 245.
parser: ... then shift 'nm', pending reduce 109
parser: Reduce 109 [dbnm ::= DOT nm], go to state 349.
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[SELECT distinct selcollist from WHERE]
parser: Input 'ID' in state 93
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE ID]
parser: Input 'EQ' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'EQ', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr EQ STRING]
parser: Input 'AND' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'AND', go to state 120
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND]
parser: Input 'ID' in state 120
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND ID]
parser: Input 'NE' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Shift 'NE', go to state 117
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE]
parser: Input 'STRING' in state 117
parser: Shift 'STRING', go to state 537
parser: Return. Stack=[SELECT distinct selcollist from WHERE expr AND expr NE STRING]
parser: Input 'ORDER' in state 537
parser: Reduce 168 [term ::= STRING], go to state 117.
parser: ... then shift 'term', go to state 129
parser: Reduce 182 [expr ::= expr EQ|NE expr], go to state 120.
parser: ... then shift 'expr', go to state 76
parser: Reduce 179 [expr ::= expr AND expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 0.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 0.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[CREATE TABLE r2(p INTEGER PRIMARY KEY,q)]]]
parser: Input 'CREATE' in state 0
parser: Shift 'CREATE', pending reduce 14
parser: Return. Stack=[CREATE]
parser: Input 'TABLE' with pending reduce 14
parser: Reduce 14 [createkw ::= CREATE], go to state 0.
parser: ... then shift 'createkw', go to state 134
parser: Reduce 18 [temp ::=].
parser: ... then shift 'temp', go to state 388
parser: Shift 'TABLE', go to state 324
parser: Return. Stack=[createkw temp TABLE]
parser: Input 'ID' in state 324
parser: Reduce 15 [ifnotexists ::=].
parser: ... then shift 'ifnotexists', go to state 229
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[createkw temp TABLE ifnotexists ID]
parser: Input 'LP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 229.
parser: ... then shift 'nm', go to state 323
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', pending reduce 13
parser: Reduce 13 [create_table ::= createkw temp TABLE ifnotexists nm dbnm], go to state 0.
parser: ... then shift 'create_table', go to state 289
parser: Shift 'LP', go to state 139
parser: Return. Stack=[create_table LP]
parser: Input 'ID' in state 139
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP ID]
parser: Input 'ID' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 139.
parser: ... then shift 'nm', go to state 190
parser: Shift 'ID', pending reduce 335
parser: Return. Stack=[create_table LP nm ID]
parser: Input 'PRIMARY' with pending reduce 335
parser: Reduce 335 [typename ::= ID|STRING], go to state 190.
parser: ... then shift 'typename', go to state 390
parser: Reduce 334 [typetoken ::= typename], go to state 190.
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 139.
parser: ... then shift 'columnname', go to state 376
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 150
parser: Shift 'PRIMARY', go to state 475
parser: Return. Stack=[create_table LP columnname carglist PRIMARY]
parser: Input 'KEY' in state 475
parser: Shift 'KEY', go to state 280
parser: Return. Stack=[create_table LP columnname carglist PRIMARY KEY]
parser: Input 'COMMA' in state 280
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', go to state 333
parser: Reduce 68 [onconf ::=].
parser: ... then shift 'onconf', go to state 332
parser: Reduce 42 [autoinc ::=].
parser: ... then shift 'autoinc', pending reduce 36
parser: Reduce 36 [ccons ::= PRIMARY KEY sortorder onconf autoinc], go to state 150.
parser: ... then shift 'ccons', pending reduce 338
parser: Reduce 338 [carglist ::= carglist ccons], go to state 376.
parser: ... then shift 'carglist', go to state 150
parser: Reduce 330 [columnlist ::= columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Shift 'COMMA', go to state 34
parser: Return. Stack=[create_table LP columnlist COMMA]
parser: Input 'ID' in state 34
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[create_table LP columnlist COMMA ID]
parser: Input 'RP' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 34.
parser: ... then shift 'nm', go to state 190
parser: Reduce 24 [typetoken ::=].
parser: ... then shift 'typetoken', pending reduce 23
parser: Reduce 23 [columnname ::= nm typetoken], go to state 34.
parser: ... then shift 'columnname', go to state 383
parser: Reduce 339 [carglist ::=].
parser: ... then shift 'carglist', go to state 151
parser: Reduce 329 [columnlist ::= columnlist COMMA columnname carglist], go to state 139.
parser: ... then shift 'columnlist', go to state 362
parser: Reduce 60 [conslist_opt ::=].
parser: ... then shift 'conslist_opt', go to state 538
parser: Shift 'RP', go to state 361
parser: Return. Stack=[create_table LP columnlist conslist_opt RP]
parser: Input 'SEMI' in state 361
parser: Reduce 21 [table_options ::=].
parser: ... then shift 'table_options', pending reduce 19
parser: Reduce 19 [create_table_args ::= LP columnlist conslist_opt RP table_options], go to state 289.
parser: ... then shift 'create_table_args', pending reduce 328
parser: Reduce 328 [cmd ::= create_table create_table_args], go to state 0.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 0.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: [[[;SELECT * FROM t0 WHERE (c0,c0)>(0,0) ORDER BY c0;;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[ecmd SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[ecmd SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;
;SELECT * FROM t0 WHERE (v2,c1)>=(0,0) ORDER BY v2;;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1abd WHERE (t3,t3)<(5,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(5,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)>(3,0) ORDER BY t2i1;;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1abd WHERE (t3,t3)<(3,0) ORDER BY t3 DESC;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<=(3,0) ORDER BY t2i1 DESC;;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1abd WHERE (t3,t3)>(3,32) ORDER BY t3;;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM c WHERE (v1,xyz)>(3,33) ORDER BY v1;;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM aaa WHERE (bbb,bbb)>=(3,34) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (t2i1,t2i1)<(3,34) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM c WHERE (v1,v1)<=(3,33) ORDER BY v1 DESC;;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA term RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM c WHERE (0,0)<(v1,v1) ORDER BY v1;;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LT LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (5,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (5,0)>=(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM aaa WHERE (3,0)<=(bbb,bbb) ORDER BY bbb;;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (3,0)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (3,33)<=(t2i1,t2i1) ORDER BY t2i1;;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'LE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'LE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr LE LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'SEMI' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM m WHERE (3,34)>(rins2,rins) ORDER BY rins2 DESC;;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM t1i1 WHERE (3,33)>(t2i1,t2i1) ORDER BY t2i1 DESC;;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GT' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GT', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GT LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;
;SELECT * FROM c WHERE (3,33)>=(xyz,xyz) ORDER BY xyz DESC;;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SEMI' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[ecmd SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 1.
parser: ... then shift 'ecmd', pending reduce 318
parser: Reduce 318 [cmdlist ::= cmdlist ecmd], go to state 0.
parser: ... then shift 'cmdlist', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[cmdlist SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[cmdlist SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[cmdlist SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP]
parser: Input 'INTEGER' in state 4
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 4.
parser: ... then shift 'term', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'INTEGER' in state 91
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 91.
parser: ... then shift 'term', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE LP nexprlist COMMA term RP]
parser: Input 'GE' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'GE', go to state 118
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE]
parser: Input 'LP' in state 118
parser: Shift 'LP', go to state 4
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[cmdlist SELECT distinct selcollist from WHERE expr GE LP nexprlist COMMA expr RP]
parser: Input 'ORDER' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 118.
parser: ... then shift 'expr', go to state 130
parser: Reduce 181 [expr ::= expr LT|GT|GE|LE expr], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'ID' in state 26
parser: Shift 'ID', go to state 416
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY ID]
parser: Input 'DESC' in state 416
parser: FALLBACK DESC => ID
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 26.
parser: ... then shift 'expr', go to state 13
parser: Shift 'DESC', pending reduce 132
parser: Return. Stack=[cmdlist SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY expr DESC]
parser: Input 'SEMI' with pending reduce 132
parser: Reduce 132 [sortorder ::= DESC], go to state 13.
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[cmdlist cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping cmdlist
parser: [[[;SELECT * FROM t1i1 WHERE (t2i1,t2i1) IN (VALUES(1,2));;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT]
parser: Input 'STAR' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'STAR', pending reduce 96
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt STAR]
parser: Input 'FROM' with pending reduce 96
parser: Reduce 96 [selcollist ::= sclp scanpt STAR], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'FROM', go to state 197
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM]
parser: Input 'ID' in state 197
parser: Reduce 103 [stl_prefix ::=].
parser: ... then shift 'stl_prefix', go to state 206
parser: Shift 'ID', pending reduce 331
parser: Return. Stack=[ecmd SELECT distinct selcollist FROM stl_prefix ID]
parser: Input 'WHERE' with pending reduce 331
parser: Reduce 331 [nm ::= ID|INDEXED], go to state 206.
parser: ... then shift 'nm', go to state 349
parser: Reduce 108 [dbnm ::=].
parser: ... then shift 'dbnm', go to state 243
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', go to state 283
parser: Reduce 122 [indexed_opt ::=].
parser: ... then shift 'indexed_opt', go to state 348
parser: Reduce 121 [on_opt ::=].
parser: ... then shift 'on_opt', go to state 347
parser: Reduce 126 [using_opt ::=].
parser: ... then shift 'using_opt', pending reduce 104
parser: Reduce 104 [seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt], go to state 197.
parser: ... then shift 'seltablist', go to state 263
parser: Reduce 101 [from ::= FROM seltablist], go to state 287.
parser: ... then shift 'from', go to state 360
parser: Shift 'WHERE', go to state 93
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE]
parser: Input 'LP' in state 93
parser: Shift 'LP', go to state 4
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP]
parser: Input 'ID' in state 4
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP ID]
parser: Input 'COMMA' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 4.
parser: ... then shift 'expr', go to state 50
parser: Reduce 216 [nexprlist ::= expr], go to state 4.
parser: ... then shift 'nexprlist', go to state 484
parser: Shift 'COMMA', go to state 91
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA]
parser: Input 'ID' in state 91
parser: Shift 'ID', go to state 416
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA ID]
parser: Input 'RP' in state 416
parser: Reduce 163 [expr ::= ID|INDEXED], go to state 91.
parser: ... then shift 'expr', go to state 49
parser: Shift 'RP', pending reduce 178
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE LP nexprlist COMMA expr RP]
parser: Input 'IN' with pending reduce 178
parser: Reduce 178 [expr ::= LP nexprlist COMMA expr RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 63.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP]
parser: Input 'VALUES' in state 3
parser: Shift 'VALUES', go to state 526
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP VALUES]
parser: Input 'LP' in state 526
parser: Shift 'LP', go to state 28
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP VALUES LP]
parser: Input 'INTEGER' in state 28
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP VALUES LP INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 28.
parser: ... then shift 'term', go to state 70
parser: Reduce 216 [nexprlist ::= expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'COMMA', go to state 107
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP VALUES LP nexprlist COMMA]
parser: Input 'INTEGER' in state 107
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP VALUES LP nexprlist COMMA INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 107.
parser: ... then shift 'term', go to state 71
parser: Reduce 215 [nexprlist ::= nexprlist COMMA expr], go to state 28.
parser: ... then shift 'nexprlist', go to state 410
parser: Shift 'RP', pending reduce 89
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP VALUES LP nexprlist RP]
parser: Input 'RP' with pending reduce 89
parser: Reduce 89 [values ::= VALUES LP nexprlist RP], go to state 3.
parser: ... then shift 'values', go to state 532
parser: Reduce 348 [oneselect ::= values], go to state 3.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 3.
parser: ... then shift 'select', go to state 518
parser: Shift 'RP', pending reduce 204
parser: Return. Stack=[ecmd SELECT distinct selcollist from WHERE expr in_op LP select RP]
parser: Input 'SEMI' with pending reduce 204
parser: Reduce 204 [expr ::= expr in_op LP select RP], go to state 93.
parser: ... then shift 'expr', go to state 63
parser: Reduce 144 [where_opt ::= WHERE expr], go to state 360.
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 1.
parser: ... then shift 'oneselect', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 1.
parser: ... then shift 'select', pending reduce 79
parser: Reduce 79 [cmd ::= select], go to state 1.
parser: ... then shift 'cmd', pending reduce 2
parser: Reduce 2 [cmdx ::= cmd], go to state 1.
parser: ... then shift 'cmdx', go to state 540
parser: Shift 'SEMI', pending reduce 321
parser: Return. Stack=[ecmd cmdx SEMI]
parser: Popping SEMI
parser: Popping cmdx
parser: Popping ecmd
parser: [[[;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;
;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCASE, t1x);;INSERT INTO abc VALUES('a', 'A');;SELECT 3 FROM t1i1 WHERE (t2i1,1) <= (+t2i1,1);;CREATE TABLE v(t1a TEXT PRIMARY KEY);;INSERT INTO t7_idx_00000062(r1) VALUES ('');;
;DROP TABLE t1abd;;CREATE TABLE t1bc(t2_3 UNIQUE);;SELECT 2 FROM m WHERE (m.rins, 0) < ('B' COLLATE NOCASE, 0);;
;SELECT ('B' COLLATE NOCASE, 0)> (t1i1.t2i1, 0) FROM t1i1;;SELECT 2 FROM m WHERE ('B' COLLATE NOCASE, 0)> (m.rins2, 0);;SELECT 2 FROM r2 WHERE ('B', 0)> (r2.p COLLATE nocase, 0);]]]
parser: Input 'SEMI' in state 0
parser: Shift 'SEMI', pending reduce 320
parser: Return. Stack=[SEMI]
parser: Input 'SELECT' with pending reduce 320
parser: Reduce 320 [ecmd ::= SEMI], go to state 0.
parser: ... then shift 'ecmd', go to state 1
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT]
parser: Input 'LP' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'LP', go to state 4
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP]
parser: Input 'SELECT' in state 4
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'UNION' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 4.
parser: ... then shift 'oneselect', go to state 264
parser: Shift 'UNION', go to state 533
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect UNION]
parser: Input 'SELECT' in state 533
parser: Reduce 84 [multiselect_op ::= UNION], go to state 264.
parser: ... then shift 'multiselect_op', go to state 195
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect multiselect_op SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect multiselect_op SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect multiselect_op SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect multiselect_op SELECT distinct sclp scanpt INTEGER]
parser: Input 'ORDER' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Shift 'ORDER', go to state 515
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect multiselect_op SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER]
parser: Input 'BY' in state 515
parser: Shift 'BY', go to state 26
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect multiselect_op SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY]
parser: Input 'INTEGER' in state 26
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP oneselect multiselect_op SELECT distinct selcollist from where_opt groupby_opt having_opt ORDER BY INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 26.
parser: ... then shift 'term', go to state 13
parser: Reduce 133 [sortorder ::=].
parser: ... then shift 'sortorder', pending reduce 130
parser: Reduce 130 [sortlist ::= expr sortorder], go to state 26.
parser: ... then shift 'sortlist', go to state 514
parser: Reduce 128 [orderby_opt ::= ORDER BY sortlist], go to state 194.
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt', pending reduce 87
parser: Reduce 87 [oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt], go to state 195.
parser: ... then shift 'oneselect', pending reduce 83
parser: Reduce 83 [selectnowith ::= selectnowith multiselect_op oneselect], go to state 4.
parser: ... then shift 'selectnowith', go to state 264
parser: Reduce 82 [select ::= selectnowith], go to state 4.
parser: ... then shift 'select', go to state 483
parser: Shift 'RP', pending reduce 203
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt LP select RP]
parser: Input 'IN' with pending reduce 203
parser: Reduce 203 [expr ::= LP select RP], go to state 77.
parser: ... then shift 'expr', go to state 16
parser: Shift 'IN', pending reduce 200
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt expr IN]
parser: Input 'LP' with pending reduce 200
parser: Reduce 200 [in_op ::= IN], go to state 16.
parser: ... then shift 'in_op', go to state 209
parser: Shift 'LP', go to state 3
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt expr in_op LP]
parser: Input 'SELECT' in state 3
parser: Shift 'SELECT', go to state 288
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt expr in_op LP SELECT]
parser: Input 'INTEGER' in state 288
parser: Reduce 93 [distinct ::=].
parser: ... then shift 'distinct', go to state 198
parser: Reduce 94 [sclp ::=].
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt expr in_op LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'COMMA' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Shift 'COMMA', pending reduce 349
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt expr in_op LP SELECT distinct selcollist COMMA]
parser: Input 'INTEGER' with pending reduce 349
parser: Reduce 349 [sclp ::= selcollist COMMA], go to state 198.
parser: ... then shift 'sclp', go to state 381
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 77
parser: Shift 'INTEGER', pending reduce 169
parser: Return. Stack=[ecmd SELECT distinct sclp scanpt expr in_op LP SELECT distinct sclp scanpt INTEGER]
parser: Input 'RP' with pending reduce 169
parser: Reduce 169 [term ::= INTEGER], go to state 77.
parser: ... then shift 'term', go to state 16
parser: Reduce 28 [scanpt ::=].
parser: ... then shift 'scanpt', go to state 259
parser: Reduce 99 [as ::=].
parser: ... then shift 'as', pending reduce 95
parser: Reduce 95 [selcollist ::= sclp scanpt expr scanpt as], go to state 198.
parser: ... then shift 'selcollist', go to state 287
parser: Reduce 100 [from ::=].
parser: ... then shift 'from', go to state 360
parser: Reduce 143 [where_opt ::=].
parser: ... then shift 'where_opt', go to state 359
parser: Reduce 134 [groupby_opt ::=].
parser: ... then shift 'groupby_opt', go to state 358
parser: Reduce 136 [having_opt ::=].
parser: ... then shift 'having_opt', go to state 194
parser: Reduce 127 [orderby_opt ::=].
parser: ... then shift 'orderby_opt', go to state 357
parser: Reduce 138 [limit_opt ::=].
parser: ... then shift 'limit_opt
Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f3dc8836859 in __GI_abort () at abort.c:79
#2  0x00007f3dc8836729 in __assert_fail_base (fmt=0x7f3dc89cc588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=<optimized out>) at assert.c:92
#3  0x00007f3dc8847fd6 in __GI___assert_fail (assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=0x213784 "int generateOutputSubroutine(Parse *, Select *, SelectDest *, SelectDest *, int, int, KeyInfo *, int)") at assert.c:101
#4  0x00000000003b5d8b in generateOutputSubroutine (pParse=0x7fff8359bec0, p=0x7e9730, pIn=0x7fff8359a540, pDest=0x7fff8359aa98, regReturn=15, regPrev=9, pKeyInfo=0x7e42d0, iBreak=-7) at sqlite3.c:127594
#5  0x00000000003b4e37 in multiSelectOrderBy (pParse=0x7fff8359bec0, p=0x7e9730, pDest=0x7fff8359aa98) at sqlite3.c:127921
#6  0x00000000003a3d1c in multiSelect (pParse=0x7fff8359bec0, p=0x7e9730, pDest=0x7fff8359aa98) at sqlite3.c:127207
#7  0x00000000002fccf5 in sqlite3Select (pParse=0x7fff8359bec0, p=0x7e9730, pDest=0x7fff8359aa98) at sqlite3.c:130384
#8  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7fff8359bec0, pExpr=0x7e2200) at sqlite3.c:99820
#9  0x0000000000350b1c in exprCodeVector (pParse=0x7fff8359bec0, p=0x7e2200, piFreeable=0x7fff8359ab5c) at sqlite3.c:100296
#10 0x000000000034fbdb in sqlite3ExprCodeIN (pParse=0x7fff8359bec0, pExpr=0x7e9280, destIfFalse=-3, destIfNull=-4) at sqlite3.c:99952
#11 0x000000000034be9e in sqlite3ExprCodeTarget (pParse=0x7fff8359bec0, pExpr=0x7e9280, target=1) at sqlite3.c:100792
#12 0x000000000034e9ee in sqlite3ExprCodeExprList (pParse=0x7fff8359bec0, pList=0x7f52b0, target=1, srcReg=0, flags=1 '\001') at sqlite3.c:101202
#13 0x00000000003addca in innerLoopLoadRow (pParse=0x7fff8359bec0, pSelect=0x7e63a0, pInfo=0x7fff8359af00) at sqlite3.c:125172
#14 0x00000000003a92ea in selectInnerLoop (pParse=0x7fff8359bec0, p=0x7e63a0, srcTab=-1, pSort=0x0, pDistinct=0x7fff8359b1a0, pDest=0x7fff8359b2b0, iContinue=-2, iBreak=-2) at sqlite3.c:125624
#15 0x00000000002fe191 in sqlite3Select (pParse=0x7fff8359bec0, p=0x7e63a0, pDest=0x7fff8359b2b0) at sqlite3.c:130743
#16 0x00000000002ecaa8 in yy_reduce (yypParser=0x7fff8359b4e0, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7fff8359bec0) at sqlite3.c:151581
#17 0x00000000002e92f8 in sqlite3Parser (yyp=0x7fff8359b4e0, yymajor=1, yyminor=...) at sqlite3.c:152877
#18 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7fff8359bec0, 
    zSql=0x7e47c0 ";;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);;\n;DROP TABLE IF EXISTS t0;;CREATE TABLE abc(after COLLATE NOCAS"..., pzErrMsg=0x7fff8359c0a0) at sqlite3.c:154013
#19 0x00000000002a1683 in sqlite3Prepare (db=0x7cf2b0, 
    zSql=0x7d6d2e ";SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);"..., nBytes=730, prepFlags=128, pReprepare=0x0, ppStmt=0x7fff8359c1d8, pzTail=0x7fff8359c1c0) at sqlite3.c:124303
#20 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x7cf2b0, 
    zSql=0x7d6d2e ";SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);"..., nBytes=730, prepFlags=128, pOld=0x0, ppStmt=0x7fff8359c1d8, pzTail=0x7fff8359c1c0) at sqlite3.c:124403
#21 0x000000000029247f in sqlite3_prepare_v2 (db=0x7cf2b0, 
    zSql=0x7d6d2e ";SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 5,6);"..., nBytes=730, ppStmt=0x7fff8359c1d8, pzTail=0x7fff8359c1c0) at sqlite3.c:124487
#22 0x0000000000256bd0 in main (argc=1, argv=0x7fff8359c388) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 52790] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
