GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000146,sig:06,src:021516+021162,time:2376317,execs:372423,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;CREATE TABLE test(t1 TEXT, CHECK(t1 NOT BETWEEN +t1 AND 999999));]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    0 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:0
   2 If               3    5    0               00 
REG[3] =  i:0
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:2
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  tx6[060000000000|......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  tx6[060000000000|......]
REG[1] =  i:1
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:1
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:1
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:1
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 test          00 r[7]='test'
REG[7] =   t4[test](8)
  20 String8          0    8    0 test          00 r[8]='test'
REG[8] =   t4[test](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:2
  22 String8          0   10    0 CREATE TABLE test(t1 TEXT, CHECK(t1 NOT BETWEEN +t1 AND 999999)) 00 r[10]='CREATE TABLE test(t1 TEXT, CHECK(t1 NOT BETWEEN +t1 AND 999999))'
REG[10] =   t64[CREATE TABLE test(t1 TEXT](8)
  23 MakeRecord       6    5    4 BBBDB         00 r[4]=mkrec(r[6..10])
REG[6] =   t5[table](8)
REG[7] =   t4[test](8)
REG[8] =   t4[test](8)
REG[9] =  i:2
REG[10] =   t64[CREATE TABLE test(t1 TEXT](8)
REG[4] =  sx85[0717151501810D7461626C6574657374746573740243524541|.......tabletesttest.CREA]
  24 Insert           1    4    5               00 intkey=r[5] data=r[4]
REG[4] =  sx85[0717151501810D7461626C6574657374746573740243524541|.......tabletesttest.CREA]
REG[5] =  i:1
  25 SetCookie        0    1    1               00 
  26 ParseSchema      0    0    0 tbl_name='test' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   17    0               00 Start at 17
  17 Transaction      0    0    1 0             00 usesStmtJournal=0
  18 String8          0    2    0 test          00 r[2]='test'
REG[2] =   t4[test](8)
  19 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    7    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   16    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s4[test](8)
   6 Ne               2   15    1 (BINARY)      52 if r[1]!=r[2] goto 15
REG[2] =   t4[test](8)
REG[1] =   s4[test](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   15    1 (BINARY)      52 if r[1]==r[3] goto 15
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    0    4               00 r[4]=sqlite_master.type
REG[4] =   s5[table](8)
  10 Column           0    1    5               00 r[5]=sqlite_master.name
REG[5] =   s4[test](8)
  11 Column           0    2    6               00 r[6]=sqlite_master.tbl_name
REG[6] =   s4[test](8)
  12 Column           0    3    7               00 r[7]=sqlite_master.rootpage
REG[7] =  i:2
  13 Column           0    4    8               00 r[8]=sqlite_master.sql
REG[8] =   s64[CREATE TABLE test(t1 TEXT](8)
  14 ResultRow        4    5    0               00 output=r[4..8]
REG[4] =   s5[table](8)
REG[5] =   s4[test](8)
REG[6] =   s4[test](8)
REG[7] =  i:2
REG[8] =   s64[CREATE TABLE test(t1 TEXT](8)
  15 Next             0    5    0               01 
  16 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [;SELECT quote(t1) FROM test ORDER BY rowid;]
VDBE Trace:
   0 Init             0   10    0               00 Start at 10
  10 Transaction      0    0    1 0             01 usesStmtJournal=0
  11 Goto             0    1    0               00 
   1 Noop             1    3    0               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; test
   3 Explain          3    0    0 SCAN TABLE test 00 
   4 Rewind           0    9    0               00 
   9 Halt             0    0    0               00 
SQL: [PRAGMA index_list='test'
;]
VDBE Trace:
   0 Init             0    2    0               00 Start at 2
   2 Transaction      0    0    1 0             01 usesStmtJournal=0
   3 Goto             0    1    0               00 
   1 Halt             0    0    0               00 
SQL: [;CREATE TABLE a(b INTEGER PRIMARY KEY,c);]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    1 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:3
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  tx6[060000000000|......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  tx6[060000000000|......]
REG[1] =  i:2
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:2
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:2
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:2
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 a             00 r[7]='a'
REG[7] =   t1[a](8)
  20 String8          0    8    0 a             00 r[8]='a'
REG[8] =   t1[a](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:3
  22 String8          0   10    0 CREATE TABLE a(b INTEGER PRIMARY KEY,c) 00 r[10]='CREATE TABLE a(b INTEGER PRIMARY KEY,c)'
REG[10] =   t39[CREATE TABLE a(b INTEGER ](8)
  23 MakeRecord       6    5    4 BBBDB         00 r[4]=mkrec(r[6..10])
REG[6] =   t5[table](8)
REG[7] =   t1[a](8)
REG[8] =   t1[a](8)
REG[9] =  i:3
REG[10] =   t39[CREATE TABLE a(b INTEGER ](8)
REG[4] =  sx53[06170F0F015B7461626C65616103435245415445205441424C|.....[tableaa.CREATE TABL]
  24 Insert           1    4    5               00 intkey=r[5] data=r[4]
REG[4] =  sx53[06170F0F015B7461626C65616103435245415445205441424C|.....[tableaa.CREATE TABL]
REG[5] =  i:2
  25 SetCookie        0    1    2               00 
  26 ParseSchema      0    0    0 tbl_name='a' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   17    0               00 Start at 17
  17 Transaction      0    0    2 0             00 usesStmtJournal=0
  18 String8          0    2    0 a             00 r[2]='a'
REG[2] =   t1[a](8)
  19 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    7    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   16    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s4[test](8)
   6 Ne               2   15    1 (BINARY)      52 if r[1]!=r[2] goto 15
REG[2] =   t1[a](8)
REG[1] =   s4[test](8)
  15 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[a](8)
   6 Ne               2   15    1 (BINARY)      52 if r[1]!=r[2] goto 15
REG[2] =   t1[a](8)
REG[1] =   s1[a](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   15    1 (BINARY)      52 if r[1]==r[3] goto 15
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    0    4               00 r[4]=sqlite_master.type
REG[4] =   s5[table](8)
  10 Column           0    1    5               00 r[5]=sqlite_master.name
REG[5] =   s1[a](8)
  11 Column           0    2    6               00 r[6]=sqlite_master.tbl_name
REG[6] =   s1[a](8)
  12 Column           0    3    7               00 r[7]=sqlite_master.rootpage
REG[7] =  i:3
  13 Column           0    4    8               00 r[8]=sqlite_master.sql
REG[8] =   s39[CREATE TABLE a(b INTEGER ](8)
  14 ResultRow        4    5    0               00 output=r[4..8]
REG[4] =   s5[table](8)
REG[5] =   s1[a](8)
REG[6] =   s1[a](8)
REG[7] =  i:3
REG[8] =   s39[CREATE TABLE a(b INTEGER ](8)
  15 Next             0    5    0               01 
  16 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [PRAGMA integrity_check 
;]
VDBE Trace:
   0 Init             0   60   57               00 Start at 60
  60 Transaction      0    0    2 0             01 usesStmtJournal=0
  61 Transaction      1    0    0 0             01 usesStmtJournal=0
  62 Integer       999999   11    0               00 r[11]=999999
REG[11] =  i:999999
  63 Goto             0    1    0               00 
   1 Integer         99    1    0               00 r[1]=99
REG[1] =  i:99
   2 IntegrityCk      2    3    1 [3,2,1]       00 
   3 IsNull           2    9    0               00 if r[2]==NULL goto 9
REG[2] =  NULL
   9 OpenRead         1    3    0 2             00 root=3 iDb=0; a
  10 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  11 Rewind           1   15    0               00 
  15 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entries in ind](8)
  16 OpenRead         1    2    0 1             00 root=2 iDb=0; test
  17 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  18 Rewind           1   30    0               00 
  30 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entries in ind](8)
  31 OpenRead         1    1    0 5             00 root=1 iDb=0; sqlite_master
  32 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  33 Rewind           1   37    0               00 
  34 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:0
  35 Column           1    4    3               80 r[3]=
REG[3] =   s64[CREATE TABLE test(t1 TEXT](8)
  36 Next             1   34    0               00 
  34 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:1
  35 Column           1    4    3               80 r[3]=
REG[3] =   s39[CREATE TABLE a(b INTEGER ](8)
  36 Next             1   34    0               00 
  37 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entries in ind](8)
  38 IntegrityCk      2    1    1 [1]           01 
  39 IsNull           2   45    0               00 if r[2]==NULL goto 45
REG[2] =  NULL
  45 OpenRead         1    1    1 5             00 root=1 iDb=1; sqlite_temp_master
  46 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  47 Rewind           1   51    0               00 
  51 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entries in ind](8)
  52 AddImm           1  -99    0               00 r[1]=r[1]+-99
REG[1] =  i:99
  53 IfNotZero        1   56    0               00 if r[1]!=0 then r[1]--, goto 56
REG[1] =  i:0
  54 String8          0    3    0 ok            00 r[3]='ok'
REG[3] =   t2[ok](8)
  55 ResultRow        3    1    0               00 output=r[3]
REG[3] =   t2[ok](8)
  56 Halt             0    0    0               00 
SQL: [;INSERT INTO test(t1,t1) VALUES(7,100000000000000008);]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    1    2 0             01 usesStmtJournal=0
  12 Integer       999999    5    0               00 r[5]=999999
REG[5] =  i:999999
  13 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; test
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Integer          7    2    0               00 r[2]=7
REG[2] =  i:7
   4 Abortable        0    0    0               00 
   5 Lt               2    8    2 (BINARY)      52 if r[2]<r[2] goto 8

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f61e0a1f859 in __GI_abort () at abort.c:79
#2  0x00007f61e0a1f729 in __assert_fail_base (fmt=0x7f61e0bb5588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21dc88 "pIn1!=pIn3", file=0x2291f4 "sqlite3.c", line=86002, function=<optimized out>) at assert.c:92
#3  0x00007f61e0a30fd6 in __GI___assert_fail (assertion=0x21dc88 "pIn1!=pIn3", file=0x2291f4 "sqlite3.c", line=86002, function=0x216a86 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003cf4ad in sqlite3VdbeExec (p=0x245a270) at sqlite3.c:86002
#5  0x000000000041ba74 in sqlite3Step (p=0x245a270) at sqlite3.c:82300
#6  0x0000000000293d5d in sqlite3_step (pStmt=0x245a270) at sqlite3.c:82365
#7  0x0000000000258a39 in main (argc=1, argv=0x7ffeba46c148) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 51476] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
