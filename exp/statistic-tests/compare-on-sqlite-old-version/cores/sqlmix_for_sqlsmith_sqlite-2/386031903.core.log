GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000300,sig:06,src:021442+021838,time:9306857,execs:2203000,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT SUBSTR('Supercalifragilisticexpialidocious', 2, -2)
;]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 String8          0    2    0 Supercalifragilisticexpialidocious 00 r[2]='Supercalifragilisticexpialidocious'
REG[2] =   t34[Supercalifragil](8)
   5 Integer          2    3    0               00 r[3]=2
REG[3] =  i:2
   6 Integer         -2    4    0               00 r[4]=-2
REG[4] =  i:-2
   7 Goto             0    1    0               00 
   1 Function0        7    2    1 substr(3)     03 r[1]=func(r[2..4])
REG[2] =   t34[Supercalifragil](8)
REG[3] =  i:2
REG[4] =  i:-2
REG[1] =   s1[S](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s1[S](8)
   3 Halt             0    0    0               00 
SQL: [select hex(zeroblob(-1))
;]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   5 Function0        1    3    2 zeroblob(1)   01 r[2]=func(r[3])
REG[3] =  i:-1
REG[2] =  s0[](8)+0z
   6 Goto             0    1    0               00 
   1 Function0        1    2    1 hex(1)        01 r[1]=func(r[2])
REG[2] =  s0[](8)+0z
REG[1] =   z0[](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s0[](8)
   3 Halt             0    0    0               00 
SQL: [SELECT zeroblob(2) IN (x'000000')
;]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 Integer          2    4    0               00 r[4]=2
REG[4] =  i:2
   5 Function0        1    4    2 zeroblob(1)   01 r[2]=func(r[4])
REG[4] =  i:2
REG[2] =  s0[](8)+2z
   6 Blob             3    3    0               00 r[3]= (len=3)
REG[3] =  t3[000000...](8)
   7 Goto             0    1    0               00 
   1 Eq               3    1    2               61 if r[3]==r[2] goto 1
REG[3] =  t3[000000...](8)
REG[2] =  s0[](8)+2z
REG[1] =  i:0
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:0
   3 Halt             0    0    0               00 
SQL: [;CREATE INDEX t1 ON t2(SUBSTR(x, 27, 3)) WHERE x>=29;]
VDBE Trace:
   0 Init             0   37    0               00 Start at 37
  37 Transaction      0    1    1 0             01 usesStmtJournal=0
  38 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  39 TableLock        0    2    1 t2            00 iDb=0 root=2 write=1
  40 Integer         29   11    0               00 r[11]=29
REG[11] =  i:29
  41 Integer         27   15    0               00 r[15]=27
REG[15] =  i:27
  42 Integer          3   16    0               00 r[16]=3
REG[16] =  i:3
  43 Goto             0    1    0               00 
   1 Noop             0   36    0               00 
   2 CreateIndex      0    1    0               00 r[1]=root iDb=0
REG[1] =  i:3
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:2
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 t1            00 r[4]='t1'
REG[4] =   t2[t1](8)
   7 String8          0    5    0 t2            00 r[5]='t2'
REG[5] =   t2[t2](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:3
   9 String8          0    7    0 CREATE INDEX t1 ON t2(SUBSTR(x, 27, 3)) WHERE x>=29 00 r[7]='CREATE INDEX t1 ON t2(SUBSTR(x, 27, 3)) WHERE x>=29'
REG[7] =   t51[CREATE INDEX t1](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s67[061711110173696E6465787431743203.....sindext1t2.](8)
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s67[061711110173696E6465787431743203.....sindext1t2.](8)
REG[2] =  i:2
  12 Close            0    0    0               00 
  13 SorterOpen       3    0    1 k(2,,)        00 
  14 OpenRead         1    2    0 1             00 root=2 iDb=0; t2
  15 Rewind           1   24    0               00 
  24 OpenWrite        2    1    0 k(2,,)        11 root=1 iDb=0
  25 SorterSort       3   30    0               00 
  30 Close            1    0    0               00 
  31 Close            2    0    0               00 
  32 Close            3    0    0               00 
  33 SetCookie        0    1    2               00 
  34 ParseSchema      0    0    0 name='t1' AND type='index' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    2 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 t1            00 r[2]='t1'
REG[2] =   t2[t1](8)
  19 String8          0    4    0 index         00 r[4]='index'
REG[4] =   t5[index](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t2](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s5[index](8)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t5[index](8)
REG[3] =   s5[index](8)
   9 Copy             1    5    0               00 r[5]=r[1]
REG[5] =   s2[t1](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:3
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s51[CREATE INDEX t1](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s2[t1](8)
REG[6] =  i:3
REG[7] =   s51[CREATE INDEX t1](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  35 Expire           0    0    0               00 
  36 Halt             0    0    0               00 
SQL: [;
;SELECT x FROM t2 WHERE x<=2147483648;]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    2 0             01 usesStmtJournal=0
  12 TableLock        0    2    0 t2            00 iDb=0 root=2 write=0
  13 Int64            0    2    0 2147483648    00 r[2]=2147483648
REG[2] =  i:2147483648
  14 Goto             0    1    0               00 
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t2
   2 Explain          0    0    0 SCAN TABLE t2 00 
   3 Rewind           0    9    0               00 
   9 Close            0    0    0               00 
  10 Halt             0    0    0               00 
SQL: [;
;SELECT x FROM t2 WHERE x<1000000000000 ORDER BY 1;]
VDBE Trace:
   0 Init             0   20    0               00 Start at 20
  20 Transaction      0    0    2 0             01 usesStmtJournal=0
  21 TableLock        0    2    0 t2            00 iDb=0 root=2 write=0
  22 Int64            0    2    0 1000000000000 00 r[2]=1000000000000
REG[2] =  i:1000000000000
  23 Goto             0    1    0               00 
   1 SorterOpen       1    3    0 k(1,B)        00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t2
   3 Explain          0    0    0 SCAN TABLE t2 00 
   4 Rewind           0   12    0               00 
  12 Close            0    0    0               00 
  13 OpenPseudo       2    6    3               00 3 columns in r[6]
  14 SorterSort       1   19    0               00 
  19 Halt             0    0    0               00 
SQL: [;
;CREATE TABLE a(b,c);]
VDBE Trace:
   0 Init             0   30    0               00 Start at 30
  30 Transaction      0    1    2 0             01 usesStmtJournal=0
  31 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  32 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateTable      0    2    0               00 r[2]=root iDb=0
REG[2] =  i:4
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:3
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......](8)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......](8)
REG[1] =  i:3
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain          0    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 MustBeInt        1   18    0               00 
REG[1] =  i:3
  16 NotExists        1   18    1               00 intkey=r[1]; pk
REG[1] =  i:3
  17 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:3
  18 IsNull           5   26    0               00 if r[5]==NULL goto 26
REG[5] =  i:3
  19 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  20 String8          0    7    0 a             00 r[7]='a'
REG[7] =   t1[a](8)
  21 String8          0    8    0 a             00 r[8]='a'
REG[8] =   t1[a](8)
  22 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:4
  23 String8          0   10    0 CREATE TABLE a(b,c) 00 r[10]='CREATE TABLE a(b,c)'
REG[10] =   t19[CREATE TABLE a(](8)
  24 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s33[06170F0F01337461626C656161044352.....3tableaa.CR](8)
  25 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s33[06170F0F01337461626C656161044352.....3tableaa.CR](8)
REG[5] =  i:3
  26 Close            1    0    0               00 
  27 SetCookie        0    1    3               00 
  28 ParseSchema      0    0    0 tbl_name='a' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    3 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 a             00 r[2]='a'
REG[2] =   t1[a](8)
  19 String8          0    4    0 trigger       00 r[4]='trigger'
REG[4] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[a](8)
REG[1] =   s2[t2](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[a](8)
REG[1] =   s2[t2](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[a](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[a](8)
REG[1] =   s1[a](8)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s5[table](8)
   8 Eq               4   13    3 (BINARY)      52 if r[4]==r[3] goto 13
REG[4] =   t7[trigger](8)
REG[3] =   s5[table](8)
   9 Column           0    1    5               00 r[5]=sqlite_master.name
REG[5] =   s1[a](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:4
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s19[CREATE TABLE a(](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s1[a](8)
REG[6] =  i:4
REG[7] =   s19[CREATE TABLE a(](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  29 Halt             0    0    0               00 
SQL: [;WITH RECURSIVE x(x) AS (VALUES(1) UNION SELECT x+1 FROM x WHERE x<30)
  INSERT INTO t2(x,x,x)
    SELECT x, printf('ab%04xyz',x), random() FROM x;]
VDBE Trace:
   0 Init             0   61    0               00 Start at 61
  61 Transaction      0    1    3 0             01 usesStmtJournal=1
  62 TableLock        0    2    1 t2            00 iDb=0 root=2 write=1
  63 Integer         30   10    0               00 r[10]=30
REG[10] =  i:30
  64 Integer          1   12    0               00 r[12]=1
REG[12] =  i:1
  65 String8          0   16    0 ab%04xyz      00 r[16]='ab%04xyz'
REG[16] =   t8[ab%04xyz](8)
  66 Integer         29   20    0               00 r[20]=29
REG[20] =  i:29
  67 Integer         27   24    0               00 r[24]=27
REG[24] =  i:27
  68 Integer          3   25    0               00 r[25]=3
REG[25] =  i:3
  69 Goto             0    1    0               00 
   1 InitCoroutine    3   39    2               00 
  39 OpenWrite        4    2    0 1             00 root=2 iDb=0; t2
  40 OpenWrite        5    3    0 k(2,,)        00 root=3 iDb=0; t1
  41 Yield            3   58    0               00 
REG[3] =  i:1
REG[3] =  i:41
   2 InitCoroutine    4   29    3               00 x
  29 Explain          0    0    0 SCAN SUBQUERY 1 00 
  30 InitCoroutine    4    0    3               00 
  31 Yield            4   38    0               00 next row of "x"
REG[4] =  i:2
REG[4] =  i:31
   3 OpenPseudo       1    5    1               00 1 columns in r[5]
   4 OpenEphemeral    2    1    0               00 nColumn=1; Queue table
   5 OpenEphemeral    3    1    0 k(1,B)        00 nColumn=1
   6 Integer          1    6    0               00 r[6]=1
REG[6] =  i:1
   7 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s2[0209..](8)
   8 Found            3   12    7 0             00 key=r[7]
REG[7] =  s2[0209..](8)
   9 IdxInsert        3    7    0               00 key=r[7]
REG[7] =  s2[0209..](8)
  10 NewRowid         2    8    0               00 r[8]=rowid
REG[8] =  i:1
  11 Insert           2    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s2[0209..](8)
REG[8] =  i:1
  12 Rewind           2   28    0               00 
  13 NullRow          1    0    0               00 
  14 RowData          2    5    0               00 r[5]=data
REG[5] =  s2[0209..](8)
  15 Delete           2    0    0               00 
  16 Column           1    0    9               00 r[9]=
REG[9] =  i:1
  17 Yield            4    0    0               00 
REG[4] =  i:31
REG[4] =  i:17
  32 Copy             9   13    0               00 r[13]=r[9]; x.x
REG[13] =  i:1
  33 Copy            13   17    0               00 r[17]=r[13]
REG[17] =  i:1
  34 Function0        1   16   14 printf(-1)    02 r[14]=func(r[16..17])
REG[16] =   t8[ab%04xyz](8)
REG[17] =  i:1
REG[14] =   s8[ab0001yz](8)
  35 Function0        0    0   15 random(0)     00 r[15]=func(r[0])
REG[15] =  i:8338244369614619455
  36 Yield            3    0    0               00 
REG[3] =  i:41
REG[3] =  i:36
  42 NewRowid         4    1    0               00 r[1]=rowid
REG[1] =  i:1
  43 SCopy           13    2    0               00 r[2]=r[13]
REG[2] =  i:1
  44 Eq               2   46    2 (BINARY)      52 if r[2]==r[2] goto 46

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f74e2240859 in __GI_abort () at abort.c:79
#2  0x00007f74e2240729 in __assert_fail_base (fmt=0x7f74e23d6588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=<optimized out>)
    at assert.c:92
#3  0x00007f74e2251fd6 in __GI___assert_fail (assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=0x21067c "int sqlite3VdbeMemStringify(Mem *, u8, u8)") at assert.c:101
#4  0x000000000027a9de in sqlite3VdbeMemStringify (pMem=0x15ca5f0, enc=1 '\001', bForce=1 '\001') at sqlite3.c:68526
#5  0x00000000003c7fc0 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:78710
#6  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#7  0x000000000024b5e9 in main (argc=1, argv=0x7fffa75d35a8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 30800] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
