GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000351,sig:06,src:020821+024375,time:13173078,execs:3739454,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;CREATE INDEX b ON t2(likely(t1));]
VDBE Trace:
   0 Init             0   34    0               00 Start at 34
  34 Transaction      0    1    2 0             01 usesStmtJournal=0
  35 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  36 TableLock        0    2    1 t2            00 iDb=0 root=2 write=1
  37 Goto             0    1    0               00 
   1 Noop             0   33    0               00 
   2 CreateIndex      0    1    0               00 r[1]=root iDb=0
REG[1] =  i:4
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:3
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 b             00 r[4]='b'
REG[4] =   t1[b](8)
   7 String8          0    5    0 t2            00 r[5]='t2'
REG[5] =   t2[t2](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:4
   9 String8          0    7    0 CREATE INDEX b ON t2(likely(t1)) 00 r[7]='CREATE INDEX b ON t2(likely(t1))'
REG[7] =   t32[CREATE INDEX b ](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s47[06170F11014D696E6465786274320443.....Mindexbt2.C](8)
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s47[06170F11014D696E6465786274320443.....Mindexbt2.C](8)
REG[2] =  i:3
  12 Close            0    0    0               00 
  13 SorterOpen       3    0    1 k(2,,)        00 
  14 OpenRead         1    2    0 2             00 root=2 iDb=0; t2
  15 Rewind           1   21    0               00 
  21 OpenWrite        2    1    0 k(2,,)        11 root=1 iDb=0
  22 SorterSort       3   27    0               00 
  27 Close            1    0    0               00 
  28 Close            2    0    0               00 
  29 Close            3    0    0               00 
  30 SetCookie        0    1    3               00 
  31 ParseSchema      0    0    0 name='b' AND type='index' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    3 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 b             00 r[2]='b'
REG[2] =   t1[b](8)
  19 String8          0    4    0 index         00 r[4]='index'
REG[4] =   t5[index](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[b](8)
REG[1] =   s2[t2](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[a](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[b](8)
REG[1] =   s1[a](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[b](8)
REG[1] =   s1[b](8)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s5[index](8)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t5[index](8)
REG[3] =   s5[index](8)
   9 Copy             1    5    0               00 r[5]=r[1]
REG[5] =   s1[b](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:4
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s32[CREATE INDEX b ](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s1[b](8)
REG[6] =  i:4
REG[7] =   s32[CREATE INDEX b ](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  32 Expire           0    0    0               00 
  33 Halt             0    0    0               00 
SQL: [;CREATE TABLE c(t1w,wordcount,PRIMARY KEY(t1w,wordcount)) WITHOUT ROWID;]
VDBE Trace:
   0 Init             0   42    0               00 Start at 42
  42 Transaction      0    1    3 0             01 usesStmtJournal=0
  43 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  44 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateIndex      0    2    0               00 r[2]=root iDb=0
REG[2] =  i:5
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:4
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......](8)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......](8)
REG[1] =  i:4
  10 Close            0    0    0               00 
  11 Goto             0   23    0               00 
  23 Close            0    0    0               00 
  24 Null             0   12   13               00 r[12..13]=NULL
REG[12] =  NULL
  25 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  26 Explain          0    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  27 MustBeInt        1   30    0               00 
REG[1] =  i:4
  28 NotExists        2   30    1               00 intkey=r[1]; pk
REG[1] =  i:4
  29 Rowid            2   13    0               00 r[13]=rowid
REG[13] =  i:4
  30 IsNull          13   38    0               00 if r[13]==NULL goto 38
REG[13] =  i:4
  31 String8          0   14    0 table         00 r[14]='table'
REG[14] =   t5[table](8)
  32 String8          0   15    0 c             00 r[15]='c'
REG[15] =   t1[c](8)
  33 String8          0   16    0 c             00 r[16]='c'
REG[16] =   t1[c](8)
  34 Copy             2   17    0               00 r[17]=r[2]
REG[17] =  i:5
  35 String8          0   18    0 CREATE TABLE c(t1w,wordcount,PRIMARY KEY(t1w,wordcount)) WITHOUT ROWID 00 r[18]='CREATE TABLE c(t1w,wordcount,PRIMARY KEY(t1w,wordcount)) WITHOUT ROWID'
REG[18] =   t70[CREATE TABLE c(](8)
  36 MakeRecord      14    5   19 BBBDB         00 r[19]=mkrec(r[14..18])
REG[19] =  s85[07170F0F0181197461626C6563630543.......tablecc.C](8)
  37 Insert           2   19   13               00 intkey=r[13] data=r[19]
REG[19] =  s85[07170F0F0181197461626C6563630543.......tablecc.C](8)
REG[13] =  i:4
  38 Close            2    0    0               00 
  39 SetCookie        0    1    4               00 
  40 ParseSchema      0    0    0 tbl_name='c' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    4 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 c             00 r[2]='c'
REG[2] =   t1[c](8)
  19 String8          0    4    0 trigger       00 r[4]='trigger'
REG[4] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s2[t2](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s2[t2](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t2](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s2[t2](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[c](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[c](8)
REG[1] =   s1[c](8)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s5[table](8)
   8 Eq               4   13    3 (BINARY)      52 if r[4]==r[3] goto 13
REG[4] =   t7[trigger](8)
REG[3] =   s5[table](8)
   9 Column           0    1    5               00 r[5]=sqlite_master.name
REG[5] =   s1[c](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:5
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s70[CREATE TABLE c(](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s1[c](8)
REG[6] =  i:5
REG[7] =   s70[CREATE TABLE c(](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  41 Halt             0    0    0               00 
SQL: [;WITH RECURSIVE c(i) AS (VALUES(1) UNION ALL SELECT i+1 FROM c WHERE i<100)
      INSERT INTO t2(t1,x) SELECT i, zeroblob(200) FROM c;]
VDBE Trace:
   0 Init             0   58    0               00 Start at 58
  58 Transaction      0    1    4 0             01 usesStmtJournal=1
  59 TableLock        0    2    1 t2            00 iDb=0 root=2 write=1
  60 Integer        100   11    0               00 r[11]=100
REG[11] =  i:100
  61 Integer          1   13    0               00 r[13]=1
REG[13] =  i:1
  62 Integer        200   16    0               00 r[16]=200
REG[16] =  i:200
  63 Integer          0   22    0               00 r[22]=0
REG[22] =  i:0
  64 Goto             0    1    0               00 
   1 InitCoroutine    4   32    2               00 
  32 OpenWrite        3    2    0 2             00 root=2 iDb=0; t2
  33 OpenWrite        4    4    0 k(2,,)        00 root=4 iDb=0; b
  34 OpenWrite        5    3    0 k(2,,)        00 root=3 iDb=0; a
  35 Yield            4   54    0               00 
REG[4] =  i:1
REG[4] =  i:35
   2 InitCoroutine    5   24    3               00 c
  24 Explain          0    0    0 SCAN SUBQUERY 1 00 
  25 InitCoroutine    5    0    3               00 
  26 Yield            5   31    0               00 next row of "c"
REG[5] =  i:2
REG[5] =  i:26
   3 OpenPseudo       1    6    1               00 1 columns in r[6]
   4 OpenEphemeral    2    1    0               00 nColumn=1; Queue table
   5 Integer          1    7    0               00 r[7]=1
REG[7] =  i:1
   6 MakeRecord       7    1    8               00 r[8]=mkrec(r[7])
REG[8] =  s2[0209..](8)
   7 NewRowid         2    9    0               00 r[9]=rowid
REG[9] =  i:1
   8 Insert           2    8    9               08 intkey=r[9] data=r[8]
REG[8] =  s2[0209..](8)
REG[9] =  i:1
   9 Rewind           2   23    0               00 
  10 NullRow          1    0    0               00 
  11 RowData          2    6    0               00 r[6]=data
REG[6] =  s2[0209..](8)
  12 Delete           2    0    0               00 
  13 Column           1    0   10               00 r[10]=
REG[10] =  i:1
  14 Yield            5    0    0               00 
REG[5] =  i:26
REG[5] =  i:14
  27 Copy            10   14    0               00 r[14]=r[10]; c.i
REG[14] =  i:1
  28 Function0        1   16   15 zeroblob(1)   01 r[15]=func(r[16])
REG[16] =  i:200
REG[15] =  s0[](8)+200z
  29 Yield            4    0    0               00 
REG[4] =  i:35
REG[4] =  i:29
  36 NewRowid         3    1    0               00 r[1]=rowid
REG[1] =  i:1
  37 SCopy           15    2    0               00 r[2]=r[15]
REG[2] =  e0[](8)+200z
  38 SCopy           14    3    0               00 r[3]=r[14]
REG[3] =  i:1
  39 Ne               3   41    2 (BINARY)      51 if r[3]!=r[2] goto 41
REG[3] =  i:1
REG[2] =  e0[](8)+200z
  41 SCopy            3   20    0               00 r[20]=r[3]; t1
REG[20] =  i:1
  42 IntCopy          1   21    0               00 r[21]=r[1]; rowid
REG[21] =  i:1
  43 MakeRecord      20    2   17               00 r[17]=mkrec(r[20..21]); for b
REG[17] =  s3[030909...](8)
  44 Null             0   18    0               00 r[18]=NULL
REG[18] =  NULL
  45 Le              22   48    2 (BINARY)      51 if r[22]<=r[2] goto 48

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f6487ea4859 in __GI_abort () at abort.c:79
#2  0x00007f6487ea4729 in __assert_fail_base (fmt=0x7f648803a588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", 
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=<optimized out>) at assert.c:92
#3  0x00007f6487eb5fd6 in __GI___assert_fail (
    assertion=0x216480 "((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1", file=0x222c23 "sqlite3.c", line=68297, 
    function=0x21e154 "int sqlite3VdbeCheckMemInvariants(Mem *)") at assert.c:101
#4  0x00000000002795e3 in sqlite3VdbeCheckMemInvariants (p=0x13be6c8) at sqlite3.c:68292
#5  0x00000000003bffc1 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:77375
#6  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#7  0x000000000024b5e9 in main (argc=1, argv=0x7ffc3186e2e8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 31225] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
