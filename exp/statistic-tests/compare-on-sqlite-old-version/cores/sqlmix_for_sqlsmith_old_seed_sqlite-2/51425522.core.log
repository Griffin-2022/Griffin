GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000323,sig:06,src:005732+005571,time:42402188,execs:3419762,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL-trace: ;
PRAGMA sql_trace=on;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: PRAGMA journal_mode=WAL;
SQL-trace: pragma auto_vacuum=2;
SQL-trace: CREATE TABLE x(sqlsim0, sqlsim1) ;
SQL-trace: DROP TABLE x;
SQL-trace: PRAGMA journal_mode=WAL;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
CREATE TABLE x(sqlsim0, sqlsim1, t2, newtable);
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: DELETE FROM x ;
SQL-trace: ;
pragma cache_size=16;
SQL-trace: ;
COMMIT;
SQL-trace: DELETE FROM x ;
SQL-trace: SELECT name, type FROM main.sqlite_master
      WHERE type IN('table', 'view') AND name NOT LIKE 'sqliteX_%' ESCAPE 'X'
    ;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT a<a FROM t1;
SQL-trace: ATTACH 'test.db6' AS aux6;
SQL-trace: ATTACH 'test.db7' AS aux7;
SQL-trace: ;
pragma locking_mode=exclusive ;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: PRAGMA auto_vacuum = 0;
SQL-trace: DETACH DATABASE two;
SQL-trace: CREATE VIEW c AS SELECT t1+1,t1+1 FROM c;
SQL-trace: SELECT ( SELECT a FROM t1 WHERE a = cnt )
    FROM ( SELECT count(*) AS cnt FROM t1 );
SQL-trace: DROP VIEW c
    ;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: DELETE FROM t1 ;
SQL-trace: PRAGMA journal_mode=PERSIST;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='a' AND type!='trigger' ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;
SQL-trace: PRAGMA secure_delete;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE type='trigger' AND name='a' ORDER BY rowid;
SQL-trace: ;
COMMIT;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT * FROM t1 AS t1, t1 AS a;
SQL-trace: ROLLBACK;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT randomblob($pgsz);
SQL-trace: DETACH test1;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='x' AND type!='trigger' ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: DELETE FROM x ;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: PRAGMA main.secure_delete=ON;
SQL-trace: SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='x' AND type!='trigger' ORDER BY rowid;
SQL-trace: SELECT name FROM sqlite_temp_master WHERE type='table';
SQL-trace: SELECT name, rootpage, sql FROM 'temp'.sqlite_temp_master WHERE tbl_name='t1' ORDER BY rowid;
SQL-trace: PRAGMA main.auto_vacuum = 0;
SQL-trace: ;
UPDATE t1 SET b=32, b=NULL;
SQL-trace: CREATE INDEX c ON t1(b COLLATE BINARY);
SQL-trace: ;
REINDEX BINARY;
SQL-trace: ;
REINDEX NOCASE;
SQL-trace: SELECT b FROM t1 WHERE b!=11;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
PRAGMA journal_mode = WAL;
SQL-trace: ;
ALTER TABLE x ADD COLUMN db12
    ;
SQL-trace: SELECT b FROM t1 WHERE b=11;
SQL-trace: ;
WITH
       auth1311(x,a) AS (SELECT a+a, a-a FROM t1)
    SELECT * FROM auth1311 ORDER BY x;
SQL-trace: ;
PRAGMA cache_size = -2000;
SQL-trace: ;
WITH RECURSIVE
       auth1312(a,a) AS (SELECT a+a, a-a FROM t1)
    SELECT a, a FROM auth1312 ORDER BY a;
SQL-trace: SELECT a FROM t1 ORDER BY min(a,a);
SQL-trace: DROP TABLE x;
SQL-trace: ;
SELECT b FROM t1 UNION SELECT b FROM t1
    ORDER BY b;
SQL-trace: ;
INSERT INTO t1 VALUES('d','3');
SQL-trace: SELECT randomblob($pgsz);
SQL-trace: ;
SELECT * FROM t1 WHERE a=(SELECT 2);
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: DELETE FROM t1 ;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT randomblob($pgsz);
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
UPDATE t1 SET a='ac', a='A%a';
SQL-trace: ;
SELECT a NOT LIKE a FROM t1;
SQL-trace: ;
UPDATE t1 SET b='AxC', b='b[^]b]b';
SQL-trace: DELETE FROM t1 ;
SQL-trace: CREATE TABLE db12(one int, two int);
SQL-trace: SELECT a FROM t1 WHERE (a<0 OR a=0) AND a IS NULL ORDER BY a;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ALTER TABLE db12 ADD COLUMN t0;
SQL-trace: SELECT b FROM t1 WHERE (b%5)==0 ORDER BY b+0;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='t1i1' AND type='index' ORDER BY rowid;
SQL-trace: DELETE FROM db12 ;
SQL-trace: DELETE FROM t1 ;
SQL-trace: PRAGMA auto_vacuum=INCREMENTAL;
SQL-trace: ;
VACUUM;
SQL-trace: ATTACH '' AS vacuum_db;
SQL-trace: PRAGMA vacuum_db.synchronous=OFF
SQL-trace: BEGIN;
SQL-trace: SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14)   FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0
SQL-trace: CREATE TABLE vacuum_db.t1(a, b)
SQL-trace: CREATE TABLE vacuum_db.db12(one int, two int, t0)
SQL-trace: SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' 
SQL-trace: CREATE INDEX vacuum_db.c ON t1(b COLLATE BINARY)
SQL-trace: SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21)   FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'
SQL-trace: SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';'FROM main.sqlite_master WHERE type = 'table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007feb25de8859 in __GI_abort () at abort.c:79
#2  0x00007feb25de8729 in __assert_fail_base (fmt=0x7feb25f7e588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x227729 "sqlite3_stricmp(sqlite3StrBINARY, zColl)!=0 || sqlite3StrBINARY==zColl", 
    file=0x222c23 "sqlite3.c", line=108020, function=<optimized out>) at assert.c:92
#3  0x00007feb25df9fd6 in __GI___assert_fail (assertion=0x227729 "sqlite3_stricmp(sqlite3StrBINARY, zColl)!=0 || sqlite3StrBINARY==zColl", file=0x222c23 "sqlite3.c", line=108020, 
    function=0x20a00b "int xferOptimization(Parse *, Table *, Select *, int, int)") at assert.c:101
#4  0x0000000000345560 in sqlite3Insert (pParse=<optimized out>, pTabList=<optimized out>, pSelect=<optimized out>, pColumn=0x0, onError=<optimized out>) at sqlite3.c:108019
#5  0x00000000003066b3 in yy_reduce (yypParser=0x248f970, yyruleno=<optimized out>) at sqlite3.c:133484
#6  0x00000000002fef8e in sqlite3Parser (yyp=0x248f970, yymajor=<optimized out>, yyminor=..., pParse=<optimized out>) at sqlite3.c:134258
#7  0x00000000002fc544 in sqlite3RunParser (pParse=0x239bad0, zSql=0x23b3440 "INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';", pzErrMsg=0x7fff66e06a08) at sqlite3.c:135186
#8  0x00000000002facac in sqlite3Prepare (db=0x2399850, zSql=0x23b3440 "INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';", nBytes=<optimized out>, saveSqlFlag=0, pReprepare=<optimized out>, ppStmt=0x7fff66e06ac8, 
    pzTail=0x0) at sqlite3.c:112596
#9  0x00000000002fa0f4 in sqlite3LockAndPrepare (db=0x2399850, zSql=0x23b3440 "INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';", nBytes=-1, saveSqlFlag=0, pOld=0x0, ppStmt=<optimized out>, pzTail=0x0)
    at sqlite3.c:112688
#10 0x00000000003fb16b in execSql (db=0x2399850, pzErrMsg=0x239c2b8, zSql=<optimized out>) at sqlite3.c:112752
#11 0x00000000003fb5ec in execExecSql (db=0x2399850, pzErrMsg=0x239c2b8, zSql=<optimized out>) at sqlite3.c:120748
#12 0x00000000003de49e in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:120939
#13 0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#14 0x000000000024b5e9 in main (argc=1, argv=0x7fff66e07268) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 835] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
