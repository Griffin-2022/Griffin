GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000200,sig:06,src:009311+008526,time:20867591,execs:1677171,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL-trace: ;
PRAGMA sql_trace=on;
SQL-trace: ;
INSERT INTO t1(a) VALUES(0);
SQL-trace: ;
ATTACH 'test3.db' as aux2;
SQL-trace: CREATE TABLE sqlsim0(sqlsim1 INTEGER PRIMARY KEY, t2 TEXT);
SQL-trace: ;
PRAGMA page_size = 1024;
SQL-trace: ;
pragma cache_size=16;
SQL-trace: ;
PRAGMA vdbe_listing=off;
SQL-trace: CREATE TEMP TABLE newtable(c INTEGER PRIMARY KEY, db12 TEXT, one BLOB);
SQL-trace: CREATE INDEX é1 ON t1(a,a)WHERE a in (10,12,20);
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SAVEPOINT one;
SQL-trace: SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='sqlsim0' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
PRAGMA page_size = 1024;
SQL-trace: PRAGMA page_count;
SQL-trace: PRAGMA journal_mode=DELETE;
SQL-trace: ;
PRAGMA page_size=511;
SQL-trace: ;
INSERT INTO t1(b,b,b) VALUES('t','th',70);
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='sqlsim0' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='newtable' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: CREATE TABLE t0(t3, i1, t5);
SQL-trace: ;
CREATE TABLE y(t4);
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
ROLLBACK;
SQL-trace: ;
PRAGMA temp.cache_size = 10;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='i2' AND type='index' ORDER BY rowid;
SQL-trace: pragma page_size;
SQL-trace: ATTACH $uri AS aux ;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t0' AND type!='trigger' ORDER BY rowid;
SQL-trace: SELECT 0x2000000000000000;
SQL-trace: RELEASE "including Whitespace " ;
SQL-trace: SELECT NULL;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;
SQL-trace: SAVEPOINT three;
SQL-trace: SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE name='x2' AND type='table' ORDER BY rowid;
SQL-trace: ;
SELECT count(*) FROM newtable;
SQL-trace: CREATE INDEX foo ON t1(x COLLATE BINARY);
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t0' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'temp'.sqlite_temp_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='sqlsim0' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='sqlsim0' AND type!='trigger' ORDER BY rowid;
SQL-trace: ;
COMMIT;
SQL-trace: SELECT 0x20000000000000;
SQL-trace: ROLLBACK ;
SQL-trace: ;
UPDATE sqlsim0 SET t2='ac', t2='t2*?sqlsim0';
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;
SQL-trace: WITH RECURSIVE x(foo) AS (VALUES(1) UNION ALL SELECT foo+1 FROM x WHERE foo<250)
    INSERT INTO t1(x,x) SELECT foo, randomblob(200) FROM x;
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT sqlsim1 FROM (SELECT sqlsim1 FROM sqlsim0 ORDER BY sqlsim1 LIMIT 3) WHERE sqlsim1=1;
SQL-trace: SELECT * FROM newtable;
SQL-trace: PRAGMA integrity_check;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t0' AND type!='trigger' ORDER BY rowid;
SQL-trace: CREATE TABLE yy(tkt3376, tx, x1);
SQL-trace: ;
SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: PRAGMA integrity_check;
SQL-trace: PRAGMA integrity_check;
SQL-trace: ;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t0' AND type!='trigger' ORDER BY rowid;
SQL-trace: SELECT randomblob($pgsz);
SQL-trace: CREATE TABLE x2(y1, y2, tr1);
SQL-trace: SELECT name, rootpage, sql FROM "main".sqlite_master ORDER BY rowid;
SQL-trace: ;
SELECT t2 NOT LIKE t2 FROM sqlsim0;
SQL-trace: ;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='x2' AND type!='trigger' ORDER BY rowid;
SQL-trace: CREATE TABLE d ( g, e, f, PRIMARY KEY(g, e, f) );
SQL-trace: ;
PRAGMA integrity_check;
SQL-trace: VACUUM;
SQL-trace: ATTACH '' AS vacuum_db;
SQL-trace: PRAGMA vacuum_db.synchronous=OFF
SQL-trace: BEGIN;
SQL-trace: SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14)   FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0
SQL-trace: CREATE TABLE vacuum_db.t1(a TEXT, b REAL, x INTEGER)
SQL-trace: CREATE TABLE vacuum_db.sqlsim0(sqlsim1 INTEGER PRIMARY KEY, t2 TEXT)
SQL-trace: CREATE TABLE vacuum_db.yy(tkt3376, tx, x1)
SQL-trace: CREATE TABLE vacuum_db.x2(y1, y2, tr1)
SQL-trace: CREATE TABLE vacuum_db.d ( g, e, f, PRIMARY KEY(g, e, f) )
SQL-trace: SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' 
SQL-trace: CREATE INDEX vacuum_db.é1 ON t1(a,a)WHERE a in (10,12,20)
SQL-trace: CREATE INDEX vacuum_db.foo ON t1(x COLLATE BINARY)
SQL-trace: SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21)   FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'
SQL-trace: SELECT 'INSERT INTO vacuum_db.' || quote(name) || ' SELECT * FROM main.' || quote(name) || ';'FROM main.sqlite_master WHERE type = 'table' AND name!='sqlite_sequence'   AND coalesce(rootpage,1)>0

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f2ec6b58859 in __GI_abort () at abort.c:79
#2  0x00007f2ec6b58729 in __assert_fail_base (fmt=0x7f2ec6cee588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x227729 "sqlite3_stricmp(sqlite3StrBINARY, zColl)!=0 || sqlite3StrBINARY==zColl", 
    file=0x222c23 "sqlite3.c", line=108020, function=<optimized out>) at assert.c:92
#3  0x00007f2ec6b69fd6 in __GI___assert_fail (assertion=0x227729 "sqlite3_stricmp(sqlite3StrBINARY, zColl)!=0 || sqlite3StrBINARY==zColl", file=0x222c23 "sqlite3.c", line=108020, 
    function=0x20a00b "int xferOptimization(Parse *, Table *, Select *, int, int)") at assert.c:101
#4  0x0000000000345560 in sqlite3Insert (pParse=<optimized out>, pTabList=<optimized out>, pSelect=<optimized out>, pColumn=0x0, onError=<optimized out>) at sqlite3.c:108019
#5  0x00000000003066b3 in yy_reduce (yypParser=0x8c3000, yyruleno=<optimized out>) at sqlite3.c:133484
#6  0x00000000002fef8e in sqlite3Parser (yyp=0x8c3000, yymajor=<optimized out>, yyminor=..., pParse=<optimized out>) at sqlite3.c:134258
#7  0x00000000002fc544 in sqlite3RunParser (pParse=0x80a360, zSql=0x8199d0 "INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';", pzErrMsg=0x7ffd9a3d51e8) at sqlite3.c:135186
#8  0x00000000002facac in sqlite3Prepare (db=0x807850, zSql=0x8199d0 "INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';", nBytes=<optimized out>, saveSqlFlag=0, pReprepare=<optimized out>, ppStmt=0x7ffd9a3d52a8, 
    pzTail=0x0) at sqlite3.c:112596
#9  0x00000000002fa0f4 in sqlite3LockAndPrepare (db=0x807850, zSql=0x8199d0 "INSERT INTO vacuum_db.'t1' SELECT * FROM main.'t1';", nBytes=-1, saveSqlFlag=0, pOld=0x0, ppStmt=<optimized out>, pzTail=0x0) at sqlite3.c:112688
#10 0x00000000003fb16b in execSql (db=0x807850, pzErrMsg=0x81ee38, zSql=<optimized out>) at sqlite3.c:112752
#11 0x00000000003fb5ec in execExecSql (db=0x807850, pzErrMsg=0x81ee38, zSql=<optimized out>) at sqlite3.c:120748
#12 0x00000000003de49e in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:120939
#13 0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#14 0x000000000024b5e9 in main (argc=1, argv=0x7ffd9a3d5a48) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 130612] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
