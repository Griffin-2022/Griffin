GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000037,sig:06,src:017864+017881,time:5619365,execs:901522,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;
PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;
CREATE INDEX t0st_segments ON t1(a DESC, a DESC) ;]
VDBE Trace:
   0 Init             0   34    0               00 Start at 34
  34 Transaction      0    1    2 0             01 usesStmtJournal=0
  35 Goto             0    1    0               00 
   1 Noop             0   33    0               00 
   2 CreateBtree      0    1    2               00 r[1]=root iDb=0 flags=2
REG[1] =  i:6
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:5
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 t0st_segments 00 r[4]='t0st_segments'
REG[4] =   t13[t0st_segments](8)
   7 String8          0    5    0 t1            00 r[5]='t1'
REG[5] =   t2[t1](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:6
   9 String8          0    7    0 CREATE INDEX t0st_segments ON t1(a DESC, a DESC)  00 r[7]='CREATE INDEX t0st_segments ON t1(a DESC, a DESC) '
REG[7] =   t49[CREATE INDEX t0](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s76[06172711016F696E646578743073745F..'..oindext0st_]
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s76[06172711016F696E646578743073745F..'..oindext0st_]
REG[2] =  i:5
  12 SorterOpen       3    0    2 k(3,-,-,)     00 
  13 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  14 Rewind           1   21    0               00 
  21 OpenWrite        2    1    0 k(3,-,-,)     11 root=1 iDb=0
  22 SorterSort       3   27    0               00 
  27 Close            1    0    0               00 
  28 Close            2    0    0               00 
  29 Close            3    0    0               00 
  30 SetCookie        0    1    3               00 
  31 ParseSchema      0    0    0 name='t0st_segments' AND type='index' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    3 0             00 usesStmtJournal=0
  16 String8          0    2    0 t0st_segments 00 r[2]='t0st_segments'
REG[2] =   t13[t0st_segments](8)
  17 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s21[sqlite_autoinde](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s21[sqlite_autoinde](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s20[sqlite_autoinde](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s20[sqlite_autoinde](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s13[t0st_segments](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s13[t0st_segments](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t5[index](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s13[t0st_segments](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:6
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s49[CREATE INDEX t0](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s13[t0st_segments](8)
REG[5] =  i:6
REG[6] =   s49[CREATE INDEX t0](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  32 Expire           0    1    0               00 
  33 Halt             0    0    0               00 
SQL: [;
SELECT printf('%*.*f',5,2,3.141592653);]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 %*.*f         00 r[3]='%*.*f'
REG[3] =   t5[%*.*f](8)
   6 Integer          5    4    0               00 r[4]=5
REG[4] =  i:5
   7 Integer          2    5    0               00 r[5]=2
REG[5] =  i:2
   8 Real             0    6    0 3.141592653   00 r[6]=3.141592653
REG[6] =  r:3.14159
   9 Function0       15    3    2 printf(-1)    04 r[2]=func(r[3..6])
REG[3] =   t5[%*.*f](8)
REG[4] =  i:5
REG[5] =  i:2
REG[6] =  r:3.14159
REG[2] =   s5[ 3.14](8)
  10 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s5[ 3.14](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s5[ 3.14](8)
   4 Halt             0    0    0               00 
SQL: [;
ATTACH printf('file:%09000x/x.db?mode=memory&cache=shared',1) AS aux1;]
VDBE Trace:
   0 Init             0    7    0               00 Start at 7
   7 String8          0    6    0 file:%09000x/x.db?mode=memory&cache=shared 00 r[6]='file:%09000x/x.db?mode=memory&cache=shared'
REG[6] =   t42[file:%09000x/x.](8)
   8 Integer          1    7    0               00 r[7]=1
REG[7] =  i:1
   9 Function0        3    6    5 printf(-1)    02 r[5]=func(r[6..7])
REG[6] =   t42[file:%09000x/x.](8)
REG[7] =  i:1
REG[5] =   s9035[file:0000000000](8)
  10 Goto             0    1    0               00 
   1 SCopy            5    1    0               00 r[1]=r[5]
REG[1] =   e9035[file:0000000000](8)
   2 String8          0    2    0 aux1          00 r[2]='aux1'
REG[2] =   t4[aux1](8)
   3 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
   4 Function0        0    1    4 sqlite_attach(3) 03 r[4]=func(r[1..3])
REG[1] =   e9035[file:0000000000](8)
REG[2] =   t4[aux1](8)
REG[3] =  NULL
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    3 1             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t1](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:2
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =   s35[CREATE TABLE t1](8)
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s2[t1](8)
REG[2] =  i:2
REG[3] =   s35[CREATE TABLE t1](8)
   9 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s21[sqlite_autoinde](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:3
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =  NULL
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s21[sqlite_autoinde](8)
REG[2] =  i:3
REG[3] =  NULL
   9 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[b](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:4
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =   s62[CREATE TABLE b(](8)
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s1[b](8)
REG[2] =  i:4
REG[3] =   s62[CREATE TABLE b(](8)
   9 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s20[sqlite_autoinde](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:5
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =  NULL
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s20[sqlite_autoinde](8)
REG[2] =  i:5
REG[3] =  NULL
   9 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s13[t0st_segments](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:6
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =   s49[CREATE INDEX t0](8)
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s13[t0st_segments](8)
REG[2] =  i:6
REG[3] =   s49[CREATE INDEX t0](8)
   9 Next             0    5    0               01 
  10 Halt             0    0    0               00 
SQL: [;
SELECT * FROM t1 WHERE (a=1 OR a=2) AND a IN (
    SELECT a FROM (SELECT DISTINCT a FROM t1) WHERE a=1
  );]
VDBE Trace:
   0 Init             0  107    0               00 Start at 107
 107 Transaction      0    0    3 1             01 usesStmtJournal=0
 108 Integer          1   11    0               00 r[11]=1
REG[11] =  i:1
 109 Goto             0    1    0               00 
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   2 Null             0    2    0               00 r[2]=NULL
REG[2] =  NULL
   3 Integer         71    1    0               00 r[1]=71
REG[1] =  i:71
   4 Explain          4    0    0 MULTI-INDEX OR 00 
   5 Explain          5    4    0 INDEX 1       00 
   6 ReopenIdx        3    6    0 k(3,-,-,)     02 root=6 iDb=0; t0st_segments
   7 Integer          1    4    0               00 r[4]=1
REG[4] =  i:1
   8 Integer          1    5    0               00 r[5]=1
REG[5] =  i:1
   9 Affinity         4    2    0 BB            00 affinity(r[4..5])
  10 SeekGE           3   49    4 2             00 key=r[4..5]
REG[4] =   s1[1](8)
  49 Explain         49    4    0 INDEX 2       00 
  50 ReopenIdx        3    6    0 k(3,-,-,)     02 root=6 iDb=0; t0st_segments
  51 Integer          2   13    0               00 r[13]=2
REG[13] =  i:2
  52 Integer          2   14    0               00 r[14]=2
REG[14] =  i:2
  53 Affinity        13    2    0 BB            00 affinity(r[13..14])
  54 SeekGE           3   71   13 2             00 key=r[13..14]
REG[13] =   s1[2](8)
  71 Goto             0  106    0               00 
 106 Halt             0    0    0               00 
SQL: [ROLLBACK TO changeset_apply;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Savepoint        2    0    0 changeset_apply 00 
SQL: [;
SELECT printf('|%9.8c|%-9.8c|','*','*');]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 |%9.8c|%-9.8c| 00 r[3]='|%9.8c|%-9.8c|'
REG[3] =   t14[|%9.8c|%-9.8c|](8)
   6 String8          0    4    0 *             00 r[4]='*'
REG[4] =   t1[*](8)
   7 String8          0    5    0 *             00 r[5]='*'
REG[5] =   t1[*](8)
   8 Function0        7    3    2 printf(-1)    03 r[2]=func(r[3..5])
REG[3] =   t14[|%9.8c|%-9.8c|](8)
REG[4] =   t1[*](8)
REG[5] =   t1[*](8)
REG[2] =   s21[| ********|****](8)
   9 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s21[| ********|****](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s21[| ********|****](8)
   4 Halt             0    0    0               00 
SQL: [;
SELECT printf('|%9.8c|%-9.8c|','*','*');]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 |%9.8c|%-9.8c| 00 r[3]='|%9.8c|%-9.8c|'
REG[3] =   t14[|%9.8c|%-9.8c|](8)
   6 String8          0    4    0 *             00 r[4]='*'
REG[4] =   t1[*](8)
   7 String8          0    5    0 *             00 r[5]='*'
REG[5] =   t1[*](8)
   8 Function0        7    3    2 printf(-1)    03 r[2]=func(r[3..5])
REG[3] =   t14[|%9.8c|%-9.8c|](8)
REG[4] =   t1[*](8)
REG[5] =   t1[*](8)
REG[2] =   s21[| ********|****](8)
   9 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s21[| ********|****](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s21[| ********|****](8)
   4 Halt             0    0    0               00 
SQL: [INSERT INTO b VALUES(0, 'abc');]
VDBE Trace:
   0 Init             0   18    0               00 Start at 18
  18 Transaction      0    1    3 1             01 usesStmtJournal=0
  19 Goto             0    1    0               00 
   1 OpenWrite        0    4    0 2             00 root=4 iDb=0; b
   2 OpenWrite        1    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_b_1
   3 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   4 Integer          0    2    0               00 r[2]=0
REG[2] =  i:0
   5 String8          0    3    0 abc           00 r[3]='abc'
REG[3] =   t3[abc](8)
   6 Noop             0    0    0               00 uniqueness check for sqlite_autoindex_b_1
   7 SCopy            2    5    0               00 r[5]=r[2]; t0st
REG[5] =  i:0
   8 SCopy            3    6    0               00 r[6]=r[3]; t0st_content
REG[6] =   t3[abc](8)
   9 IntCopy          1    7    0               00 r[7]=r[1]; rowid
REG[7] =  i:1
  10 MakeRecord       5    3    4               00 r[4]=mkrec(r[5..7]); for sqlite_autoindex_b_1
REG[4] =  s7[04081309616263....abc]
  11 Abortable        0    0    0               00 
  12 NoConflict       1   14    5 2             00 key=r[5..6]
REG[5] =  i:0
REG[6] =   t3[abc](8)
  14 IdxInsert        1    4    5 3             10 key=r[4]
REG[4] =  s7[04081309616263....abc]
  15 MakeRecord       2    2    8               00 r[8]=mkrec(r[2..3])
REG[8] =  s6[030813616263...abc]
  16 Insert           0    8    1 b             39 intkey=r[1] data=r[8]
REG[8] =  s6[030813616263...abc]
REG[1] =  i:1
  17 Halt             0    0    0               00 
SQL: [;
VACUUM;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Vacuum           0    0    0               00 
SQL: [SELECT a, ntile(7) OVER (ORDER BY a) FROM t1
;]
VDBE Trace:
   0 Init             0   59    0               00 Start at 59
  59 Transaction      0    0    3 1             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
  18 Integer          1    7    0               00 r[7]=1
REG[7] =  i:1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:21
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t1_1
  10 Explain         10    7    0 SCAN TABLE t1 USING COVERING INDEX sqlite_autoindex_t1_1 00 
  11 Rewind           7   17    4 0             00 
  17 EndCoroutine     3    0    0               00 
REG[3] =  i:21
  38 Rewind           2   51    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  58 Halt             0    0    0               00 
SQL: [BEGIN;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       0    0    0               00 
SQL: [;
SELECT printf('(%-8c)',char(11106));]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 (%-8c)        00 r[3]='(%-8c)'
REG[3] =   t6[(%-8c)](8)
   6 Integer       11106    5    0               00 r[5]=11106
REG[5] =  i:11106
   7 Function0        1    5    4 char(-1)      01 r[4]=func(r[5])
REG[5] =  i:11106
REG[4] =   z3[...](8)
   8 Function0        3    3    2 printf(-1)    02 r[2]=func(r[3..4])
REG[3] =   t6[(%-8c)](8)
REG[4] =   z3[...](8)
REG[2] =   s12[(...       )](8)
   9 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s12[(...       )](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s12[(...       )](8)
   4 Halt             0    0    0               00 
SQL: [;
SELECT printf('|%,d|%,d|',123,-123);]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 |%,d|%,d|     00 r[3]='|%,d|%,d|'
REG[3] =   t9[|%,d|%,d|](8)
   6 Integer        123    4    0               00 r[4]=123
REG[4] =  i:123
   7 Integer       -123    5    0               00 r[5]=-123
REG[5] =  i:-123
   8 Function0        7    3    2 printf(-1)    03 r[2]=func(r[3..5])
REG[3] =   t9[|%,d|%,d|](8)
REG[4] =  i:123
REG[5] =  i:-123
REG[2] =   s10[|123|-123|](8)
   9 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s10[|123|-123|](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s10[|123|-123|](8)
   4 Halt             0    0    0               00 
SQL: [;
WITH x1 AS (SELECT * FROM t1)
  SELECT (SELECT sum(a) FROM x1), (SELECT max(a) FROM x1), a FROM x1;]
VDBE Trace:
   0 Init             0   44    0               00 Start at 44
  44 Transaction      0    0    3 1             01 usesStmtJournal=0
  45 Goto             0    1    0               00 
   1 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           1   43    0               00 
  43 Halt             0    0    0               00 
SQL: [;
SELECT printf('(%3.3c)',char(1492));]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 (%3.3c)       00 r[3]='(%3.3c)'
REG[3] =   t7[(%3.3c)](8)
   6 Integer       1492    5    0               00 r[5]=1492
REG[5] =  i:1492
   7 Function0        1    5    4 char(-1)      01 r[4]=func(r[5])
REG[5] =  i:1492
REG[4] =   z2[..](8)
   8 Function0        3    3    2 printf(-1)    02 r[2]=func(r[3..4])
REG[3] =   t7[(%3.3c)](8)
REG[4] =   z2[..](8)
REG[2] =   s8[(......)](8)
   9 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s8[(......)](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s8[(......)](8)
   4 Halt             0    0    0               00 
SQL: [;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    3 1             01 usesStmtJournal=0
  16 String8          0    2    0 t1            00 r[2]='t1'
REG[2] =   t2[t1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[t1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:2
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s35[CREATE TABLE t1](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[t1](8)
REG[5] =  i:2
REG[6] =   s35[CREATE TABLE t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s21[sqlite_autoinde](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =  NULL
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s21[sqlite_autoinde](8)
REG[5] =  i:3
REG[6] =  NULL
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s13[t0st_segments](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:6
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s49[CREATE INDEX t0](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s13[t0st_segments](8)
REG[5] =  i:6
REG[6] =   s49[CREATE INDEX t0](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
SQL: [;
PRAGMA integrity_check;]
VDBE Trace:
   0 Init             0  132  129               00 Start at 132
 132 Transaction      0    0    3 1             01 usesStmtJournal=0
 133 Transaction      1    0    0 1             01 usesStmtJournal=0
 134 Goto             0    1    0               00 
   1 Integer         99    1    0               00 r[1]=99
REG[1] =  i:99
   2 IntegrityCk      2    6    1 [4,5,2,6,3,1] 00 
   3 IsNull           2    9    0               00 if r[2]==NULL goto 9
REG[2] =  NULL
   9 OpenRead         1    4    0 2             00 root=4 iDb=0; b
  10 OpenRead         2    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_b_1
  11 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  12 Integer          0    8    0               00 r[8]=0
REG[8] =  i:0
  13 Rewind           1   38    0               00 
  14 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:0
  15 Column           1    1    3               80 r[3]=
REG[3] =   s3[abc](8)
  16 Column           1    0   11               00 r[11]=b.t0st
REG[11] =  i:0
  17 Column           1    1   12               00 r[12]=b.t0st_content
REG[12] =   s3[abc](8)
  18 Rowid            1   13    0               00 r[13]=rowid
REG[13] =  i:1
  19 AddImm           8    1    0               00 r[8]=r[8]+1
REG[8] =  i:0
  20 Found            2   30   11 3             00 key=r[11..13]
REG[11] =  i:0
REG[12] =   s3[abc](8)
REG[13] =  i:1
  30 IsNull          11   37    0               00 if r[11]==NULL goto 37
REG[11] =  i:0
  31 IsNull          12   37    0               00 if r[12]==NULL goto 37
REG[12] =   s3[abc](8)
  32 Next             2   34    0               00 
  33 Goto             0   37    0               00 
  37 Next             1   14    0               00 
  38 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
  39 Count            2    3    0               00 r[3]=count()
REG[3] =  i:1
  40 Eq               8   46    3               90 if r[3]==r[8] goto 46
REG[8] =  i:1
REG[3] =  i:1
  46 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  47 OpenRead         2    6    0 k(3,-,-,)     00 root=6 iDb=0; t0st_segments
  48 OpenRead         3    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t1_1
  49 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
  50 Integer          0    8    0               00 r[8]=0
REG[8] =  i:0
  51 Integer          0    9    0               00 r[9]=0
REG[9] =  i:0
  52 Rewind           1   88    0               00 
  88 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
  89 Count            2    3    0               00 r[3]=count()
REG[3] =  i:0
  90 Eq               8   96    3               90 if r[3]==r[8] goto 96
REG[8] =  i:0
REG[3] =  i:0
  96 Count            3    3    0               00 r[3]=count()
REG[3] =  i:0
  97 Eq               9  103    3               90 if r[3]==r[9] goto 103
REG[9] =  i:0
REG[3] =  i:0
 103 OpenRead         1    1    0 5             00 root=1 iDb=0; sqlite_master
 104 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
 105 Rewind           1  109    0               00 
 106 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:0
 107 Column           1    4    3               80 r[3]=
REG[3] =   s35[CREATE TABLE t1](8)
 108 Next             1  106    0               00 
 106 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:1
 107 Column           1    4    3               80 r[3]=
REG[3] =  NULL
 108 Next             1  106    0               00 
 106 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:2
 107 Column           1    4    3               80 r[3]=
REG[3] =   s62[CREATE TABLE b(](8)
 108 Next             1  106    0               00 
 106 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:3
 107 Column           1    4    3               80 r[3]=
REG[3] =  NULL
 108 Next             1  106    0               00 
 106 AddImm           7    1    0               00 r[7]=r[7]+1
REG[7] =  i:4
 107 Column           1    4    3               80 r[3]=
REG[3] =   s49[CREATE INDEX t0](8)
 108 Next             1  106    0               00 
 109 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
 110 IntegrityCk      2    1    1 [1]           01 
 111 IsNull           2  117    0               00 if r[2]==NULL goto 117
REG[2] =  NULL
 117 OpenRead         1    1    1 5             00 root=1 iDb=1; sqlite_temp_master
 118 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
 119 Rewind           1  123    0               00 
 123 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
REG[2] =   t28[wrong # of entr](8)
 124 AddImm           1  -99    0               00 r[1]=r[1]+-99
REG[1] =  i:99
 125 IfNotZero        1  128    0               00 if r[1]!=0 then r[1]--, goto 128
REG[1] =  i:0
 126 String8          0    3    0 ok            00 r[3]='ok'
REG[3] =   t2[ok](8)
 127 ResultRow        3    1    0               00 output=r[3]
REG[3] =   t2[ok](8)
 128 Halt             0    0    0               00 
SQL: [;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='k00000d' AND type!='trigger' ORDER BY rowid;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    3 1             01 usesStmtJournal=0
  16 String8          0    2    0 k00000d       00 r[2]='k00000d'
REG[2] =   t7[k00000d](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[k00000d](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[k00000d](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[k00000d](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[k00000d](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t7[k00000d](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
SQL: [SELECT a, a, a FROM t1;]
VDBE Trace:
   0 Init             0   10    0               00 Start at 10
  10 Transaction      0    0    3 1             01 usesStmtJournal=0
  11 Goto             0    1    0               00 
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           0    9    0               00 
   9 Halt             0    0    0               00 
SQL: [WITH ss(x) AS ( VALUES(7) UNION ALL SELECT x+7 FROM ss WHERE x<49 )
  SELECT * FROM t1 WHERE a IN (SELECT x FROM ss)
;]
VDBE Trace:
   0 Init             0   54    0               00 Start at 54
  54 Transaction      0    0    3 1             01 usesStmtJournal=0
  55 Integer         49   10    0               00 r[10]=49
REG[10] =  i:49
  56 Integer          7   11    0               00 r[11]=7
REG[11] =  i:7
  57 Goto             0    1    0               00 
   1 OpenRead         3    6    0 k(3,-,-,)     02 root=6 iDb=0; t0st_segments
   2 Explain          2    0    0 SEARCH TABLE t1 USING COVERING INDEX t0st_segments (a=? AND a=?) 00 
   3 Integer         41    3    0               00 r[3]=41; return address
REG[3] =  i:41
   4 Once             0   41    0               00 
   5 OpenEphemeral    4    1    0 k(1,B)        00 nColumn=1; Result of SELECT 3
   6 Explain          6    0    0 LIST SUBQUERY 3 00 
   7 InitCoroutine    4   34    8               00 ss
  34 Explain         34    6    0 SCAN SUBQUERY 2 00 
  35 InitCoroutine    4    0    8               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:7
REG[4] =  i:36
   8 Explain          8    6    0 CO-ROUTINE 2  00 
   9 OpenPseudo       2    5    1               00 1 columns in r[5]
  10 OpenEphemeral    5    1    0               00 nColumn=1; Queue table
  11 Explain         11    8    0 SETUP         00 
  12 Explain         12   11    0 SCAN CONSTANT ROW 00 
  13 Integer          7    6    0               00 r[6]=7
REG[6] =  i:7
  14 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s3[020107...]
  15 NewRowid         5    8    0               00 r[8]=rowid
REG[8] =  i:1
  16 Insert           5    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s3[020107...]
REG[8] =  i:1
  17 Rewind           5   33    0               00 
  18 NullRow          2    0    0               00 
  19 RowData          5    5    0               00 r[5]=data
REG[5] =  s3[020107...]
  20 Delete           5    0    0               00 
  21 Column           2    0    9               00 r[9]=
REG[9] =  i:7
  22 Yield            4    0    0               00 
REG[4] =  i:36
REG[4] =  i:22
  37 Copy             9   12    0               00 r[12]=r[9]; ss.x
REG[12] =  i:7
  38 MakeRecord      12    1   13 A             00 r[13]=mkrec(r[12])
REG[13] =  s3[020107...]
  39 IdxInsert        4   13   12 1             00 key=r[13]
REG[13] =  s3[020107...]
  40 Goto             0   36    0               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:22
REG[4] =  i:36
  23 Explain         23    8    0 RECURSIVE STEP 00 
  24 Explain         24   23    0 SCAN TABLE ss 00 
  25 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:7
  26 Ge              10   32    7 (BINARY)      51 if r[7]>=r[10] goto 32
REG[10] =  i:49
REG[7] =  i:7
  27 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:7
  28 Add             11    7    6               00 r[6]=r[11]+r[7]
REG[11] =  i:7
REG[7] =  i:7
REG[6] =  i:14
  29 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s3[02010E...]
  30 NewRowid         5    8    0               00 r[8]=rowid
REG[8] =  i:1
  31 Insert           5    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s3[02010E...]
REG[8] =  i:1
  32 Goto             0   17    0               00 
  17 Rewind           5   33    0               00 
  18 NullRow          2    0    0               00 
  19 RowData          5    5    0               00 r[5]=data
REG[5] =  s3[02010E...]
  20 Delete           5    0    0               00 
  21 Column           2    0    9               00 r[9]=
REG[9] =  i:14
  22 Yield            4    0    0               00 
REG[4] =  i:36
REG[4] =  i:22
  37 Copy             9   12    0               00 r[12]=r[9]; ss.x
REG[12] =  i:14
  38 MakeRecord      12    1   13 A             00 r[13]=mkrec(r[12])
REG[13] =  s3[02010E...]
  39 IdxInsert        4   13   12 1             00 key=r[13]
REG[13] =  s3[02010E...]
  40 Goto             0   36    0               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:22
REG[4] =  i:36
  23 Explain         23    8    0 RECURSIVE STEP 00 
  24 Explain         24   23    0 SCAN TABLE ss 00 
  25 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:14
  26 Ge              10   32    7 (BINARY)      51 if r[7]>=r[10] goto 32
REG[10] =  i:49
REG[7] =  i:14
  27 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:14
  28 Add             11    7    6               00 r[6]=r[11]+r[7]
REG[11] =  i:7
REG[7] =  i:14
REG[6] =  i:21
  29 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s3[020115...]
  30 NewRowid         5    8    0               00 r[8]=rowid
REG[8] =  i:1
  31 Insert           5    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s3[020115...]
REG[8] =  i:1
  32 Goto             0   17    0               00 
  17 Rewind           5   33    0               00 
  18 NullRow          2    0    0               00 
  19 RowData          5    5    0               00 r[5]=data
REG[5] =  s3[020115...]
  20 Delete           5    0    0               00 
  21 Column           2    0    9               00 r[9]=
REG[9] =  i:21
  22 Yield            4    0    0               00 
REG[4] =  i:36
REG[4] =  i:22
  37 Copy             9   12    0               00 r[12]=r[9]; ss.x
REG[12] =  i:21
  38 MakeRecord      12    1   13 A             00 r[13]=mkrec(r[12])
REG[13] =  s3[020115...]
  39 IdxInsert        4   13   12 1             00 key=r[13]
REG[13] =  s3[020115...]
  40 Goto             0   36    0               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:22
REG[4] =  i:36
  23 Explain         23    8    0 RECURSIVE STEP 00 
  24 Explain         24   23    0 SCAN TABLE ss 00 
  25 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:21
  26 Ge              10   32    7 (BINARY)      51 if r[7]>=r[10] goto 32
REG[10] =  i:49
REG[7] =  i:21
  27 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:21
  28 Add             11    7    6               00 r[6]=r[11]+r[7]
REG[11] =  i:7
REG[7] =  i:21
REG[6] =  i:28
  29 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s3[02011C...]
  30 NewRowid         5    8    0               00 r[8]=rowid
REG[8] =  i:1
  31 Insert           5    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s3[02011C...]
REG[8] =  i:1
  32 Goto             0   17    0               00 
  17 Rewind           5   33    0               00 
  18 NullRow          2    0    0               00 
  19 RowData          5    5    0               00 r[5]=data
REG[5] =  s3[02011C...]
  20 Delete           5    0    0               00 
  21 Column           2    0    9               00 r[9]=
REG[9] =  i:28
  22 Yield            4    0    0               00 
REG[4] =  i:36
REG[4] =  i:22
  37 Copy             9   12    0               00 r[12]=r[9]; ss.x
REG[12] =  i:28
  38 MakeRecord      12    1   13 A             00 r[13]=mkrec(r[12])
REG[13] =  s3[02011C...]
  39 IdxInsert        4   13   12 1             00 key=r[13]
REG[13] =  s3[02011C...]
  40 Goto             0   36    0               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:22
REG[4] =  i:36
  23 Explain         23    8    0 RECURSIVE STEP 00 
  24 Explain         24   23    0 SCAN TABLE ss 00 
  25 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:28
  26 Ge              10   32    7 (BINARY)      51 if r[7]>=r[10] goto 32
REG[10] =  i:49
REG[7] =  i:28
  27 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:28
  28 Add             11    7    6               00 r[6]=r[11]+r[7]
REG[11] =  i:7
REG[7] =  i:28
REG[6] =  i:35
  29 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s3[020123..#]
  30 NewRowid         5    8    0               00 r[8]=rowid
REG[8] =  i:1
  31 Insert           5    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s3[020123..#]
REG[8] =  i:1
  32 Goto             0   17    0               00 
  17 Rewind           5   33    0               00 
  18 NullRow          2    0    0               00 
  19 RowData          5    5    0               00 r[5]=data
REG[5] =  s3[020123..#]
  20 Delete           5    0    0               00 
  21 Column           2    0    9               00 r[9]=
REG[9] =  i:35
  22 Yield            4    0    0               00 
REG[4] =  i:36
REG[4] =  i:22
  37 Copy             9   12    0               00 r[12]=r[9]; ss.x
REG[12] =  i:35
  38 MakeRecord      12    1   13 A             00 r[13]=mkrec(r[12])
REG[13] =  s3[020123..#]
  39 IdxInsert        4   13   12 1             00 key=r[13]
REG[13] =  s3[020123..#]
  40 Goto             0   36    0               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:22
REG[4] =  i:36
  23 Explain         23    8    0 RECURSIVE STEP 00 
  24 Explain         24   23    0 SCAN TABLE ss 00 
  25 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:35
  26 Ge              10   32    7 (BINARY)      51 if r[7]>=r[10] goto 32
REG[10] =  i:49
REG[7] =  i:35
  27 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:35
  28 Add             11    7    6               00 r[6]=r[11]+r[7]
REG[11] =  i:7
REG[7] =  i:35
REG[6] =  i:42
  29 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s3[02012A..*]
  30 NewRowid         5    8    0               00 r[8]=rowid
REG[8] =  i:1
  31 Insert           5    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s3[02012A..*]
REG[8] =  i:1
  32 Goto             0   17    0               00 
  17 Rewind           5   33    0               00 
  18 NullRow          2    0    0               00 
  19 RowData          5    5    0               00 r[5]=data
REG[5] =  s3[02012A..*]
  20 Delete           5    0    0               00 
  21 Column           2    0    9               00 r[9]=
REG[9] =  i:42
  22 Yield            4    0    0               00 
REG[4] =  i:36
REG[4] =  i:22
  37 Copy             9   12    0               00 r[12]=r[9]; ss.x
REG[12] =  i:42
  38 MakeRecord      12    1   13 A             00 r[13]=mkrec(r[12])
REG[13] =  s3[02012A..*]
  39 IdxInsert        4   13   12 1             00 key=r[13]
REG[13] =  s3[02012A..*]
  40 Goto             0   36    0               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:22
REG[4] =  i:36
  23 Explain         23    8    0 RECURSIVE STEP 00 
  24 Explain         24   23    0 SCAN TABLE ss 00 
  25 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:42
  26 Ge              10   32    7 (BINARY)      51 if r[7]>=r[10] goto 32
REG[10] =  i:49
REG[7] =  i:42
  27 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:42
  28 Add             11    7    6               00 r[6]=r[11]+r[7]
REG[11] =  i:7
REG[7] =  i:42
REG[6] =  i:49
  29 MakeRecord       6    1    7               00 r[7]=mkrec(r[6])
REG[7] =  s3[020131..1]
  30 NewRowid         5    8    0               00 r[8]=rowid
REG[8] =  i:1
  31 Insert           5    7    8               08 intkey=r[8] data=r[7]
REG[7] =  s3[020131..1]
REG[8] =  i:1
  32 Goto             0   17    0               00 
  17 Rewind           5   33    0               00 
  18 NullRow          2    0    0               00 
  19 RowData          5    5    0               00 r[5]=data
REG[5] =  s3[020131..1]
  20 Delete           5    0    0               00 
  21 Column           2    0    9               00 r[9]=
REG[9] =  i:49
  22 Yield            4    0    0               00 
REG[4] =  i:36
REG[4] =  i:22
  37 Copy             9   12    0               00 r[12]=r[9]; ss.x
REG[12] =  i:49
  38 MakeRecord      12    1   13 A             00 r[13]=mkrec(r[12])
REG[13] =  s3[020131..1]
  39 IdxInsert        4   13   12 1             00 key=r[13]
REG[13] =  s3[020131..1]
  40 Goto             0   36    0               00 
  36 Yield            4   41    0               00 next row of ss
REG[4] =  i:22
REG[4] =  i:36
  23 Explain         23    8    0 RECURSIVE STEP 00 
  24 Explain         24   23    0 SCAN TABLE ss 00 
  25 Column           2    0    7               00 r[7]=ss.x
REG[7] =  i:49
  26 Ge              10   32    7 (BINARY)      51 if r[7]>=r[10] goto 32
REG[10] =  i:49
REG[7] =  i:49
  32 Goto             0   17    0               00 
  17 Rewind           5   33    0               00 
  33 EndCoroutine     4    0    0               00 
REG[4] =  i:36
  41 Return           3    0    0               00 
REG[3] =  i:41
  42 Last             4   53    0               00 
  43 Column           4    0    1               00 r[1]=
REG[1] =  i:49
  44 IsNull           1   52    0               00 if r[1]==NULL goto 52
REG[1] =  i:49
  45 Column           4    0    2               00 r[2]=
REG[2] =  i:49
  46 IsNull           2   52    0               00 if r[2]==NULL goto 52
REG[2] =  i:49
  47 SeekGE           3   52    1 2             00 key=r[1..2]
REG[1] =  i:49
  52 Prev             4   43    0               00 
  43 Column           4    0    1               00 r[1]=
REG[1] =  i:42
  44 IsNull           1   52    0               00 if r[1]==NULL goto 52
REG[1] =  i:42
  45 Column           4    0    2               00 r[2]=
REG[2] =  i:42
  46 IsNull           2   52    0               00 if r[2]==NULL goto 52
REG[2] =  i:42
  47 SeekGE           3   52    1 2             00 key=r[1..2]
REG[1] =  i:42
  52 Prev             4   43    0               00 
  43 Column           4    0    1               00 r[1]=
REG[1] =  i:35
  44 IsNull           1   52    0               00 if r[1]==NULL goto 52
REG[1] =  i:35
  45 Column           4    0    2               00 r[2]=
REG[2] =  i:35
  46 IsNull           2   52    0               00 if r[2]==NULL goto 52
REG[2] =  i:35
  47 SeekGE           3   52    1 2             00 key=r[1..2]
REG[1] =  i:35
  52 Prev             4   43    0               00 
  43 Column           4    0    1               00 r[1]=
REG[1] =  i:28
  44 IsNull           1   52    0               00 if r[1]==NULL goto 52
REG[1] =  i:28
  45 Column           4    0    2               00 r[2]=
REG[2] =  i:28
  46 IsNull           2   52    0               00 if r[2]==NULL goto 52
REG[2] =  i:28
  47 SeekGE           3   52    1 2             00 key=r[1..2]
REG[1] =  i:28
  52 Prev             4   43    0               00 
  43 Column           4    0    1               00 r[1]=
REG[1] =  i:21
  44 IsNull           1   52    0               00 if r[1]==NULL goto 52
REG[1] =  i:21
  45 Column           4    0    2               00 r[2]=
REG[2] =  i:21
  46 IsNull           2   52    0               00 if r[2]==NULL goto 52
REG[2] =  i:21
  47 SeekGE           3   52    1 2             00 key=r[1..2]
REG[1] =  i:21
  52 Prev             4   43    0               00 
  43 Column           4    0    1               00 r[1]=
REG[1] =  i:14
  44 IsNull           1   52    0               00 if r[1]==NULL goto 52
REG[1] =  i:14
  45 Column           4    0    2               00 r[2]=
REG[2] =  i:14
  46 IsNull           2   52    0               00 if r[2]==NULL goto 52
REG[2] =  i:14
  47 SeekGE           3   52    1 2             00 key=r[1..2]
REG[1] =  i:14
  52 Prev             4   43    0               00 
  43 Column           4    0    1               00 r[1]=
REG[1] =  i:7
  44 IsNull           1   52    0               00 if r[1]==NULL goto 52
REG[1] =  i:7
  45 Column           4    0    2               00 r[2]=
REG[2] =  i:7
  46 IsNull           2   52    0               00 if r[2]==NULL goto 52
REG[2] =  i:7
  47 SeekGE           3   52    1 2             00 key=r[1..2]
REG[1] =  i:7
  52 Prev             4   43    0               00 
  53 Halt             0    0    0               00 
SQL: [SELECT a, lead(a, 3, 'abc') OVER (ORDER BY a) FROM t1
;]
VDBE Trace:
   0 Init             0   67    0               00 Start at 67
  67 Transaction      0    0    3 1             01 usesStmtJournal=0
  68 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   20    7               00 subquery_2
  20 Integer          1    9    0               00 r[9]=1
REG[9] =  i:1
  21 OpenDup          8    1    0               00 
  22 Explain         22    0    0 SCAN SUBQUERY 2 00 
  23 InitCoroutine    3    0    7               00 
  24 Yield            3   43    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:24
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    7    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t1_1
  10 Explain         10    7    0 SCAN TABLE t1 USING COVERING INDEX sqlite_autoindex_t1_1 00 
  11 Rewind           7   19    4 0             00 
  19 EndCoroutine     3    0    0               00 
REG[3] =  i:24
  43 Rewind           2   59    0               00 
  59 ResetSorter      1    0    0               00 
  60 Goto             0   66    0               00 
  66 Halt             0    0    0               00 
SQL: [PRAGMA default_cache_size;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Transaction      0    0    0               00 
   2 ReadCookie       0    1    3               00 
REG[1] =  i:0
   3 IfPos            1    9    0               00 if r[1]>0 then r[1]-=0, goto 9
REG[1] =  i:0
   4 Integer          0    2    0               00 r[2]=0
REG[2] =  i:0
   5 Subtract         1    2    1               00 r[1]=r[2]-r[1]
REG[1] =  i:0
REG[2] =  i:0
REG[1] =  i:0
   6 IfPos            1    9    0               00 if r[1]>0 then r[1]-=0, goto 9
REG[1] =  i:0
   7 Integer       -2000    1    0               00 r[1]=-2000
REG[1] =  i:-2000
   8 Noop             0    0    0               00 
   9 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:-2000
  10 Halt             0    0    0               00 
SQL: [;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t0st_segments' AND type!='trigger' ORDER BY rowid;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    3 1             01 usesStmtJournal=0
  16 String8          0    2    0 t0st_segments 00 r[2]='t0st_segments'
REG[2] =   t13[t0st_segments](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s1[b](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t13[t0st_segments](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
SQL: [;
SELECT a, max(a) FILTER (WHERE (a%2)=0) OVER w FROM t1 
  WINDOW w AS (ORDER BY a)
;]
VDBE Trace:
   0 Init             0   95    0               00 Start at 95
  95 Transaction      0    0    3 1             01 usesStmtJournal=0
  96 Integer          2   10    0               00 r[10]=2
REG[10] =  i:2
  97 Integer          0   11    0               00 r[11]=0
REG[11] =  i:0
  98 Goto             0    1    0               00 
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   21    7               00 subquery_2
  21 Integer          1   12    0               00 r[12]=1
REG[12] =  i:1
  22 Explain         22    0    0 SCAN SUBQUERY 2 00 
  23 InitCoroutine    3    0    7               00 
  24 Yield            3   65    0               00 next row of subquery_2
REG[3] =  i:6
REG[3] =  i:24
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    6    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t1_1
  10 Explain         10    7    0 SCAN TABLE t1 USING COVERING INDEX sqlite_autoindex_t1_1 00 
  11 Rewind           7   20    4 0             00 
  20 EndCoroutine     3    0    0               00 
REG[3] =  i:24
  65 Rewind           2   87    0               00 
  87 ResetSorter      1    0    0               00 
  88 Goto             0   94    0               00 
  94 Halt             0    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f011f672859 in __GI_abort () at abort.c:79
#2  0x00007f011f672729 in __assert_fail_base (fmt=0x7f011f808588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=<optimized out>)
    at assert.c:92
#3  0x00007f011f683fd6 in __GI___assert_fail (assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=0x223e82 "int sqlite3Select(Parse *, Select *, SelectDest *)") at assert.c:101
#4  0x00000000002fcfa0 in sqlite3Select (pParse=0x7ffcfe7227c0, p=0x23887a0, pDest=0x7ffcfe721058) at sqlite3.c:130468
#5  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffcfe7227c0, pExpr=0x239b3a0) at sqlite3.c:99820
#6  0x000000000034bbfd in sqlite3ExprCodeTarget (pParse=0x7ffcfe7227c0, pExpr=0x239b3a0, target=7) at sqlite3.c:100770
#7  0x00000000003790ab in codeEqualityTerm (pParse=0x7ffcfe7227c0, pTerm=0x23a03e0, pLevel=0x23a0740, iEq=1, bRev=0, iTarget=7) at sqlite3.c:136648
#8  0x000000000037a706 in codeAllEqualityTerms (pParse=0x7ffcfe7227c0, pLevel=0x23a0740, bRev=0, nExtraReg=0, pzAff=0x7ffcfe7215d8) at sqlite3.c:136869
#9  0x0000000000375cb8 in sqlite3WhereCodeOneLoopStart (pParse=0x7ffcfe7227c0, v=0x238ea10, pWInfo=0x23a0350, iLevel=1, pLevel=0x23a0740, notReady=18446744073709551614) at sqlite3.c:137776
#10 0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7ffcfe7227c0, pTabList=0x238c940, pWhere=0x239bd00, pOrderBy=0x0, pResultSet=0x2392250, wctrlFlags=0, iAuxArg=320) at sqlite3.c:145128
#11 0x00000000002fdcea in sqlite3Select (pParse=0x7ffcfe7227c0, p=0x23a49a0, pDest=0x7ffcfe721bb0) at sqlite3.c:130695
#12 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffcfe721de0, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffcfe7227c0) at sqlite3.c:151581
#13 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffcfe721de0, yymajor=1, yyminor=...) at sqlite3.c:152877
#14 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffcfe7227c0, 
    zSql=0x23b4d4f ";;\nCREATE INDEX t0st_segdir ON t1(a DESC, a ASC) ;SELECT a, max(a) OVER (ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)\n  FROM t1\n;;\nSELECT max(a), max(a) OVER (ORDER BY a) FROM t1 GROUP BY a;;\n"..., pzErrMsg=0x7ffcfe7229a0) at sqlite3.c:154013
#15 0x00000000002a1683 in sqlite3Prepare (db=0x23832b0, 
    zSql=0x2386b5d ";\nSELECT\n    SrcWord, t1.a\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.a= (\n      SELECT BeginningId FROM (\n        SELECT "..., nBytes=3357, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffcfe722ad8, pzTail=0x7ffcfe722ac0) at sqlite3.c:124303
#16 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x23832b0, 
    zSql=0x2386b5d ";\nSELECT\n    SrcWord, t1.a\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.a= (\n      SELECT BeginningId FROM (\n        SELECT "..., nBytes=3357, prepFlags=128, pOld=0x0, ppStmt=0x7ffcfe722ad8, pzTail=0x7ffcfe722ac0) at sqlite3.c:124403
#17 0x000000000029247f in sqlite3_prepare_v2 (db=0x23832b0, 
    zSql=0x2386b5d ";\nSELECT\n    SrcWord, t1.a\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.a= (\n      SELECT BeginningId FROM (\n        SELECT "..., nBytes=3357, ppStmt=0x7ffcfe722ad8, pzTail=0x7ffcfe722ac0) at sqlite3.c:124487
#18 0x0000000000256bd0 in main (argc=1, argv=0x7ffcfe722c88) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 6355] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
