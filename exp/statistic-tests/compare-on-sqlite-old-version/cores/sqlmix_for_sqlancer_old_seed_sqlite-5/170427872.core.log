GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000007,sig:06,src:017363+016548,time:3246950,execs:501619,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;
PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;
SELECT printf('%*.*f',5,2,3.141592653);]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 %*.*f         00 r[3]='%*.*f'
REG[3] =   t5[%*.*f](8)
   6 Integer          5    4    0               00 r[4]=5
REG[4] =  i:5
   7 Integer          2    5    0               00 r[5]=2
REG[5] =  i:2
   8 Real             0    6    0 3.141592653   00 r[6]=3.141592653
REG[6] =  r:3.14159
   9 Function0       15    3    2 printf(-1)    04 r[2]=func(r[3..6])
REG[3] =   t5[%*.*f](8)
REG[4] =  i:5
REG[5] =  i:2
REG[6] =  r:3.14159
REG[2] =   s5[ 3.14](8)
  10 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s5[ 3.14](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s5[ 3.14](8)
   4 Halt             0    0    0               00 
SQL: [;
CREATE INDEX b ON t1(a DESC, a DESC) ;]
VDBE Trace:
   0 Init             0   34    0               00 Start at 34
  34 Transaction      0    1    1 0             01 usesStmtJournal=0
  35 Goto             0    1    0               00 
   1 Noop             0   33    0               00 
   2 CreateBtree      0    1    2               00 r[1]=root iDb=0 flags=2
REG[1] =  i:3
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
REG[2] =  i:2
   5 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
   6 String8          0    4    0 b             00 r[4]='b'
REG[4] =   t1[b](8)
   7 String8          0    5    0 t1            00 r[5]='t1'
REG[5] =   t2[t1](8)
   8 Copy             1    6    0               00 r[6]=r[1]
REG[6] =  i:3
   9 String8          0    7    0 CREATE INDEX b ON t1(a DESC, a DESC)  00 r[7]='CREATE INDEX b ON t1(a DESC, a DESC) '
REG[7] =   t37[CREATE INDEX b ](8)
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
REG[8] =  s52[06170F110157696E6465786274310343.....Windexbt1.C]
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
REG[8] =  s52[06170F110157696E6465786274310343.....Windexbt1.C]
REG[2] =  i:2
  12 SorterOpen       3    0    2 k(3,-,-,)     00 
  13 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  14 Rewind           1   21    0               00 
  21 OpenWrite        2    1    0 k(3,-,-,)     11 root=1 iDb=0
  22 SorterSort       3   27    0               00 
  27 Close            1    0    0               00 
  28 Close            2    0    0               00 
  29 Close            3    0    0               00 
  30 SetCookie        0    1    2               00 
  31 ParseSchema      0    0    0 name='b' AND type='index' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 0             00 usesStmtJournal=0
  16 String8          0    2    0 b             00 r[2]='b'
REG[2] =   t1[b](8)
  17 String8          0    3    0 index         00 r[3]='index'
REG[3] =   t5[index](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[b](8)
REG[1] =   s1[b](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
REG[3] =   t5[index](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[b](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s37[CREATE INDEX b ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[b](8)
REG[5] =  i:3
REG[6] =   s37[CREATE INDEX b ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  32 Expire           0    1    0               00 
  33 Halt             0    0    0               00 
SQL: [DETACH t2;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   2 Null             0    2    0               00 r[2]=NULL
REG[2] =  NULL
   3 String8          0    3    0 t2            00 r[3]='t2'
REG[3] =   t2[t2](8)
   4 Function0        0    3    4 sqlite_detach(1) 01 r[4]=func(r[3])
REG[3] =   t2[t2](8)
SQL: [;
SELECT printf('|%9.8c|%-9.8c|','*','*');]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 |%9.8c|%-9.8c| 00 r[3]='|%9.8c|%-9.8c|'
REG[3] =   t14[|%9.8c|%-9.8c|](8)
   6 String8          0    4    0 *             00 r[4]='*'
REG[4] =   t1[*](8)
   7 String8          0    5    0 *             00 r[5]='*'
REG[5] =   t1[*](8)
   8 Function0        7    3    2 printf(-1)    03 r[2]=func(r[3..5])
REG[3] =   t14[|%9.8c|%-9.8c|](8)
REG[4] =   t1[*](8)
REG[5] =   t1[*](8)
REG[2] =   s21[| ********|****](8)
   9 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s21[| ********|****](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s21[| ********|****](8)
   4 Halt             0    0    0               00 
SQL: [;
ATTACH printf('file:%09000x/x.db?mode=memory&cache=shared',1) AS aux1;]
VDBE Trace:
   0 Init             0    7    0               00 Start at 7
   7 String8          0    6    0 file:%09000x/x.db?mode=memory&cache=shared 00 r[6]='file:%09000x/x.db?mode=memory&cache=shared'
REG[6] =   t42[file:%09000x/x.](8)
   8 Integer          1    7    0               00 r[7]=1
REG[7] =  i:1
   9 Function0        3    6    5 printf(-1)    02 r[5]=func(r[6..7])
REG[6] =   t42[file:%09000x/x.](8)
REG[7] =  i:1
REG[5] =   s9035[file:0000000000](8)
  10 Goto             0    1    0               00 
   1 SCopy            5    1    0               00 r[1]=r[5]
REG[1] =   e9035[file:0000000000](8)
   2 String8          0    2    0 aux1          00 r[2]='aux1'
REG[2] =   t4[aux1](8)
   3 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
   4 Function0        0    1    4 sqlite_attach(3) 03 r[4]=func(r[1..3])
REG[1] =   e9035[file:0000000000](8)
REG[2] =   t4[aux1](8)
REG[3] =  NULL
SQL: [;
ROLLBACK;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    2 1             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s2[t1](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:2
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =   s40[CREATE TABLE t1](8)
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s2[t1](8)
REG[2] =  i:2
REG[3] =   s40[CREATE TABLE t1](8)
   9 Next             0    5    0               01 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
REG[1] =   s1[b](8)
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
REG[2] =  i:3
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
REG[3] =   s37[CREATE INDEX b ](8)
   8 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =   s1[b](8)
REG[2] =  i:3
REG[3] =   s37[CREATE INDEX b ](8)
   9 Next             0    5    0               01 
  10 Halt             0    0    0               00 
SQL: [INSERT INTO t1(a,a,a,a) VALUES(1,2,4,3),(2,4,6,5),(3,10,30,20);]
VDBE Trace:
   0 Init             0   37    0               00 Start at 37
  37 Transaction      0    1    2 1             01 usesStmtJournal=1
  38 Integer          0   17    0               00 r[17]=0
REG[17] =  i:0
  39 Goto             0    1    0               00 
   1 InitCoroutine    3   19    2               00 
  19 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
  20 OpenWrite        1    3    0 k(3,-,-,)     00 root=3 iDb=0; b
  21 Yield            3   36    0               00 
REG[3] =  i:1
REG[3] =  i:21
   2 Explain          2    0    0 SCAN 3 CONSTANT ROWS 00 
   3 Integer          1    4    0               00 r[4]=1
REG[4] =  i:1
   4 Integer          2    5    0               00 r[5]=2
REG[5] =  i:2
   5 Integer          4    6    0               00 r[6]=4
REG[6] =  i:4
   6 Integer          3    7    0               00 r[7]=3
REG[7] =  i:3
   7 Yield            3    0    0               00 
REG[3] =  i:21
REG[3] =  i:7
  22 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
  23 SCopy            4    2    0               00 r[2]=r[4]
REG[2] =  i:1
  24 Abortable        0    0    0               00 
  25 Gt              17   27    2 (BINARY)      51 if r[2]>r[17] goto 27
REG[17] =  i:0
REG[2] =  i:1
  27 Noop             0    0    0               00 uniqueness check for b
  28 SCopy            2   13    0               00 r[13]=r[2]; a
REG[13] =  i:1
  29 SCopy            2   14    0               00 r[14]=r[2]; a
REG[14] =  i:1
  30 IntCopy          1   15    0               00 r[15]=r[1]; rowid
REG[15] =  i:1
  31 MakeRecord      13    3   12               00 r[12]=mkrec(r[13..15]); for b
REG[12] =  s4[04090909....]
  32 IdxInsert        1   12   13 3             10 key=r[12]
REG[12] =  s4[04090909....]
  33 MakeRecord       2    1   16               00 r[16]=mkrec(r[2])
REG[16] =  s2[0209..]
  34 Insert           0   16    1 t1            39 intkey=r[1] data=r[16]
REG[16] =  s2[0209..]
REG[1] =  i:1
  35 Goto             0   21    0               00 
  21 Yield            3   36    0               00 
REG[3] =  i:7
REG[3] =  i:21
   8 Integer          2    4    0               00 r[4]=2
REG[4] =  i:2
   9 Integer          4    5    0               00 r[5]=4
REG[5] =  i:4
  10 Integer          6    6    0               00 r[6]=6
REG[6] =  i:6
  11 Integer          5    7    0               00 r[7]=5
REG[7] =  i:5
  12 Yield            3    0    0               00 
REG[3] =  i:21
REG[3] =  i:12
  22 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
  23 SCopy            4    2    0               00 r[2]=r[4]
REG[2] =  i:2
  24 Abortable        0    0    0               00 
  25 Gt              17   27    2 (BINARY)      51 if r[2]>r[17] goto 27
REG[17] =  i:0
REG[2] =  i:2
  27 Noop             0    0    0               00 uniqueness check for b
  28 SCopy            2   13    0               00 r[13]=r[2]; a
REG[13] =  i:2
  29 SCopy            2   14    0               00 r[14]=r[2]; a
REG[14] =  i:2
  30 IntCopy          1   15    0               00 r[15]=r[1]; rowid
REG[15] =  i:2
  31 MakeRecord      13    3   12               00 r[12]=mkrec(r[13..15]); for b
REG[12] =  s7[04010101020202.......]
  32 IdxInsert        1   12   13 3             10 key=r[12]
REG[12] =  s7[04010101020202.......]
  33 MakeRecord       2    1   16               00 r[16]=mkrec(r[2])
REG[16] =  s3[020102...]
  34 Insert           0   16    1 t1            39 intkey=r[1] data=r[16]
REG[16] =  s3[020102...]
REG[1] =  i:2
  35 Goto             0   21    0               00 
  21 Yield            3   36    0               00 
REG[3] =  i:12
REG[3] =  i:21
  13 Integer          3    4    0               00 r[4]=3
REG[4] =  i:3
  14 Integer         10    5    0               00 r[5]=10
REG[5] =  i:10
  15 Integer         30    6    0               00 r[6]=30
REG[6] =  i:30
  16 Integer         20    7    0               00 r[7]=20
REG[7] =  i:20
  17 Yield            3    0    0               00 
REG[3] =  i:21
REG[3] =  i:17
  22 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:3
  23 SCopy            4    2    0               00 r[2]=r[4]
REG[2] =  i:3
  24 Abortable        0    0    0               00 
  25 Gt              17   27    2 (BINARY)      51 if r[2]>r[17] goto 27
REG[17] =  i:0
REG[2] =  i:3
  27 Noop             0    0    0               00 uniqueness check for b
  28 SCopy            2   13    0               00 r[13]=r[2]; a
REG[13] =  i:3
  29 SCopy            2   14    0               00 r[14]=r[2]; a
REG[14] =  i:3
  30 IntCopy          1   15    0               00 r[15]=r[1]; rowid
REG[15] =  i:3
  31 MakeRecord      13    3   12               00 r[12]=mkrec(r[13..15]); for b
REG[12] =  s7[04010101030303.......]
  32 IdxInsert        1   12   13 3             10 key=r[12]
REG[12] =  s7[04010101030303.......]
  33 MakeRecord       2    1   16               00 r[16]=mkrec(r[2])
REG[16] =  s3[020103...]
  34 Insert           0   16    1 t1            39 intkey=r[1] data=r[16]
REG[16] =  s3[020103...]
REG[1] =  i:3
  35 Goto             0   21    0               00 
  21 Yield            3   36    0               00 
REG[3] =  i:17
REG[3] =  i:21
  18 EndCoroutine     3    0    0               00 
REG[3] =  i:21
  36 Halt             0    0    0               00 
SQL: [;
SELECT printf('(%-8c)',char(11106));]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 (%-8c)        00 r[3]='(%-8c)'
REG[3] =   t6[(%-8c)](8)
   6 Integer       11106    5    0               00 r[5]=11106
REG[5] =  i:11106
   7 Function0        1    5    4 char(-1)      01 r[4]=func(r[5])
REG[5] =  i:11106
REG[4] =   z3[...](8)
   8 Function0        3    3    2 printf(-1)    02 r[2]=func(r[3..4])
REG[3] =   t6[(%-8c)](8)
REG[4] =   z3[...](8)
REG[2] =   s12[(...       )](8)
   9 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s12[(...       )](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s12[(...       )](8)
   4 Halt             0    0    0               00 
SQL: [SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t0st_content' AND type!='trigger' ORDER BY rowid;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 1             01 usesStmtJournal=0
  16 String8          0    2    0 t0st_content  00 r[2]='t0st_content'
REG[2] =   t12[t0st_content](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t12[t0st_content](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t12[t0st_content](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
SQL: [;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='t1' AND type!='trigger' ORDER BY rowid;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 1             01 usesStmtJournal=0
  16 String8          0    2    0 t1            00 r[2]='t1'
REG[2] =   t2[t1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[t1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:2
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s40[CREATE TABLE t1](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[t1](8)
REG[5] =  i:2
REG[6] =   s40[CREATE TABLE t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[index](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[index](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s1[b](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:3
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s37[CREATE INDEX b ](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s1[b](8)
REG[5] =  i:3
REG[6] =   s37[CREATE INDEX b ](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
SQL: [SELECT a, a, a FROM t1;]
VDBE Trace:
   0 Init             0   10    0               00 Start at 10
  10 Transaction      0    0    2 1             01 usesStmtJournal=0
  11 Goto             0    1    0               00 
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           0    9    0               00 
   4 Column           0    0    1               00 r[1]=t1.a
REG[1] =  i:1
   5 Column           0    0    2               00 r[2]=t1.a
REG[2] =  i:1
   6 Column           0    0    3               00 r[3]=t1.a
REG[3] =  i:1
   7 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =  i:1
REG[2] =  i:1
REG[3] =  i:1
   8 Next             0    4    0               01 
   4 Column           0    0    1               00 r[1]=t1.a
REG[1] =  i:2
   5 Column           0    0    2               00 r[2]=t1.a
REG[2] =  i:2
   6 Column           0    0    3               00 r[3]=t1.a
REG[3] =  i:2
   7 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =  i:2
REG[2] =  i:2
REG[3] =  i:2
   8 Next             0    4    0               01 
   4 Column           0    0    1               00 r[1]=t1.a
REG[1] =  i:3
   5 Column           0    0    2               00 r[2]=t1.a
REG[2] =  i:3
   6 Column           0    0    3               00 r[3]=t1.a
REG[3] =  i:3
   7 ResultRow        1    3    0               00 output=r[1..3]
REG[1] =  i:3
REG[2] =  i:3
REG[3] =  i:3
   8 Next             0    4    0               01 
   9 Halt             0    0    0               00 
SQL: [;
WITH i(x) AS (
    VALUES($min) UNION ALL SELECT x+1 FROM i WHERE x < $max
  )
  SELECT x FROM i JOIN i AS j USING (x);]
VDBE Trace:
   0 Init             0   83    0               00 Start at 83
  83 Variable         2    7    0 $max          00 r[7]=parameter(2,$max)
REG[7] =  NULL
  84 Integer          1    8    0               00 r[8]=1
REG[8] =  i:1
  85 Goto             0    1    0               00 
   1 Integer         31    1    0               00 r[1]=31
REG[1] =  i:31
   2 Once             0   31    0               00 materialize "i"
   3 Explain          3    0    0 MATERIALIZE 2 00 
   4 OpenEphemeral    0    1    0               00 nColumn=1
   5 OpenPseudo       2    2    1               00 1 columns in r[2]
   6 OpenEphemeral    4    1    0               00 nColumn=1; Queue table
   7 Explain          7    3    0 SETUP         00 
   8 Explain          8    7    0 SCAN CONSTANT ROW 00 
   9 Variable         1    3    0 $min          00 r[3]=parameter(1,$min)
REG[3] =  NULL
  10 MakeRecord       3    1    4               00 r[4]=mkrec(r[3])
REG[4] =  s2[0200..]
  11 NewRowid         4    5    0               00 r[5]=rowid
REG[5] =  i:1
  12 Insert           4    4    5               08 intkey=r[5] data=r[4]
REG[4] =  s2[0200..]
REG[5] =  i:1
  13 Rewind           4   31    0               00 
  14 NullRow          2    0    0               00 
  15 RowData          4    2    0               00 r[2]=data
REG[2] =  s2[0200..]
  16 Delete           4    0    0               00 
  17 Column           2    0    6               00 r[6]=
REG[6] =  NULL
  18 MakeRecord       6    1    4               00 r[4]=mkrec(r[6])
REG[4] =  s2[0200..]
  19 NewRowid         0    5    0               00 r[5]=rowid
REG[5] =  i:1
  20 Insert           0    4    5               08 intkey=r[5] data=r[4]
REG[4] =  s2[0200..]
REG[5] =  i:1
  21 Explain         21    3    0 RECURSIVE STEP 00 
  22 Explain         22   21    0 SCAN TABLE i  00 
  23 Column           2    0    4               00 r[4]=i.x
REG[4] =  NULL
  24 Ge               7   30    4 (BINARY)      51 if r[4]>=r[7] goto 30
REG[7] =  NULL
REG[4] =  NULL
  30 Goto             0   13    0               00 
  13 Rewind           4   31    0               00 
  31 Return           1    0    0               00 end i
REG[1] =  i:31
  32 Integer         62    9    0               00 r[9]=62
REG[9] =  i:62
  33 Once             0   62    0               00 materialize "i"
  34 Explain         34    0    0 MATERIALIZE 2 00 
  35 OpenEphemeral    1    1    0               00 nColumn=1
  36 OpenPseudo       3   10    1               00 1 columns in r[10]
  37 OpenEphemeral    5    1    0               00 nColumn=1; Queue table
  38 Explain         38   34    0 SETUP         00 
  39 Explain         39   38    0 SCAN CONSTANT ROW 00 
  40 Variable         1   11    0 $min          00 r[11]=parameter(1,$min)
REG[11] =  NULL
  41 MakeRecord      11    1   12               00 r[12]=mkrec(r[11])
REG[12] =  s2[0200..]
  42 NewRowid         5   13    0               00 r[13]=rowid
REG[13] =  i:1
  43 Insert           5   12   13               08 intkey=r[13] data=r[12]
REG[12] =  s2[0200..]
REG[13] =  i:1
  44 Rewind           5   62    0               00 
  45 NullRow          3    0    0               00 
  46 RowData          5   10    0               00 r[10]=data
REG[10] =  s2[0200..]
  47 Delete           5    0    0               00 
  48 Column           3    0   14               00 r[14]=
REG[14] =  NULL
  49 MakeRecord      14    1   12               00 r[12]=mkrec(r[14])
REG[12] =  s2[0200..]
  50 NewRowid         1   13    0               00 r[13]=rowid
REG[13] =  i:1
  51 Insert           1   12   13               08 intkey=r[13] data=r[12]
REG[12] =  s2[0200..]
REG[13] =  i:1
  52 Explain         52   34    0 RECURSIVE STEP 00 
  53 Explain         53   52    0 SCAN TABLE i  00 
  54 Column           3    0   12               00 r[12]=i.x
REG[12] =  NULL
  55 Ge               7   61   12 (BINARY)      51 if r[12]>=r[7] goto 61
REG[7] =  NULL
REG[12] =  NULL
  61 Goto             0   44    0               00 
  44 Rewind           5   62    0               00 
  62 Return           9    0    0               00 end i
REG[9] =  i:62
  63 Explain         63    0    0 SCAN SUBQUERY 2 00 
  64 Rewind           0   82    0               00 
  65 Once             0   73    0               00 
  66 OpenAutoindex    6    2    0 k(2,B,)       00 nColumn=2; for i
  67 Rewind           1   73    0               00 
  68 Column           1    0   16               00 r[16]=i.x
REG[16] =  NULL
  69 Rowid            1   17    0               00 r[17]=rowid
REG[17] =  i:1
  70 MakeRecord      16    2   15               00 r[15]=mkrec(r[16..17])
REG[15] =  s3[030009...]
  71 IdxInsert        6   15    0               10 key=r[15]
REG[15] =  s3[030009...]
  72 Next             1   68    0               03 
  73 Explain         73    0    0 SEARCH SUBQUERY 2 AS j USING AUTOMATIC COVERING INDEX (x=?) 00 
  74 Column           0    0   18               00 r[18]=i.x
REG[18] =  NULL
  75 IsNull          18   81    0               00 if r[18]==NULL goto 81
REG[18] =  NULL
  81 Next             0   65    0               01 
  82 Halt             0    0    0               00 
SQL: [;
SELECT printf('(%!-5.3s)','הנה מה־טוב ומה־נעים שבת אחים גם־יחד');]
VDBE Trace:
   0 Init             0    5    0               00 Start at 5
   5 String8          0    3    0 (%!-5.3s)     00 r[3]='(%!-5.3s)'
REG[3] =   t9[(%!-5.3s)](8)
   6 String8          0    4    0 הנה מה־טוב ומה־נעים שבת אחים גם־יחד 00 r[4]='הנה מה־טוב ומה־נעים שבת אחים גם־יחד'
REG[4] =   t65[...... ........](8)
   7 Function0        3    3    2 printf(-1)    02 r[2]=func(r[3..4])
REG[3] =   t9[(%!-5.3s)](8)
REG[4] =   t65[...... ........](8)
REG[2] =   s10[(......  )](8)
   8 Goto             0    1    0               00 
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Copy             2    1    0               00 r[1]=r[2]
REG[1] =   s10[(......  )](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s10[(......  )](8)
   4 Halt             0    0    0               00 
SQL: [;;
SELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='1' AND type!='trigger' ORDER BY rowid;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    2 1             01 usesStmtJournal=0
  16 String8          0    2    0 1             00 r[2]='1'
REG[2] =   t1[1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[1](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t1[1](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f83125cb859 in __GI_abort () at abort.c:79
#2  0x00007f83125cb729 in __assert_fail_base (fmt=0x7f8312761588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=<optimized out>)
    at assert.c:92
#3  0x00007f83125dcfd6 in __GI___assert_fail (assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=0x223e82 "int sqlite3Select(Parse *, Select *, SelectDest *)") at assert.c:101
#4  0x00000000002fcfa0 in sqlite3Select (pParse=0x7ffcb567e500, p=0x17e53c0, pDest=0x7ffcb567cd98) at sqlite3.c:130468
#5  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffcb567e500, pExpr=0x17e6fe0) at sqlite3.c:99820
#6  0x000000000034bbfd in sqlite3ExprCodeTarget (pParse=0x7ffcb567e500, pExpr=0x17e6fe0, target=7) at sqlite3.c:100770
#7  0x00000000003790ab in codeEqualityTerm (pParse=0x7ffcb567e500, pTerm=0x17e87e0, pLevel=0x17e8b40, iEq=1, bRev=0, iTarget=7) at sqlite3.c:136648
#8  0x000000000037a706 in codeAllEqualityTerms (pParse=0x7ffcb567e500, pLevel=0x17e8b40, bRev=0, nExtraReg=0, pzAff=0x7ffcb567d318) at sqlite3.c:136869
#9  0x0000000000375cb8 in sqlite3WhereCodeOneLoopStart (pParse=0x7ffcb567e500, v=0x17dbdc0, pWInfo=0x17e8750, iLevel=1, pLevel=0x17e8b40, notReady=18446744073709551614) at sqlite3.c:137776
#10 0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7ffcb567e500, pTabList=0x17dd530, pWhere=0x17d9840, pOrderBy=0x0, pResultSet=0x17dd080, wctrlFlags=0, iAuxArg=320) at sqlite3.c:145128
#11 0x00000000002fdcea in sqlite3Select (pParse=0x7ffcb567e500, p=0x17d9390, pDest=0x7ffcb567d8f0) at sqlite3.c:130695
#12 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffcb567db20, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffcb567e500) at sqlite3.c:151581
#13 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffcb567db20, yymajor=1, yyminor=...) at sqlite3.c:152877
#14 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffcb567e500, 
    zSql=0x17d165f ";;\nPRAGMA integrity_check;;\nSELECT name, rootpage, sql FROM 'main'.sqlite_master WHERE tbl_name='k00000d' AND type!='trigger' ORDER BY rowid;WITH ss(x) AS ( VALUES(7) UNION ALL SELECT x+7 FROM ss WHER"..., pzErrMsg=0x7ffcb567e6e0) at sqlite3.c:154013
#15 0x00000000002a1683 in sqlite3Prepare (db=0x17ce2b0, 
    zSql=0x17cf481 ";\nSELECT\n    SrcWord, t1.a\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.a= (\n      SELECT BeginningId FROM (\n        SELECT "..., nBytes=630, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffcb567e818, pzTail=0x7ffcb567e800) at sqlite3.c:124303
#16 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x17ce2b0, 
    zSql=0x17cf481 ";\nSELECT\n    SrcWord, t1.a\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.a= (\n      SELECT BeginningId FROM (\n        SELECT "..., nBytes=630, prepFlags=128, pOld=0x0, ppStmt=0x7ffcb567e818, pzTail=0x7ffcb567e800) at sqlite3.c:124403
#17 0x000000000029247f in sqlite3_prepare_v2 (db=0x17ce2b0, 
    zSql=0x17cf481 ";\nSELECT\n    SrcWord, t1.a\n    FROM \n      (SELECT 'FACTORING' AS SrcWord UNION SELECT 'SWIMMING' AS SrcWord )\n    LEFT JOIN \n      t1\n    WHERE t1.a= (\n      SELECT BeginningId FROM (\n        SELECT "..., nBytes=630, ppStmt=0x7ffcb567e818, pzTail=0x7ffcb567e800) at sqlite3.c:124487
#18 0x0000000000256bd0 in main (argc=1, argv=0x7ffcb567e9c8) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 6056] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
