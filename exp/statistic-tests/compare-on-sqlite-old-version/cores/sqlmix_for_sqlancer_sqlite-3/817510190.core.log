GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000179,sig:06,src:022502+021096,time:3479000,execs:604027,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [PRAGMA foreign_keys=OFF;]
VDBE Trace:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    0 0             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
  10 Halt             0    0    0               00 
SQL: [;CREATE TABLE t1 (x INTEGER NOT NULL,collate4t1 INTEGER NOT NULL,a INTEGER NOT 
    NULL,collate4i1 INTEGER NOT NULL,PRIMARY KEY(x));]
VDBE Trace:
   0 Init             0   28    0               00 Start at 28
  28 Transaction      0    1    0 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:0
   2 If               3    5    0               00 
REG[3] =  i:0
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
REG[2] =  i:2
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......]
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......]
REG[1] =  i:1
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
REG[1] =  i:1
  16 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:1
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
REG[5] =  i:1
  18 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  19 String8          0    7    0 t1            00 r[7]='t1'
REG[7] =   t2[t1](8)
  20 String8          0    8    0 t1            00 r[8]='t1'
REG[8] =   t2[t1](8)
  21 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:2
  22 String8          0   10    0 CREATE TABLE t1 (x INTEGER NOT NULL,collate4t1 INTEGER NOT NULL,a INTEGER NOT 
    NULL,collate4i1 INTEGER NOT NULL,PRIMARY KEY(x)) 00 r[10]='CREATE TABLE t1 (x INTEGER NOT NULL,collate4t1 INTEGER NOT NULL,a INTEGER NOT 
    NULL,coll
REG[10] =   t131[CREATE TABLE t1](8)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s148[071711110182137461626C6574317431.......tablet1t1]
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s148[071711110182137461626C6574317431.......tablet1t1]
REG[5] =  i:1
  25 SetCookie        0    1    1               00 
  26 ParseSchema      0    0    0 tbl_name='t1' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    0    1 0             00 usesStmtJournal=0
  16 String8          0    2    0 t1            00 r[2]='t1'
REG[2] =   t2[t1](8)
  17 String8          0    3    0 trigger       00 r[3]='trigger'
REG[3] =   t7[trigger](8)
  18 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
REG[2] =   t2[t1](8)
REG[1] =   s2[t1](8)
   7 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
REG[3] =   t7[trigger](8)
REG[1] =   s5[table](8)
   9 Column           0    1    4               00 r[4]=sqlite_master.name
REG[4] =   s2[t1](8)
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
REG[5] =  i:2
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
REG[6] =   s131[CREATE TABLE t1](8)
  12 ResultRow        4    3    0               00 output=r[4..6]
REG[4] =   s2[t1](8)
REG[5] =  i:2
REG[6] =   s131[CREATE TABLE t1](8)
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  27 Halt             0    0    0               00 
SQL: [SELECT 'CREATE TABLE collate4t1('    || group_concat(quote(name) || ' ' || type, ', ')    || ')',max((cid+1) * (type='INTEGER' COLLATE nocase AND pk=1))-1 FROM pragma_table_info('t1', ?)
;]
VDBE Trace:
   0 Init             0   34    0               00 Start at 34
  34 Transaction      0    0    1 0             01 usesStmtJournal=0
  35 String8          0   16    0               00 r[16]=' '
REG[16] =   t1[ ](8)
  36 Integer          1   17    0               00 r[17]=1
REG[17] =  i:1
  37 String8          0   20    0 INTEGER       00 r[20]='INTEGER'
REG[20] =   t7[INTEGER](8)
  38 String8          0   24    0 CREATE TABLE collate4t1( 00 r[24]='CREATE TABLE collate4t1('
REG[24] =   t24[CREATE TABLE co](8)
  39 String8          0   25    0 )             00 r[25]=')'
REG[25] =   t1[)](8)
  40 Goto             0    1    0               00 
   1 Null             0    1    6               00 r[1..6]=NULL
REG[1] =  NULL
   2 VOpen            0    0    0 vtab:E53C20   00 
   3 Explain          3    0    0 SCAN TABLE pragma_table_info VIRTUAL TABLE INDEX 0: 00 
   4 String8          0    9    0 t1            00 r[9]='t1'
REG[9] =   t2[t1](8)
   5 Variable         1   10    0               00 r[10]=parameter(1,)
REG[10] =  NULL
   6 Integer          0    7    0               00 r[7]=0
REG[7] =  i:0
   7 Integer          2    8    0               00 r[8]=2
REG[8] =  i:2
   8 VFilter          0   27    7               00 iplan=r[7] zplan=''
REG[7] =  i:0
SQL: [PRAGMA table_info='t1']
VDBE Trace:
   0 Init             0   30    0               00 Start at 30
  30 Transaction      0    0    1 0             01 usesStmtJournal=0
  31 Goto             0    1    0               00 
   1 Integer          0    1    0               00 r[1]=0
REG[1] =  i:0
   2 String8          0    2    0 x             00 r[2]='x'
REG[2] =   t1[x](8)
   3 String8          0    3    0 INTEGER       00 r[3]='INTEGER'
REG[3] =   t7[INTEGER](8)
   4 Integer          1    4    0               00 r[4]=1
REG[4] =  i:1
   5 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
   6 Integer          1    6    0               00 r[6]=1
REG[6] =  i:1
   7 ResultRow        1    6    0               00 output=r[1..6]
REG[1] =  i:0
REG[2] =   t1[x](8)
REG[3] =   t7[INTEGER](8)
REG[4] =  i:1
REG[5] =  NULL
REG[6] =  i:1
   9 VColumn          0    1   15               00 r[15]=vcolumn(1); pragma_table_info.name
REG[15] =   s1[x](8)
  10 Function0        0   15   14 quote(1)      01 r[14]=func(r[15])
REG[15] =   s1[x](8)
REG[14] =   z3['x'](8)
  11 Concat          16   14   13               00 r[13]=r[14]+r[16]
REG[16] =   t1[ ](8)
REG[14] =   z3['x'](8)
REG[13] =   s4['x' ](8)
  12 VColumn          0    2   14               00 r[14]=vcolumn(2); pragma_table_info.type
REG[14] =   s7[INTEGER](8)
  13 Concat          14   13   11               00 r[11]=r[13]+r[14]
REG[14] =   s7[INTEGER](8)
REG[13] =   s4['x' ](8)
REG[11] =   s11['x' INTEGER](8)
  14 String8          0   12    0 ,             00 r[12]=', '
REG[12] =   t2[, ](8)
  15 AggStep          0   11    1 group_concat(2) 02 accum=r[1] step(r[11..12])
REG[11] =   s11['x' INTEGER](8)
REG[12] =   t2[, ](8)
  16 VColumn          0    0   15               00 r[15]=vcolumn(0); pragma_table_info.cid
REG[15] =  i:0
  17 Add             17   15   13               00 r[13]=r[17]+r[15]
REG[17] =  i:1
REG[15] =  i:0
REG[13] =  i:1
  18 VColumn          0    2   19               00 r[19]=vcolumn(2); pragma_table_info.type
REG[19] =   s7[INTEGER](8)
  19 Eq              20   18   19 (NOCASE)      61 r[18] = (r[19]==r[20])
REG[20] =   t7[INTEGER](8)
REG[19] =   s7[INTEGER](8)
REG[18] =  i:1
  20 VColumn          0    5   21               00 r[21]=vcolumn(5); pragma_table_info.pk
REG[21] =  i:1
  21 Eq              17   19   21 (BINARY)      61 r[19] = (r[21]==r[17])
REG[17] =  i:1
REG[21] =  i:1
REG[19] =  i:1
  22 And             19   18   15               00 r[15]=(r[19] && r[18])
REG[19] =  i:1
REG[18] =  i:1
REG[15] =  i:1
  23 Multiply        15   13   14               00 r[14]=r[15]*r[13]
REG[15] =  i:1
REG[13] =  i:1
REG[14] =  i:1
  24 CollSeq          0    0    0 (NOCASE)      00 
  25 AggStep          0   14    2 max(1)        01 accum=r[2] step(r[14])
REG[14] =  i:1
  26 VNext            0    9    0               00 
   8 Integer          1    1    0               00 r[1]=1
REG[1] =  i:1
   9 String8          0    2    0 collate4t1    00 r[2]='collate4t1'
REG[2] =   t10[collate4t1](8)
  10 String8          0    3    0 INTEGER       00 r[3]='INTEGER'
REG[3] =   t7[INTEGER](8)
  11 Integer          1    4    0               00 r[4]=1
REG[4] =  i:1
  12 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  13 Integer          0    6    0               00 r[6]=0
REG[6] =  i:0
  14 ResultRow        1    6    0               00 output=r[1..6]
REG[1] =  i:1
REG[2] =   t10[collate4t1](8)
REG[3] =   t7[INTEGER](8)
REG[4] =  i:1
REG[5] =  NULL
REG[6] =  i:0
   9 VColumn          0    1   15               00 r[15]=vcolumn(1); pragma_table_info.name
REG[15] =   s10[collate4t1](8)
  10 Function         0   15   14 quote(1)      01 r[14]=func(r[15])
REG[15] =   s10[collate4t1](8)
REG[14] =   z12['collate4t1'](8)
  11 Concat          16   14   13               00 r[13]=r[14]+r[16]
REG[16] =   t1[ ](8)
REG[14] =   z12['collate4t1'](8)
REG[13] =   s13['collate4t1' ](8)
  12 VColumn          0    2   14               00 r[14]=vcolumn(2); pragma_table_info.type
REG[14] =   s7[INTEGER](8)
  13 Concat          14   13   11               00 r[11]=r[13]+r[14]
REG[14] =   s7[INTEGER](8)
REG[13] =   s13['collate4t1' ](8)
REG[11] =   s20['collate4t1' IN](8)
  14 String           2   12    0 ,             00 r[12]=', ' (len=2)
REG[12] =   t2[, ](8)
  15 AggStep1         0   11    1 group_concat(2) 02 accum=r[1] step(r[11..12])
REG[11] =   s20['collate4t1' IN](8)
REG[12] =   t2[, ](8)
  16 VColumn          0    0   15               00 r[15]=vcolumn(0); pragma_table_info.cid
REG[15] =  i:1
  17 Add             17   15   13               00 r[13]=r[17]+r[15]
REG[17] =  i:1
REG[15] =  i:1
REG[13] =  i:2
  18 VColumn          0    2   19               00 r[19]=vcolumn(2); pragma_table_info.type
REG[19] =   s7[INTEGER](8)
  19 Eq              20   18   19 (NOCASE)      61 r[18] = (r[19]==r[20])
REG[20] =   t7[INTEGER](8)
REG[19] =   s7[INTEGER](8)
REG[18] =  i:1
  20 VColumn          0    5   21               00 r[21]=vcolumn(5); pragma_table_info.pk
REG[21] =  i:0
  21 Eq              17   19   21 (BINARY)      61 r[19] = (r[21]==r[17])
REG[17] =  i:1
REG[21] =  i:0
REG[19] =  i:0
  22 And             19   18   15               00 r[15]=(r[19] && r[18])
REG[19] =  i:0
REG[18] =  i:1
REG[15] =  i:0
  23 Multiply        15   13   14               00 r[14]=r[15]*r[13]
REG[15] =  i:0
REG[13] =  i:2
REG[14] =  i:0
  24 CollSeq          0    0    0 (NOCASE)      00 
  25 AggStep1         0   14    2 max(1)        01 accum=r[2] step(r[14])
REG[14] =  i:0
  26 VNext            0    9    0               00 
  15 Integer          2    1    0               00 r[1]=2
REG[1] =  i:2
  16 String8          0    2    0 a             00 r[2]='a'
REG[2] =   t1[a](8)
  17 String8          0    3    0 INTEGER       00 r[3]='INTEGER'
REG[3] =   t7[INTEGER](8)
  18 Integer          1    4    0               00 r[4]=1
REG[4] =  i:1
  19 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  20 Integer          0    6    0               00 r[6]=0
REG[6] =  i:0
  21 ResultRow        1    6    0               00 output=r[1..6]
REG[1] =  i:2
REG[2] =   t1[a](8)
REG[3] =   t7[INTEGER](8)
REG[4] =  i:1
REG[5] =  NULL
REG[6] =  i:0
   9 VColumn          0    1   15               00 r[15]=vcolumn(1); pragma_table_info.name
REG[15] =   s1[a](8)
  10 Function         0   15   14 quote(1)      01 r[14]=func(r[15])
REG[15] =   s1[a](8)
REG[14] =   z3['a'](8)
  11 Concat          16   14   13               00 r[13]=r[14]+r[16]
REG[16] =   t1[ ](8)
REG[14] =   z3['a'](8)
REG[13] =   s4['a' ](8)
  12 VColumn          0    2   14               00 r[14]=vcolumn(2); pragma_table_info.type
REG[14] =   s7[INTEGER](8)
  13 Concat          14   13   11               00 r[11]=r[13]+r[14]
REG[14] =   s7[INTEGER](8)
REG[13] =   s4['a' ](8)
REG[11] =   s11['a' INTEGER](8)
  14 String           2   12    0 ,             00 r[12]=', ' (len=2)
REG[12] =   t2[, ](8)
  15 AggStep1         0   11    1 group_concat(2) 02 accum=r[1] step(r[11..12])
REG[11] =   s11['a' INTEGER](8)
REG[12] =   t2[, ](8)
  16 VColumn          0    0   15               00 r[15]=vcolumn(0); pragma_table_info.cid
REG[15] =  i:2
  17 Add             17   15   13               00 r[13]=r[17]+r[15]
REG[17] =  i:1
REG[15] =  i:2
REG[13] =  i:3
  18 VColumn          0    2   19               00 r[19]=vcolumn(2); pragma_table_info.type
REG[19] =   s7[INTEGER](8)
  19 Eq              20   18   19 (NOCASE)      61 r[18] = (r[19]==r[20])
REG[20] =   t7[INTEGER](8)
REG[19] =   s7[INTEGER](8)
REG[18] =  i:1
  20 VColumn          0    5   21               00 r[21]=vcolumn(5); pragma_table_info.pk
REG[21] =  i:0
  21 Eq              17   19   21 (BINARY)      61 r[19] = (r[21]==r[17])
REG[17] =  i:1
REG[21] =  i:0
REG[19] =  i:0
  22 And             19   18   15               00 r[15]=(r[19] && r[18])
REG[19] =  i:0
REG[18] =  i:1
REG[15] =  i:0
  23 Multiply        15   13   14               00 r[14]=r[15]*r[13]
REG[15] =  i:0
REG[13] =  i:3
REG[14] =  i:0
  24 CollSeq          0    0    0 (NOCASE)      00 
  25 AggStep1         0   14    2 max(1)        01 accum=r[2] step(r[14])
REG[14] =  i:0
  26 VNext            0    9    0               00 
  22 Integer          3    1    0               00 r[1]=3
REG[1] =  i:3
  23 String8          0    2    0 collate4i1    00 r[2]='collate4i1'
REG[2] =   t10[collate4i1](8)
  24 String8          0    3    0 INTEGER       00 r[3]='INTEGER'
REG[3] =   t7[INTEGER](8)
  25 Integer          1    4    0               00 r[4]=1
REG[4] =  i:1
  26 Null             0    5    0               00 r[5]=NULL
REG[5] =  NULL
  27 Integer          0    6    0               00 r[6]=0
REG[6] =  i:0
  28 ResultRow        1    6    0               00 output=r[1..6]
REG[1] =  i:3
REG[2] =   t10[collate4i1](8)
REG[3] =   t7[INTEGER](8)
REG[4] =  i:1
REG[5] =  NULL
REG[6] =  i:0
   9 VColumn          0    1   15               00 r[15]=vcolumn(1); pragma_table_info.name
REG[15] =   s10[collate4i1](8)
  10 Function         0   15   14 quote(1)      01 r[14]=func(r[15])
REG[15] =   s10[collate4i1](8)
REG[14] =   z12['collate4i1'](8)
  11 Concat          16   14   13               00 r[13]=r[14]+r[16]
REG[16] =   t1[ ](8)
REG[14] =   z12['collate4i1'](8)
REG[13] =   s13['collate4i1' ](8)
  12 VColumn          0    2   14               00 r[14]=vcolumn(2); pragma_table_info.type
REG[14] =   s7[INTEGER](8)
  13 Concat          14   13   11               00 r[11]=r[13]+r[14]
REG[14] =   s7[INTEGER](8)
REG[13] =   s13['collate4i1' ](8)
REG[11] =   s20['collate4i1' IN](8)
  14 String           2   12    0 ,             00 r[12]=', ' (len=2)
REG[12] =   t2[, ](8)
  15 AggStep1         0   11    1 group_concat(2) 02 accum=r[1] step(r[11..12])
REG[11] =   s20['collate4i1' IN](8)
REG[12] =   t2[, ](8)
  16 VColumn          0    0   15               00 r[15]=vcolumn(0); pragma_table_info.cid
REG[15] =  i:3
  17 Add             17   15   13               00 r[13]=r[17]+r[15]
REG[17] =  i:1
REG[15] =  i:3
REG[13] =  i:4
  18 VColumn          0    2   19               00 r[19]=vcolumn(2); pragma_table_info.type
REG[19] =   s7[INTEGER](8)
  19 Eq              20   18   19 (NOCASE)      61 r[18] = (r[19]==r[20])
REG[20] =   t7[INTEGER](8)
REG[19] =   s7[INTEGER](8)
REG[18] =  i:1
  20 VColumn          0    5   21               00 r[21]=vcolumn(5); pragma_table_info.pk
REG[21] =  i:0
  21 Eq              17   19   21 (BINARY)      61 r[19] = (r[21]==r[17])
REG[17] =  i:1
REG[21] =  i:0
REG[19] =  i:0
  22 And             19   18   15               00 r[15]=(r[19] && r[18])
REG[19] =  i:0
REG[18] =  i:1
REG[15] =  i:0
  23 Multiply        15   13   14               00 r[14]=r[15]*r[13]
REG[15] =  i:0
REG[13] =  i:4
REG[14] =  i:0
  24 CollSeq          0    0    0 (NOCASE)      00 
  25 AggStep1         0   14    2 max(1)        01 accum=r[2] step(r[14])
REG[14] =  i:0
  26 VNext            0    9    0               00 
  29 Halt             0    0    0               00 
  27 AggFinal         1    2    0 group_concat(2) 00 accum=r[1] N=2
  28 AggFinal         2    1    0 max(1)        00 accum=r[2] N=1
  29 Concat           1   24   14               00 r[14]=r[24]+r[1]
REG[1] =   z68['x' INTEGER, 'c](8)
REG[24] =   t24[CREATE TABLE co](8)
REG[14] =   s92[CREATE TABLE co](8)
  30 Concat          25   14   22               00 r[22]=r[14]+r[25]
REG[25] =   t1[)](8)
REG[14] =   s92[CREATE TABLE co](8)
REG[22] =   s93[CREATE TABLE co](8)
  31 Subtract        17    2   23               00 r[23]=r[2]-r[17]
REG[17] =  i:1
REG[2] =  i:1
REG[23] =  i:0
  32 ResultRow       22    2    0               00 output=r[22..23]
REG[22] =   s93[CREATE TABLE co](8)
REG[23] =  i:0
  33 Halt             0    0    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f4940573859 in __GI_abort () at abort.c:79
#2  0x00007f4940573729 in __assert_fail_base (fmt=0x7f4940709588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=<optimized out>)
    at assert.c:92
#3  0x00007f4940584fd6 in __GI___assert_fail (assertion=0x21b92e "pItem->addrFillSub==0", file=0x22873d "sqlite3.c", line=130468, function=0x223e82 "int sqlite3Select(Parse *, Select *, SelectDest *)") at assert.c:101
#4  0x00000000002fcfa0 in sqlite3Select (pParse=0x7ffe24080b60, p=0xe5c960, pDest=0x7ffe2407e878) at sqlite3.c:130468
#5  0x00000000002fd24a in sqlite3Select (pParse=0x7ffe24080b60, p=0xe58200, pDest=0x7ffe2407eb28) at sqlite3.c:130524
#6  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffe24080b60, pExpr=0xe57df0) at sqlite3.c:99820
#7  0x000000000034bbfd in sqlite3ExprCodeTarget (pParse=0x7ffe24080b60, pExpr=0xe57df0, target=5) at sqlite3.c:100770
#8  0x000000000034e173 in sqlite3ExprCodeTemp (pParse=0x7ffe24080b60, pExpr=0xe57df0, pReg=0x7ffe2407ee28) at sqlite3.c:101065
#9  0x0000000000351a17 in sqlite3ExprIfFalse (pParse=0x7ffe24080b60, pExpr=0xe57df0, dest=-49, jumpIfNull=16) at sqlite3.c:101592
#10 0x0000000000351577 in sqlite3ExprIfFalse (pParse=0x7ffe24080b60, pExpr=0xe57ca0, dest=-49, jumpIfNull=16) at sqlite3.c:101497
#11 0x0000000000378815 in sqlite3WhereCodeOneLoopStart (pParse=0x7ffe24080b60, v=0xe344b0, pWInfo=0xe5bd30, iLevel=0, pLevel=0xe5c0c8, notReady=18446744073709551615) at sqlite3.c:138358
#12 0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7ffe24080b60, pTabList=0xe44b30, pWhere=0xe5bca0, pOrderBy=0x0, pResultSet=0x0, wctrlFlags=32, iAuxArg=16) at sqlite3.c:145128
#13 0x00000000003777a8 in sqlite3WhereCodeOneLoopStart (pParse=0x7ffe24080b60, v=0xe344b0, pWInfo=0xe55da0, iLevel=0, pLevel=0xe56138, notReady=18446744073709551615) at sqlite3.c:138143
#14 0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7ffe24080b60, pTabList=0xe44b30, pWhere=0xe55d50, pOrderBy=0x0, pResultSet=0x0, wctrlFlags=32, iAuxArg=3) at sqlite3.c:145128
#15 0x00000000003777a8 in sqlite3WhereCodeOneLoopStart (pParse=0x7ffe24080b60, v=0xe344b0, pWInfo=0xe39dc0, iLevel=0, pLevel=0xe3a158, notReady=18446744073709551615) at sqlite3.c:138143
#16 0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7ffe24080b60, pTabList=0xe44b30, pWhere=0xe412f0, pOrderBy=0x0, pResultSet=0xe381a0, wctrlFlags=0, iAuxArg=320) at sqlite3.c:145128
#17 0x00000000002fdcea in sqlite3Select (pParse=0x7ffe24080b60, p=0xe34960, pDest=0x7ffe2407ff50) at sqlite3.c:130695
#18 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffe24080180, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffe24080b60) at sqlite3.c:151581
#19 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffe24080180, yymajor=1, yyminor=...) at sqlite3.c:152877
#20 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffe24080b60, zSql=0xe3748a ";;\n;SELECT x FROM t1 WHERE x LIKE '^-2%' ESCAPE '^';", pzErrMsg=0x7ffe24080d40) at sqlite3.c:154013
#21 0x00000000002a1683 in sqlite3Prepare (db=0xe2cd60, 
    zSql=0xe2cb0e "SELECT x FROM (\n    SELECT * FROM (\n      SELECT * FROM t1 WHERE x%1 OR (SELECT sum(x) OVER (ORDER BY x%2))\n    ) \n    WHERE x=1 OR ( (SELECT sum(x) OVER (ORDER BY x%4)) AND x<=10 )\n  ) \n  WHERE x=1 O"..., nBytes=302, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffe24080e78, pzTail=0x7ffe24080e60) at sqlite3.c:124303
#22 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0xe2cd60, 
    zSql=0xe2cb0e "SELECT x FROM (\n    SELECT * FROM (\n      SELECT * FROM t1 WHERE x%1 OR (SELECT sum(x) OVER (ORDER BY x%2))\n    ) \n    WHERE x=1 OR ( (SELECT sum(x) OVER (ORDER BY x%4)) AND x<=10 )\n  ) \n  WHERE x=1 O"..., nBytes=302, prepFlags=128, pOld=0x0, ppStmt=0x7ffe24080e78, pzTail=0x7ffe24080e60) at sqlite3.c:124403
#23 0x000000000029247f in sqlite3_prepare_v2 (db=0xe2cd60, 
    zSql=0xe2cb0e "SELECT x FROM (\n    SELECT * FROM (\n      SELECT * FROM t1 WHERE x%1 OR (SELECT sum(x) OVER (ORDER BY x%2))\n    ) \n    WHERE x=1 OR ( (SELECT sum(x) OVER (ORDER BY x%4)) AND x<=10 )\n  ) \n  WHERE x=1 O"..., nBytes=302, ppStmt=0x7ffe24080e78, pzTail=0x7ffe24080e60) at sqlite3.c:124487
#24 0x0000000000256bd0 in main (argc=1, argv=0x7ffe24081028) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 58695] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
