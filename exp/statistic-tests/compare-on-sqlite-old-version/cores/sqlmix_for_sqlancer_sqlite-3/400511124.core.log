GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000109,sig:06,src:019734+012652,time:2408088,execs:365820,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;SELECT*FROM"temp".sqlite_temp_master ORDER BY rowid
;]
VDBE Program Listing:
   0 Init             0   13    0               00 Start at 13
   1 Noop             1    7    0               00 
   2 OpenRead         0    1    1 5             00 root=1 iDb=1; sqlite_temp_master
   3 Explain          3    0    0 SCAN TABLE sqlite_temp_master 00 
   4 Rewind           0   12    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_temp_master.type
   6 Column           0    1    2               00 r[2]=sqlite_temp_master.name
   7 Column           0    2    3               00 r[3]=sqlite_temp_master.tbl_name
   8 Column           0    3    4               00 r[4]=sqlite_temp_master.rootpage
   9 Column           0    4    5               00 r[5]=sqlite_temp_master.sql
  10 ResultRow        1    5    0               00 output=r[1..5]
  11 Next             0    5    0               01 
  12 Halt             0    0    0               00 
  13 Transaction      1    0    0 0             01 usesStmtJournal=0
  14 Goto             0    1    0               00 
SQL: [SELECT (1, 2, NULL) IS (1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               E1 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               3    1    3               E9 r[1] = (r[3]==r[3])
   5 IfNot            1    7    0               00 
   6 Eq               4    1    4               E9 r[1] = (r[4]==r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL: [PRAGMA integrity_check(collate4t1);]
VDBE Program Listing:
   0 Init             0   80   77               00 Start at 80
   1 Integer         99    1    0               00 r[1]=99
   2 IntegrityCk      2    4    1 [3,4,2,1]     00 
   3 IsNull           2    9    0               00 if r[2]==NULL goto 9
   4 String8          0    3    0 *** in database main ***
 00 r[3]='*** in database main ***
'
   5 Concat           2    3    3               00 r[3]=r[3]+r[2]
   6 ResultRow        3    1    0               00 output=r[3]
   7 IfPos            1    9    1               00 if r[1]>0 then r[1]-=1, goto 9
   8 Halt             0    0    0               00 
   9 OpenRead         1    3    0 2             00 root=3 iDb=0; collate4t1
  10 OpenRead         2    4    0 k(2,,)        00 root=4 iDb=0; sqlite_autoindex_collate4t1_1
  11 Integer          0    7    0               00 r[7]=0
  12 Integer          0    8    0               00 r[8]=0
  13 Rewind           1   36    0               00 
  14 AddImm           7    1    0               00 r[7]=r[7]+1
  15 Column           1    1    3               80 r[3]=
  16 Column           1    0   10               00 r[10]=collate4t1.collate4i1
  17 Rowid            1   11    0               00 r[11]=rowid
  18 AddImm           8    1    0               00 r[8]=r[8]+1
  19 Found            2   29   10 2             00 key=r[10..11]
  20 String8          0    3    0 row           00 r[3]='row '
  21 Concat           7    3    3               00 r[3]=r[3]+r[7]
  22 String8          0    4    0  missing from index  00 r[4]=' missing from index '
  23 Concat           4    3    3               00 r[3]=r[3]+r[4]
  24 String8          0    4    0 sqlite_autoindex_collate4t1_1 00 r[4]='sqlite_autoindex_collate4t1_1'
  25 Concat           4    3    3               00 r[3]=r[3]+r[4]
  26 ResultRow        3    1    0               00 output=r[3]
  27 IfPos            1   35    1               00 if r[1]>0 then r[1]-=1, goto 35
  28 Halt             0    0    0               00 
  29 IsNull          10   35    0               00 if r[10]==NULL goto 35
  30 Next             2   32    0               00 
  31 Goto             0   35    0               00 
  32 IdxGT            2   35   10 1             00 key=r[10]
  33 String8          0    3    0 non-unique entry in index  00 r[3]='non-unique entry in index '
  34 Goto             0   24    0               00 
  35 Next             1   14    0               00 
  36 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
  37 Count            2    3    0               00 r[3]=count()
  38 Eq               8   44    3               90 if r[3]==r[8] goto 44
  39 String8          0    4    0 sqlite_autoindex_collate4t1_1 00 r[4]='sqlite_autoindex_collate4t1_1'
  40 Concat           4    2    3               00 r[3]=r[2]+r[4]
  41 ResultRow        3    1    0               00 output=r[3]
  42 IfPos            1   44    1               00 if r[1]>0 then r[1]-=1, goto 44
  43 Halt             0    0    0               00 
  44 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  45 Integer          0    7    0               00 r[7]=0
  46 Rewind           1   50    0               00 
  47 AddImm           7    1    0               00 r[7]=r[7]+1
  48 Column           1    0    3               80 r[3]=
  49 Next             1   47    0               00 
  50 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
  51 OpenRead         1    1    0 5             00 root=1 iDb=0; sqlite_master
  52 Integer          0    7    0               00 r[7]=0
  53 Rewind           1   57    0               00 
  54 AddImm           7    1    0               00 r[7]=r[7]+1
  55 Column           1    4    3               80 r[3]=
  56 Next             1   54    0               00 
  57 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
  58 IntegrityCk      2    1    1 [1]           01 
  59 IsNull           2   65    0               00 if r[2]==NULL goto 65
  60 String8          0    3    0 *** in database temp ***
 00 r[3]='*** in database temp ***
'
  61 Concat           2    3    3               00 r[3]=r[3]+r[2]
  62 ResultRow        3    1    0               00 output=r[3]
  63 IfPos            1   65    1               00 if r[1]>0 then r[1]-=1, goto 65
  64 Halt             0    0    0               00 
  65 OpenRead         1    1    1 5             00 root=1 iDb=1; sqlite_temp_master
  66 Integer          0    7    0               00 r[7]=0
  67 Rewind           1   71    0               00 
  68 AddImm           7    1    0               00 r[7]=r[7]+1
  69 Column           1    4    3               80 r[3]=
  70 Next             1   68    0               00 
  71 String8          0    2    0 wrong # of entries in index  00 r[2]='wrong # of entries in index '
  72 AddImm           1  -99    0               00 r[1]=r[1]+-99
  73 IfNotZero        1   76    0               00 if r[1]!=0 then r[1]--, goto 76
  74 String8          0    3    0 ok            00 r[3]='ok'
  75 ResultRow        3    1    0               00 output=r[3]
  76 Halt             0    0    0               00 
  77 String8          0    3    0 database disk image is malformed 00 r[3]='database disk image is malformed'
  78 Goto             0   75    0               00 
  79 Halt             0    0    0               00 
  80 Transaction      0    0    2 0             01 usesStmtJournal=0
  81 Transaction      1    0    0 0             01 usesStmtJournal=0
  82 Goto             0    1    0               00 
SQL: [SELECT (1, 2, NULL) IS NOT (1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               E1 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               3    1    3               E9 r[1] = (r[3]!=r[3])
   5 If               1    7    0               00 
   6 Ne               4    1    4               E9 r[1] = (r[4]!=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, 2, NULL) == (SELECT 1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Null             0   10    0               00 r[10]=NULL
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (NULL, NULL, NULL) IS (NULL, NULL, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               E1 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    2               E9 r[1] = (r[2]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               2    1    2               E9 r[1] = (r[2]==r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Null             0    2    0               00 r[2]=NULL
  10 Goto             0    1    0               00 
SQL: [SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Null             0    3    0               00 r[3]=NULL
   9 Null             0    4    0               00 r[4]=NULL
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Null             0    8    0               00 r[8]=NULL
  20 Null             0    9    0               00 r[9]=NULL
  21 Null             0   10    0               00 r[10]=NULL
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (1, NULL, 1) == (1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               61 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    3               69 r[1] = (r[3]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               2    1    2               69 r[1] = (r[2]==r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 1) IS (1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               E1 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    3               E9 r[1] = (r[3]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               2    1    2               E9 r[1] = (r[2]==r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               E1 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               2    1    3               E9 r[1] = (r[3]!=r[2])
   5 If               1    7    0               00 
   6 Ne               2    1    2               E9 r[1] = (r[2]!=r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Null             0    4    0               00 r[4]=NULL
  10 Integer          1    5    0               00 r[5]=1
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          1    9    0               00 r[9]=1
  21 Integer          1   10    0               00 r[10]=1
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (1, NULL, 1) == (1, 1, 2)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               61 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    3               69 r[1] = (r[3]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               4    1    2               69 r[1] = (r[2]==r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          2    4    0               00 r[4]=2
  12 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 1) IS NOT (1, 1, 2)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               E1 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               2    1    3               E9 r[1] = (r[3]!=r[2])
   5 If               1    7    0               00 
   6 Ne               4    1    2               E9 r[1] = (r[2]!=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          2    4    0               00 r[4]=2
  12 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 2)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Null             0    4    0               00 r[4]=NULL
  10 Integer          1    5    0               00 r[5]=1
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          1    9    0               00 r[9]=1
  21 Integer          2   10    0               00 r[10]=2
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Ne               8    1    3               61 r[1] = (r[3]!=r[8])
  25 If               1   29    0               00 
  26 Ne               9    1    4               69 r[1] = (r[4]!=r[9])
  27 If               1   29    0               00 
  28 Ne              10    1    5               69 r[1] = (r[5]!=r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, 1, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          1    5    0               00 r[5]=1
  16 Integer          2    4    0               00 r[4]=2
  17 Lt               4    1    5               61 r[1] = (r[5]<r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE NOT (1, 1, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    2 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          1    4    0               00 r[4]=1
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 1, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    2               61 r[1] = (r[2]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Gt               4    1    4               61 r[1] = (r[4]>r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, 1, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Gt               5    1    4               61 r[1] = (r[4]>r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          1    5    0               00 r[5]=1
  16 Integer          2    4    0               00 r[4]=2
  17 Gt               4    1    5               61 r[1] = (r[5]>r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Gt               5    1    4               61 r[1] = (r[4]>r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE NOT (1, 1, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 If               1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Gt               5    1    4               61 r[1] = (r[4]>r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          1    5    0               00 r[5]=1
  16 Integer          2    4    0               00 r[4]=2
  17 Gt               4    1    5               61 r[1] = (r[5]>r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Gt               5    1    4               61 r[1] = (r[4]>r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT (1, 1, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               3    1    2               61 r[1] = (r[2]<r[3])
   5 ElseNotEq        0    7    0               00 
   6 Le               4    1    4               61 r[1] = (r[4]<=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, 1, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          1    5    0               00 r[5]=1
  16 Integer          2    4    0               00 r[4]=2
  17 Lt               4    1    5               61 r[1] = (r[5]<r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Le               5    1    4               61 r[1] = (r[4]<=r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT (1, 1, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    2               61 r[1] = (r[2]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Ge               4    1    4               61 r[1] = (r[4]>=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE NOT (1, 1, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    2 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          1    4    0               00 r[4]=1
  15 Integer          2    3    0               00 r[3]=2
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Ge               4    1    3               61 r[1] = (r[3]>=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 2, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    3               61 r[1] = (r[3]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Ge               4    1    4               61 r[1] = (r[4]>=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE NOT (1, 2, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    2 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          2    4    0               00 r[4]=2
  15 Integer          2    3    0               00 r[3]=2
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Ge               4    1    3               61 r[1] = (r[3]>=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 If               1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          3    5    0               00 r[5]=3
  16 Integer          2    4    0               00 r[4]=2
  17 Lt               4    1    5               61 r[1] = (r[5]<r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, 3, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          3    5    0               00 r[5]=3
  16 Integer          2    4    0               00 r[4]=2
  17 Lt               4    1    5               61 r[1] = (r[5]<r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Le               5    1    4               61 r[1] = (r[4]<=r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE NOT (1, 3, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 If               1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          3    5    0               00 r[5]=3
  16 Integer          2    4    0               00 r[4]=2
  17 Lt               4    1    5               61 r[1] = (r[5]<r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Le               5    1    4               61 r[1] = (r[4]<=r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, 3, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Gt               5    1    4               61 r[1] = (r[4]>r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          3    5    0               00 r[5]=3
  16 Integer          2    4    0               00 r[4]=2
  17 Gt               4    1    5               61 r[1] = (r[5]>r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Ge               5    1    4               61 r[1] = (r[4]>=r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    2 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               4    1    3               61 r[1] = (r[3]>r[4])
   5 ElseNotEq        0    7    0               00 
   6 Gt               5    1    5               61 r[1] = (r[5]>r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          2    4    0               00 r[4]=2
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    2 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Integer          2    3    0               00 r[3]=2
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               4    1    3               61 r[1] = (r[3]<r[4])
   5 ElseNotEq        0    7    0               00 
   6 Le               5    1    5               61 r[1] = (r[5]<=r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          2    4    0               00 r[4]=2
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, NULL, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Gt               5    1    4               61 r[1] = (r[4]>r[5])
  14 ElseNotEq        0   22    0               00 
  15 Null             0    5    0               00 r[5]=NULL
  16 Integer          2    4    0               00 r[4]=2
  17 Gt               4    1    5               61 r[1] = (r[5]>r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Ge               5    1    4               61 r[1] = (r[4]>=r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE NOT (1, NULL, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    2 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Integer          2    3    0               00 r[3]=2
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Ge               4    1    3               61 r[1] = (r[3]>=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, 3, 3) < (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  14 ElseNotEq        0   22    0               00 
  15 Integer          3    5    0               00 r[5]=3
  16 Null             0    4    0               00 r[4]=NULL
  17 Lt               4    1    5               61 r[1] = (r[5]<r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Lt               5    1    4               61 r[1] = (r[4]<r[5])
  22 Goto             0    1    0               00 
SQL: [SELECT (1, 3, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               4    1    3               61 r[1] = (r[3]>r[4])
   5 ElseNotEq        0    7    0               00 
   6 Gt               3    1    3               61 r[1] = (r[3]>r[3])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          3    3    0               00 r[3]=3
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    3               61 r[1] = (r[3]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Gt               4    1    4               61 r[1] = (r[4]>r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE NOT (1, NULL, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    2 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Null             0    3    0               00 r[3]=NULL
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) <= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               3    1    3               61 r[1] = (r[3]<r[3])
   5 ElseNotEq        0    7    0               00 
   6 Le               4    1    4               61 r[1] = (r[4]<=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) >= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    3               61 r[1] = (r[3]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Ge               4    1    4               61 r[1] = (r[4]>=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 IfNot            1    9    1               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0    9    0               00 
   5 Column           0    0    2               00 r[2]=collate4t1.collate4i1
   6 Column           0    1    3               00 r[3]=collate4t1.a
   7 ResultRow        2    2    0               00 output=r[2..3]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Integer          1    4    0               00 r[4]=1
  12 Integer          1    5    0               00 r[5]=1
  13 Gt               5    1    4               61 r[1] = (r[4]>r[5])
  14 ElseNotEq        0   22    0               00 
  15 Null             0    5    0               00 r[5]=NULL
  16 Null             0    4    0               00 r[4]=NULL
  17 Gt               4    1    5               61 r[1] = (r[5]>r[4])
  18 ElseNotEq        0   22    0               00 
  19 Integer          3    4    0               00 r[4]=3
  20 Integer          3    5    0               00 r[5]=3
  21 Ge               5    1    4               61 r[1] = (r[4]>=r[5])
  22 Goto             0    1    0               00 
SQL: [CREATE TABLE xyz(b, c);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 xyz           00 r[7]='xyz'
  20 String8          0    8    0 xyz           00 r[8]='xyz'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE xyz(b, c) 00 r[10]='CREATE TABLE xyz(b, c)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    3               00 
  26 ParseSchema      0    0    0 tbl_name='xyz' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    2 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    3 0             00 usesStmtJournal=0
  16 String8          0    2    0 xyz           00 r[2]='xyz'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO xyz VALUES(1, 2);]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenWrite        0    5    0 2             00 root=5 iDb=0; xyz
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          1    2    0               00 r[2]=1
   4 Integer          2    3    0               00 r[3]=2
   5 MakeRecord       2    2    4               00 r[4]=mkrec(r[2..3])
   6 Insert           0    4    1 xyz           39 intkey=r[1] data=r[4]
   7 Halt             0    0    0               00 
   8 Transaction      0    1    3 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM t1 ORDER BY x) == (SELECT * FROM t1 ORDER BY x)
  
;]
VDBE Program Listing:
   0 Init             0   51    0               00 Start at 51
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         24    3    0               00 r[3]=24; return address
   3 Once             0   24    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   6 OpenEphemeral    2    3    0 k(1,B)        00 nColumn=3
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   9 Explain          9    4    0 SCAN TABLE t1 00 
  10 Rewind           0   20    0               00 
  11 Column           0    0    6               00 r[6]=t1.x
  12 Sequence         2    7    0               00 r[7]=cursor[2].ctr++
  13 IfNotZero        5   17    0               00 if r[5]!=0 then r[5]--, goto 17
  14 Last             2    0    0               00 
  15 IdxLE            2   19    6 1             00 key=r[6]
  16 Delete           2    0    0               00 
  17 MakeRecord       6    2    8               00 r[8]=mkrec(r[6..7])
  18 IdxInsert        2    8    6 2             00 key=r[8]
  19 Next             0   11    0               01 
  20 Explain         20    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  21 Sort             2   24    0               00 
  22 Column           2    0    4               00 r[4]=x
  23 Next             2   22    0               00 
  24 Return           3    0    0               00 
  25 Integer         47    9    0               00 r[9]=47; return address
  26 Once             0   47    0               00 
  27 Explain         27    0    0 SCALAR SUBQUERY 2 00 
  28 Null             0   10   10               00 r[10..10]=NULL; Init subquery result
  29 OpenEphemeral    3    3    0 k(1,B)        00 nColumn=3
  30 Integer          1   11    0               00 r[11]=1; LIMIT counter
  31 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  32 Explain         32   27    0 SCAN TABLE t1 00 
  33 Rewind           1   43    0               00 
  34 Column           1    0   12               00 r[12]=t1.x
  35 Sequence         3   13    0               00 r[13]=cursor[3].ctr++
  36 IfNotZero       11   40    0               00 if r[11]!=0 then r[11]--, goto 40
  37 Last             3    0    0               00 
  38 IdxLE            3   42   12 1             00 key=r[12]
  39 Delete           3    0    0               00 
  40 MakeRecord      12    2   14               00 r[14]=mkrec(r[12..13])
  41 IdxInsert        3   14   12 2             00 key=r[14]
  42 Next             1   34    0               01 
  43 Explain         43   27    0 USE TEMP B-TREE FOR ORDER BY 00 
  44 Sort             3   47    0               00 
  45 Column           3    0   10               00 r[10]=x
  46 Next             3   45    0               00 
  47 Return           9    0    0               00 
  48 Eq              10    1    4               61 r[1] = (r[4]==r[10])
  49 ResultRow        1    1    0               00 output=r[1]
  50 Halt             0    0    0               00 
  51 Transaction      0    0    3 0             01 usesStmtJournal=0
  52 Goto             0    1    0               00 
SQL: [SELECT (1, 1) == (SELECT collate4i1,collate4i1 FROM collate4t1 ORDER BY collate4i1, collate4i1)
;]
VDBE Program Listing:
   0 Init             0   44    0               00 Start at 44
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         38    2    0               00 r[2]=38; return address
   3 Once             0   38    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    1    3    0 k(1,B)        00 nColumn=3
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         2    4    0 k(2,,)        00 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   9 Explain          9    4    0 SCAN TABLE collate4t1 USING COVERING INDEX sqlite_autoindex_collate4t1_1 00 
  10 Rewind           2   30    6 0             00 
  11 Column           2    0    3               00 r[3]=collate4t1.collate4i1
  12 Column           2    0    6               00 r[6]=collate4t1.collate4i1
  13 Column           2    0    7               00 r[7]=collate4t1.collate4i1
  14 Sequence         1    8    0               00 r[8]=cursor[1].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 MakeRecord       7    3   10               00 r[10]=mkrec(r[7..9])
  17 IfNot            8   23    0               00 
  18 Compare         11    6    1 k(2,B,B)      00 r[11] <-> r[6]
  19 Jump            20   24   20               00 
  20 Gosub           12   33    0               00 
  21 ResetSorter      1    0    0               00 
  22 IfNot            5   38    0               00 
  23 Move             6   11    1               00 r[11]=r[6]
  24 IfNotZero        5   28    0               00 if r[5]!=0 then r[5]--, goto 28
  25 Last             1    0    0               00 
  26 IdxLE            1   29    7 1             00 key=r[7]
  27 Delete           1    0    0               00 
  28 IdxInsert        1   10    7 3             00 key=r[10]
  29 Next             2   11    0               01 
  30 Explain         30    4    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  31 Gosub           12   33    0               00 
  32 Goto             0   38    0               00 
  33 Sort             1   38    0               00 
  34 Column           1    0    4               00 r[4]=collate4i1
  35 Column           1    2    3               00 r[3]=collate4i1
  36 Next             1   34    0               00 
  37 Return          12    0    0               00 
  38 Return           2    0    0               00 
  39 Eq               3    1   13 (BINARY)      63 r[1] = (r[13]==r[3])
  40 IfNot            1   42    0               00 
  41 Eq               4    1   13 (BINARY)      6B r[1] = (r[13]==r[4])
  42 ResultRow        1    1    0               00 output=r[1]
  43 Halt             0    0    0               00 
  44 Transaction      0    0    3 0             01 usesStmtJournal=0
  45 Integer          1   13    0               00 r[13]=1
  46 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM t1 ORDER BY x, x) == (SELECT * FROM t1 ORDER BY x, x)
  
;]
VDBE Program Listing:
   0 Init             0   53    0               00 Start at 53
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         25    3    0               00 r[3]=25; return address
   3 Once             0   25    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   6 OpenEphemeral    2    4    0 k(2,B,B)      00 nColumn=4
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   9 Explain          9    4    0 SCAN TABLE t1 00 
  10 Rewind           0   21    0               00 
  11 Column           0    0    6               00 r[6]=t1.x
  12 Column           0    0    7               00 r[7]=t1.x
  13 Sequence         2    8    0               00 r[8]=cursor[2].ctr++
  14 IfNotZero        5   18    0               00 if r[5]!=0 then r[5]--, goto 18
  15 Last             2    0    0               00 
  16 IdxLE            2   20    6 2             00 key=r[6..7]
  17 Delete           2    0    0               00 
  18 MakeRecord       6    3    9               00 r[9]=mkrec(r[6..8])
  19 IdxInsert        2    9    6 3             00 key=r[9]
  20 Next             0   11    0               01 
  21 Explain         21    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  22 Sort             2   25    0               00 
  23 Column           2    1    4               00 r[4]=x
  24 Next             2   23    0               00 
  25 Return           3    0    0               00 
  26 Integer         49   10    0               00 r[10]=49; return address
  27 Once             0   49    0               00 
  28 Explain         28    0    0 SCALAR SUBQUERY 2 00 
  29 Null             0   11   11               00 r[11..11]=NULL; Init subquery result
  30 OpenEphemeral    3    4    0 k(2,B,B)      00 nColumn=4
  31 Integer          1   12    0               00 r[12]=1; LIMIT counter
  32 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  33 Explain         33   28    0 SCAN TABLE t1 00 
  34 Rewind           1   45    0               00 
  35 Column           1    0   13               00 r[13]=t1.x
  36 Column           1    0   14               00 r[14]=t1.x
  37 Sequence         3   15    0               00 r[15]=cursor[3].ctr++
  38 IfNotZero       12   42    0               00 if r[12]!=0 then r[12]--, goto 42
  39 Last             3    0    0               00 
  40 IdxLE            3   44   13 2             00 key=r[13..14]
  41 Delete           3    0    0               00 
  42 MakeRecord      13    3   16               00 r[16]=mkrec(r[13..15])
  43 IdxInsert        3   16   13 3             00 key=r[16]
  44 Next             1   35    0               01 
  45 Explain         45   28    0 USE TEMP B-TREE FOR ORDER BY 00 
  46 Sort             3   49    0               00 
  47 Column           3    1   11               00 r[11]=x
  48 Next             3   47    0               00 
  49 Return          10    0    0               00 
  50 Eq              11    1    4               61 r[1] = (r[4]==r[11])
  51 ResultRow        1    1    0               00 output=r[1]
  52 Halt             0    0    0               00 
  53 Transaction      0    0    3 0             01 usesStmtJournal=0
  54 Goto             0    1    0               00 
SQL: [SELECT (1, 2) == (SELECT a,a FROM collate4t1 ORDER BY a, a DESC)
;]
VDBE Program Listing:
   0 Init             0   34    0               00 Start at 34
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         28    2    0               00 r[2]=28; return address
   3 Once             0   28    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    1    5    0 k(2,B,-B)     00 nColumn=5
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE collate4t1 00 
  10 Rewind           0   23    0               00 
  11 Column           0    1    3               00 r[3]=collate4t1.a
  12 Column           0    1    6               00 r[6]=collate4t1.a
  13 Column           0    1    7               00 r[7]=collate4t1.a
  14 Sequence         1    8    0               00 r[8]=cursor[1].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 IfNotZero        5   20    0               00 if r[5]!=0 then r[5]--, goto 20
  17 Last             1    0    0               00 
  18 IdxLE            1   22    6 2             00 key=r[6..7]
  19 Delete           1    0    0               00 
  20 MakeRecord       6    4   10               00 r[10]=mkrec(r[6..9])
  21 IdxInsert        1   10    6 4             00 key=r[10]
  22 Next             0   11    0               01 
  23 Explain         23    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  24 Sort             1   28    0               00 
  25 Column           1    1    4               00 r[4]=a
  26 Column           1    3    3               00 r[3]=a
  27 Next             1   25    0               00 
  28 Return           2    0    0               00 
  29 Eq               3    1   11 (BINARY)      62 r[1] = (r[11]==r[3])
  30 IfNot            1   32    0               00 
  31 Eq               4    1   12 (BINARY)      6A r[1] = (r[12]==r[4])
  32 ResultRow        1    1    0               00 output=r[1]
  33 Halt             0    0    0               00 
  34 Transaction      0    0    3 0             01 usesStmtJournal=0
  35 Integer          1   11    0               00 r[11]=1
  36 Integer          2   12    0               00 r[12]=2
  37 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM t1 ORDER BY x, x DESC) == (SELECT * FROM t1 ORDER BY x, x DESC)
  
;]
VDBE Program Listing:
   0 Init             0   53    0               00 Start at 53
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         25    3    0               00 r[3]=25; return address
   3 Once             0   25    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   6 OpenEphemeral    2    4    0 k(2,B,-B)     00 nColumn=4
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   9 Explain          9    4    0 SCAN TABLE t1 00 
  10 Rewind           0   21    0               00 
  11 Column           0    0    6               00 r[6]=t1.x
  12 Column           0    0    7               00 r[7]=t1.x
  13 Sequence         2    8    0               00 r[8]=cursor[2].ctr++
  14 IfNotZero        5   18    0               00 if r[5]!=0 then r[5]--, goto 18
  15 Last             2    0    0               00 
  16 IdxLE            2   20    6 2             00 key=r[6..7]
  17 Delete           2    0    0               00 
  18 MakeRecord       6    3    9               00 r[9]=mkrec(r[6..8])
  19 IdxInsert        2    9    6 3             00 key=r[9]
  20 Next             0   11    0               01 
  21 Explain         21    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  22 Sort             2   25    0               00 
  23 Column           2    1    4               00 r[4]=x
  24 Next             2   23    0               00 
  25 Return           3    0    0               00 
  26 Integer         49   10    0               00 r[10]=49; return address
  27 Once             0   49    0               00 
  28 Explain         28    0    0 SCALAR SUBQUERY 2 00 
  29 Null             0   11   11               00 r[11..11]=NULL; Init subquery result
  30 OpenEphemeral    3    4    0 k(2,B,-B)     00 nColumn=4
  31 Integer          1   12    0               00 r[12]=1; LIMIT counter
  32 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  33 Explain         33   28    0 SCAN TABLE t1 00 
  34 Rewind           1   45    0               00 
  35 Column           1    0   13               00 r[13]=t1.x
  36 Column           1    0   14               00 r[14]=t1.x
  37 Sequence         3   15    0               00 r[15]=cursor[3].ctr++
  38 IfNotZero       12   42    0               00 if r[12]!=0 then r[12]--, goto 42
  39 Last             3    0    0               00 
  40 IdxLE            3   44   13 2             00 key=r[13..14]
  41 Delete           3    0    0               00 
  42 MakeRecord      13    3   16               00 r[16]=mkrec(r[13..15])
  43 IdxInsert        3   16   13 3             00 key=r[16]
  44 Next             1   35    0               01 
  45 Explain         45   28    0 USE TEMP B-TREE FOR ORDER BY 00 
  46 Sort             3   49    0               00 
  47 Column           3    1   11               00 r[11]=x
  48 Next             3   47    0               00 
  49 Return          10    0    0               00 
  50 Eq              11    1    4               61 r[1] = (r[4]==r[11])
  51 ResultRow        1    1    0               00 output=r[1]
  52 Halt             0    0    0               00 
  53 Transaction      0    0    3 0             01 usesStmtJournal=0
  54 Goto             0    1    0               00 
SQL: [SELECT (SELECT 0, 0) == (SELECT * FROM collate4t1 ORDER BY a, a DESC)
  
;]
VDBE Program Listing:
   0 Init             0   44    0               00 Start at 44
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         11    2    0               00 r[2]=11; return address
   3 Once             0   11    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 Integer          1    5    0               00 r[5]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          0    3    0               00 r[3]=0
   9 Integer          0    4    0               00 r[4]=0
  10 DecrJumpZero     5   11    0               00 if (--r[5])==0 goto 11
  11 Return           2    0    0               00 
  12 Integer         38    6    0               00 r[6]=38; return address
  13 Once             0   38    0               00 
  14 Explain         14    0    0 SCALAR SUBQUERY 2 00 
  15 Null             0    7    8               00 r[7..8]=NULL; Init subquery result
  16 OpenEphemeral    1    5    0 k(2,B,-B)     00 nColumn=5
  17 Integer          1    9    0               00 r[9]=1; LIMIT counter
  18 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
  19 Explain         19   14    0 SCAN TABLE collate4t1 00 
  20 Rewind           0   33    0               00 
  21 Column           0    0    7               00 r[7]=collate4t1.collate4i1
  22 Column           0    1   10               00 r[10]=collate4t1.a
  23 Column           0    1   11               00 r[11]=collate4t1.a
  24 Sequence         1   12    0               00 r[12]=cursor[1].ctr++
  25 Move             7   13    1               00 r[13]=r[7]
  26 IfNotZero        9   30    0               00 if r[9]!=0 then r[9]--, goto 30
  27 Last             1    0    0               00 
  28 IdxLE            1   32   10 2             00 key=r[10..11]
  29 Delete           1    0    0               00 
  30 MakeRecord      10    4   14               00 r[14]=mkrec(r[10..13])
  31 IdxInsert        1   14   10 4             00 key=r[14]
  32 Next             0   21    0               01 
  33 Explain         33   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  34 Sort             1   38    0               00 
  35 Column           1    1    8               00 r[8]=a
  36 Column           1    3    7               00 r[7]=collate4i1
  37 Next             1   35    0               00 
  38 Return           6    0    0               00 
  39 Eq               7    1    3 (BINARY)      63 r[1] = (r[3]==r[7])
  40 IfNot            1   42    0               00 
  41 Eq               8    1    4 (BINARY)      6A r[1] = (r[4]==r[8])
  42 ResultRow        1    1    0               00 output=r[1]
  43 Halt             0    0    0               00 
  44 Transaction      0    0    3 0             01 usesStmtJournal=0
  45 Goto             0    1    0               00 
SQL: [SELECT (3, 6) == (SELECT * FROM collate4t1 ORDER BY a DESC, a DESC)
;]
VDBE Program Listing:
   0 Init             0   34    0               00 Start at 34
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         28    2    0               00 r[2]=28; return address
   3 Once             0   28    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    1    5    0 k(2,-B,-B)    00 nColumn=5
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE collate4t1 00 
  10 Rewind           0   23    0               00 
  11 Column           0    0    3               00 r[3]=collate4t1.collate4i1
  12 Column           0    1    6               00 r[6]=collate4t1.a
  13 Column           0    1    7               00 r[7]=collate4t1.a
  14 Sequence         1    8    0               00 r[8]=cursor[1].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 IfNotZero        5   20    0               00 if r[5]!=0 then r[5]--, goto 20
  17 Last             1    0    0               00 
  18 IdxLE            1   22    6 2             00 key=r[6..7]
  19 Delete           1    0    0               00 
  20 MakeRecord       6    4   10               00 r[10]=mkrec(r[6..9])
  21 IdxInsert        1   10    6 4             00 key=r[10]
  22 Next             0   11    0               01 
  23 Explain         23    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  24 Sort             1   28    0               00 
  25 Column           1    1    4               00 r[4]=a
  26 Column           1    3    3               00 r[3]=collate4i1
  27 Next             1   25    0               00 
  28 Return           2    0    0               00 
  29 Eq               3    1   11 (BINARY)      63 r[1] = (r[11]==r[3])
  30 IfNot            1   32    0               00 
  31 Eq               4    1   12 (BINARY)      6A r[1] = (r[12]==r[4])
  32 ResultRow        1    1    0               00 output=r[1]
  33 Halt             0    0    0               00 
  34 Transaction      0    0    3 0             01 usesStmtJournal=0
  35 Integer          3   11    0               00 r[11]=3
  36 Integer          6   12    0               00 r[12]=6
  37 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM collate4t1 ORDER BY a DESC, a DESC) == (SELECT * FROM collate4t1 ORDER BY a DESC, a DESC)
  
;]
VDBE Program Listing:
   0 Init             0   61    0               00 Start at 61
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         28    2    0               00 r[2]=28; return address
   3 Once             0   28    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    2    5    0 k(2,-B,-B)    00 nColumn=5
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE collate4t1 00 
  10 Rewind           0   23    0               00 
  11 Column           0    0    3               00 r[3]=collate4t1.collate4i1
  12 Column           0    1    6               00 r[6]=collate4t1.a
  13 Column           0    1    7               00 r[7]=collate4t1.a
  14 Sequence         2    8    0               00 r[8]=cursor[2].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 IfNotZero        5   20    0               00 if r[5]!=0 then r[5]--, goto 20
  17 Last             2    0    0               00 
  18 IdxLE            2   22    6 2             00 key=r[6..7]
  19 Delete           2    0    0               00 
  20 MakeRecord       6    4   10               00 r[10]=mkrec(r[6..9])
  21 IdxInsert        2   10    6 4             00 key=r[10]
  22 Next             0   11    0               01 
  23 Explain         23    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  24 Sort             2   28    0               00 
  25 Column           2    1    4               00 r[4]=a
  26 Column           2    3    3               00 r[3]=collate4i1
  27 Next             2   25    0               00 
  28 Return           2    0    0               00 
  29 Integer         55   11    0               00 r[11]=55; return address
  30 Once             0   55    0               00 
  31 Explain         31    0    0 SCALAR SUBQUERY 2 00 
  32 Null             0   12   13               00 r[12..13]=NULL; Init subquery result
  33 OpenEphemeral    3    5    0 k(2,-B,-B)    00 nColumn=5
  34 Integer          1   14    0               00 r[14]=1; LIMIT counter
  35 OpenRead         1    3    0 2             00 root=3 iDb=0; collate4t1
  36 Explain         36   31    0 SCAN TABLE collate4t1 00 
  37 Rewind           1   50    0               00 
  38 Column           1    0   12               00 r[12]=collate4t1.collate4i1
  39 Column           1    1   15               00 r[15]=collate4t1.a
  40 Column           1    1   16               00 r[16]=collate4t1.a
  41 Sequence         3   17    0               00 r[17]=cursor[3].ctr++
  42 Move            12   18    1               00 r[18]=r[12]
  43 IfNotZero       14   47    0               00 if r[14]!=0 then r[14]--, goto 47
  44 Last             3    0    0               00 
  45 IdxLE            3   49   15 2             00 key=r[15..16]
  46 Delete           3    0    0               00 
  47 MakeRecord      15    4   19               00 r[19]=mkrec(r[15..18])
  48 IdxInsert        3   19   15 4             00 key=r[19]
  49 Next             1   38    0               01 
  50 Explain         50   31    0 USE TEMP B-TREE FOR ORDER BY 00 
  51 Sort             3   55    0               00 
  52 Column           3    1   13               00 r[13]=a
  53 Column           3    3   12               00 r[12]=collate4i1
  54 Next             3   52    0               00 
  55 Return          11    0    0               00 
  56 Eq              12    1    3 (BINARY)      63 r[1] = (r[3]==r[12])
  57 IfNot            1   59    0               00 
  58 Eq              13    1    4 (BINARY)      69 r[1] = (r[4]==r[13])
  59 ResultRow        1    1    0               00 output=r[1]
  60 Halt             0    0    0               00 
  61 Transaction      0    0    3 0             01 usesStmtJournal=0
  62 Goto             0    1    0               00 
SQL: [SELECT ((3, 5)) == (SELECT * FROM collate4t1 ORDER BY collate4i1 DESC, a)
;]
VDBE Program Listing:
   0 Init             0   32    0               00 Start at 32
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         26    2    0               00 r[2]=26; return address
   3 Once             0   26    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    1    5    0 k(2,-B,B)     00 nColumn=5
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE collate4t1 00 
  10 Rewind           0   21    0               00 
  11 Column           0    0    6               00 r[6]=collate4t1.collate4i1
  12 Column           0    1    7               00 r[7]=collate4t1.a
  13 Sequence         1    8    0               00 r[8]=cursor[1].ctr++
  14 IfNotZero        5   18    0               00 if r[5]!=0 then r[5]--, goto 18
  15 Last             1    0    0               00 
  16 IdxLE            1   20    6 2             00 key=r[6..7]
  17 Delete           1    0    0               00 
  18 MakeRecord       6    3    9               00 r[9]=mkrec(r[6..8])
  19 IdxInsert        1    9    6 3             00 key=r[9]
  20 Next             0   11    0               01 
  21 Explain         21    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  22 Sort             1   26    0               00 
  23 Column           1    1    4               00 r[4]=a
  24 Column           1    0    3               00 r[3]=collate4i1
  25 Next             1   23    0               00 
  26 Return           2    0    0               00 
  27 Eq               3    1   10 (BINARY)      63 r[1] = (r[10]==r[3])
  28 IfNot            1   30    0               00 
  29 Eq               4    1   11 (BINARY)      6A r[1] = (r[11]==r[4])
  30 ResultRow        1    1    0               00 output=r[1]
  31 Halt             0    0    0               00 
  32 Transaction      0    0    3 0             01 usesStmtJournal=0
  33 Integer          3   10    0               00 r[10]=3
  34 Integer          5   11    0               00 r[11]=5
  35 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM collate4t1 ORDER BY a DESC, a) == (SELECT * FROM collate4t1 ORDER BY a DESC, a)
  
;]
VDBE Program Listing:
   0 Init             0   61    0               00 Start at 61
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         28    2    0               00 r[2]=28; return address
   3 Once             0   28    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    2    5    0 k(2,-B,B)     00 nColumn=5
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE collate4t1 00 
  10 Rewind           0   23    0               00 
  11 Column           0    0    3               00 r[3]=collate4t1.collate4i1
  12 Column           0    1    6               00 r[6]=collate4t1.a
  13 Column           0    1    7               00 r[7]=collate4t1.a
  14 Sequence         2    8    0               00 r[8]=cursor[2].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 IfNotZero        5   20    0               00 if r[5]!=0 then r[5]--, goto 20
  17 Last             2    0    0               00 
  18 IdxLE            2   22    6 2             00 key=r[6..7]
  19 Delete           2    0    0               00 
  20 MakeRecord       6    4   10               00 r[10]=mkrec(r[6..9])
  21 IdxInsert        2   10    6 4             00 key=r[10]
  22 Next             0   11    0               01 
  23 Explain         23    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  24 Sort             2   28    0               00 
  25 Column           2    1    4               00 r[4]=a
  26 Column           2    3    3               00 r[3]=collate4i1
  27 Next             2   25    0               00 
  28 Return           2    0    0               00 
  29 Integer         55   11    0               00 r[11]=55; return address
  30 Once             0   55    0               00 
  31 Explain         31    0    0 SCALAR SUBQUERY 2 00 
  32 Null             0   12   13               00 r[12..13]=NULL; Init subquery result
  33 OpenEphemeral    3    5    0 k(2,-B,B)     00 nColumn=5
  34 Integer          1   14    0               00 r[14]=1; LIMIT counter
  35 OpenRead         1    3    0 2             00 root=3 iDb=0; collate4t1
  36 Explain         36   31    0 SCAN TABLE collate4t1 00 
  37 Rewind           1   50    0               00 
  38 Column           1    0   12               00 r[12]=collate4t1.collate4i1
  39 Column           1    1   15               00 r[15]=collate4t1.a
  40 Column           1    1   16               00 r[16]=collate4t1.a
  41 Sequence         3   17    0               00 r[17]=cursor[3].ctr++
  42 Move            12   18    1               00 r[18]=r[12]
  43 IfNotZero       14   47    0               00 if r[14]!=0 then r[14]--, goto 47
  44 Last             3    0    0               00 
  45 IdxLE            3   49   15 2             00 key=r[15..16]
  46 Delete           3    0    0               00 
  47 MakeRecord      15    4   19               00 r[19]=mkrec(r[15..18])
  48 IdxInsert        3   19   15 4             00 key=r[19]
  49 Next             1   38    0               01 
  50 Explain         50   31    0 USE TEMP B-TREE FOR ORDER BY 00 
  51 Sort             3   55    0               00 
  52 Column           3    1   13               00 r[13]=a
  53 Column           3    3   12               00 r[12]=collate4i1
  54 Next             3   52    0               00 
  55 Return          11    0    0               00 
  56 Eq              12    1    3 (BINARY)      63 r[1] = (r[3]==r[12])
  57 IfNot            1   59    0               00 
  58 Eq              13    1    4 (BINARY)      69 r[1] = (r[4]==r[13])
  59 ResultRow        1    1    0               00 output=r[1]
  60 Halt             0    0    0               00 
  61 Transaction      0    0    3 0             01 usesStmtJournal=0
  62 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM t1 ORDER BY x DESC, x) == (SELECT * FROM t1 ORDER BY x DESC, x)
  
;]
VDBE Program Listing:
   0 Init             0   53    0               00 Start at 53
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         25    3    0               00 r[3]=25; return address
   3 Once             0   25    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   6 OpenEphemeral    2    4    0 k(2,-B,B)     00 nColumn=4
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   9 Explain          9    4    0 SCAN TABLE t1 00 
  10 Rewind           0   21    0               00 
  11 Column           0    0    6               00 r[6]=t1.x
  12 Column           0    0    7               00 r[7]=t1.x
  13 Sequence         2    8    0               00 r[8]=cursor[2].ctr++
  14 IfNotZero        5   18    0               00 if r[5]!=0 then r[5]--, goto 18
  15 Last             2    0    0               00 
  16 IdxLE            2   20    6 2             00 key=r[6..7]
  17 Delete           2    0    0               00 
  18 MakeRecord       6    3    9               00 r[9]=mkrec(r[6..8])
  19 IdxInsert        2    9    6 3             00 key=r[9]
  20 Next             0   11    0               01 
  21 Explain         21    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  22 Sort             2   25    0               00 
  23 Column           2    1    4               00 r[4]=x
  24 Next             2   23    0               00 
  25 Return           3    0    0               00 
  26 Integer         49   10    0               00 r[10]=49; return address
  27 Once             0   49    0               00 
  28 Explain         28    0    0 SCALAR SUBQUERY 2 00 
  29 Null             0   11   11               00 r[11..11]=NULL; Init subquery result
  30 OpenEphemeral    3    4    0 k(2,-B,B)     00 nColumn=4
  31 Integer          1   12    0               00 r[12]=1; LIMIT counter
  32 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  33 Explain         33   28    0 SCAN TABLE t1 00 
  34 Rewind           1   45    0               00 
  35 Column           1    0   13               00 r[13]=t1.x
  36 Column           1    0   14               00 r[14]=t1.x
  37 Sequence         3   15    0               00 r[15]=cursor[3].ctr++
  38 IfNotZero       12   42    0               00 if r[12]!=0 then r[12]--, goto 42
  39 Last             3    0    0               00 
  40 IdxLE            3   44   13 2             00 key=r[13..14]
  41 Delete           3    0    0               00 
  42 MakeRecord      13    3   16               00 r[16]=mkrec(r[13..15])
  43 IdxInsert        3   16   13 3             00 key=r[16]
  44 Next             1   35    0               01 
  45 Explain         45   28    0 USE TEMP B-TREE FOR ORDER BY 00 
  46 Sort             3   49    0               00 
  47 Column           3    1   11               00 r[11]=x
  48 Next             3   47    0               00 
  49 Return          10    0    0               00 
  50 Eq              11    1    4               61 r[1] = (r[4]==r[11])
  51 ResultRow        1    1    0               00 output=r[1]
  52 Halt             0    0    0               00 
  53 Transaction      0    0    3 0             01 usesStmtJournal=0
  54 Goto             0    1    0               00 
SQL: [SELECT (SELECT 0, 0) == (SELECT * FROM collate4t1 ORDER BY collate4i1 DESC, collate4i1)
  
;]
VDBE Program Listing:
   0 Init             0   44    0               00 Start at 44
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         11    2    0               00 r[2]=11; return address
   3 Once             0   11    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 Integer          1    5    0               00 r[5]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          0    3    0               00 r[3]=0
   9 Integer          0    4    0               00 r[4]=0
  10 DecrJumpZero     5   11    0               00 if (--r[5])==0 goto 11
  11 Return           2    0    0               00 
  12 Integer         38    6    0               00 r[6]=38; return address
  13 Once             0   38    0               00 
  14 Explain         14    0    0 SCALAR SUBQUERY 2 00 
  15 Null             0    7    8               00 r[7..8]=NULL; Init subquery result
  16 OpenEphemeral    1    5    0 k(2,-B,B)     00 nColumn=5
  17 Integer          1    9    0               00 r[9]=1; LIMIT counter
  18 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
  19 Explain         19   14    0 SCAN TABLE collate4t1 00 
  20 Rewind           0   33    0               00 
  21 Column           0    1    7               00 r[7]=collate4t1.a
  22 Column           0    0   10               00 r[10]=collate4t1.collate4i1
  23 Column           0    0   11               00 r[11]=collate4t1.collate4i1
  24 Sequence         1   12    0               00 r[12]=cursor[1].ctr++
  25 Move             7   13    1               00 r[13]=r[7]
  26 IfNotZero        9   30    0               00 if r[9]!=0 then r[9]--, goto 30
  27 Last             1    0    0               00 
  28 IdxLE            1   32   10 2             00 key=r[10..11]
  29 Delete           1    0    0               00 
  30 MakeRecord      10    4   14               00 r[14]=mkrec(r[10..13])
  31 IdxInsert        1   14   10 4             00 key=r[14]
  32 Next             0   21    0               01 
  33 Explain         33   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  34 Sort             1   38    0               00 
  35 Column           1    3    8               00 r[8]=a
  36 Column           1    1    7               00 r[7]=collate4i1
  37 Next             1   35    0               00 
  38 Return           6    0    0               00 
  39 Eq               7    1    3 (BINARY)      63 r[1] = (r[3]==r[7])
  40 IfNot            1   42    0               00 
  41 Eq               8    1    4 (BINARY)      6A r[1] = (r[4]==r[8])
  42 ResultRow        1    1    0               00 output=r[1]
  43 Halt             0    0    0               00 
  44 Transaction      0    0    3 0             01 usesStmtJournal=0
  45 Goto             0    1    0               00 
SQL: [SELECT (2, 2) BETWEEN (2, NULL) AND (3, 3)
;]
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               5    4    2               61 r[4] = (r[2]>r[5])
   3 ElseNotEq        0    5    0               00 
   4 Ge               6    4    3               61 r[4] = (r[3]>=r[6])
   5 Lt               8    7    2               61 r[7] = (r[2]<r[8])
   6 ElseNotEq        0    8    0               00 
   7 Le               8    7    3               61 r[7] = (r[3]<=r[8])
   8 And              7    4    1               00 r[1]=(r[7] && r[4])
   9 ResultRow        1    1    0               00 output=r[1]
  10 Halt             0    0    0               00 
  11 Integer          2    2    0               00 r[2]=2
  12 Integer          2    3    0               00 r[3]=2
  13 Integer          2    5    0               00 r[5]=2
  14 Null             0    6    0               00 r[6]=NULL
  15 Integer          3    8    0               00 r[8]=3
  16 Goto             0    1    0               00 
SQL: [SELECT (2, 4) IN (SELECT * FROM collate4t1)
;]
VDBE Program Listing:
   0 Init             0   34    0               00 Start at 34
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Null             0    1    0               00 r[1]=NULL
   3 Noop             0    0    0               00 begin IN expr
   4 Integer         16    3    0               00 r[3]=16; return address
   5 Once             0   16    0               00 
   6 OpenEphemeral    1    2    0 k(2,B,B)      00 nColumn=2; Result of SELECT 1
   7 Explain          7    0    0 LIST SUBQUERY 1 00 
   8 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   9 Explain          9    7    0 SCAN TABLE collate4t1 00 
  10 Rewind           0   16    0               00 
  11 Column           0    0    4               00 r[4]=collate4t1.collate4i1
  12 Column           0    1    5               00 r[5]=collate4t1.a
  13 MakeRecord       4    2    6 CB            00 r[6]=mkrec(r[4..5])
  14 IdxInsert        1    6    4 2             00 key=r[6]
  15 Next             0   11    0               01 
  16 Return           3    0    0               00 
  17 Integer          0    2    0               00 r[2]=0
  18 Rewind           1   20    0               00 
  19 Column           1    0    2               80 r[2]=first_entry_in(1)
  20 Affinity         7    2    0 CB            00 affinity(r[7..8])
  21 Found            1   30    7 2             00 key=r[7..8]
  22 Rewind           1   31    0               00 
  23 Column           1    0    6               00 r[6]=
  24 Ne               7   28    6               00 if r[6]!=r[7] goto 28
  25 Column           1    1    6               00 r[6]=
  26 Ne               8   28    6               00 if r[6]!=r[8] goto 28
  27 Goto             0   32    0               00 
  28 Next             1   23    0               00 
  29 Goto             0   31    0               00 end IN expr
  30 Integer          1    1    0               00 r[1]=1
  31 AddImm           1    0    0               00 r[1]=r[1]+0
  32 ResultRow        1    1    0               00 output=r[1]
  33 Halt             0    0    0               00 
  34 Transaction      0    0    3 0             01 usesStmtJournal=0
  35 Integer          2    7    0               00 r[7]=2
  36 Integer          4    8    0               00 r[8]=4
  37 Goto             0    1    0               00 
SQL: [SELECT (NULL, 4) IN (SELECT * FROM xyz)
;]
VDBE Program Listing:
   0 Init             0   35    0               00 Start at 35
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Null             0    1    0               00 r[1]=NULL
   3 Noop             0    0    0               00 begin IN expr
   4 Integer         16    3    0               00 r[3]=16; return address
   5 Once             0   16    0               00 
   6 OpenEphemeral    1    2    0 k(2,B,B)      00 nColumn=2; Result of SELECT 1
   7 Explain          7    0    0 LIST SUBQUERY 1 00 
   8 OpenRead         0    5    0 2             00 root=5 iDb=0; xyz
   9 Explain          9    7    0 SCAN TABLE xyz 00 
  10 Rewind           0   16    0               00 
  11 Column           0    0    4               00 r[4]=xyz.b
  12 Column           0    1    5               00 r[5]=xyz.c
  13 MakeRecord       4    2    6 AA            00 r[6]=mkrec(r[4..5])
  14 IdxInsert        1    6    4 2             00 key=r[6]
  15 Next             0   11    0               01 
  16 Return           3    0    0               00 
  17 Integer          0    2    0               00 r[2]=0
  18 Rewind           1   20    0               00 
  19 Column           1    0    2               80 r[2]=first_entry_in(1)
  20 IsNull           7   23    0               00 if r[7]==NULL goto 23
  21 Affinity         7    2    0 AA            00 affinity(r[7..8])
  22 Found            1   31    7 2             00 key=r[7..8]
  23 Rewind           1   32    0               00 
  24 Column           1    0    6               00 r[6]=
  25 Ne               7   29    6               00 if r[6]!=r[7] goto 29
  26 Column           1    1    6               00 r[6]=
  27 Ne               8   29    6               00 if r[6]!=r[8] goto 29
  28 Goto             0   33    0               00 
  29 Next             1   24    0               00 
  30 Goto             0   32    0               00 end IN expr
  31 Integer          1    1    0               00 r[1]=1
  32 AddImm           1    0    0               00 r[1]=r[1]+0
  33 ResultRow        1    1    0               00 output=r[1]
  34 Halt             0    0    0               00 
  35 Transaction      0    0    3 0             01 usesStmtJournal=0
  36 Null             0    7    0               00 r[7]=NULL
  37 Integer          4    8    0               00 r[8]=4
  38 Goto             0    1    0               00 
SQL: [SELECT (NULL, 4) NOT IN (SELECT * FROM xyz)
;]
VDBE Program Listing:
   0 Init             0   36    0               00 Start at 36
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Null             0    2    0               00 r[2]=NULL
   3 Noop             0    0    0               00 begin IN expr
   4 Integer         16    4    0               00 r[4]=16; return address
   5 Once             0   16    0               00 
   6 OpenEphemeral    1    2    0 k(2,B,B)      00 nColumn=2; Result of SELECT 1
   7 Explain          7    0    0 LIST SUBQUERY 1 00 
   8 OpenRead         0    5    0 2             00 root=5 iDb=0; xyz
   9 Explain          9    7    0 SCAN TABLE xyz 00 
  10 Rewind           0   16    0               00 
  11 Column           0    0    5               00 r[5]=xyz.b
  12 Column           0    1    6               00 r[6]=xyz.c
  13 MakeRecord       5    2    7 AA            00 r[7]=mkrec(r[5..6])
  14 IdxInsert        1    7    5 2             00 key=r[7]
  15 Next             0   11    0               01 
  16 Return           4    0    0               00 
  17 Integer          0    3    0               00 r[3]=0
  18 Rewind           1   20    0               00 
  19 Column           1    0    3               80 r[3]=first_entry_in(1)
  20 IsNull           8   23    0               00 if r[8]==NULL goto 23
  21 Affinity         8    2    0 AA            00 affinity(r[8..9])
  22 Found            1   31    8 2             00 key=r[8..9]
  23 Rewind           1   32    0               00 
  24 Column           1    0    7               00 r[7]=
  25 Ne               8   29    7               00 if r[7]!=r[8] goto 29
  26 Column           1    1    7               00 r[7]=
  27 Ne               9   29    7               00 if r[7]!=r[9] goto 29
  28 Goto             0   33    0               00 
  29 Next             1   24    0               00 
  30 Goto             0   32    0               00 end IN expr
  31 Integer          1    2    0               00 r[2]=1
  32 AddImm           2    0    0               00 r[2]=r[2]+0
  33 Not              2    1    0               00 r[1]= !r[2]
  34 ResultRow        1    1    0               00 output=r[1]
  35 Halt             0    0    0               00 
  36 Transaction      0    0    3 0             01 usesStmtJournal=0
  37 Null             0    8    0               00 r[8]=NULL
  38 Integer          4    9    0               00 r[9]=4
  39 Goto             0    1    0               00 
SQL: [SELECT (NULL, 0) NOT IN (SELECT * FROM collate4t1)
;]
VDBE Program Listing:
   0 Init             0   36    0               00 Start at 36
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Null             0    2    0               00 r[2]=NULL
   3 Noop             0    0    0               00 begin IN expr
   4 Integer         16    4    0               00 r[4]=16; return address
   5 Once             0   16    0               00 
   6 OpenEphemeral    1    2    0 k(2,B,B)      00 nColumn=2; Result of SELECT 1
   7 Explain          7    0    0 LIST SUBQUERY 1 00 
   8 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   9 Explain          9    7    0 SCAN TABLE collate4t1 00 
  10 Rewind           0   16    0               00 
  11 Column           0    0    5               00 r[5]=collate4t1.collate4i1
  12 Column           0    1    6               00 r[6]=collate4t1.a
  13 MakeRecord       5    2    7 CB            00 r[7]=mkrec(r[5..6])
  14 IdxInsert        1    7    5 2             00 key=r[7]
  15 Next             0   11    0               01 
  16 Return           4    0    0               00 
  17 Integer          0    3    0               00 r[3]=0
  18 Rewind           1   20    0               00 
  19 Column           1    0    3               80 r[3]=first_entry_in(1)
  20 IsNull           8   23    0               00 if r[8]==NULL goto 23
  21 Affinity         8    2    0 CB            00 affinity(r[8..9])
  22 Found            1   31    8 2             00 key=r[8..9]
  23 Rewind           1   32    0               00 
  24 Column           1    0    7               00 r[7]=
  25 Ne               8   29    7               00 if r[7]!=r[8] goto 29
  26 Column           1    1    7               00 r[7]=
  27 Ne               9   29    7               00 if r[7]!=r[9] goto 29
  28 Goto             0   33    0               00 
  29 Next             1   24    0               00 
  30 Goto             0   32    0               00 end IN expr
  31 Integer          1    2    0               00 r[2]=1
  32 AddImm           2    0    0               00 r[2]=r[2]+0
  33 Not              2    1    0               00 r[1]= !r[2]
  34 ResultRow        1    1    0               00 output=r[1]
  35 Halt             0    0    0               00 
  36 Transaction      0    0    3 0             01 usesStmtJournal=0
  37 Null             0    8    0               00 r[8]=NULL
  38 Integer          0    9    0               00 r[9]=0
  39 Goto             0    1    0               00 
SQL: [CREATE TABLE d(xyz1, t2, tr1);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 d             00 r[7]='d'
  20 String8          0    8    0 d             00 r[8]='d'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE d(xyz1, t2, tr1) 00 r[10]='CREATE TABLE d(xyz1, t2, tr1)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    4               00 
  26 ParseSchema      0    0    0 tbl_name='d' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    3 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    4 0             00 usesStmtJournal=0
  16 String8          0    2    0 d             00 r[2]='d'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO d VALUES('DEF', 2, 'iv');]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 OpenWrite        0    6    0 3             00 root=6 iDb=0; d
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 String8          0    2    0 DEF           00 r[2]='DEF'
   4 Integer          2    3    0               00 r[3]=2
   5 String8          0    4    0 iv            00 r[4]='iv'
   6 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
   7 Insert           0    5    1 d             39 intkey=r[1] data=r[5]
   8 Halt             0    0    0               00 
   9 Transaction      0    1    4 0             01 usesStmtJournal=0
  10 Goto             0    1    0               00 
SQL: [;CREATE INDEX tr2 ON xyz(b, b);]
VDBE Program Listing:
   0 Init             0   34    0               00 Start at 34
   1 Noop             0   33    0               00 
   2 CreateBtree      0    1    2               00 r[1]=root iDb=0 flags=2
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
   5 String8          0    3    0 index         00 r[3]='index'
   6 String8          0    4    0 tr2           00 r[4]='tr2'
   7 String8          0    5    0 xyz           00 r[5]='xyz'
   8 Copy             1    6    0               00 r[6]=r[1]
   9 String8          0    7    0 CREATE INDEX tr2 ON xyz(b, b) 00 r[7]='CREATE INDEX tr2 ON xyz(b, b)'
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
  12 SorterOpen       3    0    2 k(3,,,)       00 
  13 OpenRead         1    5    0 2             00 root=5 iDb=0; xyz
  14 Rewind           1   21    0               00 
  15 Column           1    0   10               00 r[10]=xyz.b
  16 Column           1    0   11               00 r[11]=xyz.b
  17 Rowid            1   12    0               00 r[12]=rowid
  18 MakeRecord      10    3    9               00 r[9]=mkrec(r[10..12])
  19 SorterInsert     3    9    0               00 key=r[9]
  20 Next             1   15    0               00 
  21 OpenWrite        2    1    0 k(3,,,)       11 root=1 iDb=0
  22 SorterSort       3   27    0               00 
  23 SorterData       3    9    2               00 r[9]=data
  24 SeekEnd          2    0    0               00 
  25 IdxInsert        2    9    0               10 key=r[9]
  26 SorterNext       3   23    0               00 
  27 Close            1    0    0               00 
  28 Close            2    0    0               00 
  29 Close            3    0    0               00 
  30 SetCookie        0    1    5               00 
  31 ParseSchema      0    0    0 name='tr2' AND type='index' 00 
  32 Expire           0    1    0               00 
  33 Halt             0    0    0               00 
  34 Transaction      0    1    4 0             01 usesStmtJournal=0
  35 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    5 0             00 usesStmtJournal=0
  16 String8          0    2    0 tr2           00 r[2]='tr2'
  17 String8          0    3    0 index         00 r[3]='index'
  18 Goto             0    1    0               00 
SQL: [;
;SELECT a FROM collate4t1 WHERE (collate4i1, collate4i1) = (SELECT 'abc', 1);]
VDBE Program Listing:
   0 Init             0   24    0               00 Start at 24
   1 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   2 OpenRead         1    4    0 k(2,,)        02 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   3 Explain          3    0    0 SEARCH TABLE collate4t1 USING INDEX sqlite_autoindex_collate4t1_1 (collate4i1=?) 00 
   4 Integer         13    2    0               00 r[2]=13; return address
   5 Once             0   13    0               00 
   6 Explain          6    0    0 SCALAR SUBQUERY 1 00 
   7 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   8 Integer          1    5    0               00 r[5]=1; LIMIT counter
   9 Explain          9    6    0 SCAN CONSTANT ROW 00 
  10 String8          0    3    0 abc           00 r[3]='abc'
  11 Integer          1    4    0               00 r[4]=1
  12 DecrJumpZero     5   13    0               00 if (--r[5])==0 goto 13
  13 Return           2    0    0               00 
  14 IsNull           3   23    0               00 if r[3]==NULL goto 23
  15 Affinity         3    1    0 C             00 affinity(r[3])
  16 SeekGE           1   23    3 1             00 key=r[3]
  17 IdxGT            1   23    3 1             00 key=r[3]
  18 DeferredSeek     1    0    0               00 Move 0 to 1.rowid if needed
  19 Column           1    0    1               00 r[1]=collate4t1.collate4i1
  20 Ne               4   23    1 (BINARY)      53 if r[1]!=r[4] goto 23
  21 Column           0    1    7               00 r[7]=collate4t1.a
  22 ResultRow        7    1    0               00 output=r[7]
  23 Halt             0    0    0               00 
  24 Transaction      0    0    5 0             01 usesStmtJournal=0
  25 Goto             0    1    0               00 
SQL: [;
;SELECT collate4i1 FROM collate4t1 WHERE +collate4i1 = (SELECT 'abc' COLLATE nocase) AND collate4i1 = (SELECT 1);]
VDBE Program Listing:
   0 Init             0   30    0               00 Start at 30
   1 OpenRead         1    4    0 k(2,,)        02 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   2 Explain          2    0    0 SEARCH TABLE collate4t1 USING COVERING INDEX sqlite_autoindex_collate4t1_1 (collate4i1=?) 00 
   3 Integer         11    2    0               00 r[2]=11; return address
   4 Once             0   11    0               00 
   5 Explain          5    0    0 SCALAR SUBQUERY 2 00 
   6 Null             0    3    3               00 r[3..3]=NULL; Init subquery result
   7 Integer          1    4    0               00 r[4]=1; LIMIT counter
   8 Explain          8    5    0 SCAN CONSTANT ROW 00 
   9 Integer          1    3    0               00 r[3]=1
  10 DecrJumpZero     4   11    0               00 if (--r[4])==0 goto 11
  11 Return           2    0    0               00 
  12 IsNull           3   29    0               00 if r[3]==NULL goto 29
  13 Affinity         3    1    0 C             00 affinity(r[3])
  14 SeekGE           1   29    3 1             00 key=r[3]
  15 IdxGT            1   29    3 1             00 key=r[3]
  16 Column           1    0    1               00 r[1]=collate4t1.collate4i1
  17 Integer         25    6    0               00 r[6]=25; return address
  18 Once             0   25    0               00 
  19 Explain         19    0    0 SCALAR SUBQUERY 1 00 
  20 Null             0    7    7               00 r[7..7]=NULL; Init subquery result
  21 Integer          1    8    0               00 r[8]=1; LIMIT counter
  22 Explain         22   19    0 SCAN CONSTANT ROW 00 
  23 String8          0    7    0 abc           00 r[7]='abc'
  24 DecrJumpZero     8   25    0               00 if (--r[8])==0 goto 25
  25 Return           6    0    0               00 
  26 Ne               7   29    1 (BINARY)      51 if r[1]!=r[7] goto 29
  27 Column           1    0    9               00 r[9]=collate4t1.collate4i1
  28 ResultRow        9    1    0               00 output=r[9]
  29 Halt             0    0    0               00 
  30 Transaction      0    0    5 0             01 usesStmtJournal=0
  31 Goto             0    1    0               00 
SQL: [;
;SELECT collate4i1 FROM collate4t1 WHERE a = (SELECT 'abc') COLLATE nocase AND a = (SELECT 1);]
VDBE Program Listing:
   0 Init             0   30    0               00 Start at 30
   1 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   2 Explain          2    0    0 SCAN TABLE collate4t1 00 
   3 Rewind           0   29    0               00 
   4 Column           0    1    1               00 r[1]=collate4t1.a
   5 Integer         13    3    0               00 r[3]=13; return address
   6 Once             0   13    0               00 
   7 Explain          7    0    0 SCALAR SUBQUERY 1 00 
   8 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   9 Integer          1    5    0               00 r[5]=1; LIMIT counter
  10 Explain         10    7    0 SCAN CONSTANT ROW 00 
  11 String8          0    4    0 abc           00 r[4]='abc'
  12 DecrJumpZero     5   13    0               00 if (--r[5])==0 goto 13
  13 Return           3    0    0               00 
  14 Ne               4   28    1 (NOCASE)      52 if r[1]!=r[4] goto 28
  15 Column           0    1    1               00 r[1]=collate4t1.a
  16 Integer         24    6    0               00 r[6]=24; return address
  17 Once             0   24    0               00 
  18 Explain         18    0    0 SCALAR SUBQUERY 2 00 
  19 Null             0    7    7               00 r[7..7]=NULL; Init subquery result
  20 Integer          1    8    0               00 r[8]=1; LIMIT counter
  21 Explain         21   18    0 SCAN CONSTANT ROW 00 
  22 Integer          1    7    0               00 r[7]=1
  23 DecrJumpZero     8   24    0               00 if (--r[8])==0 goto 24
  24 Return           6    0    0               00 
  25 Ne               7   28    1 (BINARY)      52 if r[1]!=r[7] goto 28
  26 Column           0    0    9               00 r[9]=collate4t1.collate4i1
  27 ResultRow        9    1    0               00 output=r[9]
  28 Next             0    4    0               01 
  29 Halt             0    0    0               00 
  30 Transaction      0    0    5 0             01 usesStmtJournal=0
  31 Goto             0    1    0               00 
SQL: [;
;SELECT a FROM collate4t1 WHERE (a COLLATE nocase, collate4i1) IS NOT (SELECT 'def', 2);]
VDBE Program Listing:
   0 Init             0   24    0               00 Start at 24
   1 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   2 Explain          2    0    0 SCAN TABLE collate4t1 00 
   3 Rewind           0   23    0               00 
   4 Integer         13    2    0               00 r[2]=13; return address
   5 Once             0   13    0               00 
   6 Explain          6    0    0 SCALAR SUBQUERY 1 00 
   7 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   8 Integer          1    5    0               00 r[5]=1; LIMIT counter
   9 Explain          9    6    0 SCAN CONSTANT ROW 00 
  10 String8          0    3    0 def           00 r[3]='def'
  11 Integer          2    4    0               00 r[4]=2
  12 DecrJumpZero     5   13    0               00 if (--r[5])==0 goto 13
  13 Return           2    0    0               00 
  14 Column           0    1    6               00 r[6]=collate4t1.a
  15 Ne               3    1    6 (NOCASE)      E2 r[1] = (r[6]!=r[3])
  16 If               1   19    0               00 
  17 Column           0    0    6               00 r[6]=collate4t1.collate4i1
  18 Ne               4    1    6 (BINARY)      EB r[1] = (r[6]!=r[4])
  19 IfNot            1   22    1               00 
  20 Column           0    1    7               00 r[7]=collate4t1.a
  21 ResultRow        7    1    0               00 output=r[7]
  22 Next             0    4    0               01 
  23 Halt             0    0    0               00 
  24 Transaction      0    0    5 0             01 usesStmtJournal=0
  25 Goto             0    1    0               00 
SQL: [;
;SELECT a FROM collate4t1 WHERE (a, collate4i1) = (SELECT 2, 'def');]
VDBE Program Listing:
   0 Init             0   24    0               00 Start at 24
   1 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   2 OpenRead         1    4    0 k(2,,)        02 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   3 Explain          3    0    0 SEARCH TABLE collate4t1 USING INDEX sqlite_autoindex_collate4t1_1 (collate4i1=?) 00 
   4 Integer         13    2    0               00 r[2]=13; return address
   5 Once             0   13    0               00 
   6 Explain          6    0    0 SCALAR SUBQUERY 1 00 
   7 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   8 Integer          1    5    0               00 r[5]=1; LIMIT counter
   9 Explain          9    6    0 SCAN CONSTANT ROW 00 
  10 Integer          2    3    0               00 r[3]=2
  11 String8          0    4    0 def           00 r[4]='def'
  12 DecrJumpZero     5   13    0               00 if (--r[5])==0 goto 13
  13 Return           2    0    0               00 
  14 IsNull           4   23    0               00 if r[4]==NULL goto 23
  15 Affinity         4    1    0 C             00 affinity(r[4])
  16 SeekGE           1   23    4 1             00 key=r[4]
  17 IdxGT            1   23    4 1             00 key=r[4]
  18 DeferredSeek     1    0    0               00 Move 0 to 1.rowid if needed
  19 Column           0    1    1               00 r[1]=collate4t1.a
  20 Ne               3   23    1 (BINARY)      52 if r[1]!=r[3] goto 23
  21 Column           0    1    7               00 r[7]=collate4t1.a
  22 ResultRow        7    1    0               00 output=r[7]
  23 Halt             0    0    0               00 
  24 Transaction      0    0    5 0             01 usesStmtJournal=0
  25 Goto             0    1    0               00 
SQL: [;
;CREATE TABLE y(t0 INTEGER PRIMARY KEY, t1a, z);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 y             00 r[7]='y'
  20 String8          0    8    0 y             00 r[8]='y'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE y(t0 INTEGER PRIMARY KEY, t1a, z) 00 r[10]='CREATE TABLE y(t0 INTEGER PRIMARY KEY, t1a, z)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    6               00 
  26 ParseSchema      0    0    0 tbl_name='y' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    5 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    6 0             00 usesStmtJournal=0
  16 String8          0    2    0 y             00 r[2]='y'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO y VALUES(3, 3, 3);]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 OpenWrite        0    8    0 3             00 root=8 iDb=0; y
   2 Integer          3    1    0               00 r[1]=3
   3 NotNull          1    5    0               00 if r[1]!=NULL goto 5
   4 NewRowid         0    1    0               00 r[1]=rowid
   5 MustBeInt        1    0    0               00 
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 Integer          3    3    0               00 r[3]=3
   8 Integer          3    4    0               00 r[4]=3
   9 Noop             0    0    0               00 uniqueness check for ROWID
  10 Abortable        0    0    0               00 
  11 NotExists        0   13    1               00 intkey=r[1]
  12 Halt          1555    2    0 y.t0          02 
  13 MakeRecord       2    3    5 D             00 r[5]=mkrec(r[2..4])
  14 Insert           0    5    1 y             31 intkey=r[1] data=r[5]
  15 Halt             0    0    0               00 
  16 Transaction      0    1    6 0             01 usesStmtJournal=0
  17 Goto             0    1    0               00 
SQL: [SELECT * FROM collate4t1 WHERE (a, collate4i1) IS (2, 2)
;]
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   2 OpenRead         1    4    0 k(2,,)        02 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   3 Explain          3    0    0 SEARCH TABLE collate4t1 USING INDEX sqlite_autoindex_collate4t1_1 (collate4i1=?) 00 
   4 Integer          2    1    0               00 r[1]=2
   5 SeekGE           1   14    1 1             00 key=r[1]
   6 IdxGT            1   14    1 1             00 key=r[1]
   7 DeferredSeek     1    0    0               00 Move 0 to 1.rowid if needed
   8 Column           0    1    2               00 r[2]=collate4t1.a
   9 Ne               3   13    2 (BINARY)      C2 if r[2]!=r[3] goto 13
  10 Column           1    0    4               00 r[4]=collate4t1.collate4i1
  11 Column           0    1    5               00 r[5]=collate4t1.a
  12 ResultRow        4    2    0               00 output=r[4..5]
  13 Next             1    6    1               00 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    6 0             01 usesStmtJournal=0
  16 Integer          2    3    0               00 r[3]=2
  17 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE (x, x) < (2, 3)
;]
VDBE Program Listing:
   0 Init             0   14    0               00 Start at 14
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           0   13    0               00 
   4 Column           0    0    2               00 r[2]=t1.x
   5 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   6 ElseNotEq        0    9    0               00 
   7 Column           0    0    2               00 r[2]=t1.x
   8 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
   9 IfNot            1   12    1               00 
  10 Column           0    0    5               00 r[5]=t1.x
  11 ResultRow        5    1    0               00 output=r[5]
  12 Next             0    4    0               01 
  13 Halt             0    0    0               00 
  14 Transaction      0    0    6 0             01 usesStmtJournal=0
  15 Integer          2    3    0               00 r[3]=2
  16 Integer          3    4    0               00 r[4]=3
  17 Goto             0    1    0               00 
SQL: [CREATE TABLE t1b(bad1);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t1b           00 r[7]='t1b'
  20 String8          0    8    0 t1b           00 r[8]='t1b'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t1b(bad1) 00 r[10]='CREATE TABLE t1b(bad1)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    7               00 
  26 ParseSchema      0    0    0 tbl_name='t1b' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    6 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    7 0             00 usesStmtJournal=0
  16 String8          0    2    0 t1b           00 r[2]='t1b'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM d WHERE (select min(tr1) FROM d) IN (?, ?, ?)

;]
VDBE Program Listing:
   0 Init             0   44    0               00 Start at 44
   1 OpenRead         0    6    0 3             00 root=6 iDb=0; d
   2 Explain          2    0    0 SCAN TABLE d  00 
   3 Rewind           0   43    0               00 
   4 Noop             0    0    0               00 begin IN expr
   5 Integer         17    1    0               00 r[1]=17; return address
   6 Once             0   17    0               00 
   7 OpenEphemeral    2    1    0 k(1,)         00 nColumn=1; RHS of IN operator
   8 Variable         1    2    0               00 r[2]=parameter(1,)
   9 MakeRecord       2    1    3 A             00 r[3]=mkrec(r[2])
  10 IdxInsert        2    3    2 1             00 key=r[3]
  11 Variable         2    2    0               00 r[2]=parameter(2,)
  12 MakeRecord       2    1    3 A             00 r[3]=mkrec(r[2])
  13 IdxInsert        2    3    2 1             00 key=r[3]
  14 Variable         3    2    0               00 r[2]=parameter(3,)
  15 MakeRecord       2    1    3 A             00 r[3]=mkrec(r[2])
  16 IdxInsert        2    3    2 1             00 key=r[3]
  17 Return           1    0    0               00 
  18 Integer         34    4    0               00 r[4]=34; return address
  19 Once             0   34    0               00 
  20 Explain         20    0    0 SCALAR SUBQUERY 1 00 
  21 Null             0    5    5               00 r[5..5]=NULL; Init subquery result
  22 Integer          1    6    0               00 r[6]=1; LIMIT counter
  23 Null             0    7    8               00 r[7..8]=NULL
  24 OpenRead         1    6    0 3             00 root=6 iDb=0; d
  25 Explain         25   20    0 SEARCH TABLE d 00 
  26 Rewind           1   31    0               00 
  27 Column           1    2    2               00 r[2]=d.tr1
  28 CollSeq          0    0    0 (BINARY)      00 
  29 AggStep          0    2    7 min(1)        01 accum=r[7] step(r[2])
  30 Next             1   27    0               01 
  31 AggFinal         7    1    0 min(1)        00 accum=r[7] N=1
  32 Copy             7    5    0               00 r[5]=r[7]
  33 DecrJumpZero     6   34    0               00 if (--r[6])==0 goto 34
  34 Return           4    0    0               00 
  35 IsNull           5   42    0               00 if r[5]==NULL goto 42
  36 Affinity         5    1    0               00 affinity(r[5])
  37 NotFound         2   42    5 1             00 key=r[5]; end IN expr
  38 Column           0    0    9               00 r[9]=d.xyz1
  39 Column           0    1   10               00 r[10]=d.t2
  40 Column           0    2   11               00 r[11]=d.tr1
  41 ResultRow        9    3    0               00 output=r[9..11]
  42 Next             0    4    0               01 
  43 Halt             0    0    0               00 
  44 Transaction      0    0    7 0             01 usesStmtJournal=0
  45 Goto             0    1    0               00 
SQL: [;INSERT INTO d VALUES(4, 4, 4);]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 OpenWrite        0    6    0 3             00 root=6 iDb=0; d
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          4    2    0               00 r[2]=4
   4 Integer          4    3    0               00 r[3]=4
   5 Integer          4    4    0               00 r[4]=4
   6 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
   7 Insert           0    5    1 d             39 intkey=r[1] data=r[5]
   8 Halt             0    0    0               00 
   9 Transaction      0    1    7 0             01 usesStmtJournal=0
  10 Goto             0    1    0               00 
SQL: [SELECT x FROM t1 WHERE (x, x) > (2, 2)
;]
VDBE Program Listing:
   0 Init             0   14    0               00 Start at 14
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           0   13    0               00 
   4 Column           0    0    2               00 r[2]=t1.x
   5 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   6 ElseNotEq        0    9    0               00 
   7 Column           0    0    2               00 r[2]=t1.x
   8 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   9 IfNot            1   12    1               00 
  10 Column           0    0    4               00 r[4]=t1.x
  11 ResultRow        4    1    0               00 output=r[4]
  12 Next             0    4    0               01 
  13 Halt             0    0    0               00 
  14 Transaction      0    0    7 0             01 usesStmtJournal=0
  15 Integer          2    3    0               00 r[3]=2
  16 Goto             0    1    0               00 
SQL: [CREATE TABLE t1c(t2a1);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t1c           00 r[7]='t1c'
  20 String8          0    8    0 t1c           00 r[8]='t1c'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t1c(t2a1) 00 r[10]='CREATE TABLE t1c(t2a1)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    8               00 
  26 ParseSchema      0    0    0 tbl_name='t1c' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    7 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    8 0             00 usesStmtJournal=0
  16 String8          0    2    0 t1c           00 r[2]='t1c'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE TABLE t2a2(t3 TEXT,t3a TEXT,t3b TEXT,t6 TEXT,t6ab TEXT,t6b TEXT);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t2a2          00 r[7]='t2a2'
  20 String8          0    8    0 t2a2          00 r[8]='t2a2'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t2a2(t3 TEXT,t3a TEXT,t3b TEXT,t6 TEXT,t6ab TEXT,t6b TEXT) 00 r[10]='CREATE TABLE t2a2(t3 TEXT,t3a TEXT,t3b TEXT,t6 TEXT,t6ab TEXT,t6b TEXT)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    9               00 
  26 ParseSchema      0    0    0 tbl_name='t2a2' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    8 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    9 0             00 usesStmtJournal=0
  16 String8          0    2    0 t2a2          00 r[2]='t2a2'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;SELECT a FROM collate4t1
    WHERE (collate4i1,a) IN (SELECT 'collate4i1','a' FROM t1b)
    AND (a,a,a) IN (SELECT 'a','a','a' FROM t1b);]
VDBE Program Listing:
   0 Init             0   70    0               00 Start at 70
   1 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   2 OpenRead         3    4    0 k(2,,)        02 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   3 Explain          3    0    0 SEARCH TABLE collate4t1 USING INDEX sqlite_autoindex_collate4t1_1 (collate4i1=?) 00 
   4 Integer         15    2    0               00 r[2]=15; return address
   5 Once             0   15    0               00 
   6 OpenEphemeral    4    1    0 k(1,B)        00 nColumn=1; Result of SELECT 1
   7 Explain          7    0    0 LIST SUBQUERY 1 00 
   8 OpenRead         1    9    0 0             00 root=9 iDb=0; t1b
   9 Explain          9    7    0 SCAN TABLE t1b 00 
  10 Rewind           1   15    0               00 
  11 String8          0    3    0 collate4i1    00 r[3]='collate4i1'
  12 MakeRecord       3    1    4 C             00 r[4]=mkrec(r[3])
  13 IdxInsert        4    4    3 1             00 key=r[4]
  14 Next             1   11    0               01 
  15 Return           2    0    0               00 
  16 Rewind           4   69    0               00 
  17 Column           4    0    1               00 r[1]=
  18 IsNull           1   68    0               00 if r[1]==NULL goto 68
  19 SeekGE           3   68    1 1             00 key=r[1]
  20 IdxGT            3   68    1 1             00 key=r[1]
  21 DeferredSeek     3    0    0               00 Move 0 to 3.rowid if needed
  22 Noop             0    0    0               00 begin IN expr
  23 Integer         35    5    0               00 r[5]=35; return address
  24 Once             0   35    0               00 
  25 OpenEphemeral    5    2    0 k(2,B,B)      00 nColumn=2; Result of SELECT 1
  26 Explain         26    0    0 LIST SUBQUERY 1 00 
  27 OpenRead         1    9    0 0             00 root=9 iDb=0; t1b
  28 Explain         28   26    0 SCAN TABLE t1b 00 
  29 Rewind           1   35    0               00 
  30 String8          0    6    0 collate4i1    00 r[6]='collate4i1'
  31 String8          0    7    0 a             00 r[7]='a'
  32 MakeRecord       6    2    4 CB            00 r[4]=mkrec(r[6..7])
  33 IdxInsert        5    4    6 2             00 key=r[4]
  34 Next             1   30    0               01 
  35 Return           5    0    0               00 
  36 Column           3    0    8               00 r[8]=collate4t1.collate4i1
  37 Column           0    1    9               00 r[9]=collate4t1.a
  38 IsNull           8   67    0               00 if r[8]==NULL goto 67
  39 IsNull           9   67    0               00 if r[9]==NULL goto 67
  40 Affinity         8    2    0 CB            00 affinity(r[8..9])
  41 NotFound         5   67    8 2             00 key=r[8..9]; end IN expr
  42 Noop             0    0    0               00 begin IN expr
  43 Integer         56   10    0               00 r[10]=56; return address
  44 Once             0   56    0               00 
  45 OpenEphemeral    6    3    0 k(3,B,B,B)    00 nColumn=3; Result of SELECT 2
  46 Explain         46    0    0 LIST SUBQUERY 2 00 
  47 OpenRead         2    9    0 0             00 root=9 iDb=0; t1b
  48 Explain         48   46    0 SCAN TABLE t1b 00 
  49 Rewind           2   56    0               00 
  50 String8          0   11    0 a             00 r[11]='a'
  51 String8          0   12    0 a             00 r[12]='a'
  52 String8          0   13    0 a             00 r[13]='a'
  53 MakeRecord      11    3    4 BBB           00 r[4]=mkrec(r[11..13])
  54 IdxInsert        6    4   11 3             00 key=r[4]
  55 Next             2   50    0               01 
  56 Return          10    0    0               00 
  57 Column           0    1   14               00 r[14]=collate4t1.a
  58 Column           0    1   15               00 r[15]=collate4t1.a
  59 Column           0    1   16               00 r[16]=collate4t1.a
  60 IsNull          14   67    0               00 if r[14]==NULL goto 67
  61 IsNull          15   67    0               00 if r[15]==NULL goto 67
  62 IsNull          16   67    0               00 if r[16]==NULL goto 67
  63 Affinity        14    3    0 BBB           00 affinity(r[14..16])
  64 NotFound         6   67   14 3             00 key=r[14..16]; end IN expr
  65 Column           0    1   17               00 r[17]=collate4t1.a
  66 ResultRow       17    1    0               00 output=r[17]
  67 Next             3   20    0               00 
  68 Next             4   17    0               00 
  69 Halt             0    0    0               00 
  70 Transaction      0    0    9 0             01 usesStmtJournal=0
  71 Goto             0    1    0               00 
SQL: [;
;CREATE TABLE t7a(t7b);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t7a           00 r[7]='t7a'
  20 String8          0    8    0 t7a           00 r[8]='t7a'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t7a(t7b) 00 r[10]='CREATE TABLE t7a(t7b)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   10               00 
  26 ParseSchema      0    0    0 tbl_name='t7a' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    9 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   10 0             00 usesStmtJournal=0
  16 String8          0    2    0 t7a           00 r[2]='t7a'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE TABLE t7ax(t8a,t8b);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t7ax          00 r[7]='t7ax'
  20 String8          0    8    0 t7ax          00 r[8]='t7ax'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t7ax(t8a,t8b) 00 r[10]='CREATE TABLE t7ax(t8a,t8b)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   11               00 
  26 ParseSchema      0    0    0 tbl_name='t7ax' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   10 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   11 0             00 usesStmtJournal=0
  16 String8          0    2    0 t7ax          00 r[2]='t7ax'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [SELECT CASE (2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;]
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               5    4    2               61 r[4] = (r[2]==r[5])
   3 IfNot            4    5    0               00 
   4 Eq               5    4    3               69 r[4] = (r[3]==r[5])
   5 IfNot            4    8    1               00 
   6 Integer          2    1    0               00 r[1]=2
   7 Goto             0    9    0               00 
   8 Integer          1    1    0               00 r[1]=1
   9 ResultRow        1    1    0               00 output=r[1]
  10 Halt             0    0    0               00 
  11 Integer          2    2    0               00 r[2]=2
  12 Integer          2    3    0               00 r[3]=2
  13 Integer          1    5    0               00 r[5]=1
  14 Goto             0    1    0               00 
SQL: [;CREATE TABLE i8c(t9 INTEGER PRIMARY KEY, t9ca);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 i8c           00 r[7]='i8c'
  20 String8          0    8    0 i8c           00 r[8]='i8c'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE i8c(t9 INTEGER PRIMARY KEY, t9ca) 00 r[10]='CREATE TABLE i8c(t9 INTEGER PRIMARY KEY, t9ca)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   12               00 
  26 ParseSchema      0    0    0 tbl_name='i8c' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   11 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   12 0             00 usesStmtJournal=0
  16 String8          0    2    0 i8c           00 r[2]='i8c'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [
;CREATE TABLE t10(e,t10x,t11);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t10           00 r[7]='t10'
  20 String8          0    8    0 t10           00 r[8]='t10'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t10(e,t10x,t11) 00 r[10]='CREATE TABLE t10(e,t10x,t11)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   13               00 
  26 ParseSchema      0    0    0 tbl_name='t10' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   12 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   13 0             00 usesStmtJournal=0
  16 String8          0    2    0 t10           00 r[2]='t10'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO t2a2(t6b) VALUES(1);]
VDBE Program Listing:
   0 Init             0    7    0               00 Start at 7
   1 OpenWrite        0   11    0 6             00 root=11 iDb=0; t2a2
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          1    7    0               00 r[7]=1
   4 MakeRecord       2    6    8 BBBBBB        00 r[8]=mkrec(r[2..7])
   5 Insert           0    8    1 t2a2          39 intkey=r[1] data=r[8]
   6 Halt             0    0    0               00 
   7 Transaction      0    1   13 0             01 usesStmtJournal=0
   8 Null             0    2    0               00 r[2]=NULL
   9 Null             0    3    0               00 r[3]=NULL
  10 Null             0    4    0               00 r[4]=NULL
  11 Null             0    5    0               00 r[5]=NULL
  12 Null             0    6    0               00 r[6]=NULL
  13 Goto             0    1    0               00 
SQL: [;CREATE TRIGGER t11x AFTER INSERT ON y BEGIN
    UPDATE y SET (t1a, z) = (SELECT 'z', 't0'), (t0, t0) = (SELECT 't1a', 'z')
      WHERE z = new.z-1;
  END;]
VDBE Program Listing:
   0 Init             0   13    0               00 Start at 13
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 String8          0    2    0 trigger       00 r[2]='trigger'
   4 String8          0    3    0 t11x          00 r[3]='t11x'
   5 String8          0    4    0 y             00 r[4]='y'
   6 Integer          0    5    0               00 r[5]=0
   7 String8          0    6    0 CREATE TRIGGER t11x AFTER INSERT ON y BEGIN
    UPDATE y SET (t1a, z) = (SELECT 'z', 't0'), (t0, t0) = (SELECT 't1a', 'z')
      WHERE z = new.z-1;
  END 00 r[6]='CREATE TRIGGER t11x AFTER INSERT ON y BEGIN
    UPDATE y SET (t1a, z) = (SELECT 'z', 't0'), (
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
  10 SetCookie        0    1   14               00 
  11 ParseSchema      0    0    0 type='trigger' AND name='t11x' 00 
  12 Halt             0    0    0               00 
  13 Transaction      0    1   13 0             01 usesStmtJournal=0
  14 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    1    1               00 r[1]=sqlite_master.name
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   14 0             00 usesStmtJournal=0
  16 String8          0    2    0 trigger       00 r[2]='trigger'
  17 String8          0    3    0 t11x          00 r[3]='t11x'
  18 Goto             0    1    0               00 
SQL: [;SELECT * FROM t1;]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           0    7    0               00 
   4 Column           0    0    1               00 r[1]=t1.x
   5 ResultRow        1    1    0               00 output=r[1]
   6 Next             0    4    0               01 
   7 Halt             0    0    0               00 
   8 Transaction      0    0   14 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [;SELECT * FROM t1b;]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenRead         0    9    0 1             00 root=9 iDb=0; t1b
   2 Explain          2    0    0 SCAN TABLE t1b 00 
   3 Rewind           0    7    0               00 
   4 Column           0    0    1               00 r[1]=t1b.bad1
   5 ResultRow        1    1    0               00 output=r[1]
   6 Next             0    4    0               01 
   7 Halt             0    0    0               00 
   8 Transaction      0    0   14 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [;CREATE TABLE c0(index_0);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 c0            00 r[7]='c0'
  20 String8          0    8    0 c0            00 r[8]='c0'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE c0(index_0) 00 r[10]='CREATE TABLE c0(index_0)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   15               00 
  26 ParseSchema      0    0    0 tbl_name='c0' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   14 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   15 0             00 usesStmtJournal=0
  16 String8          0    2    0 c0            00 r[2]='c0'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;CREATE TABLE sqlsim0 ( sqlsim1, sqlsim2, PRIMARY KEY (sqlsim1, sqlsim2) );]
VDBE Program Listing:
   0 Init             0   39    0               00 Start at 39
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Noop             0   22    0               00 
  12 CreateBtree      0    4    2               00 r[4]=root iDb=0 flags=2
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 NewRowid         1    5    0               00 r[5]=rowid
  15 String8          0    6    0 index         00 r[6]='index'
  16 String8          0    7    0 sqlite_autoindex_sqlsim0_1 00 r[7]='sqlite_autoindex_sqlsim0_1'
  17 String8          0    8    0 sqlsim0       00 r[8]='sqlsim0'
  18 Copy             4    9    0               00 r[9]=r[4]
  19 Null             0   10    0               00 r[10]=NULL
  20 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  21 Insert           1   11    5               18 intkey=r[5] data=r[11]
  22 Close            0    0    0               00 
  23 Null             0   12   13               00 r[12..13]=NULL
  24 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  25 Explain         25    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  26 SeekRowid        2   28    1               00 intkey=r[1]
  27 Rowid            2   13    0               00 r[13]=rowid
  28 IsNull          13   36    0               00 if r[13]==NULL goto 36
  29 String8          0   14    0 table         00 r[14]='table'
  30 String8          0   15    0 sqlsim0       00 r[15]='sqlsim0'
  31 String8          0   16    0 sqlsim0       00 r[16]='sqlsim0'
  32 Copy             2   17    0               00 r[17]=r[2]
  33 String8          0   18    0 CREATE TABLE sqlsim0 ( sqlsim1, sqlsim2, PRIMARY KEY (sqlsim1, sqlsim2) ) 00 r[18]='CREATE TABLE sqlsim0 ( sqlsim1, sqlsim2, PRIMARY KEY (sqlsim1, sqlsim2) )'
  34 MakeRecord      14    5   19 BBBDB         00 r[19]=mkrec(r[14..18])
  35 Insert           2   19   13               00 intkey=r[13] data=r[19]
  36 SetCookie        0    1   16               00 
  37 ParseSchema      0    0    0 tbl_name='sqlsim0' AND type!='trigger' 00 
  38 Halt             0    0    0               00 
  39 Transaction      0    1   15 0             01 usesStmtJournal=0
  40 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   16 0             00 usesStmtJournal=0
  16 String8          0    2    0 sqlsim0       00 r[2]='sqlsim0'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE TABLE sqlsim3 ( sqlsim4 );]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 sqlsim3       00 r[7]='sqlsim3'
  20 String8          0    8    0 sqlsim3       00 r[8]='sqlsim3'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE sqlsim3 ( sqlsim4 ) 00 r[10]='CREATE TABLE sqlsim3 ( sqlsim4 )'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   17               00 
  26 ParseSchema      0    0    0 tbl_name='sqlsim3' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   16 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   17 0             00 usesStmtJournal=0
  16 String8          0    2    0 sqlsim3       00 r[2]='sqlsim3'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;DROP TABLE IF EXISTS i8c;]
VDBE Program Listing:
   0 Init             0   38    0               00 Start at 38
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
   7 Column           0    0    2               00 r[2]=sqlite_master.type
   8 Eq               4   12    2 (BINARY)      52 if r[2]==r[4] goto 12
   9 Rowid            0    5    0               00 r[5]=rowid
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
  13 Destroy         14    2    0               00 
  14 Null             0    6    7               00 r[6..7]=NULL
  15 IfNot            2   24    1               00 
  16 OpenRead         1    1    0 4             00 root=1 iDb=0; sqlite_master
  17 Explain         17    0    0 SCAN TABLE sqlite_master 00 
  18 Rewind           1   24    0               00 
  19 Column           1    3   13               00 r[13]=sqlite_master.rootpage
  20 Ne               2   23   13 (BINARY)      54 if r[13]!=r[2] goto 23
  21 Rowid            1    7    0               00 r[7]=rowid
  22 RowSetAdd        6    7    0               00 rowset(6)=r[7]
  23 Next             1   19    0               01 
  24 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  25 RowSetRead       6   35    7               00 r[7]=rowset(6)
  26 NotExists        1   25    7               00 intkey=r[7]
  27 Column           1    0    8               00 r[8]=sqlite_master.type
  28 Column           1    1    9               00 r[9]=sqlite_master.name
  29 Column           1    2   10               00 r[10]=sqlite_master.tbl_name
  30 Integer         14   11    0               00 r[11]=14
  31 Column           1    4   12               00 r[12]=sqlite_master.sql
  32 MakeRecord       8    5   13 BBBDB         00 r[13]=mkrec(r[8..12])
  33 Insert           1   13    7               00 intkey=r[7] data=r[13]
  34 Goto             0   25    0               00 
  35 DropTable        0    0    0 i8c           00 
  36 SetCookie        0    1   18               00 
  37 Halt             0    0    0               00 
  38 Transaction      0    1   17 0             01 usesStmtJournal=1
  39 String8          0    3    0 i8c           00 r[3]='i8c'
  40 String8          0    4    0 trigger       00 r[4]='trigger'
  41 Goto             0    1    0               00 
SQL: [;CREATE TABLE sqlsim5(sqlsim6 INTEGER PRIMARY KEY,sqlsim7);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 sqlsim5       00 r[7]='sqlsim5'
  20 String8          0    8    0 sqlsim5       00 r[8]='sqlsim5'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE sqlsim5(sqlsim6 INTEGER PRIMARY KEY,sqlsim7) 00 r[10]='CREATE TABLE sqlsim5(sqlsim6 INTEGER PRIMARY KEY,sqlsim7)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   19               00 
  26 ParseSchema      0    0    0 tbl_name='sqlsim5' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   18 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   19 0             00 usesStmtJournal=0
  16 String8          0    2    0 sqlsim5       00 r[2]='sqlsim5'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;SELECT * FROM collate4t1 WHERE (collate4i1,a)>(0,0) ORDER BY collate4i1;]
VDBE Program Listing:
   0 Init             0   20    0               00 Start at 20
   1 Noop             1    4    0               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 OpenRead         2    4    0 k(2,,)        00 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   4 Explain          4    0    0 SEARCH TABLE collate4t1 USING INDEX sqlite_autoindex_collate4t1_1 (collate4i1>?) 00 
   5 Integer          0    1    0               00 r[1]=0
   6 IsNull           1   19    0               00 if r[1]==NULL goto 19
   7 SeekGE           2   19    1 1             00 key=r[1]
   8 DeferredSeek     2    0    0               00 Move 0 to 2.rowid if needed
   9 Column           2    0    3               00 r[3]=collate4t1.collate4i1
  10 Gt               4    2    3 (BINARY)      63 r[2] = (r[3]>r[4])
  11 ElseNotEq        0   14    0               00 
  12 Column           0    1    3               00 r[3]=collate4t1.a
  13 Gt               4    2    3 (BINARY)      62 r[2] = (r[3]>r[4])
  14 IfNot            2   18    1               00 
  15 Column           2    0    5               00 r[5]=collate4t1.collate4i1
  16 Column           0    1    6               00 r[6]=collate4t1.a
  17 ResultRow        5    2    0               00 output=r[5..6]
  18 Next             2    8    0               00 
  19 Halt             0    0    0               00 
  20 Transaction      0    0   19 0             01 usesStmtJournal=0
  21 Integer          0    4    0               00 r[4]=0
  22 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM y WHERE (t0,t1a)>(3,0) ORDER BY t0;]
VDBE Program Listing:
   0 Init             0   18    0               00 Start at 18
   1 Noop             1    5    0               00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; y
   3 Explain          3    0    0 SEARCH TABLE y USING INTEGER PRIMARY KEY (rowid>?) 00 
   4 Integer          3    1    0               00 r[1]=3
   5 SeekGE           0   17    1               00 key=r[1]; pk
   6 Rowid            0    2    0               00 r[2]=rowid
   7 Gt               3    1    2               64 r[1] = (r[2]>r[3])
   8 ElseNotEq        0   11    0               00 
   9 Column           0    1    2               00 r[2]=y.t1a
  10 Gt               4    1    2 (BINARY)      61 r[1] = (r[2]>r[4])
  11 IfNot            1   16    1               00 
  12 Rowid            0    5    0               00 r[5]=rowid
  13 Column           0    1    6               00 r[6]=y.t1a
  14 Column           0    2    7               00 r[7]=y.z
  15 ResultRow        5    3    0               00 output=r[5..7]
  16 Next             0    6    0               00 
  17 Halt             0    0    0               00 
  18 Transaction      0    0   19 0             01 usesStmtJournal=0
  19 Integer          3    3    0               00 r[3]=3
  20 Integer          0    4    0               00 r[4]=0
  21 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM y WHERE (t0,z)>=(3,0) ORDER BY t0;]
VDBE Program Listing:
   0 Init             0   18    0               00 Start at 18
   1 Noop             1    5    0               00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; y
   3 Explain          3    0    0 SEARCH TABLE y USING INTEGER PRIMARY KEY (rowid>?) 00 
   4 Integer          3    1    0               00 r[1]=3
   5 SeekGE           0   17    1               00 key=r[1]; pk
   6 Rowid            0    2    0               00 r[2]=rowid
   7 Gt               3    1    2               64 r[1] = (r[2]>r[3])
   8 ElseNotEq        0   11    0               00 
   9 Column           0    2    2               00 r[2]=y.z
  10 Ge               4    1    2 (BINARY)      61 r[1] = (r[2]>=r[4])
  11 IfNot            1   16    1               00 
  12 Rowid            0    5    0               00 r[5]=rowid
  13 Column           0    1    6               00 r[6]=y.t1a
  14 Column           0    2    7               00 r[7]=y.z
  15 ResultRow        5    3    0               00 output=r[5..7]
  16 Next             0    6    0               00 
  17 Halt             0    0    0               00 
  18 Transaction      0    0   19 0             01 usesStmtJournal=0
  19 Integer          3    3    0               00 r[3]=3
  20 Integer          0    4    0               00 r[4]=0
  21 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM collate4t1 WHERE (a,a)>=(3,34) ORDER BY a;]
VDBE Program Listing:
   0 Init             0   25    0               00 Start at 25
   1 SorterOpen       1    4    0 k(1,B)        00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0   16    0               00 
   5 Column           0    1    2               00 r[2]=collate4t1.a
   6 Gt               3    1    2 (BINARY)      62 r[1] = (r[2]>r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    1    2               00 r[2]=collate4t1.a
   9 Ge               4    1    2 (BINARY)      62 r[1] = (r[2]>=r[4])
  10 IfNot            1   15    1               00 
  11 Column           0    0    6               00 r[6]=collate4t1.collate4i1
  12 Column           0    1    5               00 r[5]=collate4t1.a
  13 MakeRecord       5    2    8               00 r[8]=mkrec(r[5..6])
  14 SorterInsert     1    8    5 2             00 key=r[8]
  15 Next             0    5    0               01 
  16 Explain         16    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  17 OpenPseudo       2    9    4               00 4 columns in r[9]
  18 SorterSort       1   24    0               00 
  19 SorterData       1    9    2               00 r[9]=data
  20 Column           2    0    7               00 r[7]=a
  21 Column           2    1    6               00 r[6]=collate4i1
  22 ResultRow        6    2    0               00 output=r[6..7]
  23 SorterNext       1   19    0               00 
  24 Halt             0    0    0               00 
  25 Transaction      0    0   19 0             01 usesStmtJournal=0
  26 Integer          3    3    0               00 r[3]=3
  27 Integer         34    4    0               00 r[4]=34
  28 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t1 WHERE (x,x)<(3,33) ORDER BY x DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t1.x
   9 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=t1.x
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=x
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   19 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer         33    4    0               00 r[4]=33
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t1b WHERE (bad1,bad1)<=(3,33) ORDER BY bad1 DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0    9    0 1             00 root=9 iDb=0; t1b
   3 Explain          3    0    0 SCAN TABLE t1b 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t1b.bad1
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t1b.bad1
   9 Le               4    1    2 (BINARY)      61 r[1] = (r[2]<=r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=t1b.bad1
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=bad1
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   19 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer         33    4    0               00 r[4]=33
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM y WHERE (0,0)<(t0,z) ORDER BY t0;]
VDBE Program Listing:
   0 Init             0   18    0               00 Start at 18
   1 Noop             1    5    0               00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; y
   3 Explain          3    0    0 SEARCH TABLE y USING INTEGER PRIMARY KEY (rowid>?) 00 
   4 Integer          0    1    0               00 r[1]=0
   5 SeekGE           0   17    1               00 key=r[1]; pk
   6 Rowid            0    2    0               00 r[2]=rowid
   7 Gt               3    1    2               64 r[1] = (r[2]>r[3])
   8 ElseNotEq        0   11    0               00 
   9 Column           0    2    2               00 r[2]=y.z
  10 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
  11 IfNot            1   16    1               00 
  12 Rowid            0    4    0               00 r[4]=rowid
  13 Column           0    1    5               00 r[5]=y.t1a
  14 Column           0    2    6               00 r[6]=y.z
  15 ResultRow        4    3    0               00 output=r[4..6]
  16 Next             0    6    0               00 
  17 Halt             0    0    0               00 
  18 Transaction      0    0   19 0             01 usesStmtJournal=0
  19 Integer          0    3    0               00 r[3]=0
  20 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t1c WHERE (0,0)<=(t2a1,t2a1) ORDER BY t2a1;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,B)        00 
   2 OpenRead         0   10    0 1             00 root=10 iDb=0; t1c
   3 Explain          3    0    0 SCAN TABLE t1c 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t1c.t2a1
   6 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t1c.t2a1
   9 Ge               3    1    2 (BINARY)      61 r[1] = (r[2]>=r[3])
  10 IfNot            1   14    1               00 
  11 Column           0    0    4               00 r[4]=t1c.t2a1
  12 MakeRecord       4    1    6               00 r[6]=mkrec(r[4])
  13 SorterInsert     1    6    4 1             00 key=r[6]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    7    3               00 3 columns in r[7]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    7    2               00 r[7]=data
  19 Column           2    0    5               00 r[5]=t2a1
  20 ResultRow        5    1    0               00 output=r[5]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   19 0             01 usesStmtJournal=0
  24 Integer          0    3    0               00 r[3]=0
  25 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t7a WHERE (5,0)>=(t7b,t7b) ORDER BY t7b DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0   12    0 1             00 root=12 iDb=0; t7a
   3 Explain          3    0    0 SCAN TABLE t7a 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t7a.t7b
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t7a.t7b
   9 Le               4    1    2 (BINARY)      61 r[1] = (r[2]<=r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=t7a.t7b
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=t7b
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   19 0             01 usesStmtJournal=0
  24 Integer          5    3    0               00 r[3]=5
  25 Integer          0    4    0               00 r[4]=0
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM collate4t1 WHERE (3,0)<(collate4i1,collate4i1) ORDER BY collate4i1;]
VDBE Program Listing:
   0 Init             0   20    0               00 Start at 20
   1 Noop             1    4    0               00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 OpenRead         2    4    0 k(2,,)        00 root=4 iDb=0; sqlite_autoindex_collate4t1_1
   4 Explain          4    0    0 SEARCH TABLE collate4t1 USING INDEX sqlite_autoindex_collate4t1_1 (collate4i1>?) 00 
   5 Integer          3    1    0               00 r[1]=3
   6 IsNull           1   19    0               00 if r[1]==NULL goto 19
   7 SeekGE           2   19    1 1             00 key=r[1]
   8 DeferredSeek     2    0    0               00 Move 0 to 2.rowid if needed
   9 Column           2    0    3               00 r[3]=collate4t1.collate4i1
  10 Gt               4    2    3 (BINARY)      63 r[2] = (r[3]>r[4])
  11 ElseNotEq        0   14    0               00 
  12 Column           2    0    3               00 r[3]=collate4t1.collate4i1
  13 Gt               5    2    3 (BINARY)      63 r[2] = (r[3]>r[5])
  14 IfNot            2   18    1               00 
  15 Column           2    0    6               00 r[6]=collate4t1.collate4i1
  16 Column           0    1    7               00 r[7]=collate4t1.a
  17 ResultRow        6    2    0               00 output=r[6..7]
  18 Next             2    8    0               00 
  19 Halt             0    0    0               00 
  20 Transaction      0    0   19 0             01 usesStmtJournal=0
  21 Integer          3    4    0               00 r[4]=3
  22 Integer          0    5    0               00 r[5]=0
  23 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t1 WHERE (3,32)<(x,x) ORDER BY x;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,B)        00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t1.x
   9 Gt               4    1    2 (BINARY)      61 r[1] = (r[2]>r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=t1.x
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=x
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   19 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer         32    4    0               00 r[4]=32
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM y WHERE (3,33)<(t0,t1a) ORDER BY t0;]
VDBE Program Listing:
   0 Init             0   18    0               00 Start at 18
   1 Noop             1    5    0               00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; y
   3 Explain          3    0    0 SEARCH TABLE y USING INTEGER PRIMARY KEY (rowid>?) 00 
   4 Integer          3    1    0               00 r[1]=3
   5 SeekGE           0   17    1               00 key=r[1]; pk
   6 Rowid            0    2    0               00 r[2]=rowid
   7 Gt               3    1    2               64 r[1] = (r[2]>r[3])
   8 ElseNotEq        0   11    0               00 
   9 Column           0    1    2               00 r[2]=y.t1a
  10 Gt               4    1    2 (BINARY)      61 r[1] = (r[2]>r[4])
  11 IfNot            1   16    1               00 
  12 Rowid            0    5    0               00 r[5]=rowid
  13 Column           0    1    6               00 r[6]=y.t1a
  14 Column           0    2    7               00 r[7]=y.z
  15 ResultRow        5    3    0               00 output=r[5..7]
  16 Next             0    6    0               00 
  17 Halt             0    0    0               00 
  18 Transaction      0    0   19 0             01 usesStmtJournal=0
  19 Integer          3    3    0               00 r[3]=3
  20 Integer         33    4    0               00 r[4]=33
  21 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM collate4t1 WHERE (3,34)<=(a,a) ORDER BY a;]
VDBE Program Listing:
   0 Init             0   25    0               00 Start at 25
   1 SorterOpen       1    4    0 k(1,B)        00 
   2 OpenRead         0    3    0 2             00 root=3 iDb=0; collate4t1
   3 Explain          3    0    0 SCAN TABLE collate4t1 00 
   4 Rewind           0   16    0               00 
   5 Column           0    1    2               00 r[2]=collate4t1.a
   6 Gt               3    1    2 (BINARY)      62 r[1] = (r[2]>r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    1    2               00 r[2]=collate4t1.a
   9 Ge               4    1    2 (BINARY)      62 r[1] = (r[2]>=r[4])
  10 IfNot            1   15    1               00 
  11 Column           0    0    6               00 r[6]=collate4t1.collate4i1
  12 Column           0    1    5               00 r[5]=collate4t1.a
  13 MakeRecord       5    2    8               00 r[8]=mkrec(r[5..6])
  14 SorterInsert     1    8    5 2             00 key=r[8]
  15 Next             0    5    0               01 
  16 Explain         16    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  17 OpenPseudo       2    9    4               00 4 columns in r[9]
  18 SorterSort       1   24    0               00 
  19 SorterData       1    9    2               00 r[9]=data
  20 Column           2    0    7               00 r[7]=a
  21 Column           2    1    6               00 r[6]=collate4i1
  22 ResultRow        6    2    0               00 output=r[6..7]
  23 SorterNext       1   19    0               00 
  24 Halt             0    0    0               00 
  25 Transaction      0    0   19 0             01 usesStmtJournal=0
  26 Integer          3    3    0               00 r[3]=3
  27 Integer         34    4    0               00 r[4]=34
  28 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t2a2 WHERE (3,34)>(t6ab,t3a) ORDER BY t6ab DESC;]
VDBE Program Listing:
   0 Init             0   33    0               00 Start at 33
   1 SorterOpen       1    8    0 k(1,-B)       00 
   2 OpenRead         0   11    0 6             00 root=11 iDb=0; t2a2
   3 Explain          3    0    0 SCAN TABLE t2a2 00 
   4 Rewind           0   20    0               00 
   5 Column           0    4    2               00 r[2]=t2a2.t6ab
   6 Lt               3    1    2 (BINARY)      62 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    1    2               00 r[2]=t2a2.t3a
   9 Lt               4    1    2 (BINARY)      62 r[1] = (r[2]<r[4])
  10 IfNot            1   19    1               00 
  11 Column           0    0    6               00 r[6]=t2a2.t3
  12 Column           0    1    7               00 r[7]=t2a2.t3a
  13 Column           0    2    8               00 r[8]=t2a2.t3b
  14 Column           0    3    9               00 r[9]=t2a2.t6
  15 Column           0    5   10               00 r[10]=t2a2.t6b
  16 Column           0    4    5               00 r[5]=t2a2.t6ab
  17 MakeRecord       5    6   12               00 r[12]=mkrec(r[5..10])
  18 SorterInsert     1   12    5 6             00 key=r[12]
  19 Next             0    5    0               01 
  20 Explain         20    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  21 OpenPseudo       2   13    8               00 8 columns in r[13]
  22 SorterSort       1   32    0               00 
  23 SorterData       1   13    2               00 r[13]=data
  24 Column           2    5   11               00 r[11]=t6b
  25 Column           2    0   10               00 r[10]=t6ab
  26 Column           2    4    9               00 r[9]=t6
  27 Column           2    3    8               00 r[8]=t3b
  28 Column           2    2    7               00 r[7]=t3a
  29 Column           2    1    6               00 r[6]=t3
  30 ResultRow        6    6    0               00 output=r[6..11]
  31 SorterNext       1   23    0               00 
  32 Halt             0    0    0               00 
  33 Transaction      0    0   19 0             01 usesStmtJournal=0
  34 Integer          3    3    0               00 r[3]=3
  35 Integer         34    4    0               00 r[4]=34
  36 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t1 WHERE (3,33)>(x,x) ORDER BY x DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t1.x
   9 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=t1.x
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=x
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   19 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer         33    4    0               00 r[4]=33
  26 Goto             0    1    0               00 
SQL: [;CREATE TABLE t1i1(t2i1,logs,PRIMARY KEY(logs,logs));]
VDBE Program Listing:
   0 Init             0   39    0               00 Start at 39
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Noop             0   22    0               00 
  12 CreateBtree      0    4    2               00 r[4]=root iDb=0 flags=2
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 NewRowid         1    5    0               00 r[5]=rowid
  15 String8          0    6    0 index         00 r[6]='index'
  16 String8          0    7    0 sqlite_autoindex_t1i1_1 00 r[7]='sqlite_autoindex_t1i1_1'
  17 String8          0    8    0 t1i1          00 r[8]='t1i1'
  18 Copy             4    9    0               00 r[9]=r[4]
  19 Null             0   10    0               00 r[10]=NULL
  20 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  21 Insert           1   11    5               18 intkey=r[5] data=r[11]
  22 Close            0    0    0               00 
  23 Null             0   12   13               00 r[12..13]=NULL
  24 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  25 Explain         25    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  26 SeekRowid        2   28    1               00 intkey=r[1]
  27 Rowid            2   13    0               00 r[13]=rowid
  28 IsNull          13   36    0               00 if r[13]==NULL goto 36
  29 String8          0   14    0 table         00 r[14]='table'
  30 String8          0   15    0 t1i1          00 r[15]='t1i1'
  31 String8          0   16    0 t1i1          00 r[16]='t1i1'
  32 Copy             2   17    0               00 r[17]=r[2]
  33 String8          0   18    0 CREATE TABLE t1i1(t2i1,logs,PRIMARY KEY(logs,logs)) 00 r[18]='CREATE TABLE t1i1(t2i1,logs,PRIMARY KEY(logs,logs))'
  34 MakeRecord      14    5   19 BBBDB         00 r[19]=mkrec(r[14..18])
  35 Insert           2   19   13               00 intkey=r[13] data=r[19]
  36 SetCookie        0    1   20               00 
  37 ParseSchema      0    0    0 tbl_name='t1i1' AND type!='trigger' 00 
  38 Halt             0    0    0               00 
  39 Transaction      0    1   19 0             01 usesStmtJournal=0
  40 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   20 0             00 usesStmtJournal=0
  16 String8          0    2    0 t1i1          00 r[2]='t1i1'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fbd14a09859 in __GI_abort () at abort.c:79
#2  0x00007fbd14a09729 in __assert_fail_base (fmt=0x7fbd14b9f588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=<optimized out>) at assert.c:92
#3  0x00007fbd14a1afd6 in __GI___assert_fail (assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=0x213784 "int generateOutputSubroutine(Parse *, Select *, SelectDest *, SelectDest *, int, int, KeyInfo *, int)") at assert.c:101
#4  0x00000000003b5d8b in generateOutputSubroutine (pParse=0x7ffde9e3aa30, p=0xe2d9c0, pIn=0x7ffde9e390b0, pDest=0x7ffde9e39608, regReturn=15, regPrev=9, pKeyInfo=0xe30d50, iBreak=-7) at sqlite3.c:127594
#5  0x00000000003b4e37 in multiSelectOrderBy (pParse=0x7ffde9e3aa30, p=0xe2d9c0, pDest=0x7ffde9e39608) at sqlite3.c:127921
#6  0x00000000003a3d1c in multiSelect (pParse=0x7ffde9e3aa30, p=0xe2d9c0, pDest=0x7ffde9e39608) at sqlite3.c:127207
#7  0x00000000002fccf5 in sqlite3Select (pParse=0x7ffde9e3aa30, p=0xe2d9c0, pDest=0x7ffde9e39608) at sqlite3.c:130384
#8  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffde9e3aa30, pExpr=0xe36660) at sqlite3.c:99820
#9  0x0000000000350b1c in exprCodeVector (pParse=0x7ffde9e3aa30, p=0xe36660, piFreeable=0x7ffde9e396cc) at sqlite3.c:100296
#10 0x000000000034fbdb in sqlite3ExprCodeIN (pParse=0x7ffde9e3aa30, pExpr=0xe3d6e0, destIfFalse=-3, destIfNull=-4) at sqlite3.c:99952
#11 0x000000000034be9e in sqlite3ExprCodeTarget (pParse=0x7ffde9e3aa30, pExpr=0xe3d6e0, target=1) at sqlite3.c:100792
#12 0x000000000034e9ee in sqlite3ExprCodeExprList (pParse=0x7ffde9e3aa30, pList=0xe37470, target=1, srcReg=0, flags=1 '\001') at sqlite3.c:101202
#13 0x00000000003addca in innerLoopLoadRow (pParse=0x7ffde9e3aa30, pSelect=0xe45a20, pInfo=0x7ffde9e39a70) at sqlite3.c:125172
#14 0x00000000003a92ea in selectInnerLoop (pParse=0x7ffde9e3aa30, p=0xe45a20, srcTab=-1, pSort=0x0, pDistinct=0x7ffde9e39d10, pDest=0x7ffde9e39e20, iContinue=-2, iBreak=-2) at sqlite3.c:125624
#15 0x00000000002fe191 in sqlite3Select (pParse=0x7ffde9e3aa30, p=0xe45a20, pDest=0x7ffde9e39e20) at sqlite3.c:130743
#16 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffde9e3a050, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffde9e3aa30) at sqlite3.c:151581
#17 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffde9e3a050, yymajor=1, yyminor=...) at sqlite3.c:152877
#18 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffde9e3aa30, 
    zSql=0xe3c912 ";;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 3,4)"..., pzErrMsg=0x7ffde9e3ac10) at sqlite3.c:154013
#19 0x00000000002a1683 in sqlite3Prepare (db=0xe202b0, 
    zSql=0xe27e93 ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 5,6);;SE"..., nBytes=816, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffde9e3ad48, pzTail=0x7ffde9e3ad30) at sqlite3.c:124303
#20 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0xe202b0, 
    zSql=0xe27e93 ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 5,6);;SE"..., nBytes=816, prepFlags=128, pOld=0x0, ppStmt=0x7ffde9e3ad48, pzTail=0x7ffde9e3ad30) at sqlite3.c:124403
#21 0x000000000029247f in sqlite3_prepare_v2 (db=0xe202b0, 
    zSql=0xe27e93 ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 5,6);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 5,6);;SE"..., nBytes=816, ppStmt=0x7ffde9e3ad48, pzTail=0x7ffde9e3ad30) at sqlite3.c:124487
#22 0x0000000000256bd0 in main (argc=1, argv=0x7ffde9e3aef8) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 58071] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
