GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000215,sig:06,src:022842+012652,time:3880211,execs:700125,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT (SELECT 1, 0, 3) == (SELECT 1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          0    4    0               00 r[4]=0
  10 Integer          3    5    0               00 r[5]=3
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Integer          3   10    0               00 r[10]=3
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [;
;BEGIN;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT (SELECT 1, 0, 3) != (SELECT 1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          0    4    0               00 r[4]=0
  10 Integer          3    5    0               00 r[5]=3
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Integer          3   10    0               00 r[10]=3
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Ne               8    1    3               61 r[1] = (r[3]!=r[8])
  25 If               1   29    0               00 
  26 Ne               9    1    4               69 r[1] = (r[4]!=r[9])
  27 If               1   29    0               00 
  28 Ne              10    1    5               69 r[1] = (r[5]!=r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (1, 2, NULL) IS (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               E1 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               3    1    3               E9 r[1] = (r[3]==r[3])
   5 IfNot            1    7    0               00 
   6 Eq               5    1    4               E9 r[1] = (r[4]==r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT (1, 2, NULL) IS NOT (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               E1 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               3    1    3               E9 r[1] = (r[3]!=r[3])
   5 If               1    7    0               00 
   6 Ne               5    1    4               E9 r[1] = (r[4]!=r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT count(*) FROM t1 UNION ALL
    SELECT x FROM t1 WHERE x BETWEEN 85 AND 200;]
VDBE Program Listing:
   0 Init             0   19    0               00 Start at 19
   1 Explain          1    0    0 COMPOUND QUERY 00 
   2 Explain          2    1    0 LEFT-MOST SUBQUERY 00 
   3 OpenRead         2    2    0 1             00 root=2 iDb=0
   4 Count            2    1    0               00 r[1]=count()
   5 Close            2    0    0               00 
   6 Copy             1    2    0               00 r[2]=r[1]
   7 ResultRow        2    1    0               00 output=r[2]
   8 Explain          8    1    0 UNION ALL     00 
   9 OpenRead         3    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
  10 Explain         10    8    0 SEARCH TABLE t1 USING COVERING INDEX collate4t1 (x>? AND x<?) 00 
  11 Integer         85    3    0               00 r[3]=85
  12 SeekGE           3   18    3 1             00 key=r[3]
  13 Integer        200    3    0               00 r[3]=200
  14 IdxGT            3   18    3 1             00 key=r[3]
  15 Column           3    0    2               00 r[2]=t1.x
  16 ResultRow        2    1    0               00 output=r[2]
  17 Next             3   14    0               00 
  18 Halt             0    0    0               00 
  19 Transaction      0    0    2 0             01 usesStmtJournal=0
  20 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, 2, NULL) == (SELECT 1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Integer          3   10    0               00 r[10]=3
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (SELECT 1, 2, NULL) != (SELECT 1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Integer          3   10    0               00 r[10]=3
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Ne               8    1    3               61 r[1] = (r[3]!=r[8])
  25 If               1   29    0               00 
  26 Ne               9    1    4               69 r[1] = (r[4]!=r[9])
  27 If               1   29    0               00 
  28 Ne              10    1    5               69 r[1] = (r[5]!=r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (1, 2, NULL) == (1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               61 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               3    1    3               69 r[1] = (r[3]==r[3])
   5 IfNot            1    7    0               00 
   6 Eq               4    1    4               69 r[1] = (r[4]==r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, 2, NULL) == (SELECT 1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Null             0   10    0               00 r[10]=NULL
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [;
;CREATE TABLE a(collate4i1);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 a             00 r[7]='a'
  20 String8          0    8    0 a             00 r[8]='a'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE a(collate4i1) 00 r[10]='CREATE TABLE a(collate4i1)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    3               00 
  26 ParseSchema      0    0    0 tbl_name='a' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    2 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    3 0             00 usesStmtJournal=0
  16 String8          0    2    0 a             00 r[2]='a'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, 2, NULL) != (SELECT 1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Null             0   10    0               00 r[10]=NULL
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Ne               8    1    3               61 r[1] = (r[3]!=r[8])
  25 If               1   29    0               00 
  26 Ne               9    1    4               69 r[1] = (r[4]!=r[9])
  27 If               1   29    0               00 
  28 Ne              10    1    5               69 r[1] = (r[5]!=r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (NULL, NULL, NULL) == (NULL, NULL, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               61 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    2               69 r[1] = (r[2]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               2    1    2               69 r[1] = (r[2]==r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Null             0    2    0               00 r[2]=NULL
  10 Goto             0    1    0               00 
SQL: [SELECT (NULL, NULL, NULL) != (NULL, NULL, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               61 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               2    1    2               69 r[1] = (r[2]!=r[2])
   5 If               1    7    0               00 
   6 Ne               2    1    2               69 r[1] = (r[2]!=r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Null             0    2    0               00 r[2]=NULL
  10 Goto             0    1    0               00 
SQL: [SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Null             0    3    0               00 r[3]=NULL
   9 Null             0    4    0               00 r[4]=NULL
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Null             0    8    0               00 r[8]=NULL
  20 Null             0    9    0               00 r[9]=NULL
  21 Null             0   10    0               00 r[10]=NULL
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (1, NULL, 1) != (1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               61 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               2    1    3               69 r[1] = (r[3]!=r[2])
   5 If               1    7    0               00 
   6 Ne               2    1    2               69 r[1] = (r[2]!=r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 1) IS (1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               E1 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    3               E9 r[1] = (r[3]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               2    1    2               E9 r[1] = (r[2]==r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 1) IS NOT (1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               E1 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               2    1    3               E9 r[1] = (r[3]!=r[2])
   5 If               1    7    0               00 
   6 Ne               2    1    2               E9 r[1] = (r[2]!=r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, NULL, 1) != (SELECT 1, 1, 1)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Null             0    4    0               00 r[4]=NULL
  10 Integer          1    5    0               00 r[5]=1
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          1    9    0               00 r[9]=1
  21 Integer          1   10    0               00 r[10]=1
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Ne               8    1    3               61 r[1] = (r[3]!=r[8])
  25 If               1   29    0               00 
  26 Ne               9    1    4               69 r[1] = (r[4]!=r[9])
  27 If               1   29    0               00 
  28 Ne              10    1    5               69 r[1] = (r[5]!=r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT (1, NULL, 1) IS (1, 1, 2)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               E1 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    3               E9 r[1] = (r[3]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               4    1    2               E9 r[1] = (r[2]==r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          2    4    0               00 r[4]=2
  12 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, NULL, 1) == (SELECT 1, 1, 2)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Null             0    4    0               00 r[4]=NULL
  10 Integer          1    5    0               00 r[5]=1
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          1    9    0               00 r[9]=1
  21 Integer          2   10    0               00 r[10]=2
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [SELECT * FROM a WHERE (1, 1, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          1    4    0               00 r[4]=1
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 1, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    2               61 r[1] = (r[2]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Gt               4    1    4               61 r[1] = (r[4]>r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT (1, 1, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               3    1    2               61 r[1] = (r[2]<r[3])
   5 ElseNotEq        0    7    0               00 
   6 Le               4    1    4               61 r[1] = (r[4]<=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, 1, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          1    4    0               00 r[4]=1
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 1, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    2               61 r[1] = (r[2]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Ge               4    1    4               61 r[1] = (r[4]>=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT (1, 2, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               3    1    3               61 r[1] = (r[3]<r[3])
   5 ElseNotEq        0    7    0               00 
   6 Lt               4    1    4               61 r[1] = (r[4]<r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT (1, 2, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               3    1    3               61 r[1] = (r[3]>r[3])
   5 ElseNotEq        0    7    0               00 
   6 Gt               4    1    4               61 r[1] = (r[4]>r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, 2, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          2    4    0               00 r[4]=2
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, 2, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          2    4    0               00 r[4]=2
  15 Integer          2    3    0               00 r[3]=2
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Ge               4    1    3               61 r[1] = (r[3]>=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 3, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               4    1    3               61 r[1] = (r[3]<r[4])
   5 ElseNotEq        0    7    0               00 
   6 Lt               3    1    3               61 r[1] = (r[3]<r[3])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          3    3    0               00 r[3]=3
  11 Integer          2    4    0               00 r[4]=2
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, 3, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 3, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               4    1    3               61 r[1] = (r[3]>r[4])
   5 ElseNotEq        0    7    0               00 
   6 Gt               3    1    3               61 r[1] = (r[3]>r[3])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          3    3    0               00 r[3]=3
  11 Integer          2    4    0               00 r[4]=2
  12 Goto             0    1    0               00 
SQL: [SELECT (1, 3, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               4    1    3               61 r[1] = (r[3]<r[4])
   5 ElseNotEq        0    7    0               00 
   6 Le               3    1    3               61 r[1] = (r[3]<=r[3])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          3    3    0               00 r[3]=3
  11 Integer          2    4    0               00 r[4]=2
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, 3, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, 3, 3) >= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Integer          2    3    0               00 r[3]=2
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Ge               4    1    3               61 r[1] = (r[3]>=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, NULL, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, NULL, 3) < (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               4    1    3               61 r[1] = (r[3]>r[4])
   5 ElseNotEq        0    7    0               00 
   6 Gt               5    1    5               61 r[1] = (r[5]>r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          2    4    0               00 r[4]=2
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, NULL, 3) > (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Integer          2    3    0               00 r[3]=2
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               4    1    3               61 r[1] = (r[3]<r[4])
   5 ElseNotEq        0    7    0               00 
   6 Le               5    1    5               61 r[1] = (r[5]<=r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          2    4    0               00 r[4]=2
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Integer          2    3    0               00 r[3]=2
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 3, 3) < (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               4    1    3               61 r[1] = (r[3]<r[4])
   5 ElseNotEq        0    7    0               00 
   6 Lt               3    1    3               61 r[1] = (r[3]<r[3])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          3    3    0               00 r[3]=3
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, 3, 3) < (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Null             0    3    0               00 r[3]=NULL
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 3, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               4    1    3               61 r[1] = (r[3]>r[4])
   5 ElseNotEq        0    7    0               00 
   6 Gt               3    1    3               61 r[1] = (r[3]>r[3])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          3    3    0               00 r[3]=3
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE (1, 3, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Null             0    3    0               00 r[3]=NULL
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, 3, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Null             0    3    0               00 r[3]=NULL
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Null             0    3    0               00 r[3]=NULL
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, 3, 3) <= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Integer          3    4    0               00 r[4]=3
  15 Null             0    3    0               00 r[3]=NULL
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT (1, 3, 3) >= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               2    1    2               61 r[1] = (r[2]>r[2])
   3 ElseNotEq        0    7    0               00 
   4 Gt               4    1    3               61 r[1] = (r[3]>r[4])
   5 ElseNotEq        0    7    0               00 
   6 Ge               3    1    3               61 r[1] = (r[3]>=r[3])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          3    3    0               00 r[3]=3
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL: [SELECT (1, NULL, 3) < (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Lt               2    1    2               61 r[1] = (r[2]<r[2])
   3 ElseNotEq        0    7    0               00 
   4 Lt               3    1    3               61 r[1] = (r[3]<r[3])
   5 ElseNotEq        0    7    0               00 
   6 Lt               4    1    4               61 r[1] = (r[4]<r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Null             0    3    0               00 r[3]=NULL
  11 Integer          3    4    0               00 r[4]=3
  12 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, NULL, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Null             0    3    0               00 r[3]=NULL
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, NULL, 3) > (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Null             0    3    0               00 r[3]=NULL
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, NULL, 3) <= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Null             0    3    0               00 r[3]=NULL
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=t1.x
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Lt               4    1    3               61 r[1] = (r[3]<r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Null             0    3    0               00 r[3]=NULL
  16 Lt               3    1    4               61 r[1] = (r[4]<r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Le               4    1    3               61 r[1] = (r[3]<=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE (1, NULL, 3) >= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 IfNot            1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Null             0    3    0               00 r[3]=NULL
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Ge               4    1    3               61 r[1] = (r[3]>=r[4])
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM a WHERE NOT (1, NULL, 3) >= (1, NULL, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 If               1    8    1               00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0    8    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 ResultRow        2    1    0               00 output=r[2]
   7 Next             0    5    0               01 
   8 Halt             0    0    0               00 
   9 Transaction      0    0    3 0             01 usesStmtJournal=0
  10 Integer          1    3    0               00 r[3]=1
  11 Integer          1    4    0               00 r[4]=1
  12 Gt               4    1    3               61 r[1] = (r[3]>r[4])
  13 ElseNotEq        0   21    0               00 
  14 Null             0    4    0               00 r[4]=NULL
  15 Null             0    3    0               00 r[3]=NULL
  16 Gt               3    1    4               61 r[1] = (r[4]>r[3])
  17 ElseNotEq        0   21    0               00 
  18 Integer          3    3    0               00 r[3]=3
  19 Integer          3    4    0               00 r[4]=3
  20 Ge               4    1    3               61 r[1] = (r[3]>=r[4])
  21 Goto             0    1    0               00 
SQL: [CREATE TABLE xyz(b, c);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 xyz           00 r[7]='xyz'
  20 String8          0    8    0 xyz           00 r[8]='xyz'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE xyz(b, c) 00 r[10]='CREATE TABLE xyz(b, c)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    4               00 
  26 ParseSchema      0    0    0 tbl_name='xyz' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    3 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    4 0             00 usesStmtJournal=0
  16 String8          0    2    0 xyz           00 r[2]='xyz'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM a ORDER BY collate4i1) == (SELECT * FROM a ORDER BY collate4i1)
  
;]
VDBE Program Listing:
   0 Init             0   51    0               00 Start at 51
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         24    3    0               00 r[3]=24; return address
   3 Once             0   24    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   6 OpenEphemeral    2    3    0 k(1,B)        00 nColumn=3
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   9 Explain          9    4    0 SCAN TABLE a  00 
  10 Rewind           0   20    0               00 
  11 Column           0    0    6               00 r[6]=a.collate4i1
  12 Sequence         2    7    0               00 r[7]=cursor[2].ctr++
  13 IfNotZero        5   17    0               00 if r[5]!=0 then r[5]--, goto 17
  14 Last             2    0    0               00 
  15 IdxLE            2   19    6 1             00 key=r[6]
  16 Delete           2    0    0               00 
  17 MakeRecord       6    2    8               00 r[8]=mkrec(r[6..7])
  18 IdxInsert        2    8    6 2             00 key=r[8]
  19 Next             0   11    0               01 
  20 Explain         20    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  21 Sort             2   24    0               00 
  22 Column           2    0    4               00 r[4]=collate4i1
  23 Next             2   22    0               00 
  24 Return           3    0    0               00 
  25 Integer         47    9    0               00 r[9]=47; return address
  26 Once             0   47    0               00 
  27 Explain         27    0    0 SCALAR SUBQUERY 2 00 
  28 Null             0   10   10               00 r[10..10]=NULL; Init subquery result
  29 OpenEphemeral    3    3    0 k(1,B)        00 nColumn=3
  30 Integer          1   11    0               00 r[11]=1; LIMIT counter
  31 OpenRead         1    4    0 1             00 root=4 iDb=0; a
  32 Explain         32   27    0 SCAN TABLE a  00 
  33 Rewind           1   43    0               00 
  34 Column           1    0   12               00 r[12]=a.collate4i1
  35 Sequence         3   13    0               00 r[13]=cursor[3].ctr++
  36 IfNotZero       11   40    0               00 if r[11]!=0 then r[11]--, goto 40
  37 Last             3    0    0               00 
  38 IdxLE            3   42   12 1             00 key=r[12]
  39 Delete           3    0    0               00 
  40 MakeRecord      12    2   14               00 r[14]=mkrec(r[12..13])
  41 IdxInsert        3   14   12 2             00 key=r[14]
  42 Next             1   34    0               01 
  43 Explain         43   27    0 USE TEMP B-TREE FOR ORDER BY 00 
  44 Sort             3   47    0               00 
  45 Column           3    0   10               00 r[10]=collate4i1
  46 Next             3   45    0               00 
  47 Return           9    0    0               00 
  48 Eq              10    1    4               61 r[1] = (r[4]==r[10])
  49 ResultRow        1    1    0               00 output=r[1]
  50 Halt             0    0    0               00 
  51 Transaction      0    0    4 0             01 usesStmtJournal=0
  52 Goto             0    1    0               00 
SQL: [SELECT (1, 1) == (SELECT collate4i1,collate4i1 FROM a ORDER BY collate4i1, collate4i1)
;]
VDBE Program Listing:
   0 Init             0   34    0               00 Start at 34
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         28    2    0               00 r[2]=28; return address
   3 Once             0   28    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    1    5    0 k(2,B,B)      00 nColumn=5
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   9 Explain          9    4    0 SCAN TABLE a  00 
  10 Rewind           0   23    0               00 
  11 Column           0    0    3               00 r[3]=a.collate4i1
  12 Column           0    0    6               00 r[6]=a.collate4i1
  13 Column           0    0    7               00 r[7]=a.collate4i1
  14 Sequence         1    8    0               00 r[8]=cursor[1].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 IfNotZero        5   20    0               00 if r[5]!=0 then r[5]--, goto 20
  17 Last             1    0    0               00 
  18 IdxLE            1   22    6 2             00 key=r[6..7]
  19 Delete           1    0    0               00 
  20 MakeRecord       6    4   10               00 r[10]=mkrec(r[6..9])
  21 IdxInsert        1   10    6 4             00 key=r[10]
  22 Next             0   11    0               01 
  23 Explain         23    4    0 USE TEMP B-TREE FOR ORDER BY 00 
  24 Sort             1   28    0               00 
  25 Column           1    1    4               00 r[4]=collate4i1
  26 Column           1    3    3               00 r[3]=collate4i1
  27 Next             1   25    0               00 
  28 Return           2    0    0               00 
  29 Eq               3    1   11 (BINARY)      61 r[1] = (r[11]==r[3])
  30 IfNot            1   32    0               00 
  31 Eq               4    1   11 (BINARY)      69 r[1] = (r[11]==r[4])
  32 ResultRow        1    1    0               00 output=r[1]
  33 Halt             0    0    0               00 
  34 Transaction      0    0    4 0             01 usesStmtJournal=0
  35 Integer          1   11    0               00 r[11]=1
  36 Goto             0    1    0               00 
SQL: [SELECT (3, 6) == (SELECT x,x FROM t1 ORDER BY x DESC, x DESC)
;]
VDBE Program Listing:
   0 Init             0   44    0               00 Start at 44
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         38    2    0               00 r[2]=38; return address
   3 Once             0   38    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    1    3    0 k(1,-B)       00 nColumn=3
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         2    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE t1 USING COVERING INDEX collate4t1 00 
  10 Last             2   30    6 0             00 
  11 Column           2    0    3               00 r[3]=t1.x
  12 Column           2    0    6               00 r[6]=t1.x
  13 Column           2    0    7               00 r[7]=t1.x
  14 Sequence         1    8    0               00 r[8]=cursor[1].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 MakeRecord       7    3   10               00 r[10]=mkrec(r[7..9])
  17 IfNot            8   23    0               00 
  18 Compare         11    6    1 k(2,B,B)      00 r[11] <-> r[6]
  19 Jump            20   24   20               00 
  20 Gosub           12   33    0               00 
  21 ResetSorter      1    0    0               00 
  22 IfNot            5   38    0               00 
  23 Move             6   11    1               00 r[11]=r[6]
  24 IfNotZero        5   28    0               00 if r[5]!=0 then r[5]--, goto 28
  25 Last             1    0    0               00 
  26 IdxLE            1   29    7 1             00 key=r[7]
  27 Delete           1    0    0               00 
  28 IdxInsert        1   10    7 3             00 key=r[10]
  29 Prev             2   11    0               01 
  30 Explain         30    4    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  31 Gosub           12   33    0               00 
  32 Goto             0   38    0               00 
  33 Sort             1   38    0               00 
  34 Column           1    0    4               00 r[4]=x
  35 Column           1    2    3               00 r[3]=x
  36 Next             1   34    0               00 
  37 Return          12    0    0               00 
  38 Return           2    0    0               00 
  39 Eq               3    1   13 (BINARY)      63 r[1] = (r[13]==r[3])
  40 IfNot            1   42    0               00 
  41 Eq               4    1   14 (BINARY)      6B r[1] = (r[14]==r[4])
  42 ResultRow        1    1    0               00 output=r[1]
  43 Halt             0    0    0               00 
  44 Transaction      0    0    4 0             01 usesStmtJournal=0
  45 Integer          3   13    0               00 r[13]=3
  46 Integer          6   14    0               00 r[14]=6
  47 Goto             0    1    0               00 
SQL: [SELECT ((3, 5)) == (SELECT x,x FROM t1 ORDER BY x DESC, x)
;]
VDBE Program Listing:
   0 Init             0   44    0               00 Start at 44
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         38    2    0               00 r[2]=38; return address
   3 Once             0   38    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 OpenEphemeral    1    3    0 k(1,B)        00 nColumn=3
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         2    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE t1 USING COVERING INDEX collate4t1 00 
  10 Last             2   30    6 0             00 
  11 Column           2    0    3               00 r[3]=t1.x
  12 Column           2    0    6               00 r[6]=t1.x
  13 Column           2    0    7               00 r[7]=t1.x
  14 Sequence         1    8    0               00 r[8]=cursor[1].ctr++
  15 Move             3    9    1               00 r[9]=r[3]
  16 MakeRecord       7    3   10               00 r[10]=mkrec(r[7..9])
  17 IfNot            8   23    0               00 
  18 Compare         11    6    1 k(2,B,B)      00 r[11] <-> r[6]
  19 Jump            20   24   20               00 
  20 Gosub           12   33    0               00 
  21 ResetSorter      1    0    0               00 
  22 IfNot            5   38    0               00 
  23 Move             6   11    1               00 r[11]=r[6]
  24 IfNotZero        5   28    0               00 if r[5]!=0 then r[5]--, goto 28
  25 Last             1    0    0               00 
  26 IdxLE            1   29    7 1             00 key=r[7]
  27 Delete           1    0    0               00 
  28 IdxInsert        1   10    7 3             00 key=r[10]
  29 Prev             2   11    0               01 
  30 Explain         30    4    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  31 Gosub           12   33    0               00 
  32 Goto             0   38    0               00 
  33 Sort             1   38    0               00 
  34 Column           1    0    4               00 r[4]=x
  35 Column           1    2    3               00 r[3]=x
  36 Next             1   34    0               00 
  37 Return          12    0    0               00 
  38 Return           2    0    0               00 
  39 Eq               3    1   13 (BINARY)      63 r[1] = (r[13]==r[3])
  40 IfNot            1   42    0               00 
  41 Eq               4    1   14 (BINARY)      6B r[1] = (r[14]==r[4])
  42 ResultRow        1    1    0               00 output=r[1]
  43 Halt             0    0    0               00 
  44 Transaction      0    0    4 0             01 usesStmtJournal=0
  45 Integer          3   13    0               00 r[13]=3
  46 Integer          5   14    0               00 r[14]=5
  47 Goto             0    1    0               00 
SQL: [SELECT (SELECT * FROM t1 ORDER BY x DESC, x) == (SELECT * FROM t1 ORDER BY x DESC, x)
  
;]
VDBE Program Listing:
   0 Init             0   73    0               00 Start at 73
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         35    3    0               00 r[3]=35; return address
   3 Once             0   35    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   6 OpenEphemeral    2    2    0 k(1,B)        00 nColumn=2
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 OpenRead         3    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
   9 Explain          9    4    0 SCAN TABLE t1 USING COVERING INDEX collate4t1 00 
  10 Last             3   28    6 0             00 
  11 Column           3    0    6               00 r[6]=t1.x
  12 Column           3    0    7               00 r[7]=t1.x
  13 Sequence         2    8    0               00 r[8]=cursor[2].ctr++
  14 MakeRecord       7    2    9               00 r[9]=mkrec(r[7..8])
  15 IfNot            8   21    0               00 
  16 Compare         10    6    1 k(2,B,B)      00 r[10] <-> r[6]
  17 Jump            18   22   18               00 
  18 Gosub           11   31    0               00 
  19 ResetSorter      2    0    0               00 
  20 IfNot            5   35    0               00 
  21 Move             6   10    1               00 r[10]=r[6]
  22 IfNotZero        5   26    0               00 if r[5]!=0 then r[5]--, goto 26
  23 Last             2    0    0               00 
  24 IdxLE            2   27    7 1             00 key=r[7]
  25 Delete           2    0    0               00 
  26 IdxInsert        2    9    7 2             00 key=r[9]
  27 Prev             3   11    0               01 
  28 Explain         28    4    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           11   31    0               00 
  30 Goto             0   35    0               00 
  31 Sort             2   35    0               00 
  32 Column           2    0    4               00 r[4]=x
  33 Next             2   32    0               00 
  34 Return          11    0    0               00 
  35 Return           3    0    0               00 
  36 Integer         69   12    0               00 r[12]=69; return address
  37 Once             0   69    0               00 
  38 Explain         38    0    0 SCALAR SUBQUERY 2 00 
  39 Null             0   13   13               00 r[13..13]=NULL; Init subquery result
  40 OpenEphemeral    4    2    0 k(1,B)        00 nColumn=2
  41 Integer          1   14    0               00 r[14]=1; LIMIT counter
  42 OpenRead         5    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
  43 Explain         43   38    0 SCAN TABLE t1 USING COVERING INDEX collate4t1 00 
  44 Last             5   62   15 0             00 
  45 Column           5    0   15               00 r[15]=t1.x
  46 Column           5    0   16               00 r[16]=t1.x
  47 Sequence         4   17    0               00 r[17]=cursor[4].ctr++
  48 MakeRecord      16    2   18               00 r[18]=mkrec(r[16..17])
  49 IfNot           17   55    0               00 
  50 Compare         19   15    1 k(2,B,B)      00 r[19] <-> r[15]
  51 Jump            52   56   52               00 
  52 Gosub           20   65    0               00 
  53 ResetSorter      4    0    0               00 
  54 IfNot           14   69    0               00 
  55 Move            15   19    1               00 r[19]=r[15]
  56 IfNotZero       14   60    0               00 if r[14]!=0 then r[14]--, goto 60
  57 Last             4    0    0               00 
  58 IdxLE            4   61   16 1             00 key=r[16]
  59 Delete           4    0    0               00 
  60 IdxInsert        4   18   16 2             00 key=r[18]
  61 Prev             5   45    0               01 
  62 Explain         62   38    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  63 Gosub           20   65    0               00 
  64 Goto             0   69    0               00 
  65 Sort             4   69    0               00 
  66 Column           4    0   13               00 r[13]=x
  67 Next             4   66    0               00 
  68 Return          20    0    0               00 
  69 Return          12    0    0               00 
  70 Eq              13    1    4               63 r[1] = (r[4]==r[13])
  71 ResultRow        1    1    0               00 output=r[1]
  72 Halt             0    0    0               00 
  73 Transaction      0    0    4 0             01 usesStmtJournal=0
  74 Goto             0    1    0               00 
SQL: [SELECT (SELECT 3, 5) == (SELECT x,x FROM t1 ORDER BY x DESC, x)
;]
VDBE Program Listing:
   0 Init             0   54    0               00 Start at 54
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         11    2    0               00 r[2]=11; return address
   3 Once             0   11    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 Integer          1    5    0               00 r[5]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          3    3    0               00 r[3]=3
   9 Integer          5    4    0               00 r[4]=5
  10 DecrJumpZero     5   11    0               00 if (--r[5])==0 goto 11
  11 Return           2    0    0               00 
  12 Integer         48    6    0               00 r[6]=48; return address
  13 Once             0   48    0               00 
  14 Explain         14    0    0 SCALAR SUBQUERY 2 00 
  15 Null             0    7    8               00 r[7..8]=NULL; Init subquery result
  16 OpenEphemeral    1    3    0 k(1,B)        00 nColumn=3
  17 Integer          1    9    0               00 r[9]=1; LIMIT counter
  18 OpenRead         2    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
  19 Explain         19   14    0 SCAN TABLE t1 USING COVERING INDEX collate4t1 00 
  20 Last             2   40   10 0             00 
  21 Column           2    0    7               00 r[7]=t1.x
  22 Column           2    0   10               00 r[10]=t1.x
  23 Column           2    0   11               00 r[11]=t1.x
  24 Sequence         1   12    0               00 r[12]=cursor[1].ctr++
  25 Move             7   13    1               00 r[13]=r[7]
  26 MakeRecord      11    3   14               00 r[14]=mkrec(r[11..13])
  27 IfNot           12   33    0               00 
  28 Compare         15   10    1 k(2,B,B)      00 r[15] <-> r[10]
  29 Jump            30   34   30               00 
  30 Gosub           16   43    0               00 
  31 ResetSorter      1    0    0               00 
  32 IfNot            9   48    0               00 
  33 Move            10   15    1               00 r[15]=r[10]
  34 IfNotZero        9   38    0               00 if r[9]!=0 then r[9]--, goto 38
  35 Last             1    0    0               00 
  36 IdxLE            1   39   11 1             00 key=r[11]
  37 Delete           1    0    0               00 
  38 IdxInsert        1   14   11 3             00 key=r[14]
  39 Prev             2   21    0               01 
  40 Explain         40   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  41 Gosub           16   43    0               00 
  42 Goto             0   48    0               00 
  43 Sort             1   48    0               00 
  44 Column           1    0    8               00 r[8]=x
  45 Column           1    2    7               00 r[7]=x
  46 Next             1   44    0               00 
  47 Return          16    0    0               00 
  48 Return           6    0    0               00 
  49 Eq               7    1    3 (BINARY)      63 r[1] = (r[3]==r[7])
  50 IfNot            1   52    0               00 
  51 Eq               8    1    4 (BINARY)      6B r[1] = (r[4]==r[8])
  52 ResultRow        1    1    0               00 output=r[1]
  53 Halt             0    0    0               00 
  54 Transaction      0    0    4 0             01 usesStmtJournal=0
  55 Goto             0    1    0               00 
SQL: [SELECT (2, 2) BETWEEN (2, 2) AND (3, 3)
;]
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               5    4    2               61 r[4] = (r[2]>r[5])
   3 ElseNotEq        0    5    0               00 
   4 Ge               5    4    3               61 r[4] = (r[3]>=r[5])
   5 Lt               7    6    2               61 r[6] = (r[2]<r[7])
   6 ElseNotEq        0    8    0               00 
   7 Le               7    6    3               61 r[6] = (r[3]<=r[7])
   8 And              6    4    1               00 r[1]=(r[6] && r[4])
   9 ResultRow        1    1    0               00 output=r[1]
  10 Halt             0    0    0               00 
  11 Integer          2    2    0               00 r[2]=2
  12 Integer          2    3    0               00 r[3]=2
  13 Integer          2    5    0               00 r[5]=2
  14 Integer          3    7    0               00 r[7]=3
  15 Goto             0    1    0               00 
SQL: [SELECT (NULL, 0) IN (SELECT * FROM xyz)
;]
VDBE Program Listing:
   0 Init             0   35    0               00 Start at 35
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Null             0    1    0               00 r[1]=NULL
   3 Noop             0    0    0               00 begin IN expr
   4 Integer         16    3    0               00 r[3]=16; return address
   5 Once             0   16    0               00 
   6 OpenEphemeral    1    2    0 k(2,B,B)      00 nColumn=2; Result of SELECT 1
   7 Explain          7    0    0 LIST SUBQUERY 1 00 
   8 OpenRead         0    5    0 2             00 root=5 iDb=0; xyz
   9 Explain          9    7    0 SCAN TABLE xyz 00 
  10 Rewind           0   16    0               00 
  11 Column           0    0    4               00 r[4]=xyz.b
  12 Column           0    1    5               00 r[5]=xyz.c
  13 MakeRecord       4    2    6 AA            00 r[6]=mkrec(r[4..5])
  14 IdxInsert        1    6    4 2             00 key=r[6]
  15 Next             0   11    0               01 
  16 Return           3    0    0               00 
  17 Integer          0    2    0               00 r[2]=0
  18 Rewind           1   20    0               00 
  19 Column           1    0    2               80 r[2]=first_entry_in(1)
  20 IsNull           7   23    0               00 if r[7]==NULL goto 23
  21 Affinity         7    2    0 AA            00 affinity(r[7..8])
  22 Found            1   31    7 2             00 key=r[7..8]
  23 Rewind           1   32    0               00 
  24 Column           1    0    6               00 r[6]=
  25 Ne               7   29    6               00 if r[6]!=r[7] goto 29
  26 Column           1    1    6               00 r[6]=
  27 Ne               8   29    6               00 if r[6]!=r[8] goto 29
  28 Goto             0   33    0               00 
  29 Next             1   24    0               00 
  30 Goto             0   32    0               00 end IN expr
  31 Integer          1    1    0               00 r[1]=1
  32 AddImm           1    0    0               00 r[1]=r[1]+0
  33 ResultRow        1    1    0               00 output=r[1]
  34 Halt             0    0    0               00 
  35 Transaction      0    0    4 0             01 usesStmtJournal=0
  36 Null             0    7    0               00 r[7]=NULL
  37 Integer          0    8    0               00 r[8]=0
  38 Goto             0    1    0               00 
SQL: [;CREATE INDEX d ON t1(x, x);]
VDBE Program Listing:
   0 Init             0   34    0               00 Start at 34
   1 Noop             0   33    0               00 
   2 CreateBtree      0    1    2               00 r[1]=root iDb=0 flags=2
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
   5 String8          0    3    0 index         00 r[3]='index'
   6 String8          0    4    0 d             00 r[4]='d'
   7 String8          0    5    0 t1            00 r[5]='t1'
   8 Copy             1    6    0               00 r[6]=r[1]
   9 String8          0    7    0 CREATE INDEX d ON t1(x, x) 00 r[7]='CREATE INDEX d ON t1(x, x)'
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
  12 SorterOpen       3    0    2 k(3,,,)       00 
  13 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  14 Rewind           1   21    0               00 
  15 Column           1    0   10               00 r[10]=t1.x
  16 Column           1    0   11               00 r[11]=t1.x
  17 Rowid            1   12    0               00 r[12]=rowid
  18 MakeRecord      10    3    9               00 r[9]=mkrec(r[10..12])
  19 SorterInsert     3    9    0               00 key=r[9]
  20 Next             1   15    0               00 
  21 OpenWrite        2    1    0 k(3,,,)       11 root=1 iDb=0
  22 SorterSort       3   27    0               00 
  23 SorterData       3    9    2               00 r[9]=data
  24 SeekEnd          2    0    0               00 
  25 IdxInsert        2    9    0               10 key=r[9]
  26 SorterNext       3   23    0               00 
  27 Close            1    0    0               00 
  28 Close            2    0    0               00 
  29 Close            3    0    0               00 
  30 SetCookie        0    1    5               00 
  31 ParseSchema      0    0    0 name='d' AND type='index' 00 
  32 Expire           0    1    0               00 
  33 Halt             0    0    0               00 
  34 Transaction      0    1    4 0             01 usesStmtJournal=0
  35 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    5 0             00 usesStmtJournal=0
  16 String8          0    2    0 d             00 r[2]='d'
  17 String8          0    3    0 index         00 r[3]='index'
  18 Goto             0    1    0               00 
SQL: [;
;SELECT x FROM t1 WHERE (x, x) = (SELECT 'abc' COLLATE nocase, 1);]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 OpenRead         1    3    0 k(2,,)        02 root=3 iDb=0; collate4t1
   2 Explain          2    0    0 SEARCH TABLE t1 USING COVERING INDEX collate4t1 (x=?) 00 
   3 Integer         12    2    0               00 r[2]=12; return address
   4 Once             0   12    0               00 
   5 Explain          5    0    0 SCALAR SUBQUERY 1 00 
   6 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   7 Integer          1    5    0               00 r[5]=1; LIMIT counter
   8 Explain          8    5    0 SCAN CONSTANT ROW 00 
   9 String8          0    3    0 abc           00 r[3]='abc'
  10 Integer          1    4    0               00 r[4]=1
  11 DecrJumpZero     5   12    0               00 if (--r[5])==0 goto 12
  12 Return           2    0    0               00 
  13 IsNull           4   22    0               00 if r[4]==NULL goto 22
  14 Affinity         4    1    0 C             00 affinity(r[4])
  15 SeekGE           1   22    4 1             00 key=r[4]
  16 IdxGT            1   22    4 1             00 key=r[4]
  17 Column           1    0    1               00 r[1]=t1.x
  18 Ne               3   21    1 (BINARY)      53 if r[1]!=r[3] goto 21
  19 Column           1    0    7               00 r[7]=t1.x
  20 ResultRow        7    1    0               00 output=r[7]
  21 Next             1   16    1               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0    5 0             01 usesStmtJournal=0
  24 Goto             0    1    0               00 
SQL: [;
;SELECT collate4i1 FROM a WHERE collate4i1 = (SELECT 'abc' COLLATE nocase) AND collate4i1 = (SELECT 1);]
VDBE Program Listing:
   0 Init             0   30    0               00 Start at 30
   1 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   2 Explain          2    0    0 SCAN TABLE a  00 
   3 Rewind           0   29    0               00 
   4 Column           0    0    1               00 r[1]=a.collate4i1
   5 Integer         13    3    0               00 r[3]=13; return address
   6 Once             0   13    0               00 
   7 Explain          7    0    0 SCALAR SUBQUERY 1 00 
   8 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   9 Integer          1    5    0               00 r[5]=1; LIMIT counter
  10 Explain         10    7    0 SCAN CONSTANT ROW 00 
  11 String8          0    4    0 abc           00 r[4]='abc'
  12 DecrJumpZero     5   13    0               00 if (--r[5])==0 goto 13
  13 Return           3    0    0               00 
  14 Ne               4   28    1 (BINARY)      51 if r[1]!=r[4] goto 28
  15 Column           0    0    1               00 r[1]=a.collate4i1
  16 Integer         24    6    0               00 r[6]=24; return address
  17 Once             0   24    0               00 
  18 Explain         18    0    0 SCALAR SUBQUERY 2 00 
  19 Null             0    7    7               00 r[7..7]=NULL; Init subquery result
  20 Integer          1    8    0               00 r[8]=1; LIMIT counter
  21 Explain         21   18    0 SCAN CONSTANT ROW 00 
  22 Integer          1    7    0               00 r[7]=1
  23 DecrJumpZero     8   24    0               00 if (--r[8])==0 goto 24
  24 Return           6    0    0               00 
  25 Ne               7   28    1 (BINARY)      51 if r[1]!=r[7] goto 28
  26 Column           0    0    9               00 r[9]=a.collate4i1
  27 ResultRow        9    1    0               00 output=r[9]
  28 Next             0    4    0               01 
  29 Halt             0    0    0               00 
  30 Transaction      0    0    5 0             01 usesStmtJournal=0
  31 Goto             0    1    0               00 
SQL: [;
;SELECT collate4i1 FROM a WHERE collate4i1 = (SELECT 'abc') COLLATE nocase AND collate4i1 = (SELECT 1);]
VDBE Program Listing:
   0 Init             0   30    0               00 Start at 30
   1 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   2 Explain          2    0    0 SCAN TABLE a  00 
   3 Rewind           0   29    0               00 
   4 Column           0    0    1               00 r[1]=a.collate4i1
   5 Integer         13    3    0               00 r[3]=13; return address
   6 Once             0   13    0               00 
   7 Explain          7    0    0 SCALAR SUBQUERY 1 00 
   8 Null             0    4    4               00 r[4..4]=NULL; Init subquery result
   9 Integer          1    5    0               00 r[5]=1; LIMIT counter
  10 Explain         10    7    0 SCAN CONSTANT ROW 00 
  11 String8          0    4    0 abc           00 r[4]='abc'
  12 DecrJumpZero     5   13    0               00 if (--r[5])==0 goto 13
  13 Return           3    0    0               00 
  14 Ne               4   28    1 (NOCASE)      51 if r[1]!=r[4] goto 28
  15 Column           0    0    1               00 r[1]=a.collate4i1
  16 Integer         24    6    0               00 r[6]=24; return address
  17 Once             0   24    0               00 
  18 Explain         18    0    0 SCALAR SUBQUERY 2 00 
  19 Null             0    7    7               00 r[7..7]=NULL; Init subquery result
  20 Integer          1    8    0               00 r[8]=1; LIMIT counter
  21 Explain         21   18    0 SCAN CONSTANT ROW 00 
  22 Integer          1    7    0               00 r[7]=1
  23 DecrJumpZero     8   24    0               00 if (--r[8])==0 goto 24
  24 Return           6    0    0               00 
  25 Ne               7   28    1 (BINARY)      51 if r[1]!=r[7] goto 28
  26 Column           0    0    9               00 r[9]=a.collate4i1
  27 ResultRow        9    1    0               00 output=r[9]
  28 Next             0    4    0               01 
  29 Halt             0    0    0               00 
  30 Transaction      0    0    5 0             01 usesStmtJournal=0
  31 Goto             0    1    0               00 
SQL: [
;SELECT collate4i1 FROM a WHERE (collate4i1 COLLATE nocase, collate4i1) = (SELECT 'def', 2);]
VDBE Program Listing:
   0 Init             0   22    0               00 Start at 22
   1 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   2 Explain          2    0    0 SCAN TABLE a  00 
   3 Rewind           0   21    0               00 
   4 Column           0    0    1               00 r[1]=a.collate4i1
   5 Integer         14    3    0               00 r[3]=14; return address
   6 Once             0   14    0               00 
   7 Explain          7    0    0 SCALAR SUBQUERY 1 00 
   8 Null             0    4    5               00 r[4..5]=NULL; Init subquery result
   9 Integer          1    6    0               00 r[6]=1; LIMIT counter
  10 Explain         10    7    0 SCAN CONSTANT ROW 00 
  11 String8          0    4    0 def           00 r[4]='def'
  12 Integer          2    5    0               00 r[5]=2
  13 DecrJumpZero     6   14    0               00 if (--r[6])==0 goto 14
  14 Return           3    0    0               00 
  15 Ne               4   20    1 (NOCASE)      51 if r[1]!=r[4] goto 20
  16 Column           0    0    1               00 r[1]=a.collate4i1
  17 Ne               5   20    1 (BINARY)      51 if r[1]!=r[5] goto 20
  18 Column           0    0    7               00 r[7]=a.collate4i1
  19 ResultRow        7    1    0               00 output=r[7]
  20 Next             0    4    0               01 
  21 Halt             0    0    0               00 
  22 Transaction      0    0    5 0             01 usesStmtJournal=0
  23 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE (x, x) < (2, 3)
;]
VDBE Program Listing:
   0 Init             0   18    0               00 Start at 18
   1 OpenRead         1    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
   2 Explain          2    0    0 SEARCH TABLE t1 USING COVERING INDEX collate4t1 (x<?) 00 
   3 Null             0    1    0               00 r[1]=NULL
   4 SeekGT           1   17    1 1             00 key=r[1]
   5 Integer          2    1    0               00 r[1]=2
   6 IsNull           1   17    0               00 if r[1]==NULL goto 17
   7 IdxGT            1   17    1 1             00 key=r[1]
   8 Column           1    0    3               00 r[3]=t1.x
   9 Lt               4    2    3 (BINARY)      63 r[2] = (r[3]<r[4])
  10 ElseNotEq        0   13    0               00 
  11 Column           1    0    3               00 r[3]=t1.x
  12 Lt               5    2    3 (BINARY)      63 r[2] = (r[3]<r[5])
  13 IfNot            2   16    1               00 
  14 Column           1    0    6               00 r[6]=t1.x
  15 ResultRow        6    1    0               00 output=r[6]
  16 Next             1    7    0               00 
  17 Halt             0    0    0               00 
  18 Transaction      0    0    5 0             01 usesStmtJournal=0
  19 Integer          2    4    0               00 r[4]=2
  20 Integer          3    5    0               00 r[5]=3
  21 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE (x, x) > (2, 1)
;]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 OpenRead         1    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
   2 Explain          2    0    0 SEARCH TABLE t1 USING COVERING INDEX collate4t1 (x>?) 00 
   3 Integer          2    1    0               00 r[1]=2
   4 IsNull           1   15    0               00 if r[1]==NULL goto 15
   5 SeekGE           1   15    1 1             00 key=r[1]
   6 Column           1    0    3               00 r[3]=t1.x
   7 Gt               4    2    3 (BINARY)      63 r[2] = (r[3]>r[4])
   8 ElseNotEq        0   11    0               00 
   9 Column           1    0    3               00 r[3]=t1.x
  10 Gt               5    2    3 (BINARY)      63 r[2] = (r[3]>r[5])
  11 IfNot            2   14    1               00 
  12 Column           1    0    6               00 r[6]=t1.x
  13 ResultRow        6    1    0               00 output=r[6]
  14 Next             1    6    0               00 
  15 Halt             0    0    0               00 
  16 Transaction      0    0    5 0             01 usesStmtJournal=0
  17 Integer          2    4    0               00 r[4]=2
  18 Integer          1    5    0               00 r[5]=1
  19 Goto             0    1    0               00 
SQL: [SELECT * FROM t1 WHERE (x, x) > ('2', 1)
;]
VDBE Program Listing:
   0 Init             0   17    0               00 Start at 17
   1 OpenRead         1    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
   2 Explain          2    0    0 SEARCH TABLE t1 USING COVERING INDEX collate4t1 (x>?) 00 
   3 String8          0    1    0 2             00 r[1]='2'
   4 IsNull           1   16    0               00 if r[1]==NULL goto 16
   5 Affinity         1    1    0 C             00 affinity(r[1])
   6 SeekGE           1   16    1 1             00 key=r[1]
   7 Column           1    0    3               00 r[3]=t1.x
   8 Gt               4    2    3 (BINARY)      63 r[2] = (r[3]>r[4])
   9 ElseNotEq        0   12    0               00 
  10 Column           1    0    3               00 r[3]=t1.x
  11 Gt               5    2    3 (BINARY)      63 r[2] = (r[3]>r[5])
  12 IfNot            2   15    1               00 
  13 Column           1    0    6               00 r[6]=t1.x
  14 ResultRow        6    1    0               00 output=r[6]
  15 Next             1    7    0               00 
  16 Halt             0    0    0               00 
  17 Transaction      0    0    5 0             01 usesStmtJournal=0
  18 String8          0    4    0 2             00 r[4]='2'
  19 Integer          1    5    0               00 r[5]=1
  20 Goto             0    1    0               00 
SQL: [CREATE TABLE xyz1(t2);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 xyz1          00 r[7]='xyz1'
  20 String8          0    8    0 xyz1          00 r[8]='xyz1'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE xyz1(t2) 00 r[10]='CREATE TABLE xyz1(t2)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    6               00 
  26 ParseSchema      0    0    0 tbl_name='xyz1' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    5 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    6 0             00 usesStmtJournal=0
  16 String8          0    2    0 xyz1          00 r[2]='xyz1'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [CREATE TABLE tr1(tr2 INTEGER PRIMARY KEY, y, z);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 tr1           00 r[7]='tr1'
  20 String8          0    8    0 tr1           00 r[8]='tr1'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE tr1(tr2 INTEGER PRIMARY KEY, y, z) 00 r[10]='CREATE TABLE tr1(tr2 INTEGER PRIMARY KEY, y, z)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    7               00 
  26 ParseSchema      0    0    0 tbl_name='tr1' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    6 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    7 0             00 usesStmtJournal=0
  16 String8          0    2    0 tr1           00 r[2]='tr1'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [SELECT b FROM xyz WHERE (b, c) > (2, 2)
;]
VDBE Program Listing:
   0 Init             0   14    0               00 Start at 14
   1 OpenRead         0    5    0 2             00 root=5 iDb=0; xyz
   2 Explain          2    0    0 SCAN TABLE xyz 00 
   3 Rewind           0   13    0               00 
   4 Column           0    0    2               00 r[2]=xyz.b
   5 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   6 ElseNotEq        0    9    0               00 
   7 Column           0    1    2               00 r[2]=xyz.c
   8 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   9 IfNot            1   12    1               00 
  10 Column           0    0    4               00 r[4]=xyz.b
  11 ResultRow        4    1    0               00 output=r[4]
  12 Next             0    4    0               01 
  13 Halt             0    0    0               00 
  14 Transaction      0    0    7 0             01 usesStmtJournal=0
  15 Integer          2    3    0               00 r[3]=2
  16 Goto             0    1    0               00 
SQL: [SELECT b FROM xyz WHERE (b, b) < (4, 5)
;]
VDBE Program Listing:
   0 Init             0   14    0               00 Start at 14
   1 OpenRead         0    5    0 1             00 root=5 iDb=0; xyz
   2 Explain          2    0    0 SCAN TABLE xyz 00 
   3 Rewind           0   13    0               00 
   4 Column           0    0    2               00 r[2]=xyz.b
   5 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   6 ElseNotEq        0    9    0               00 
   7 Column           0    0    2               00 r[2]=xyz.b
   8 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
   9 IfNot            1   12    1               00 
  10 Column           0    0    5               00 r[5]=xyz.b
  11 ResultRow        5    1    0               00 output=r[5]
  12 Next             0    4    0               01 
  13 Halt             0    0    0               00 
  14 Transaction      0    0    7 0             01 usesStmtJournal=0
  15 Integer          4    3    0               00 r[3]=4
  16 Integer          5    4    0               00 r[4]=5
  17 Goto             0    1    0               00 
SQL: [;INSERT INTO xyz(b) VALUES('X');]
VDBE Program Listing:
   0 Init             0    7    0               00 Start at 7
   1 OpenWrite        0    5    0 2             00 root=5 iDb=0; xyz
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 String8          0    2    0 X             00 r[2]='X'
   4 MakeRecord       2    2    4               00 r[4]=mkrec(r[2..3])
   5 Insert           0    4    1 xyz           39 intkey=r[1] data=r[4]
   6 Halt             0    0    0               00 
   7 Transaction      0    1    7 0             01 usesStmtJournal=0
   8 Null             0    3    0               00 r[3]=NULL
   9 Goto             0    1    0               00 
SQL: [;CREATE TABLE t0(t1a TEXT,t1b TEXT,bad1 TEXT,t1c TEXT,t2a1 TEXT,t2a2 TEXT);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t0            00 r[7]='t0'
  20 String8          0    8    0 t0            00 r[8]='t0'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t0(t1a TEXT,t1b TEXT,bad1 TEXT,t1c TEXT,t2a1 TEXT,t2a2 TEXT) 00 r[10]='CREATE TABLE t0(t1a TEXT,t1b TEXT,bad1 TEXT,t1c TEXT,t2a1 TEXT,t2a2 TEXT)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    8               00 
  26 ParseSchema      0    0    0 tbl_name='t0' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    7 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    8 0             00 usesStmtJournal=0
  16 String8          0    2    0 t0            00 r[2]='t0'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE INDEX t3 ON t1(x,x,x,x,x);]
VDBE Program Listing:
   0 Init             0   37    0               00 Start at 37
   1 Noop             0   36    0               00 
   2 CreateBtree      0    1    2               00 r[1]=root iDb=0 flags=2
   3 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   4 NewRowid         0    2    0               00 r[2]=rowid
   5 String8          0    3    0 index         00 r[3]='index'
   6 String8          0    4    0 t3            00 r[4]='t3'
   7 String8          0    5    0 t1            00 r[5]='t1'
   8 Copy             1    6    0               00 r[6]=r[1]
   9 String8          0    7    0 CREATE INDEX t3 ON t1(x,x,x,x,x) 00 r[7]='CREATE INDEX t3 ON t1(x,x,x,x,x)'
  10 MakeRecord       3    5    8 BBBDB         00 r[8]=mkrec(r[3..7])
  11 Insert           0    8    2               18 intkey=r[2] data=r[8]
  12 SorterOpen       3    0    5 k(6,,,,,,)    00 
  13 OpenRead         1    2    0 1             00 root=2 iDb=0; t1
  14 Rewind           1   24    0               00 
  15 Column           1    0   10               00 r[10]=t1.x
  16 Column           1    0   11               00 r[11]=t1.x
  17 Column           1    0   12               00 r[12]=t1.x
  18 Column           1    0   13               00 r[13]=t1.x
  19 Column           1    0   14               00 r[14]=t1.x
  20 Rowid            1   15    0               00 r[15]=rowid
  21 MakeRecord      10    6    9               00 r[9]=mkrec(r[10..15])
  22 SorterInsert     3    9    0               00 key=r[9]
  23 Next             1   15    0               00 
  24 OpenWrite        2    1    0 k(6,,,,,,)    11 root=1 iDb=0
  25 SorterSort       3   30    0               00 
  26 SorterData       3    9    2               00 r[9]=data
  27 SeekEnd          2    0    0               00 
  28 IdxInsert        2    9    0               10 key=r[9]
  29 SorterNext       3   26    0               00 
  30 Close            1    0    0               00 
  31 Close            2    0    0               00 
  32 Close            3    0    0               00 
  33 SetCookie        0    1    9               00 
  34 ParseSchema      0    0    0 name='t3' AND type='index' 00 
  35 Expire           0    1    0               00 
  36 Halt             0    0    0               00 
  37 Transaction      0    1    8 0             01 usesStmtJournal=0
  38 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    9 0             00 usesStmtJournal=0
  16 String8          0    2    0 t3            00 r[2]='t3'
  17 String8          0    3    0 index         00 r[3]='index'
  18 Goto             0    1    0               00 
SQL: [;
;CREATE TABLE t3a(t3b);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t3a           00 r[7]='t3a'
  20 String8          0    8    0 t3a           00 r[8]='t3a'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t3a(t3b) 00 r[10]='CREATE TABLE t3a(t3b)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   10               00 
  26 ParseSchema      0    0    0 tbl_name='t3a' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    9 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   10 0             00 usesStmtJournal=0
  16 String8          0    2    0 t3a           00 r[2]='t3a'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;DROP TABLE IF EXISTS t0;]
VDBE Program Listing:
   0 Init             0   38    0               00 Start at 38
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
   7 Column           0    0    2               00 r[2]=sqlite_master.type
   8 Eq               4   12    2 (BINARY)      52 if r[2]==r[4] goto 12
   9 Rowid            0    5    0               00 r[5]=rowid
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
  13 Destroy          9    2    0               00 
  14 Null             0    6    7               00 r[6..7]=NULL
  15 IfNot            2   24    1               00 
  16 OpenRead         1    1    0 4             00 root=1 iDb=0; sqlite_master
  17 Explain         17    0    0 SCAN TABLE sqlite_master 00 
  18 Rewind           1   24    0               00 
  19 Column           1    3   13               00 r[13]=sqlite_master.rootpage
  20 Ne               2   23   13 (BINARY)      54 if r[13]!=r[2] goto 23
  21 Rowid            1    7    0               00 r[7]=rowid
  22 RowSetAdd        6    7    0               00 rowset(6)=r[7]
  23 Next             1   19    0               01 
  24 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  25 RowSetRead       6   35    7               00 r[7]=rowset(6)
  26 NotExists        1   25    7               00 intkey=r[7]
  27 Column           1    0    8               00 r[8]=sqlite_master.type
  28 Column           1    1    9               00 r[9]=sqlite_master.name
  29 Column           1    2   10               00 r[10]=sqlite_master.tbl_name
  30 Integer          9   11    0               00 r[11]=9
  31 Column           1    4   12               00 r[12]=sqlite_master.sql
  32 MakeRecord       8    5   13 BBBDB         00 r[13]=mkrec(r[8..12])
  33 Insert           1   13    7               00 intkey=r[7] data=r[13]
  34 Goto             0   25    0               00 
  35 DropTable        0    0    0 t0            00 
  36 SetCookie        0    1   11               00 
  37 Halt             0    0    0               00 
  38 Transaction      0    1   10 0             01 usesStmtJournal=1
  39 String8          0    3    0 t0            00 r[3]='t0'
  40 String8          0    4    0 trigger       00 r[4]='trigger'
  41 Goto             0    1    0               00 
SQL: [;INSERT INTO xyz VALUES(3,4);]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenWrite        0    5    0 2             00 root=5 iDb=0; xyz
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          3    2    0               00 r[2]=3
   4 Integer          4    3    0               00 r[3]=4
   5 MakeRecord       2    2    4               00 r[4]=mkrec(r[2..3])
   6 Insert           0    4    1 xyz           39 intkey=r[1] data=r[4]
   7 Halt             0    0    0               00 
   8 Transaction      0    1   11 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [;INSERT INTO xyz1 VALUES(2), (4);]
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 InitCoroutine    3    8    2               00 
   2 Explain          2    0    0 SCAN 2 CONSTANT ROWS 00 
   3 Integer          2    2    0               00 r[2]=2
   4 Yield            3    0    0               00 
   5 Integer          4    2    0               00 r[2]=4
   6 Yield            3    0    0               00 
   7 EndCoroutine     3    0    0               00 
   8 OpenWrite        0    7    0 1             00 root=7 iDb=0; xyz1
   9 Yield            3   14    0               00 
  10 NewRowid         0    1    0               00 r[1]=rowid
  11 MakeRecord       2    1    4               00 r[4]=mkrec(r[2])
  12 Insert           0    4    1 xyz1          39 intkey=r[1] data=r[4]
  13 Goto             0    9    0               00 
  14 Halt             0    0    0               00 
  15 Transaction      0    1   11 0             01 usesStmtJournal=0
  16 Goto             0    1    0               00 
SQL: [;
;SELECT 1 WHERE (2,2) BETWEEN (1,1) AND (3,3)
;]
VDBE Program Listing:
   0 Init             0   13    0               00 Start at 13
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Gt               4    3    1               61 r[3] = (r[1]>r[4])
   3 ElseNotEq        0    5    0               00 
   4 Ge               4    3    2               61 r[3] = (r[2]>=r[4])
   5 IfNot            3   12    1               00 
   6 Lt               5    3    1               61 r[3] = (r[1]<r[5])
   7 ElseNotEq        0    9    0               00 
   8 Le               5    3    2               61 r[3] = (r[2]<=r[5])
   9 IfNot            3   12    1               00 
  10 Integer          1    6    0               00 r[6]=1
  11 ResultRow        6    1    0               00 output=r[6]
  12 Halt             0    0    0               00 
  13 Integer          2    1    0               00 r[1]=2
  14 Integer          2    2    0               00 r[2]=2
  15 Integer          1    4    0               00 r[4]=1
  16 Integer          3    5    0               00 r[5]=3
  17 Goto             0    1    0               00 
SQL: [SELECT CASE (2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;]
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               5    4    2               61 r[4] = (r[2]==r[5])
   3 IfNot            4    5    0               00 
   4 Eq               5    4    3               69 r[4] = (r[3]==r[5])
   5 IfNot            4    8    1               00 
   6 Integer          2    1    0               00 r[1]=2
   7 Goto             0    9    0               00 
   8 Integer          1    1    0               00 r[1]=1
   9 ResultRow        1    1    0               00 output=r[1]
  10 Halt             0    0    0               00 
  11 Integer          2    2    0               00 r[2]=2
  12 Integer          2    3    0               00 r[3]=2
  13 Integer          1    5    0               00 r[5]=1
  14 Goto             0    1    0               00 
SQL: [SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;]
VDBE Program Listing:
   0 Init             0   21    0               00 Start at 21
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         11    2    0               00 r[2]=11; return address
   3 Once             0   11    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    4               00 r[3..4]=NULL; Init subquery result
   6 Integer          1    5    0               00 r[5]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          2    3    0               00 r[3]=2
   9 Integer          2    4    0               00 r[4]=2
  10 DecrJumpZero     5   11    0               00 if (--r[5])==0 goto 11
  11 Return           2    0    0               00 
  12 Eq               7    6    3               61 r[6] = (r[3]==r[7])
  13 IfNot            6   15    0               00 
  14 Eq               7    6    4               69 r[6] = (r[4]==r[7])
  15 IfNot            6   18    1               00 
  16 Integer          2    1    0               00 r[1]=2
  17 Goto             0   19    0               00 
  18 Integer          1    1    0               00 r[1]=1
  19 ResultRow        1    1    0               00 output=r[1]
  20 Halt             0    0    0               00 
  21 Integer          1    7    0               00 r[7]=1
  22 Goto             0    1    0               00 
SQL: [SELECT 1 WHERE (SELECT 2,2) BETWEEN (1,1) AND (3,3)
;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         11    1    0               00 r[1]=11; return address
   3 Once             0   11    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    2    3               00 r[2..3]=NULL; Init subquery result
   6 Integer          1    4    0               00 r[4]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          2    2    0               00 r[2]=2
   9 Integer          2    3    0               00 r[3]=2
  10 DecrJumpZero     4   11    0               00 if (--r[4])==0 goto 11
  11 Return           1    0    0               00 
  12 Gt               6    5    2               61 r[5] = (r[2]>r[6])
  13 ElseNotEq        0   15    0               00 
  14 Ge               6    5    3               61 r[5] = (r[3]>=r[6])
  15 IfNot            5   22    1               00 
  16 Lt               7    5    2               61 r[5] = (r[2]<r[7])
  17 ElseNotEq        0   19    0               00 
  18 Le               7    5    3               61 r[5] = (r[3]<=r[7])
  19 IfNot            5   22    1               00 
  20 Integer          1    8    0               00 r[8]=1
  21 ResultRow        8    1    0               00 output=r[8]
  22 Halt             0    0    0               00 
  23 Integer          1    6    0               00 r[6]=1
  24 Integer          3    7    0               00 r[7]=3
  25 Goto             0    1    0               00 
SQL: [SELECT 1 FROM xyz1 WHERE (t2,1) BETWEEN (1,1) AND (3,3)
;]
VDBE Program Listing:
   0 Init             0   17    0               00 Start at 17
   1 OpenRead         0    7    0 1             00 root=7 iDb=0; xyz1
   2 Explain          2    0    0 SCAN TABLE xyz1 00 
   3 Rewind           0   16    0               00 
   4 Column           0    0    1               00 r[1]=xyz1.t2
   5 Gt               4    3    1 (BINARY)      61 r[3] = (r[1]>r[4])
   6 ElseNotEq        0    8    0               00 
   7 Ge               4    3    2               61 r[3] = (r[2]>=r[4])
   8 IfNot            3   15    1               00 
   9 Lt               5    3    1 (BINARY)      61 r[3] = (r[1]<r[5])
  10 ElseNotEq        0   12    0               00 
  11 Le               5    3    2               61 r[3] = (r[2]<=r[5])
  12 IfNot            3   15    1               00 
  13 Integer          1    6    0               00 r[6]=1
  14 ResultRow        6    1    0               00 output=r[6]
  15 Next             0    4    0               01 
  16 Halt             0    0    0               00 
  17 Transaction      0    0   11 0             01 usesStmtJournal=0
  18 Integer          1    2    0               00 r[2]=1
  19 Integer          1    4    0               00 r[4]=1
  20 Integer          3    5    0               00 r[5]=3
  21 Goto             0    1    0               00 
SQL: [SELECT 1 FROM t1 WHERE (1,x) BETWEEN (1,1) AND (3,3)

;]
VDBE Program Listing:
   0 Init             0   17    0               00 Start at 17
   1 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   2 Explain          2    0    0 SCAN TABLE t1 00 
   3 Rewind           0   16    0               00 
   4 Column           0    0    2               00 r[2]=t1.x
   5 Gt               4    3    1               61 r[3] = (r[1]>r[4])
   6 ElseNotEq        0    8    0               00 
   7 Ge               4    3    2 (BINARY)      63 r[3] = (r[2]>=r[4])
   8 IfNot            3   15    1               00 
   9 Lt               5    3    1               61 r[3] = (r[1]<r[5])
  10 ElseNotEq        0   12    0               00 
  11 Le               5    3    2 (BINARY)      63 r[3] = (r[2]<=r[5])
  12 IfNot            3   15    1               00 
  13 Integer          1    6    0               00 r[6]=1
  14 ResultRow        6    1    0               00 output=r[6]
  15 Next             0    4    0               01 
  16 Halt             0    0    0               00 
  17 Transaction      0    0   11 0             01 usesStmtJournal=0
  18 Integer          1    1    0               00 r[1]=1
  19 Integer          1    4    0               00 r[4]=1
  20 Integer          3    5    0               00 r[5]=3
  21 Goto             0    1    0               00 
SQL: [CREATE TABLE t6(t6ab PRIMARY KEY, t6b);]
VDBE Program Listing:
   0 Init             0   39    0               00 Start at 39
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Noop             0   22    0               00 
  12 CreateBtree      0    4    2               00 r[4]=root iDb=0 flags=2
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 NewRowid         1    5    0               00 r[5]=rowid
  15 String8          0    6    0 index         00 r[6]='index'
  16 String8          0    7    0 sqlite_autoindex_t6_1 00 r[7]='sqlite_autoindex_t6_1'
  17 String8          0    8    0 t6            00 r[8]='t6'
  18 Copy             4    9    0               00 r[9]=r[4]
  19 Null             0   10    0               00 r[10]=NULL
  20 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  21 Insert           1   11    5               18 intkey=r[5] data=r[11]
  22 Close            0    0    0               00 
  23 Null             0   12   13               00 r[12..13]=NULL
  24 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  25 Explain         25    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  26 SeekRowid        2   28    1               00 intkey=r[1]
  27 Rowid            2   13    0               00 r[13]=rowid
  28 IsNull          13   36    0               00 if r[13]==NULL goto 36
  29 String8          0   14    0 table         00 r[14]='table'
  30 String8          0   15    0 t6            00 r[15]='t6'
  31 String8          0   16    0 t6            00 r[16]='t6'
  32 Copy             2   17    0               00 r[17]=r[2]
  33 String8          0   18    0 CREATE TABLE t6(t6ab PRIMARY KEY, t6b) 00 r[18]='CREATE TABLE t6(t6ab PRIMARY KEY, t6b)'
  34 MakeRecord      14    5   19 BBBDB         00 r[19]=mkrec(r[14..18])
  35 Insert           2   19   13               00 intkey=r[13] data=r[19]
  36 SetCookie        0    1   12               00 
  37 ParseSchema      0    0    0 tbl_name='t6' AND type!='trigger' 00 
  38 Halt             0    0    0               00 
  39 Transaction      0    1   11 0             01 usesStmtJournal=0
  40 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   12 0             00 usesStmtJournal=0
  16 String8          0    2    0 t6            00 r[2]='t6'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE TABLE t7a(t7b INTEGER PRIMARY KEY, t7ax);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t7a           00 r[7]='t7a'
  20 String8          0    8    0 t7a           00 r[8]='t7a'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t7a(t7b INTEGER PRIMARY KEY, t7ax) 00 r[10]='CREATE TABLE t7a(t7b INTEGER PRIMARY KEY, t7ax)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   13               00 
  26 ParseSchema      0    0    0 tbl_name='t7a' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   12 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   13 0             00 usesStmtJournal=0
  16 String8          0    2    0 t7a           00 r[2]='t7a'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE TABLE t8a(t8b);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t8a           00 r[7]='t8a'
  20 String8          0    8    0 t8a           00 r[8]='t8a'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t8a(t8b) 00 r[10]='CREATE TABLE t8a(t8b)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   14               00 
  26 ParseSchema      0    0    0 tbl_name='t8a' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   13 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   14 0             00 usesStmtJournal=0
  16 String8          0    2    0 t8a           00 r[2]='t8a'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO a(collate4i1) VALUES(1);]
VDBE Program Listing:
   0 Init             0    7    0               00 Start at 7
   1 OpenWrite        0    4    0 1             00 root=4 iDb=0; a
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          1    2    0               00 r[2]=1
   4 MakeRecord       2    1    3               00 r[3]=mkrec(r[2])
   5 Insert           0    3    1 a             39 intkey=r[1] data=r[3]
   6 Halt             0    0    0               00 
   7 Transaction      0    1   14 0             01 usesStmtJournal=0
   8 Goto             0    1    0               00 
SQL: [;CREATE TRIGGER i8c AFTER UPDATE ON t6 BEGIN
     UPDATE tr1 SET (z,z,z)=(SELECT new.t6ab,new.t6ab+1,new.t6ab+2);
  END;]
VDBE Program Listing:
   0 Init             0   13    0               00 Start at 13
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 String8          0    2    0 trigger       00 r[2]='trigger'
   4 String8          0    3    0 i8c           00 r[3]='i8c'
   5 String8          0    4    0 t6            00 r[4]='t6'
   6 Integer          0    5    0               00 r[5]=0
   7 String8          0    6    0 CREATE TRIGGER i8c AFTER UPDATE ON t6 BEGIN
     UPDATE tr1 SET (z,z,z)=(SELECT new.t6ab,new.t6ab+1,new.t6ab+2);
  END 00 r[6]='CREATE TRIGGER i8c AFTER UPDATE ON t6 BEGIN
     UPDATE tr1 SET (z,z,z)=(SELECT new.t6ab,new.
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
  10 SetCookie        0    1   15               00 
  11 ParseSchema      0    0    0 type='trigger' AND name='i8c' 00 
  12 Halt             0    0    0               00 
  13 Transaction      0    1   14 0             01 usesStmtJournal=0
  14 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    1    1               00 r[1]=sqlite_master.name
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   15 0             00 usesStmtJournal=0
  16 String8          0    2    0 trigger       00 r[2]='trigger'
  17 String8          0    3    0 i8c           00 r[3]='i8c'
  18 Goto             0    1    0               00 
SQL: [;UPDATE t3a SET t3b=7;]
VDBE Program Listing:
   0 Init             0   12    0               00 Start at 12
   1 Null             0    1    2               00 r[1..2]=NULL
   2 OpenWrite        0   11    0 1             00 root=11 iDb=0; t3a
   3 Explain          3    0    0 SCAN TABLE t3a 00 
   4 Rewind           0   11    0               00 
   5 Rowid            0    2    0               00 r[2]=rowid
   6 IsNull           2   11    0               00 if r[2]==NULL goto 11
   7 Integer          7    3    0               00 r[3]=7
   8 MakeRecord       3    1    4               00 r[4]=mkrec(r[3])
   9 Insert           0    4    2 t3a           07 intkey=r[2] data=r[4]
  10 Next             0    5    0               01 
  11 Halt             0    0    0               00 
  12 Transaction      0    1   15 0             01 usesStmtJournal=0
  13 Goto             0    1    0               00 
SQL: [;
;UPDATE t1 SET x=97;]
VDBE Program Listing:
   0 Init             0   49    0               00 Start at 49
   1 Null             0   15   16               00 r[15..16]=NULL
   2 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          3    0    0 SCAN TABLE t1 00 
   4 Rewind           0   48    0               00 
   5 Rowid            0   16    0               00 r[16]=rowid
   6 Once             0   10    0               00 
   7 OpenWrite        1   10    0 k(6,,,,,,)    00 root=10 iDb=0; t3
   8 OpenWrite        2    6    0 k(3,,,)       00 root=6 iDb=0; d
   9 OpenWrite        3    3    0 k(2,,)        00 root=3 iDb=0; collate4t1
  10 IsNull          16   48    0               00 if r[16]==NULL goto 48
  11 Integer         97   17    0               00 r[17]=97
  12 Affinity        17    1    0 C             00 affinity(r[17])
  13 Noop             0    0    0               00 uniqueness check for t3
  14 SCopy           17    2    0               00 r[2]=r[17]; x
  15 SCopy           17    3    0               00 r[3]=r[17]; x
  16 SCopy           17    4    0               00 r[4]=r[17]; x
  17 SCopy           17    5    0               00 r[5]=r[17]; x
  18 SCopy           17    6    0               00 r[6]=r[17]; x
  19 IntCopy         16    7    0               00 r[7]=r[16]; rowid
  20 MakeRecord       2    6    1               00 r[1]=mkrec(r[2..7]); for t3
  21 Noop             0    0    0               00 uniqueness check for d
  22 SCopy           17    9    0               00 r[9]=r[17]; x
  23 SCopy           17   10    0               00 r[10]=r[17]; x
  24 IntCopy         16   11    0               00 r[11]=r[16]; rowid
  25 MakeRecord       9    3    8               00 r[8]=mkrec(r[9..11]); for d
  26 Noop             0    0    0               00 uniqueness check for collate4t1
  27 SCopy           17   13    0               00 r[13]=r[17]; x
  28 IntCopy         16   14    0               00 r[14]=r[16]; rowid
  29 MakeRecord      13    2   12               00 r[12]=mkrec(r[13..14]); for collate4t1
  30 Column           0    0   18               00 r[18]=t1.x
  31 Column           0    0   19               00 r[19]=t1.x
  32 Column           0    0   20               00 r[20]=t1.x
  33 Column           0    0   21               00 r[21]=t1.x
  34 Column           0    0   22               00 r[22]=t1.x
  35 Rowid            0   23    0               00 r[23]=rowid
  36 IdxDelete        1   18    6               00 key=r[18..23]
  37 Rowid            0   20    0               00 r[20]=rowid
  38 IdxDelete        2   18    3               00 key=r[18..20]
  39 Column           0    0   21               00 r[21]=t1.x
  40 Rowid            0   22    0               00 r[22]=rowid
  41 IdxDelete        3   21    2               00 key=r[21..22]
  42 IdxInsert        1    1    2 6             00 key=r[1]
  43 IdxInsert        2    8    9 3             00 key=r[8]
  44 IdxInsert        3   12   13 2             00 key=r[12]
  45 MakeRecord      17    1   24               00 r[24]=mkrec(r[17])
  46 Insert           0   24   16 t1            07 intkey=r[16] data=r[24]
  47 Next             0    5    0               01 
  48 Halt             0    0    0               00 
  49 Transaction      0    1   15 0             01 usesStmtJournal=0
  50 Goto             0    1    0               00 
SQL: [;
;CREATE TABLE t9(t9ca, t10, e, t10x, t11);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t9            00 r[7]='t9'
  20 String8          0    8    0 t9            00 r[8]='t9'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t9(t9ca, t10, e, t10x, t11) 00 r[10]='CREATE TABLE t9(t9ca, t10, e, t10x, t11)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   16               00 
  26 ParseSchema      0    0    0 tbl_name='t9' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   15 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   16 0             00 usesStmtJournal=0
  16 String8          0    2    0 t9            00 r[2]='t9'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE TRIGGER t11x AFTER INSERT ON t3a BEGIN
    UPDATE t3a SET (t3b, t3b) = (SELECT 't3b', 't3b'), (t3b, t3b) = (SELECT 't3b', 't3b')
      WHERE t3b = new.t3b-1;
  END;]
VDBE Program Listing:
   0 Init             0   13    0               00 Start at 13
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 String8          0    2    0 trigger       00 r[2]='trigger'
   4 String8          0    3    0 t11x          00 r[3]='t11x'
   5 String8          0    4    0 t3a           00 r[4]='t3a'
   6 Integer          0    5    0               00 r[5]=0
   7 String8          0    6    0 CREATE TRIGGER t11x AFTER INSERT ON t3a BEGIN
    UPDATE t3a SET (t3b, t3b) = (SELECT 't3b', 't3b'), (t3b, t3b) = (SELECT 't3b', 't3b')
      WHERE t3b = new.t3b-1;
  END 00 r[6]='CREATE TRIGGER t11x AFTER INSERT ON t3a BEGIN
    UPDATE t3a SET (t3b, t3b) = (SELECT 't3b', 
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
  10 SetCookie        0    1   17               00 
  11 ParseSchema      0    0    0 type='trigger' AND name='t11x' 00 
  12 Halt             0    0    0               00 
  13 Transaction      0    1   16 0             01 usesStmtJournal=0
  14 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    1    1               00 r[1]=sqlite_master.name
   8 Ne               3   13    1 (BINARY)      52 if r[1]!=r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   17 0             00 usesStmtJournal=0
  16 String8          0    2    0 trigger       00 r[2]='trigger'
  17 String8          0    3    0 t11x          00 r[3]='t11x'
  18 Goto             0    1    0               00 
SQL: [;
;DROP TRIGGER t11x;]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    1    2               00 r[2]=sqlite_master.name
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
   7 Column           0    0    2               00 r[2]=sqlite_master.type
   8 Ne               4   12    2 (BINARY)      52 if r[2]!=r[4] goto 12
   9 Rowid            0    5    0               00 r[5]=rowid
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
  13 SetCookie        0    1   18               00 
  14 DropTrigger      0    0    0 t11x          00 
  15 Halt             0    0    0               00 
  16 Transaction      0    1   17 0             01 usesStmtJournal=0
  17 String8          0    3    0 t11x          00 r[3]='t11x'
  18 String8          0    4    0 trigger       00 r[4]='trigger'
  19 Goto             0    1    0               00 
SQL: [;PRAGMA recursive_triggers = 1;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;INSERT INTO t9 VALUES(3, 'i', 'ii', 'iii', 'iv');]
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 OpenWrite        0   15    0 5             00 root=15 iDb=0; t9
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          3    2    0               00 r[2]=3
   4 String8          0    3    0 i             00 r[3]='i'
   5 String8          0    4    0 ii            00 r[4]='ii'
   6 String8          0    5    0 iii           00 r[5]='iii'
   7 String8          0    6    0 iv            00 r[6]='iv'
   8 MakeRecord       2    5    7               00 r[7]=mkrec(r[2..6])
   9 Insert           0    7    1 t9            39 intkey=r[1] data=r[7]
  10 Halt             0    0    0               00 
  11 Transaction      0    1   18 0             01 usesStmtJournal=0
  12 Goto             0    1    0               00 
SQL: [;UPDATE tr1 SET z=z WHERE z=3;]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 Null             0    1    2               00 r[1..2]=NULL
   2 OpenWrite        0    8    0 3             00 root=8 iDb=0; tr1
   3 Explain          3    0    0 SCAN TABLE tr1 00 
   4 Rewind           0   15    0               00 
   5 Column           0    2    6               00 r[6]=tr1.z
   6 Ne               7   14    6 (BINARY)      51 if r[6]!=r[7] goto 14
   7 Rowid            0    2    0               00 r[2]=rowid
   8 IsNull           2   15    0               00 if r[2]==NULL goto 15
   9 Null             0    3    0               00 r[3]=NULL
  10 Column           0    1    4               00 r[4]=tr1.y
  11 Column           0    2    5               00 r[5]=tr1.z
  12 MakeRecord       3    3    6 D             00 r[6]=mkrec(r[3..5])
  13 Insert           0    6    2 tr1           07 intkey=r[2] data=r[6]
  14 Next             0    5    0               01 
  15 Halt             0    0    0               00 
  16 Transaction      0    1   18 0             01 usesStmtJournal=0
  17 Integer          3    7    0               00 r[7]=3
  18 Goto             0    1    0               00 
SQL: [;CREATE TABLE t11x(c0);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t11x          00 r[7]='t11x'
  20 String8          0    8    0 t11x          00 r[8]='t11x'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t11x(c0) 00 r[10]='CREATE TABLE t11x(c0)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   19               00 
  26 ParseSchema      0    0    0 tbl_name='t11x' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   18 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   19 0             00 usesStmtJournal=0
  16 String8          0    2    0 t11x          00 r[2]='t11x'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;CREATE TABLE index_0 ( sqlsim0, sqlsim1, PRIMARY KEY (sqlsim0, sqlsim1) );]
VDBE Program Listing:
   0 Init             0   39    0               00 Start at 39
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Noop             0   22    0               00 
  12 CreateBtree      0    4    2               00 r[4]=root iDb=0 flags=2
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 NewRowid         1    5    0               00 r[5]=rowid
  15 String8          0    6    0 index         00 r[6]='index'
  16 String8          0    7    0 sqlite_autoindex_index_0_1 00 r[7]='sqlite_autoindex_index_0_1'
  17 String8          0    8    0 index_0       00 r[8]='index_0'
  18 Copy             4    9    0               00 r[9]=r[4]
  19 Null             0   10    0               00 r[10]=NULL
  20 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  21 Insert           1   11    5               18 intkey=r[5] data=r[11]
  22 Close            0    0    0               00 
  23 Null             0   12   13               00 r[12..13]=NULL
  24 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  25 Explain         25    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  26 SeekRowid        2   28    1               00 intkey=r[1]
  27 Rowid            2   13    0               00 r[13]=rowid
  28 IsNull          13   36    0               00 if r[13]==NULL goto 36
  29 String8          0   14    0 table         00 r[14]='table'
  30 String8          0   15    0 index_0       00 r[15]='index_0'
  31 String8          0   16    0 index_0       00 r[16]='index_0'
  32 Copy             2   17    0               00 r[17]=r[2]
  33 String8          0   18    0 CREATE TABLE index_0 ( sqlsim0, sqlsim1, PRIMARY KEY (sqlsim0, sqlsim1) ) 00 r[18]='CREATE TABLE index_0 ( sqlsim0, sqlsim1, PRIMARY KEY (sqlsim0, sqlsim1) )'
  34 MakeRecord      14    5   19 BBBDB         00 r[19]=mkrec(r[14..18])
  35 Insert           2   19   13               00 intkey=r[13] data=r[19]
  36 SetCookie        0    1   20               00 
  37 ParseSchema      0    0    0 tbl_name='index_0' AND type!='trigger' 00 
  38 Halt             0    0    0               00 
  39 Transaction      0    1   19 0             01 usesStmtJournal=0
  40 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   20 0             00 usesStmtJournal=0
  16 String8          0    2    0 index_0       00 r[2]='index_0'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;CREATE TABLE sqlsim2 ( sqlsim3 );]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 sqlsim2       00 r[7]='sqlsim2'
  20 String8          0    8    0 sqlsim2       00 r[8]='sqlsim2'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE sqlsim2 ( sqlsim3 ) 00 r[10]='CREATE TABLE sqlsim2 ( sqlsim3 )'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   21               00 
  26 ParseSchema      0    0    0 tbl_name='sqlsim2' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   20 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   21 0             00 usesStmtJournal=0
  16 String8          0    2    0 sqlsim2       00 r[2]='sqlsim2'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO xyz VALUES (1, 1), (1, 2);]
VDBE Program Listing:
   0 Init             0   17    0               00 Start at 17
   1 InitCoroutine    4   10    2               00 
   2 Explain          2    0    0 SCAN 2 CONSTANT ROWS 00 
   3 Integer          1    2    0               00 r[2]=1
   4 Integer          1    3    0               00 r[3]=1
   5 Yield            4    0    0               00 
   6 Integer          1    2    0               00 r[2]=1
   7 Integer          2    3    0               00 r[3]=2
   8 Yield            4    0    0               00 
   9 EndCoroutine     4    0    0               00 
  10 OpenWrite        0    5    0 2             00 root=5 iDb=0; xyz
  11 Yield            4   16    0               00 
  12 NewRowid         0    1    0               00 r[1]=rowid
  13 MakeRecord       2    2    5               00 r[5]=mkrec(r[2..3])
  14 Insert           0    5    1 xyz           39 intkey=r[1] data=r[5]
  15 Goto             0   11    0               00 
  16 Halt             0    0    0               00 
  17 Transaction      0    1   21 0             01 usesStmtJournal=0
  18 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM a WHERE (a.collate4i1, a.collate4i1) IN ( SELECT collate4i1, collate4i1 FROM a );]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   2 Explain          2    0    0 SCAN TABLE a  00 
   3 Rewind           0   27    0               00 
   4 Noop             0    0    0               00 begin IN expr
   5 Integer         17    1    0               00 r[1]=17; return address
   6 Once             0   17    0               00 
   7 OpenEphemeral    2    2    0 k(2,B,B)      00 nColumn=2; Result of SELECT 1
   8 Explain          8    0    0 LIST SUBQUERY 1 00 
   9 OpenRead         1    4    0 1             00 root=4 iDb=0; a
  10 Explain         10    8    0 SCAN TABLE a  00 
  11 Rewind           1   17    0               00 
  12 Column           1    0    2               00 r[2]=a.collate4i1
  13 Column           1    0    3               00 r[3]=a.collate4i1
  14 MakeRecord       2    2    4 AA            00 r[4]=mkrec(r[2..3])
  15 IdxInsert        2    4    2 2             00 key=r[4]
  16 Next             1   12    0               01 
  17 Return           1    0    0               00 
  18 Column           0    0    5               00 r[5]=a.collate4i1
  19 Column           0    0    6               00 r[6]=a.collate4i1
  20 IsNull           5   26    0               00 if r[5]==NULL goto 26
  21 IsNull           6   26    0               00 if r[6]==NULL goto 26
  22 Affinity         5    2    0 AA            00 affinity(r[5..6])
  23 NotFound         2   26    5 2             00 key=r[5..6]; end IN expr
  24 Column           0    0    7               00 r[7]=a.collate4i1
  25 ResultRow        7    1    0               00 output=r[7]
  26 Next             0    4    0               01 
  27 Halt             0    0    0               00 
  28 Transaction      0    0   21 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
SQL: [;CREATE TABLE sqlsim4(sqlsim5 INTEGER PRIMARY KEY,sqlsim6);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 sqlsim4       00 r[7]='sqlsim4'
  20 String8          0    8    0 sqlsim4       00 r[8]='sqlsim4'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE sqlsim4(sqlsim5 INTEGER PRIMARY KEY,sqlsim6) 00 r[10]='CREATE TABLE sqlsim4(sqlsim5 INTEGER PRIMARY KEY,sqlsim6)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   22               00 
  26 ParseSchema      0    0    0 tbl_name='sqlsim4' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1   21 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   22 0             00 usesStmtJournal=0
  16 String8          0    2    0 sqlsim4       00 r[2]='sqlsim4'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO tr1(z,y) VALUES(1,11),(2,22),(3,33),(4,44);]
VDBE Program Listing:
   0 Init             0   26    0               00 Start at 26
   1 InitCoroutine    5   16    2               00 
   2 Explain          2    0    0 SCAN 4 CONSTANT ROWS 00 
   3 Integer          1    6    0               00 r[6]=1
   4 Integer         11    7    0               00 r[7]=11
   5 Yield            5    0    0               00 
   6 Integer          2    6    0               00 r[6]=2
   7 Integer         22    7    0               00 r[7]=22
   8 Yield            5    0    0               00 
   9 Integer          3    6    0               00 r[6]=3
  10 Integer         33    7    0               00 r[7]=33
  11 Yield            5    0    0               00 
  12 Integer          4    6    0               00 r[6]=4
  13 Integer         44    7    0               00 r[7]=44
  14 Yield            5    0    0               00 
  15 EndCoroutine     5    0    0               00 
  16 OpenWrite        0    8    0 3             00 root=8 iDb=0; tr1
  17 Yield            5   25    0               00 
  18 NewRowid         0    1    0               00 r[1]=rowid
  19 SoftNull         2    0    0               00 r[2]=NULL
  20 SCopy            7    3    0               00 r[3]=r[7]
  21 SCopy            6    4    0               00 r[4]=r[6]
  22 MakeRecord       2    3   10 D             00 r[10]=mkrec(r[2..4])
  23 Insert           0   10    1 tr1           39 intkey=r[1] data=r[10]
  24 Goto             0   17    0               00 
  25 Halt             0    0    0               00 
  26 Transaction      0    1   22 0             01 usesStmtJournal=0
  27 Goto             0    1    0               00 
SQL: [;SELECT * FROM t7a WHERE (t7b,t7b)>(0,0) ORDER BY t7b;]
VDBE Program Listing:
   0 Init             0   17    0               00 Start at 17
   1 Noop             1    4    0               00 
   2 OpenRead         0   13    0 2             00 root=13 iDb=0; t7a
   3 Explain          3    0    0 SEARCH TABLE t7a USING INTEGER PRIMARY KEY (rowid>?) 00 
   4 Integer          0    1    0               00 r[1]=0
   5 SeekGE           0   16    1               00 key=r[1]; pk
   6 Rowid            0    2    0               00 r[2]=rowid
   7 Gt               3    1    2               64 r[1] = (r[2]>r[3])
   8 ElseNotEq        0   11    0               00 
   9 Rowid            0    2    0               00 r[2]=rowid
  10 Gt               3    1    2               64 r[1] = (r[2]>r[3])
  11 IfNot            1   15    1               00 
  12 Rowid            0    4    0               00 r[4]=rowid
  13 Column           0    1    5               00 r[5]=t7a.t7ax
  14 ResultRow        4    2    0               00 output=r[4..5]
  15 Next             0    6    0               00 
  16 Halt             0    0    0               00 
  17 Transaction      0    0   22 0             01 usesStmtJournal=0
  18 Integer          0    3    0               00 r[3]=0
  19 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM xyz WHERE (c,b)<(5,0) ORDER BY c DESC;]
VDBE Program Listing:
   0 Init             0   25    0               00 Start at 25
   1 SorterOpen       1    4    0 k(1,-B)       00 
   2 OpenRead         0    5    0 2             00 root=5 iDb=0; xyz
   3 Explain          3    0    0 SCAN TABLE xyz 00 
   4 Rewind           0   16    0               00 
   5 Column           0    1    2               00 r[2]=xyz.c
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=xyz.b
   9 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
  10 IfNot            1   15    1               00 
  11 Column           0    0    6               00 r[6]=xyz.b
  12 Column           0    1    5               00 r[5]=xyz.c
  13 MakeRecord       5    2    8               00 r[8]=mkrec(r[5..6])
  14 SorterInsert     1    8    5 2             00 key=r[8]
  15 Next             0    5    0               01 
  16 Explain         16    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  17 OpenPseudo       2    9    4               00 4 columns in r[9]
  18 SorterSort       1   24    0               00 
  19 SorterData       1    9    2               00 r[9]=data
  20 Column           2    0    7               00 r[7]=c
  21 Column           2    1    6               00 r[6]=b
  22 ResultRow        6    2    0               00 output=r[6..7]
  23 SorterNext       1   19    0               00 
  24 Halt             0    0    0               00 
  25 Transaction      0    0   22 0             01 usesStmtJournal=0
  26 Integer          5    3    0               00 r[3]=5
  27 Integer          0    4    0               00 r[4]=0
  28 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM a WHERE (collate4i1,collate4i1)>(3,0) ORDER BY collate4i1;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,B)        00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=a.collate4i1
   9 Gt               4    1    2 (BINARY)      61 r[1] = (r[2]>r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=a.collate4i1
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=collate4i1
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   22 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer          0    4    0               00 r[4]=0
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM tr1 WHERE (z,z)<(3,0) ORDER BY z DESC;]
VDBE Program Listing:
   0 Init             0   27    0               00 Start at 27
   1 SorterOpen       1    5    0 k(1,-B)       00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; tr1
   3 Explain          3    0    0 SCAN TABLE tr1 00 
   4 Rewind           0   17    0               00 
   5 Column           0    2    2               00 r[2]=tr1.z
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    2    2               00 r[2]=tr1.z
   9 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
  10 IfNot            1   16    1               00 
  11 Rowid            0    6    0               00 r[6]=rowid
  12 Column           0    1    7               00 r[7]=tr1.y
  13 Column           0    2    5               00 r[5]=tr1.z
  14 MakeRecord       5    3    9               00 r[9]=mkrec(r[5..7])
  15 SorterInsert     1    9    5 3             00 key=r[9]
  16 Next             0    5    0               01 
  17 Explain         17    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  18 OpenPseudo       2   10    5               00 5 columns in r[10]
  19 SorterSort       1   26    0               00 
  20 SorterData       1   10    2               00 r[10]=data
  21 Column           2    0    8               00 r[8]=z
  22 Column           2    2    7               00 r[7]=y
  23 Column           2    1    6               00 r[6]=tr2
  24 ResultRow        6    3    0               00 output=r[6..8]
  25 SorterNext       1   20    0               00 
  26 Halt             0    0    0               00 
  27 Transaction      0    0   22 0             01 usesStmtJournal=0
  28 Integer          3    3    0               00 r[3]=3
  29 Integer          0    4    0               00 r[4]=0
  30 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t3a WHERE (t3b,t3b)<=(3,0) ORDER BY t3b DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0   11    0 1             00 root=11 iDb=0; t3a
   3 Explain          3    0    0 SCAN TABLE t3a 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t3a.t3b
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t3a.t3b
   9 Le               4    1    2 (BINARY)      61 r[1] = (r[2]<=r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=t3a.t3b
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=t3b
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   22 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer          0    4    0               00 r[4]=0
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM tr1 WHERE (z,z)>(3,33) ORDER BY z;]
VDBE Program Listing:
   0 Init             0   27    0               00 Start at 27
   1 SorterOpen       1    5    0 k(1,B)        00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; tr1
   3 Explain          3    0    0 SCAN TABLE tr1 00 
   4 Rewind           0   17    0               00 
   5 Column           0    2    2               00 r[2]=tr1.z
   6 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    2    2               00 r[2]=tr1.z
   9 Gt               4    1    2 (BINARY)      61 r[1] = (r[2]>r[4])
  10 IfNot            1   16    1               00 
  11 Rowid            0    6    0               00 r[6]=rowid
  12 Column           0    1    7               00 r[7]=tr1.y
  13 Column           0    2    5               00 r[5]=tr1.z
  14 MakeRecord       5    3    9               00 r[9]=mkrec(r[5..7])
  15 SorterInsert     1    9    5 3             00 key=r[9]
  16 Next             0    5    0               01 
  17 Explain         17    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  18 OpenPseudo       2   10    5               00 5 columns in r[10]
  19 SorterSort       1   26    0               00 
  20 SorterData       1   10    2               00 r[10]=data
  21 Column           2    0    8               00 r[8]=z
  22 Column           2    2    7               00 r[7]=y
  23 Column           2    1    6               00 r[6]=tr2
  24 ResultRow        6    3    0               00 output=r[6..8]
  25 SorterNext       1   20    0               00 
  26 Halt             0    0    0               00 
  27 Transaction      0    0   22 0             01 usesStmtJournal=0
  28 Integer          3    3    0               00 r[3]=3
  29 Integer         33    4    0               00 r[4]=33
  30 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM a WHERE (collate4i1,collate4i1)<(3,33) ORDER BY collate4i1 DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=a.collate4i1
   9 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=a.collate4i1
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=collate4i1
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   22 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer         33    4    0               00 r[4]=33
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t6 WHERE (t6ab,t6ab)<=(3,33) ORDER BY t6ab DESC;]
VDBE Program Listing:
   0 Init             0   22    0               00 Start at 22
   1 Noop             1    4    0               00 
   2 OpenRead         0    9    0 2             00 root=9 iDb=0; t6
   3 OpenRead         2   12    0 k(2,,)        00 root=12 iDb=0; sqlite_autoindex_t6_1
   4 Explain          4    0    0 SEARCH TABLE t6 USING INDEX sqlite_autoindex_t6_1 (t6ab<?) 00 
   5 Integer          3    1    0               00 r[1]=3
   6 IsNull           1   21    0               00 if r[1]==NULL goto 21
   7 SeekLE           2   21    1 1             00 key=r[1]
   8 Null             0    1    0               00 r[1]=NULL
   9 IdxLE            2   21    1 1             00 key=r[1]
  10 DeferredSeek     2    0    0               00 Move 0 to 2.rowid if needed
  11 Column           2    0    3               00 r[3]=t6.t6ab
  12 Lt               4    2    3 (BINARY)      61 r[2] = (r[3]<r[4])
  13 ElseNotEq        0   16    0               00 
  14 Column           2    0    3               00 r[3]=t6.t6ab
  15 Le               5    2    3 (BINARY)      61 r[2] = (r[3]<=r[5])
  16 IfNot            2   20    1               00 
  17 Column           2    0    6               00 r[6]=t6.t6ab
  18 Column           0    1    7               00 r[7]=t6.t6b
  19 ResultRow        6    2    0               00 output=r[6..7]
  20 Prev             2    9    0               00 
  21 Halt             0    0    0               00 
  22 Transaction      0    0   22 0             01 usesStmtJournal=0
  23 Integer          3    4    0               00 r[4]=3
  24 Integer         33    5    0               00 r[5]=33
  25 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM tr1 WHERE (z,z)<=(3,32) ORDER BY z DESC;]
VDBE Program Listing:
   0 Init             0   27    0               00 Start at 27
   1 SorterOpen       1    5    0 k(1,-B)       00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; tr1
   3 Explain          3    0    0 SCAN TABLE tr1 00 
   4 Rewind           0   17    0               00 
   5 Column           0    2    2               00 r[2]=tr1.z
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    2    2               00 r[2]=tr1.z
   9 Le               4    1    2 (BINARY)      61 r[1] = (r[2]<=r[4])
  10 IfNot            1   16    1               00 
  11 Rowid            0    6    0               00 r[6]=rowid
  12 Column           0    1    7               00 r[7]=tr1.y
  13 Column           0    2    5               00 r[5]=tr1.z
  14 MakeRecord       5    3    9               00 r[9]=mkrec(r[5..7])
  15 SorterInsert     1    9    5 3             00 key=r[9]
  16 Next             0    5    0               01 
  17 Explain         17    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  18 OpenPseudo       2   10    5               00 5 columns in r[10]
  19 SorterSort       1   26    0               00 
  20 SorterData       1   10    2               00 r[10]=data
  21 Column           2    0    8               00 r[8]=z
  22 Column           2    2    7               00 r[7]=y
  23 Column           2    1    6               00 r[6]=tr2
  24 ResultRow        6    3    0               00 output=r[6..8]
  25 SorterNext       1   20    0               00 
  26 Halt             0    0    0               00 
  27 Transaction      0    0   22 0             01 usesStmtJournal=0
  28 Integer          3    3    0               00 r[3]=3
  29 Integer         32    4    0               00 r[4]=32
  30 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM t3a WHERE (0,0)<=(t3b,t3b) ORDER BY t3b;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,B)        00 
   2 OpenRead         0   11    0 1             00 root=11 iDb=0; t3a
   3 Explain          3    0    0 SCAN TABLE t3a 00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=t3a.t3b
   6 Gt               3    1    2 (BINARY)      61 r[1] = (r[2]>r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=t3a.t3b
   9 Ge               3    1    2 (BINARY)      61 r[1] = (r[2]>=r[3])
  10 IfNot            1   14    1               00 
  11 Column           0    0    4               00 r[4]=t3a.t3b
  12 MakeRecord       4    1    6               00 r[6]=mkrec(r[4])
  13 SorterInsert     1    6    4 1             00 key=r[6]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    7    3               00 3 columns in r[7]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    7    2               00 r[7]=data
  19 Column           2    0    5               00 r[5]=t3b
  20 ResultRow        5    1    0               00 output=r[5]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   22 0             01 usesStmtJournal=0
  24 Integer          0    3    0               00 r[3]=0
  25 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM a WHERE (5,0)>(collate4i1,collate4i1) ORDER BY collate4i1 DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=a.collate4i1
   9 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=a.collate4i1
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=collate4i1
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   22 0             01 usesStmtJournal=0
  24 Integer          5    3    0               00 r[3]=5
  25 Integer          0    4    0               00 r[4]=0
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM a WHERE (3,0)>(collate4i1,collate4i1) ORDER BY collate4i1 DESC;]
VDBE Program Listing:
   0 Init             0   23    0               00 Start at 23
   1 SorterOpen       1    3    0 k(1,-B)       00 
   2 OpenRead         0    4    0 1             00 root=4 iDb=0; a
   3 Explain          3    0    0 SCAN TABLE a  00 
   4 Rewind           0   15    0               00 
   5 Column           0    0    2               00 r[2]=a.collate4i1
   6 Lt               3    1    2 (BINARY)      61 r[1] = (r[2]<r[3])
   7 ElseNotEq        0   10    0               00 
   8 Column           0    0    2               00 r[2]=a.collate4i1
   9 Lt               4    1    2 (BINARY)      61 r[1] = (r[2]<r[4])
  10 IfNot            1   14    1               00 
  11 Column           0    0    5               00 r[5]=a.collate4i1
  12 MakeRecord       5    1    7               00 r[7]=mkrec(r[5])
  13 SorterInsert     1    7    5 1             00 key=r[7]
  14 Next             0    5    0               01 
  15 Explain         15    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  16 OpenPseudo       2    8    3               00 3 columns in r[8]
  17 SorterSort       1   22    0               00 
  18 SorterData       1    8    2               00 r[8]=data
  19 Column           2    0    6               00 r[6]=collate4i1
  20 ResultRow        6    1    0               00 output=r[6]
  21 SorterNext       1   18    0               00 
  22 Halt             0    0    0               00 
  23 Transaction      0    0   22 0             01 usesStmtJournal=0
  24 Integer          3    3    0               00 r[3]=3
  25 Integer          0    4    0               00 r[4]=0
  26 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM tr1 WHERE (3,0)>=(tr2,tr2) ORDER BY tr2 DESC;]
VDBE Program Listing:
   0 Init             0   18    0               00 Start at 18
   1 Noop             1    5    0               00 
   2 OpenRead         0    8    0 3             00 root=8 iDb=0; tr1
   3 Explain          3    0    0 SEARCH TABLE tr1 USING INTEGER PRIMARY KEY (rowid<?) 00 
   4 Integer          3    1    0               00 r[1]=3
   5 SeekLE           0   17    1               00 key=r[1]; pk
   6 Rowid            0    2    0               00 r[2]=rowid
   7 Lt               3    1    2               64 r[1] = (r[2]<r[3])
   8 ElseNotEq        0   11    0               00 
   9 Rowid            0    2    0               00 r[2]=rowid
  10 Le               4    1    2               64 r[1] = (r[2]<=r[4])
  11 IfNot            1   16    1               00 
  12 Rowid            0    5    0               00 r[5]=rowid
  13 Column           0    1    6               00 r[6]=tr1.y
  14 Column           0    2    7               00 r[7]=tr1.z
  15 ResultRow        5    3    0               00 output=r[5..7]
  16 Prev             0    6    0               00 
  17 Halt             0    0    0               00 
  18 Transaction      0    0   22 0             01 usesStmtJournal=0
  19 Integer          3    3    0               00 r[3]=3
  20 Integer          0    4    0               00 r[4]=0
  21 Goto             0    1    0               00 
SQL: [;
;SELECT 1 WHERE (2,(2,0)) IS (2,(2,0));]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               1    7    1               C1 if r[1]!=r[1] goto 7
   3 Ne               1    7    1               C1 if r[1]!=r[1] goto 7
   4 Ne               2    7    2               C1 if r[2]!=r[2] goto 7
   5 Integer          1    3    0               00 r[3]=1
   6 ResultRow        3    1    0               00 output=r[3]
   7 Halt             0    0    0               00 
   8 Integer          2    1    0               00 r[1]=2
   9 Integer          0    2    0               00 r[2]=0
  10 Goto             0    1    0               00 
SQL: [;
;DROP TABLE IF EXISTS t8a;]
VDBE Program Listing:
   0 Init             0   38    0               00 Start at 38
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
   7 Column           0    0    2               00 r[2]=sqlite_master.type
   8 Eq               4   12    2 (BINARY)      52 if r[2]==r[4] goto 12
   9 Rowid            0    5    0               00 r[5]=rowid
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
  13 Destroy         14    2    0               00 
  14 Null             0    6    7               00 r[6..7]=NULL
  15 IfNot            2   24    1               00 
  16 OpenRead         1    1    0 4             00 root=1 iDb=0; sqlite_master
  17 Explain         17    0    0 SCAN TABLE sqlite_master 00 
  18 Rewind           1   24    0               00 
  19 Column           1    3   13               00 r[13]=sqlite_master.rootpage
  20 Ne               2   23   13 (BINARY)      54 if r[13]!=r[2] goto 23
  21 Rowid            1    7    0               00 r[7]=rowid
  22 RowSetAdd        6    7    0               00 rowset(6)=r[7]
  23 Next             1   19    0               01 
  24 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  25 RowSetRead       6   35    7               00 r[7]=rowset(6)
  26 NotExists        1   25    7               00 intkey=r[7]
  27 Column           1    0    8               00 r[8]=sqlite_master.type
  28 Column           1    1    9               00 r[9]=sqlite_master.name
  29 Column           1    2   10               00 r[10]=sqlite_master.tbl_name
  30 Integer         14   11    0               00 r[11]=14
  31 Column           1    4   12               00 r[12]=sqlite_master.sql
  32 MakeRecord       8    5   13 BBBDB         00 r[13]=mkrec(r[8..12])
  33 Insert           1   13    7               00 intkey=r[7] data=r[13]
  34 Goto             0   25    0               00 
  35 DropTable        0    0    0 t8a           00 
  36 SetCookie        0    1   23               00 
  37 Halt             0    0    0               00 
  38 Transaction      0    1   22 0             01 usesStmtJournal=1
  39 String8          0    3    0 t8a           00 r[3]='t8a'
  40 String8          0    4    0 trigger       00 r[4]='trigger'
  41 Goto             0    1    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fd1335c8859 in __GI_abort () at abort.c:79
#2  0x00007fd1335c8729 in __assert_fail_base (fmt=0x7fd13375e588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=<optimized out>) at assert.c:92
#3  0x00007fd1335d9fd6 in __GI___assert_fail (assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=0x213784 "int generateOutputSubroutine(Parse *, Select *, SelectDest *, SelectDest *, int, int, KeyInfo *, int)") at assert.c:101
#4  0x00000000003b5d8b in generateOutputSubroutine (pParse=0x7ffffdd43190, p=0x24d7a00, pIn=0x7ffffdd41810, pDest=0x7ffffdd41d68, regReturn=15, regPrev=9, pKeyInfo=0x24cfb70, iBreak=-7) at sqlite3.c:127594
#5  0x00000000003b4e37 in multiSelectOrderBy (pParse=0x7ffffdd43190, p=0x24d7a00, pDest=0x7ffffdd41d68) at sqlite3.c:127921
#6  0x00000000003a3d1c in multiSelect (pParse=0x7ffffdd43190, p=0x24d7a00, pDest=0x7ffffdd41d68) at sqlite3.c:127207
#7  0x00000000002fccf5 in sqlite3Select (pParse=0x7ffffdd43190, p=0x24d7a00, pDest=0x7ffffdd41d68) at sqlite3.c:130384
#8  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffffdd43190, pExpr=0x24e1000) at sqlite3.c:99820
#9  0x0000000000350b1c in exprCodeVector (pParse=0x7ffffdd43190, p=0x24e1000, piFreeable=0x7ffffdd41e2c) at sqlite3.c:100296
#10 0x000000000034fbdb in sqlite3ExprCodeIN (pParse=0x7ffffdd43190, pExpr=0x24da430, destIfFalse=-3, destIfNull=-4) at sqlite3.c:99952
#11 0x000000000034be9e in sqlite3ExprCodeTarget (pParse=0x7ffffdd43190, pExpr=0x24da430, target=1) at sqlite3.c:100792
#12 0x000000000034e9ee in sqlite3ExprCodeExprList (pParse=0x7ffffdd43190, pList=0x24d8cc0, target=1, srcReg=0, flags=1 '\001') at sqlite3.c:101202
#13 0x00000000003addca in innerLoopLoadRow (pParse=0x7ffffdd43190, pSelect=0x24ddc70, pInfo=0x7ffffdd421d0) at sqlite3.c:125172
#14 0x00000000003a92ea in selectInnerLoop (pParse=0x7ffffdd43190, p=0x24ddc70, srcTab=-1, pSort=0x0, pDistinct=0x7ffffdd42470, pDest=0x7ffffdd42580, iContinue=-2, iBreak=-2) at sqlite3.c:125624
#15 0x00000000002fe191 in sqlite3Select (pParse=0x7ffffdd43190, p=0x24ddc70, pDest=0x7ffffdd42580) at sqlite3.c:130743
#16 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffffdd427b0, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffffdd43190) at sqlite3.c:151581
#17 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffffdd427b0, yymajor=1, yyminor=...) at sqlite3.c:152877
#18 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffffdd43190, 
    zSql=0x24d4b62 ";;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 5,6);;\n;DROP TABLE IF EXISTS t0;;CREATE TABLE sqlsim7(t1i1 COLLA"..., pzErrMsg=0x7ffffdd43370) at sqlite3.c:154013
#19 0x00000000002a1683 in sqlite3Prepare (db=0x24bb2b0, 
    zSql=0x24c311f ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELEC"..., nBytes=758, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffffdd434a8, pzTail=0x7ffffdd43490) at sqlite3.c:124303
#20 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x24bb2b0, 
    zSql=0x24c311f ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELEC"..., nBytes=758, prepFlags=128, pOld=0x0, ppStmt=0x7ffffdd434a8, pzTail=0x7ffffdd43490) at sqlite3.c:124403
#21 0x000000000029247f in sqlite3_prepare_v2 (db=0x24bb2b0, 
    zSql=0x24c311f ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1 DESC) IN (SELEC"..., nBytes=758, ppStmt=0x7ffffdd434a8, pzTail=0x7ffffdd43490) at sqlite3.c:124487
#22 0x0000000000256bd0 in main (argc=1, argv=0x7ffffdd43658) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 58947] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
