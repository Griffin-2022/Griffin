GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000537,sig:11,src:022394+021112,time:17599036,execs:5155924,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;ROLLBACK;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT collate4i1, sum(collate4i1) OVER (
    ORDER BY collate4i1 
    ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING
  ) FROM t1

;]
VDBE Program Listing:
   0 Init             0   89    0               00 Start at 89
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    2    0 4             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    3    5               00 r[5]=t1.collate4i1
  13 Column           0    3    6               00 r[6]=t1.collate4i1
  14 Column           0    3    4               00 r[4]=t1.collate4i1
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
  16 SorterInsert     6    8    4 3             00 key=r[8]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    0    7               00 r[7]=
  23 Column           7    2    6               00 r[6]=
  24 Column           7    1    5               00 r[5]=
  25 Yield            3    0    0               00 
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
  28 Integer          1   10    0               00 r[10]=1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   73    0               00 next row of subquery_2
  32 Copy             5   12    0               00 r[12]=r[5]
  33 Copy             6   13    0               00 r[13]=r[6]
  34 Copy             7   14    0               00 r[14]=r[7]
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  36 NewRowid         2   16    0               00 r[16]=rowid
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
  38 Ne              10   60   16               00 if r[16]!=r[10] goto 60
  39 Null             0    1    0               00 r[1]=NULL
  40 Integer          3   17    0               00 r[17]=3
  41 Integer          0   20    0               00 r[20]=0
  42 MustBeInt       17   44    0               00 
  43 Ge              20   45   17               00 if r[17]>=r[20] goto 45
  44 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  45 Integer          1   18    0               00 r[18]=1
  46 Integer          0   20    0               00 r[20]=0
  47 MustBeInt       18   49    0               00 
  48 Ge              20   50   18               00 if r[18]>=r[20] goto 50
  49 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  50 Le              17   56   18               00 if r[18]<=r[17] goto 56
  51 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  52 Rewind           1    1    0               00 
  53 Gosub           11   83    0               00 
  54 ResetSorter      1    0    0               00 
  55 Goto             0   72    0               00 
  56 Rewind           3    1    0               00 
  57 Rewind           1    1    0               00 
  58 Rewind           4    1    0               00 
  59 Goto             0   72    0               00 
  60 IfPos           18   64    1               00 if r[18]>0 then r[18]-=1, goto 64
  61 Column           4    2   19               00 r[19]=
  62 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  63 Next             4   64    0               00 
  64 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  65 Gosub           11   83    0               00 
  66 Next             1   67    0               00 
  67 IfPos           17   72    1               00 if r[17]>0 then r[17]-=1, goto 72
  68 Column           3    2   19               00 r[19]=
  69 AggInverse       1   19    1 sum(1)        01 accum=r[1] inverse(r[19])
  70 Delete           3    0    0               02 
  71 Next             3   72    0               00 
  72 Goto             0   31    0               00 
  73 Rewind           2   81    0               00 
  74 IfPos           18   78    1               00 if r[18]>0 then r[18]-=1, goto 78
  75 Column           4    2   19               00 r[19]=
  76 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  77 Next             4   78    0               00 
  78 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  79 Gosub           11   83    0               00 
  80 Next             1   81    0               00 
  81 ResetSorter      1    0    0               00 
  82 Goto             0   88    0               00 
  83 Noop             0    0    0               00 inner-loop subroutine
  84 Column           1    0   21               00 r[21]=
  85 Copy             2   22    0               00 r[22]=r[2]
  86 ResultRow       21    2    0               00 output=r[21..22]
  87 Return          11    0    0               00 end inner-loop subroutine
  88 Halt             0    0    0               00 
  89 Transaction      0    0    1 0             01 usesStmtJournal=0
  90 Goto             0    1    0               00 
SQL: [SELECT a, sum(collate4t1) OVER (
    PARTITION BY a
    ORDER BY collate4t1 
    ROWS BETWEEN 1 PRECEDING AND 0 PRECEDING
  ) FROM t1

;]
VDBE Program Listing:
   0 Init             0   99    0               00 Start at 99
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   30    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    7    0 k(2,B,B)      00 
   9 OpenRead         0    2    0 3             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   19    0               00 
  12 Column           0    2    6               00 r[6]=t1.a
  13 Column           0    1    7               00 r[7]=t1.collate4t1
  14 Column           0    2    4               00 r[4]=t1.a
  15 Column           0    1    5               00 r[5]=t1.collate4t1
  16 MakeRecord       4    4   10               00 r[10]=mkrec(r[4..7])
  17 SorterInsert     6   10    4 4             00 key=r[10]
  18 Next             0   12    0               01 
  19 Explain         19    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  20 OpenPseudo       7   11    7               00 7 columns in r[11]
  21 SorterSort       6   29    0               00 
  22 SorterData       6   11    7               00 r[11]=data
  23 Column           7    1    9               00 r[9]=
  24 Column           7    3    8               00 r[8]=
  25 Column           7    0    7               00 r[7]=
  26 Column           7    2    6               00 r[6]=
  27 Yield            3    0    0               00 
  28 SorterNext       6   22    0               00 
  29 EndCoroutine     3    0    0               00 
  30 Null             0   12   12               00 r[12..12]=NULL
  31 Integer          1   13    0               00 r[13]=1
  32 Explain         32    0    0 SCAN SUBQUERY 2 00 
  33 InitCoroutine    3    0    7               00 
  34 Yield            3   81    0               00 next row of subquery_2
  35 Copy             6   15    0               00 r[15]=r[6]
  36 Copy             7   16    0               00 r[16]=r[7]
  37 Copy             8   17    0               00 r[17]=r[8]
  38 Copy             9   18    0               00 r[18]=r[9]
  39 MakeRecord      15    4   19               00 r[19]=mkrec(r[15..18])
  40 Compare         16   12    1 k(1,B)        00 r[16] <-> r[12]
  41 Jump            42   44   42               00 
  42 Gosub           23   82    0               00 call flush_partition
  43 Copy            16   12    0               00 r[12]=r[16]
  44 NewRowid         2   20    0               00 r[20]=rowid
  45 Insert           2   19   20               00 intkey=r[20] data=r[19]
  46 Ne              13   68   20               00 if r[20]!=r[13] goto 68
  47 Null             0    1    0               00 r[1]=NULL
  48 Integer          1   21    0               00 r[21]=1
  49 Integer          0   25    0               00 r[25]=0
  50 MustBeInt       21   52    0               00 
  51 Ge              25   53   21               00 if r[21]>=r[25] goto 53
  52 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  53 Integer          0   22    0               00 r[22]=0
  54 Integer          0   25    0               00 r[25]=0
  55 MustBeInt       22   57    0               00 
  56 Ge              25   58   22               00 if r[22]>=r[25] goto 58
  57 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  58 Le              21   64   22               00 if r[22]<=r[21] goto 64
  59 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  60 Rewind           1    1    0               00 
  61 Gosub           14   93    0               00 
  62 ResetSorter      1    0    0               00 
  63 Goto             0   80    0               00 
  64 Rewind           3    1    0               00 
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Goto             0   80    0               00 
  68 IfPos           22   72    1               00 if r[22]>0 then r[22]-=1, goto 72
  69 Column           4    3   24               00 r[24]=
  70 AggStep          0   24    1 sum(1)        01 accum=r[1] step(r[24])
  71 Next             4   72    0               00 
  72 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  73 Gosub           14   93    0               00 
  74 Next             1   75    0               00 
  75 IfPos           21   80    1               00 if r[21]>0 then r[21]-=1, goto 80
  76 Column           3    3   24               00 r[24]=
  77 AggInverse       1   24    1 sum(1)        01 accum=r[1] inverse(r[24])
  78 Delete           3    0    0               02 
  79 Next             3   80    0               00 
  80 Goto             0   34    0               00 
  81 Integer         91   23    0               00 r[23]=91
  82 Rewind           2   90    0               00 
  83 IfPos           22   87    1               00 if r[22]>0 then r[22]-=1, goto 87
  84 Column           4    3   24               00 r[24]=
  85 AggStep          0   24    1 sum(1)        01 accum=r[1] step(r[24])
  86 Next             4   87    0               00 
  87 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  88 Gosub           14   93    0               00 
  89 Next             1   90    0               00 
  90 ResetSorter      1    0    0               00 
  91 Return          23    0    0               00 
  92 Goto             0   98    0               00 
  93 Noop             0    0    0               00 inner-loop subroutine
  94 Column           1    0   26               00 r[26]=
  95 Copy             2   27    0               00 r[27]=r[2]
  96 ResultRow       26    2    0               00 output=r[26..27]
  97 Return          14    0    0               00 end inner-loop subroutine
  98 Halt             0    0    0               00 
  99 Transaction      0    0    1 0             01 usesStmtJournal=0
 100 Goto             0    1    0               00 
SQL: [;PRAGMA sql_trace=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL-trace: ;PRAGMA sql_trace=on;
SQL: [SELECT collate4i1, sum(a) OVER (
    PARTITION BY collate4t1
    ORDER BY a 
    ROWS BETWEEN 1 PRECEDING AND 2 PRECEDING
  ) FROM t1

;]
VDBE Program Listing:
   0 Init             0   99    0               00 Start at 99
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   30    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    7    0 k(2,B,B)      00 
   9 OpenRead         0    2    0 4             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   19    0               00 
  12 Column           0    3    6               00 r[6]=t1.collate4i1
  13 Column           0    2    7               00 r[7]=t1.a
  14 Column           0    1    4               00 r[4]=t1.collate4t1
  15 Column           0    2    5               00 r[5]=t1.a
  16 MakeRecord       4    4   10               00 r[10]=mkrec(r[4..7])
  17 SorterInsert     6   10    4 4             00 key=r[10]
  18 Next             0   12    0               01 
  19 Explain         19    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  20 OpenPseudo       7   11    7               00 7 columns in r[11]
  21 SorterSort       6   29    0               00 
  22 SorterData       6   11    7               00 r[11]=data
  23 Column           7    1    9               00 r[9]=
  24 Column           7    3    8               00 r[8]=
  25 Column           7    0    7               00 r[7]=
  26 Column           7    2    6               00 r[6]=
  27 Yield            3    0    0               00 
  28 SorterNext       6   22    0               00 
  29 EndCoroutine     3    0    0               00 
  30 Null             0   12   12               00 r[12..12]=NULL
  31 Integer          1   13    0               00 r[13]=1
  32 Explain         32    0    0 SCAN SUBQUERY 2 00 
  33 InitCoroutine    3    0    7               00 
  34 Yield            3   81    0               00 next row of subquery_2
  35 Copy             6   15    0               00 r[15]=r[6]
  36 Copy             7   16    0               00 r[16]=r[7]
  37 Copy             8   17    0               00 r[17]=r[8]
  38 Copy             9   18    0               00 r[18]=r[9]
  39 MakeRecord      15    4   19               00 r[19]=mkrec(r[15..18])
  40 Compare         16   12    1 k(1,B)        00 r[16] <-> r[12]
  41 Jump            42   44   42               00 
  42 Gosub           23   82    0               00 call flush_partition
  43 Copy            16   12    0               00 r[12]=r[16]
  44 NewRowid         2   20    0               00 r[20]=rowid
  45 Insert           2   19   20               00 intkey=r[20] data=r[19]
  46 Ne              13   68   20               00 if r[20]!=r[13] goto 68
  47 Null             0    1    0               00 r[1]=NULL
  48 Integer          1   21    0               00 r[21]=1
  49 Integer          0   25    0               00 r[25]=0
  50 MustBeInt       21   52    0               00 
  51 Ge              25   53   21               00 if r[21]>=r[25] goto 53
  52 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  53 Integer          2   22    0               00 r[22]=2
  54 Integer          0   25    0               00 r[25]=0
  55 MustBeInt       22   57    0               00 
  56 Ge              25   58   22               00 if r[22]>=r[25] goto 58
  57 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  58 Le              21   64   22               00 if r[22]<=r[21] goto 64
  59 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  60 Rewind           1    1    0               00 
  61 Gosub           14   93    0               00 
  62 ResetSorter      1    0    0               00 
  63 Goto             0   80    0               00 
  64 Rewind           3    1    0               00 
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Goto             0   80    0               00 
  68 IfPos           22   72    1               00 if r[22]>0 then r[22]-=1, goto 72
  69 Column           4    3   24               00 r[24]=
  70 AggStep          0   24    1 sum(1)        01 accum=r[1] step(r[24])
  71 Next             4   72    0               00 
  72 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  73 Gosub           14   93    0               00 
  74 Next             1   75    0               00 
  75 IfPos           21   80    1               00 if r[21]>0 then r[21]-=1, goto 80
  76 Column           3    3   24               00 r[24]=
  77 AggInverse       1   24    1 sum(1)        01 accum=r[1] inverse(r[24])
  78 Delete           3    0    0               02 
  79 Next             3   80    0               00 
  80 Goto             0   34    0               00 
  81 Integer         91   23    0               00 r[23]=91
  82 Rewind           2   90    0               00 
  83 IfPos           22   87    1               00 if r[22]>0 then r[22]-=1, goto 87
  84 Column           4    3   24               00 r[24]=
  85 AggStep          0   24    1 sum(1)        01 accum=r[1] step(r[24])
  86 Next             4   87    0               00 
  87 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  88 Gosub           14   93    0               00 
  89 Next             1   90    0               00 
  90 ResetSorter      1    0    0               00 
  91 Return          23    0    0               00 
  92 Goto             0   98    0               00 
  93 Noop             0    0    0               00 inner-loop subroutine
  94 Column           1    0   26               00 r[26]=
  95 Copy             2   27    0               00 r[27]=r[2]
  96 ResultRow       26    2    0               00 output=r[26..27]
  97 Return          14    0    0               00 end inner-loop subroutine
  98 Halt             0    0    0               00 
  99 Transaction      0    0    1 0             01 usesStmtJournal=0
 100 Goto             0    1    0               00 
SQL-trace: SELECT collate4i1, sum(a) OVER (
    PARTITION BY collate4t1
    ORDER BY a 
    ROWS BETWEEN 1 PRECEDING AND 2 PRECEDING
  ) FROM t1

;
SQL: [SELECT collate4i1, sum(a) OVER (
    ORDER BY a 
    ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING
  ) FROM t1

;]
VDBE Program Listing:
   0 Init             0  104    0               00 Start at 104
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    2    0 4             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    3    5               00 r[5]=t1.collate4i1
  13 Column           0    2    6               00 r[6]=t1.a
  14 Column           0    2    4               00 r[4]=t1.a
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
  16 SorterInsert     6    8    4 3             00 key=r[8]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    0    7               00 r[7]=
  23 Column           7    2    6               00 r[6]=
  24 Column           7    1    5               00 r[5]=
  25 Yield            3    0    0               00 
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
  28 Integer          1   10    0               00 r[10]=1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   74    0               00 next row of subquery_2
  32 Copy             5   12    0               00 r[12]=r[5]
  33 Copy             6   13    0               00 r[13]=r[6]
  34 Copy             7   14    0               00 r[14]=r[7]
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  36 NewRowid         2   16    0               00 r[16]=rowid
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
  38 Ne              10   61   16               00 if r[16]!=r[10] goto 61
  39 Null             0    1    0               00 r[1]=NULL
  40 Integer          1   17    0               00 r[17]=1
  41 Integer          0   20    0               00 r[20]=0
  42 MustBeInt       17   44    0               00 
  43 Ge              20   45   17               00 if r[17]>=r[20] goto 45
  44 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  45 Integer          2   18    0               00 r[18]=2
  46 Integer          0   20    0               00 r[20]=0
  47 MustBeInt       18   49    0               00 
  48 Ge              20   50   18               00 if r[18]>=r[20] goto 50
  49 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  50 Ge              17   56   18               00 if r[18]>=r[17] goto 56
  51 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  52 Rewind           1    1    0               00 
  53 Gosub           11   98    0               00 
  54 ResetSorter      1    0    0               00 
  55 Goto             0   73    0               00 
  56 Subtract        17   18   17               00 r[17]=r[18]-r[17]
  57 Rewind           3    1    0               00 
  58 Rewind           1    1    0               00 
  59 Rewind           4    1    0               00 
  60 Goto             0   73    0               00 
  61 Column           4    2   19               00 r[19]=
  62 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  63 Next             4   64    0               00 
  64 IfPos           18   69    1               00 if r[18]>0 then r[18]-=1, goto 69
  65 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  66 Gosub           11   98    0               00 
  67 Delete           1    0    0               02 
  68 Next             1   69    0               00 
  69 IfPos           17   73    1               00 if r[17]>0 then r[17]-=1, goto 73
  70 Column           3    2   19               00 r[19]=
  71 AggInverse       1   19    1 sum(1)        01 accum=r[1] inverse(r[19])
  72 Next             3   73    0               00 
  73 Goto             0   31    0               00 
  74 Rewind           2   96    0               00 
  75 Column           4    2   19               00 r[19]=
  76 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  77 Next             4   78    0               00 
  78 IfPos           18   84    1               00 if r[18]>0 then r[18]-=1, goto 84
  79 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  80 Gosub           11   98    0               00 
  81 Delete           1    0    0               02 
  82 Next             1   84    0               00 
  83 Goto             0   96    0               00 
  84 IfPos           17   89    1               00 if r[17]>0 then r[17]-=1, goto 89
  85 Column           3    2   19               00 r[19]=
  86 AggInverse       1   19    1 sum(1)        01 accum=r[1] inverse(r[19])
  87 Next             3   89    0               00 
  88 Goto             0   90    0               00 
  89 Goto             0   78    0               00 
  90 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  91 Gosub           11   98    0               00 
  92 Delete           1    0    0               02 
  93 Next             1   95    0               00 
  94 Goto             0   96    0               00 
  95 Goto             0   90    0               00 
  96 ResetSorter      1    0    0               00 
  97 Goto             0  103    0               00 
  98 Noop             0    0    0               00 inner-loop subroutine
  99 Column           1    0   21               00 r[21]=
 100 Copy             2   22    0               00 r[22]=r[2]
 101 ResultRow       21    2    0               00 output=r[21..22]
 102 Return          11    0    0               00 end inner-loop subroutine
 103 Halt             0    0    0               00 
 104 Transaction      0    0    1 0             01 usesStmtJournal=0
 105 Goto             0    1    0               00 
SQL-trace: SELECT collate4i1, sum(a) OVER (
    ORDER BY a 
    ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING
  ) FROM t1

;
SQL: [;ROLLBACK;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
   2 Halt             0    0    0               00 
SQL-trace: ;ROLLBACK;
SQL: [SELECT collate4i1, sum(x) OVER (
    PARTITION BY x
    ORDER BY x 
    ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING
  ) FROM t1

;]
VDBE Program Listing:
   0 Init             0   81    0               00 Start at 81
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   19    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    7    0               00 
   9 OpenRead         0    2    0 4             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    3    4               00 r[4]=t1.collate4i1
  13 Rowid            0    5    0               00 r[5]=rowid
  14 Rowid            0    6    0               00 r[6]=rowid
  15 Rowid            0    7    0               00 r[7]=rowid
  16 Yield            3    0    0               00 
  17 Next             0   12    0               01 
  18 EndCoroutine     3    0    0               00 
  19 Null             0    8    8               00 r[8..8]=NULL
  20 Integer          1    9    0               00 r[9]=1
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   50    0               00 next row of subquery_2
  24 Copy             4   11    0               00 r[11]=r[4]
  25 Copy             5   12    0               00 r[12]=r[5]
  26 Copy             6   13    0               00 r[13]=r[6]
  27 Copy             7   14    0               00 r[14]=r[7]
  28 MakeRecord      11    4   15               00 r[15]=mkrec(r[11..14])
  29 Compare         12    8    1 k(1,B)        00 r[12] <-> r[8]
  30 Jump            31   33   31               00 
  31 Gosub           18   51    0               00 call flush_partition
  32 Copy            12    8    0               00 r[8]=r[12]
  33 NewRowid         2   16    0               00 r[16]=rowid
  34 Insert           2   15   16               00 intkey=r[16] data=r[15]
  35 Ne               9   46   16               00 if r[16]!=r[9] goto 46
  36 Null             0    1    0               00 r[1]=NULL
  37 Integer          1   17    0               00 r[17]=1
  38 Integer          0   20    0               00 r[20]=0
  39 MustBeInt       17   41    0               00 
  40 Ge              20   42   17               00 if r[17]>=r[20] goto 42
  41 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  42 Rewind           3    1    0               00 
  43 Rewind           1    1    0               00 
  44 Rewind           4    1    0               00 
  45 Goto             0   49    0               00 
  46 Column           4    3   19               00 r[19]=
  47 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  48 Next             4   49    0               00 
  49 Goto             0   23    0               00 
  50 Integer         73   18    0               00 r[18]=73
  51 Rewind           2   72    0               00 
  52 Column           4    3   19               00 r[19]=
  53 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  54 Next             4   55    0               00 
  55 IfPos           17   61    1               00 if r[17]>0 then r[17]-=1, goto 61
  56 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  57 Gosub           10   75    0               00 
  58 Delete           1    0    0               02 
  59 Next             1   61    0               00 
  60 Goto             0   72    0               00 
  61 Column           3    3   19               00 r[19]=
  62 AggInverse       1   19    1 sum(1)        01 accum=r[1] inverse(r[19])
  63 Next             3   65    0               00 
  64 Goto             0   66    0               00 
  65 Goto             0   55    0               00 
  66 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  67 Gosub           10   75    0               00 
  68 Delete           1    0    0               02 
  69 Next             1   71    0               00 
  70 Goto             0   72    0               00 
  71 Goto             0   66    0               00 
  72 ResetSorter      1    0    0               00 
  73 Return          18    0    0               00 
  74 Goto             0   80    0               00 
  75 Noop             0    0    0               00 inner-loop subroutine
  76 Column           1    0   21               00 r[21]=
  77 Copy             2   22    0               00 r[22]=r[2]
  78 ResultRow       21    2    0               00 output=r[21..22]
  79 Return          10    0    0               00 end inner-loop subroutine
  80 Halt             0    0    0               00 
  81 Transaction      0    0    1 0             01 usesStmtJournal=0
  82 Goto             0    1    0               00 
SQL-trace: SELECT collate4i1, sum(x) OVER (
    PARTITION BY x
    ORDER BY x 
    ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING
  ) FROM t1

;
SQL: [SELECT x, sum(x) OVER (
    ORDER BY x 
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM t1

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         0    2    0 0             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   17    0               00 
  12 Rowid            0    4    0               00 r[4]=rowid
  13 Rowid            0    5    0               00 r[5]=rowid
  14 Rowid            0    6    0               00 r[6]=rowid
  15 Yield            3    0    0               00 
  16 Next             0   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 sum(1)        01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 sum(1)        01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 sum(1)        01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    1 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL-trace: SELECT x, sum(x) OVER (
    ORDER BY x 
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM t1

;
SQL: [;ROLLBACK;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
   2 Halt             0    0    0               00 
SQL-trace: ;ROLLBACK;
SQL: [SELECT a, sum(x) OVER (
    PARTITION BY x ORDER BY x
    RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM t1

;]
VDBE Program Listing:
   0 Init             0   94    0               00 Start at 94
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   19    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    7    0               00 
   9 OpenRead         0    2    0 3             00 root=2 iDb=0; t1
  10 Explain         10    7    0 SCAN TABLE t1 00 
  11 Rewind           0   18    0               00 
  12 Column           0    2    4               00 r[4]=t1.a
  13 Rowid            0    5    0               00 r[5]=rowid
  14 Rowid            0    6    0               00 r[6]=rowid
  15 Rowid            0    7    0               00 r[7]=rowid
  16 Yield            3    0    0               00 
  17 Next             0   12    0               01 
  18 EndCoroutine     3    0    0               00 
  19 Null             0    8    8               00 r[8..8]=NULL
  20 Integer          1    9    0               00 r[9]=1
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   57    0               00 next row of subquery_2
  24 Copy             4   11    0               00 r[11]=r[4]
  25 Copy             5   12    0               00 r[12]=r[5]
  26 Copy             6   13    0               00 r[13]=r[6]
  27 Copy             7   14    0               00 r[14]=r[7]
  28 MakeRecord      11    4   15               00 r[15]=mkrec(r[11..14])
  29 Compare         12    8    1 k(1,B)        00 r[12] <-> r[8]
  30 Jump            31   33   31               00 
  31 Gosub           21   58    0               00 call flush_partition
  32 Copy            12    8    0               00 r[8]=r[12]
  33 NewRowid         2   16    0               00 r[16]=rowid
  34 Insert           2   15   16               00 intkey=r[16] data=r[15]
  35 Ne               9   45   16               00 if r[16]!=r[9] goto 45
  36 Null             0    1    0               00 r[1]=NULL
  37 Rewind           3    1    0               00 
  38 Rewind           1    1    0               00 
  39 Rewind           4    1    0               00 
  40 Copy            13   17    0               00 r[17]=r[13]
  41 Copy            17   18    0               00 r[18]=r[17]
  42 Copy            17   19    0               00 r[19]=r[17]
  43 Copy            17   20    0               00 r[20]=r[17]
  44 Goto             0   56    0               00 
  45 Compare         17   13    1 k(1,B)        00 r[17] <-> r[13]
  46 Jump            47   56   47               00 
  47 Copy            13   17    0               00 r[17]=r[13]
  48 Column           4    3   22               00 r[22]=
  49 AggStep          0   22    1 sum(1)        01 accum=r[1] step(r[22])
  50 Next             4   52    0               00 
  51 Goto             0   56    0               00 
  52 Column           4    2   23               00 r[23]=
  53 Compare         20   23    1 k(1,B)        00 r[20] <-> r[23]
  54 Jump            55   48   55               00 
  55 Copy            23   20    0               00 r[20]=r[23]
  56 Goto             0   23    0               00 
  57 Integer         86   21    0               00 r[21]=86
  58 Rewind           2   85    0               00 
  59 Column           4    3   22               00 r[22]=
  60 AggStep          0   22    1 sum(1)        01 accum=r[1] step(r[22])
  61 Next             4   63    0               00 
  62 Goto             0   67    0               00 
  63 Column           4    2   23               00 r[23]=
  64 Compare         20   23    1 k(1,B)        00 r[20] <-> r[23]
  65 Jump            66   59   66               00 
  66 Copy            23   20    0               00 r[20]=r[23]
  67 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  68 Gosub           10   88    0               00 
  69 Next             1   71    0               00 
  70 Goto             0   85    0               00 
  71 Column           1    2   23               00 r[23]=
  72 Compare         19   23    1 k(1,B)        00 r[19] <-> r[23]
  73 Jump            74   68   74               00 
  74 Copy            23   19    0               00 r[19]=r[23]
  75 Column           3    3   22               00 r[22]=
  76 AggInverse       1   22    1 sum(1)        01 accum=r[1] inverse(r[22])
  77 Delete           3    0    0               02 
  78 Next             3   80    0               00 
  79 Goto             0   84    0               00 
  80 Column           3    2   23               00 r[23]=
  81 Compare         18   23    1 k(1,B)        00 r[18] <-> r[23]
  82 Jump            83   75   83               00 
  83 Copy            23   18    0               00 r[18]=r[23]
  84 Goto             0   67    0               00 
  85 ResetSorter      1    0    0               00 
  86 Return          21    0    0               00 
  87 Goto             0   93    0               00 
  88 Noop             0    0    0               00 inner-loop subroutine
  89 Column           1    0   24               00 r[24]=
  90 Copy             2   25    0               00 r[25]=r[2]
  91 ResultRow       24    2    0               00 output=r[24..25]
  92 Return          10    0    0               00 end inner-loop subroutine
  93 Halt             0    0    0               00 
  94 Transaction      0    0    1 0             01 usesStmtJournal=0
  95 Goto             0    1    0               00 
SQL-trace: SELECT a, sum(x) OVER (
    PARTITION BY x ORDER BY x
    RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM t1

;
SQL: [;ROLLBACK;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
   2 Halt             0    0    0               00 
SQL-trace: ;ROLLBACK;
SQL-trace: ;PRAGMA vdbe_listing=off;
SQL-trace: SELECT a, sum(a) OVER (
    ORDER BY a
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  ) FROM t1

;
SQL-trace: ;CREATE TABLE xyz(b INTEGER PRIMARY KEY, c INTEGER);
SQL-trace: ;BEGIN;
SQL-trace: ;
;SELECT collate4i1, sum(collate4i1) OVER (
    RANGE BETWEEN CURRENT ROW AND CURRENT ROW
  ) FROM t1 ORDER BY collate4i1;
SQL-trace: ;
;SELECT a, sum(a) OVER (
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
  ) FROM t1 ORDER BY 1, 2;
SQL-trace: ;
;SELECT collate4i1, sum(collate4i1) OVER (
    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  ) FROM t1 ORDER BY 1, 2;
SQL-trace: ;
;SELECT a, sum(a) OVER (
    ORDER BY a
    ROWS BETWEEN CURRENT ROW AND CURRENT ROW
  ) FROM t1 ORDER BY 1, 2;
SQL-trace: ;
;SELECT collate4t1, sum(collate4t1) OVER (
    ORDER BY x
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM t1 ORDER BY 1, 2;
SQL-trace: ;ROLLBACK;
SQL-trace: ;ROLLBACK;
SQL-trace: ;INSERT INTO xyz VALUES(10, 1);
SQL-trace: SELECT CURRENT_TIME==time('now');
SQL-trace: ;BEGIN;
SQL-trace: ;BEGIN;
SQL-trace: ;INSERT INTO xyz VALUES(1, 5);
SQL-trace: ;BEGIN;
SQL-trace: ;BEGIN;

Program received signal SIGSEGV, Segmentation fault.
0x00000000003a15d8 in sqlite3WindowRewrite (pParse=0x7ffd946c68d0, p=0xfdfd70) at sqlite3.c:146356
146356	      pSublist = exprListAppendList(pParse, pSublist, pWin->pOwner->x.pList);
(gdb) #0  0x00000000003a15d8 in sqlite3WindowRewrite (pParse=0x7ffd946c68d0, p=0xfdfd70) at sqlite3.c:146356
#1  0x00000000002fc6de in sqlite3Select (pParse=0x7ffd946c68d0, p=0xfdfd70, pDest=0x7ffd946c52e0) at sqlite3.c:130281
#2  0x0000000000355337 in sqlite3CodeRhsOfIN (pParse=0x7ffd946c68d0, pExpr=0xfd62c0, iTab=2) at sqlite3.c:99650
#3  0x0000000000353c7b in sqlite3FindInIndex (pParse=0x7ffd946c68d0, pX=0xfd62c0, inFlags=4, prRhsHasNull=0x0, aiMap=0xfc7d10, piTab=0x7ffd946c5514) at sqlite3.c:99448
#4  0x00000000003795bd in codeEqualityTerm (pParse=0x7ffd946c68d0, pTerm=0xfcd730, pLevel=0xfcd9b8, iEq=0, bRev=0, iTarget=1) at sqlite3.c:136693
#5  0x0000000000374503 in sqlite3WhereCodeOneLoopStart (pParse=0x7ffd946c68d0, v=0xfde150, pWInfo=0xfcd620, iLevel=0, pLevel=0xfcd9b8, notReady=18446744073709551615) at sqlite3.c:137510
#6  0x000000000036c3cc in sqlite3WhereBegin (pParse=0x7ffd946c68d0, pTabList=0xfcba00, pWhere=0xfddca0, pOrderBy=0x0, pResultSet=0xfc9930, wctrlFlags=0, iAuxArg=320) at sqlite3.c:145128
#7  0x00000000002fdcea in sqlite3Select (pParse=0x7ffd946c68d0, p=0xfd54b0, pDest=0x7ffd946c5cc0) at sqlite3.c:130695
#8  0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffd946c5ef0, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffd946c68d0) at sqlite3.c:151581
#9  0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffd946c5ef0, yymajor=1, yyminor=...) at sqlite3.c:152877
#10 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffd946c68d0, zSql=0xfdbc31 ";;INSERT INTO t1 VALUES(3, 4, 4);;\n;SELECT collate4t1, sum(collate4t1) OVER win1 FROM t1 \n  WINDOW win1 AS (ORDER BY x)\n\n;", 
    pzErrMsg=0x7ffd946c6ab0) at sqlite3.c:154013
#11 0x00000000002a1683 in sqlite3Prepare (db=0xfc4510, 
    zSql=0xfc55f3 ";\n;SELECT * FROM t1 WHERE \n      (0, t1.x) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t1);;INSERT INTO t1 VALUES(3, 4, 4);;\n;SELECT collate4t1, sum(collate4t1) OVER win1 FROM t1 \n  WINDOW win1"..., nBytes=219, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffd946c6be8, pzTail=0x7ffd946c6bd0) at sqlite3.c:124303
#12 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0xfc4510, 
    zSql=0xfc55f3 ";\n;SELECT * FROM t1 WHERE \n      (0, t1.x) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t1);;INSERT INTO t1 VALUES(3, 4, 4);;\n;SELECT collate4t1, sum(collate4t1) OVER win1 FROM t1 \n  WINDOW win1"..., nBytes=219, prepFlags=128, pOld=0x0, ppStmt=0x7ffd946c6be8, pzTail=0x7ffd946c6bd0) at sqlite3.c:124403
#13 0x000000000029247f in sqlite3_prepare_v2 (db=0xfc4510, 
    zSql=0xfc55f3 ";\n;SELECT * FROM t1 WHERE \n      (0, t1.x) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t1);;INSERT INTO t1 VALUES(3, 4, 4);;\n;SELECT collate4t1, sum(collate4t1) OVER win1 FROM t1 \n  WINDOW win1"..., nBytes=219, ppStmt=0x7ffd946c6be8, pzTail=0x7ffd946c6bd0) at sqlite3.c:124487
#14 0x0000000000256bd0 in main (argc=1, argv=0x7ffd946c6d98) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 62141] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
