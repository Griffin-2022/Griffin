GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000268,sig:06,src:022626+012652,time:5092692,execs:972851,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;ROLLBACK;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT (1, 2, NULL) == (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               61 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               3    1    3               69 r[1] = (r[3]==r[3])
   5 IfNot            1    7    0               00 
   6 Eq               5    1    4               69 r[1] = (r[4]==r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT (1, 2, NULL) != (1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               61 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               3    1    3               69 r[1] = (r[3]!=r[3])
   5 If               1    7    0               00 
   6 Ne               5    1    4               69 r[1] = (r[4]!=r[5])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Integer          3    5    0               00 r[5]=3
  13 Goto             0    1    0               00 
SQL: [SELECT (SELECT 1, 2, NULL) == (SELECT 1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Integer          3   10    0               00 r[10]=3
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL: [INSERT INTO 't1' ('collate4t1', 'a', 'a') VALUES(?2, ?3, ?4)
;]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenWrite        0    2    0 3             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Variable         2    3    0 ?2            00 r[3]=parameter(2,?2)
   4 Variable         3    4    0 ?3            00 r[4]=parameter(3,?3)
   5 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
   6 Insert           0    5    1 t1            39 intkey=r[1] data=r[5]
   7 Halt             0    0    0               00 
   8 Transaction      0    1    2 0             01 usesStmtJournal=0
   9 Null             0    2    0               00 r[2]=NULL
  10 Goto             0    1    0               00 
SQL: [;PRAGMA sql_trace=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL-trace: ;PRAGMA sql_trace=on;
SQL: [SELECT (SELECT 1, 2, NULL) != (SELECT 1, 2, 3)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Integer          3   10    0               00 r[10]=3
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Ne               8    1    3               61 r[1] = (r[3]!=r[8])
  25 If               1   29    0               00 
  26 Ne               9    1    4               69 r[1] = (r[4]!=r[9])
  27 If               1   29    0               00 
  28 Ne              10    1    5               69 r[1] = (r[5]!=r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL-trace: SELECT (SELECT 1, 2, NULL) != (SELECT 1, 2, 3)
;
SQL: [;ROLLBACK;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
   2 Halt             0    0    0               00 
SQL-trace: ;ROLLBACK;
SQL: [SELECT (1, 2, NULL) != (1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               61 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               3    1    3               69 r[1] = (r[3]!=r[3])
   5 If               1    7    0               00 
   6 Ne               4    1    4               69 r[1] = (r[4]!=r[4])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Integer          1    2    0               00 r[2]=1
  10 Integer          2    3    0               00 r[3]=2
  11 Null             0    4    0               00 r[4]=NULL
  12 Goto             0    1    0               00 
SQL-trace: SELECT (1, 2, NULL) != (1, 2, NULL)
;
SQL: [INSERT INTO 't1' ('collate4t1', 'collate4t1', 'collate4t1') VALUES(?2, ?3, ?4)
;]
VDBE Program Listing:
   0 Init             0    7    0               00 Start at 7
   1 OpenWrite        0    2    0 3             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Variable         2    3    0 ?2            00 r[3]=parameter(2,?2)
   4 MakeRecord       2    3    5               00 r[5]=mkrec(r[2..4])
   5 Insert           0    5    1 t1            39 intkey=r[1] data=r[5]
   6 Halt             0    0    0               00 
   7 Transaction      0    1    2 0             01 usesStmtJournal=0
   8 Null             0    2    0               00 r[2]=NULL
   9 Null             0    4    0               00 r[4]=NULL
  10 Goto             0    1    0               00 
SQL-trace: INSERT INTO 't1' ('collate4t1', 'collate4t1', 'collate4t1') VALUES(?2, ?3, ?4)
;
SQL: [;SELECT count(*) FROM 'collate4i1'
;]
VDBE Program Listing:
   0 Init             0    7    0               00 Start at 7
   1 OpenRead         1    3    0 1             00 root=3 iDb=0
   2 Count            1    1    0               00 r[1]=count()
   3 Close            1    0    0               00 
   4 Copy             1    2    0               00 r[2]=r[1]
   5 ResultRow        2    1    0               00 output=r[2]
   6 Halt             0    0    0               00 
   7 Transaction      0    0    2 0             01 usesStmtJournal=0
   8 Goto             0    1    0               00 
SQL-trace: ;SELECT count(*) FROM 'collate4i1'
;
SQL: [DROP TABLE IF EXISTS t1e;]
VDBE Program Listing:
   0 Init             0    2    0               00 Start at 2
   1 Halt             0    0    0               00 
   2 Transaction      0    0    2 0             01 usesStmtJournal=0
   3 Transaction      1    0    0 0             01 usesStmtJournal=0
   4 Goto             0    1    0               00 
SQL-trace: DROP TABLE IF EXISTS t1e;
SQL: [SELECT (SELECT 1, 2, NULL) == (SELECT 1, 2, NULL)
;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Integer         12    2    0               00 r[2]=12; return address
   3 Once             0   12    0               00 
   4 Explain          4    0    0 SCALAR SUBQUERY 1 00 
   5 Null             0    3    5               00 r[3..5]=NULL; Init subquery result
   6 Integer          1    6    0               00 r[6]=1; LIMIT counter
   7 Explain          7    4    0 SCAN CONSTANT ROW 00 
   8 Integer          1    3    0               00 r[3]=1
   9 Integer          2    4    0               00 r[4]=2
  10 Null             0    5    0               00 r[5]=NULL
  11 DecrJumpZero     6   12    0               00 if (--r[6])==0 goto 12
  12 Return           2    0    0               00 
  13 Integer         23    7    0               00 r[7]=23; return address
  14 Once             0   23    0               00 
  15 Explain         15    0    0 SCALAR SUBQUERY 2 00 
  16 Null             0    8   10               00 r[8..10]=NULL; Init subquery result
  17 Integer          1   11    0               00 r[11]=1; LIMIT counter
  18 Explain         18   15    0 SCAN CONSTANT ROW 00 
  19 Integer          1    8    0               00 r[8]=1
  20 Integer          2    9    0               00 r[9]=2
  21 Null             0   10    0               00 r[10]=NULL
  22 DecrJumpZero    11   23    0               00 if (--r[11])==0 goto 23
  23 Return           7    0    0               00 
  24 Eq               8    1    3               61 r[1] = (r[3]==r[8])
  25 IfNot            1   29    0               00 
  26 Eq               9    1    4               69 r[1] = (r[4]==r[9])
  27 IfNot            1   29    0               00 
  28 Eq              10    1    5               69 r[1] = (r[5]==r[10])
  29 ResultRow        1    1    0               00 output=r[1]
  30 Halt             0    0    0               00 
SQL-trace: SELECT (SELECT 1, 2, NULL) == (SELECT 1, 2, NULL)
;
SQL: [;ROLLBACK;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    1    0               00 
   2 Halt             0    0    0               00 
SQL-trace: ;ROLLBACK;
SQL: [SELECT (NULL, NULL, NULL) != (NULL, NULL, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Ne               2    1    2               61 r[1] = (r[2]!=r[2])
   3 If               1    7    0               00 
   4 Ne               2    1    2               69 r[1] = (r[2]!=r[2])
   5 If               1    7    0               00 
   6 Ne               2    1    2               69 r[1] = (r[2]!=r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Null             0    2    0               00 r[2]=NULL
  10 Goto             0    1    0               00 
SQL-trace: SELECT (NULL, NULL, NULL) != (NULL, NULL, NULL)
;
SQL: [SELECT (NULL, NULL, NULL) IS (NULL, NULL, NULL)
;]
VDBE Program Listing:
   0 Init             0    9    0               00 Start at 9
   1 Explain          1    0    0 SCAN CONSTANT ROW 00 
   2 Eq               2    1    2               E1 r[1] = (r[2]==r[2])
   3 IfNot            1    7    0               00 
   4 Eq               2    1    2               E9 r[1] = (r[2]==r[2])
   5 IfNot            1    7    0               00 
   6 Eq               2    1    2               E9 r[1] = (r[2]==r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Halt             0    0    0               00 
   9 Null             0    2    0               00 r[2]=NULL
  10 Goto             0    1    0               00 
SQL-trace: SELECT (NULL, NULL, NULL) IS (NULL, NULL, NULL)
;
SQL-trace: ;PRAGMA vdbe_listing=off;
SQL-trace: ;BEGIN;
SQL-trace: SELECT (NULL, NULL, NULL) IS NOT (NULL, NULL, NULL)
;
SQL-trace: ;ROLLBACK;
SQL-trace: ;ROLLBACK;
SQL-trace: SELECT (SELECT NULL, NULL, NULL) == (SELECT NULL, NULL, NULL)
;
SQL-trace: SELECT (SELECT NULL, NULL, NULL) != (SELECT NULL, NULL, NULL)
;
SQL-trace: ;BEGIN;
SQL-trace: ;BEGIN;
SQL-trace: SELECT (1, NULL, 1) != (1, 1, 1)
;
SQL-trace: SELECT (1, NULL, 1) IS (1, 1, 2)
;
SQL-trace: SELECT (1, 1, 3) < (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, 1, 3) < (1, 2, 3)
;
SQL-trace: SELECT (1, 1, 3) <= (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 2, 3) < (1, 2, 3)
;
SQL-trace: SELECT (1, 2, 3) <= (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 2, 3) <= (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, 2, 3) <= (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 2, 3) >= (1, 2, 3)
;
SQL-trace: SELECT * FROM t1 WHERE (1, 3, 3) < (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, 3, 3) < (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 3, 3) > (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, 3, 3) > (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 3, 3) >= (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, 3, 3) >= (1, 2, 3)
;
SQL-trace: SELECT * FROM t1 WHERE (1, NULL, 3) < (1, 2, 3)
;
SQL-trace: SELECT (1, NULL, 3) > (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, NULL, 3) > (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, NULL, 3) > (1, 2, 3)
;
SQL-trace: SELECT (1, NULL, 3) <= (1, 2, 3)
;
SQL-trace: SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, 2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, NULL, 3) <= (1, 2, 3)
;
SQL-trace: SELECT (1, NULL, 3) >= (1, 2, 3)
;
SQL-trace: SELECT (1, 3, 3) < (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 3, 3) < (1, NULL, 3)
;
SQL-trace: SELECT (1, 3, 3) > (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 3, 3) > (1, NULL, 3)
;
SQL-trace: SELECT * FROM t1 WHERE (1, 3, 3) <= (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, 3, 3) >= (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, 3, 3) >= (1, NULL, 3)
;
SQL-trace: SELECT (1, NULL, 3) < (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, NULL, 3) < (1, NULL, 3)
;
SQL-trace: SELECT (1, NULL, 3) > (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, NULL, 3) > (1, NULL, 3)
;
SQL-trace: SELECT (1, NULL, 3) <= (1, NULL, 3)
;
SQL-trace: SELECT * FROM t1 WHERE (1, NULL, 3) <= (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE NOT (1, NULL, 3) <= (1, NULL, 3)
;
SQL-trace: SELECT (1, NULL, 3) >= (1, NULL, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (1, NULL, 3) >= (1, NULL, 3)
;
SQL-trace: CREATE TABLE b(c, d);
SQL-trace: ;
;SELECT (1, 1) == (SELECT x,a FROM t1 ORDER BY a)
;
SQL-trace: SELECT (SELECT * FROM collate4i1 ORDER BY xyz) == (SELECT * FROM collate4i1 ORDER BY xyz)
  
;
SQL-trace: SELECT (SELECT * FROM t1 ORDER BY x, x) == (SELECT * FROM t1 ORDER BY x, x)
  
;
SQL-trace: SELECT (SELECT * FROM t1 ORDER BY a, x DESC) == (SELECT * FROM t1 ORDER BY a, x DESC)
  
;
SQL-trace: SELECT (3, 6) == (SELECT xyz,xyz FROM collate4i1 ORDER BY xyz DESC, xyz DESC)
;
SQL-trace: SELECT (SELECT * FROM t1 ORDER BY x DESC, collate4t1) == (SELECT * FROM t1 ORDER BY x DESC, collate4t1)
  
;
SQL-trace: SELECT (SELECT 3, 5) == (SELECT a,x FROM t1 ORDER BY a DESC, x)
;
SQL-trace: SELECT (SELECT * FROM collate4i1 ORDER BY xyz DESC, xyz) == (SELECT * FROM collate4i1 ORDER BY xyz DESC, xyz)
  
;
SQL-trace: SELECT (2, 2) BETWEEN (2, 2) AND (3, 3)
;
SQL-trace: SELECT (2, 2) BETWEEN (2, NULL) AND (3, 3)
;
SQL-trace: CREATE TABLE xyz1(t2, tr1, tr2);
SQL-trace: ;INSERT INTO t1 VALUES('ghi', 3, 'vi');
SQL-trace: ;
;SELECT c FROM b WHERE (c, d) = (SELECT 'abc', 1);
SQL-trace: ;
;SELECT xyz FROM collate4i1 WHERE (xyz, xyz) = (SELECT 'abc' COLLATE nocase, 1);
SQL-trace: ;
;SELECT xyz FROM collate4i1 WHERE +xyz = (SELECT 'abc' COLLATE nocase) AND xyz = (SELECT 1);
SQL-trace: ;
;CREATE TABLE y(t0 INTEGER PRIMARY KEY, t1a, z);
SQL-trace: ;INSERT INTO xyz1 VALUES(2, 2, 2);
SQL-trace: ;INSERT INTO y VALUES(4, 4, 4);
SQL-trace: SELECT * FROM collate4i1 WHERE (xyz, xyz) IS (2, 2)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (xyz, xyz) < (2, 3)
;
SQL-trace: SELECT * FROM collate4i1 WHERE (xyz, xyz) > ('2', 1)
;
SQL-trace: ;INSERT INTO xyz1 VALUES(1, 1, 1);
SQL-trace: ;INSERT INTO xyz1 VALUES(4, 4, 4);
SQL-trace: ;INSERT INTO y VALUES(5, 5, 5);
SQL-trace: ;
;SELECT c FROM b WHERE (d, d) > (2, 1)
;
SQL-trace: SELECT d FROM b WHERE (d, d) < (4, 5)
;
SQL-trace: ;INSERT INTO t1(a) VALUES('X');
SQL-trace: ;CREATE TABLE t1b(bad1 TEXT,t1c TEXT,t2a1 TEXT,t2a2 TEXT,t3 TEXT,t3a TEXT);
SQL-trace: ;CREATE INDEX t3b ON t1(x,collate4t1,a,collate4t1,collate4t1);
SQL-trace: ;
;CREATE TABLE t6(t6ab);
SQL-trace: 
;DROP TABLE IF EXISTS collate4i1;
SQL-trace: ;CREATE TABLE t6b(t7a,t7b);
SQL-trace: ;DROP TABLE IF EXISTS xyz1;
SQL-trace: SELECT CASE (2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;
SQL-trace: SELECT CASE (SELECT 2,2) WHEN (1, 1) THEN 2 ELSE 1 END
;
SQL-trace: SELECT 1 FROM y WHERE (z,1) BETWEEN (1,1) AND (3,3)
;
SQL-trace: CREATE TABLE t7ax(t8a PRIMARY KEY, t8b);
SQL-trace: ;CREATE TABLE i8c(t9);
SQL-trace: ;UPDATE y SET z=7;
SQL-trace: ;SELECT * FROM t6b;
SQL-trace: ;
;UPDATE t1 SET a=97;
SQL-trace: ;
;CREATE TABLE t9ca(t10, e, t10x, t11, t11x);
SQL-trace: ;UPDATE t6b SET t7b=t7b WHERE t7b=3;
SQL-trace: ;
;CREATE TABLE c0(index_0, sqlsim0);
SQL-trace: ;
;CREATE TABLE sqlsim1 ( sqlsim2, sqlsim3, PRIMARY KEY (sqlsim2, sqlsim3) );
SQL-trace: ;INSERT INTO t6 VALUES (1);
SQL-trace: ;
;DROP TABLE IF EXISTS b;
SQL-trace: ;CREATE TABLE sqlsim4(sqlsim5 INTEGER PRIMARY KEY,sqlsim6);
SQL-trace: ;INSERT INTO t6(t6ab,t6ab) VALUES(1,11),(2,22),(3,33),(4,44);
SQL-trace: ;SELECT * FROM t6 WHERE (t6ab,t6ab)>(0,0) ORDER BY t6ab;
SQL-trace: ;
;SELECT * FROM y WHERE (t0,t0)>=(0,0) ORDER BY t0;
SQL-trace: ;
;SELECT * FROM t1 WHERE (collate4t1,collate4t1)>(3,0) ORDER BY collate4t1;
SQL-trace: ;
;SELECT * FROM y WHERE (t0,z)<(3,0) ORDER BY t0 DESC;
SQL-trace: ;
;SELECT * FROM y WHERE (z,z)<=(3,0) ORDER BY z DESC;
SQL-trace: ;
;SELECT * FROM t1b WHERE (bad1,t3)>=(3,34) ORDER BY bad1;
SQL-trace: ;
;SELECT * FROM y WHERE (z,t1a)<(3,34) ORDER BY z DESC;
SQL-trace: ;
;SELECT * FROM y WHERE (t0,z)<=(3,33) ORDER BY t0 DESC;
SQL-trace: ;
;SELECT * FROM y WHERE (z,t1a)<=(3,32) ORDER BY z DESC;
SQL-trace: ;
;SELECT * FROM t7ax WHERE (0,0)<=(t8b,t8a) ORDER BY t8b;
SQL-trace: ;
;SELECT * FROM y WHERE (5,0)>=(t1a,z) ORDER BY t1a DESC;
SQL-trace: ;
;SELECT * FROM y WHERE (3,0)>(t1a,t1a) ORDER BY t1a DESC;
SQL-trace: ;
;SELECT * FROM t6 WHERE (3,0)>=(t6ab,t6ab) ORDER BY t6ab DESC;
SQL-trace: ;
;SELECT * FROM y WHERE (3,32)<(z,z) ORDER BY z;
SQL-trace: ;
;SELECT * FROM t1b WHERE (3,33)<(t2a1,t2a1) ORDER BY t2a1;
SQL-trace: ;
;SELECT * FROM t7ax WHERE (3,33)<=(t8b,t8a) ORDER BY t8b;
SQL-trace: ;
;SELECT * FROM t1 WHERE (3,34)<=(collate4t1,collate4t1) ORDER BY collate4t1;
SQL-trace: ;
;SELECT * FROM t7ax WHERE (3,33)>=(t8b,t8b) ORDER BY t8b DESC;
SQL-trace: ;
;SELECT * FROM t6b WHERE (3,32)>=(t7b,t7b) ORDER BY t7b DESC;
SQL-trace: ;
;SELECT 1 WHERE (2,(2,0)) IS (2,(2,0));

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f0cfd4a5859 in __GI_abort () at abort.c:79
#2  0x00007f0cfd4a5729 in __assert_fail_base (fmt=0x7f0cfd63b588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=<optimized out>) at assert.c:92
#3  0x00007f0cfd4b6fd6 in __GI___assert_fail (assertion=0x2122b4 "pIn->nSdst==1 || pParse->nErr>0", file=0x22873d "sqlite3.c", line=127594, 
    function=0x213784 "int generateOutputSubroutine(Parse *, Select *, SelectDest *, SelectDest *, int, int, KeyInfo *, int)") at assert.c:101
#4  0x00000000003b5d8b in generateOutputSubroutine (pParse=0x7ffec4a91400, p=0x202f3b0, pIn=0x7ffec4a8fa80, pDest=0x7ffec4a8ffd8, regReturn=15, regPrev=9, pKeyInfo=0x202c020, iBreak=-7) at sqlite3.c:127594
#5  0x00000000003b4e37 in multiSelectOrderBy (pParse=0x7ffec4a91400, p=0x202f3b0, pDest=0x7ffec4a8ffd8) at sqlite3.c:127921
#6  0x00000000003a3d1c in multiSelect (pParse=0x7ffec4a91400, p=0x202f3b0, pDest=0x7ffec4a8ffd8) at sqlite3.c:127207
#7  0x00000000002fccf5 in sqlite3Select (pParse=0x7ffec4a91400, p=0x202f3b0, pDest=0x7ffec4a8ffd8) at sqlite3.c:130384
#8  0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffec4a91400, pExpr=0x2031480) at sqlite3.c:99820
#9  0x0000000000350b1c in exprCodeVector (pParse=0x7ffec4a91400, p=0x2031480, piFreeable=0x7ffec4a9009c) at sqlite3.c:100296
#10 0x000000000034fbdb in sqlite3ExprCodeIN (pParse=0x7ffec4a91400, pExpr=0x2026710, destIfFalse=-3, destIfNull=-4) at sqlite3.c:99952
#11 0x000000000034be9e in sqlite3ExprCodeTarget (pParse=0x7ffec4a91400, pExpr=0x2026710, target=1) at sqlite3.c:100792
#12 0x000000000034e9ee in sqlite3ExprCodeExprList (pParse=0x7ffec4a91400, pList=0x202c980, target=1, srcReg=0, flags=1 '\001') at sqlite3.c:101202
#13 0x00000000003addca in innerLoopLoadRow (pParse=0x7ffec4a91400, pSelect=0x202b210, pInfo=0x7ffec4a90440) at sqlite3.c:125172
#14 0x00000000003a92ea in selectInnerLoop (pParse=0x7ffec4a91400, p=0x202b210, srcTab=-1, pSort=0x0, pDistinct=0x7ffec4a906e0, pDest=0x7ffec4a907f0, iContinue=-2, iBreak=-2) at sqlite3.c:125624
#15 0x00000000002fe191 in sqlite3Select (pParse=0x7ffec4a91400, p=0x202b210, pDest=0x7ffec4a907f0) at sqlite3.c:130743
#16 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffec4a90a20, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffec4a91400) at sqlite3.c:151581
#17 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffec4a90a20, yymajor=1, yyminor=...) at sqlite3.c:152877
#18 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffec4a91400, 
    zSql=0x2027a12 ";;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT"..., pzErrMsg=0x7ffec4a915e0) at sqlite3.c:154013
#19 0x00000000002a1683 in sqlite3Prepare (db=0x20122b0, 
    zSql=0x201a1fd ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 3,4"..., nBytes=680, prepFlags=128, pReprepare=0x0, ppStmt=0x7ffec4a91718, pzTail=0x7ffec4a91700) at sqlite3.c:124303
#20 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x20122b0, 
    zSql=0x201a1fd ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 3,4"..., nBytes=680, prepFlags=128, pOld=0x0, ppStmt=0x7ffec4a91718, pzTail=0x7ffec4a91700) at sqlite3.c:124403
#21 0x000000000029247f in sqlite3_prepare_v2 (db=0x20122b0, 
    zSql=0x201a1fd ";\n;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 5,6 UNION SELECT 3,4 ORDER BY 1) IN (SELECT 3,4);;SELECT (SELECT 3,4 UNION SELECT 5,6 ORDER BY 1 DESC) IN (SELECT 3,4"..., nBytes=680, ppStmt=0x7ffec4a91718, pzTail=0x7ffec4a91700) at sqlite3.c:124487
#22 0x0000000000256bd0 in main (argc=1, argv=0x7ffec4a918c8) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 59385] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
