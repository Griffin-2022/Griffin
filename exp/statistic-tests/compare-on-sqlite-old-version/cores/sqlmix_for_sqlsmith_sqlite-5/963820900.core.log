GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000501,sig:06,src:024959+022407,time:13572357,execs:2353395,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;CREATE TEMP TABLE b(c integer);]
VDBE Trace:
   0 Init             0   30    0               00 Start at 30
  30 Transaction      1    1    0 0             01 usesStmtJournal=0
  31 TableLock        1    1    1 sqlite_temp_master 00 iDb=1 root=1 write=1
  32 Goto             0    1    0               00 
   1 ReadCookie       1    3    2               00 
REG[3] =  i:0
   2 If               3    5    0               00 
REG[3] =  i:0
   3 SetCookie        1    2    4               00 
   4 SetCookie        1    5    1               00 
   5 CreateTable      1    2    0               00 r[2]=root iDb=1
REG[2] =  i:2
   6 OpenWrite        0    1    1 5             00 root=1 iDb=1
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......](8)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......](8)
REG[1] =  i:1
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    1 5             00 root=1 iDb=1; sqlite_temp_master
  14 Explain          0    0    0 SEARCH TABLE sqlite_temp_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 MustBeInt        1   18    0               00 
REG[1] =  i:1
  16 NotExists        1   18    1               00 intkey=r[1]; pk
REG[1] =  i:1
  17 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:1
  18 IsNull           5   26    0               00 if r[5]==NULL goto 26
REG[5] =  i:1
  19 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  20 String8          0    7    0 b             00 r[7]='b'
REG[7] =   t1[b](8)
  21 String8          0    8    0 b             00 r[8]='b'
REG[8] =   t1[b](8)
  22 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:2
  23 String8          0   10    0 CREATE TABLE b(c integer) 00 r[10]='CREATE TABLE b(c integer)'
REG[10] =   t25[CREATE TABLE b(](8)
  24 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s39[06170F0F013F7461626C656262024352.....?tablebb.CR](8)
  25 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s39[06170F0F013F7461626C656262024352.....?tablebb.CR](8)
REG[5] =  i:1
  26 Close            1    0    0               00 
  27 SetCookie        1    1    1               00 
  28 ParseSchema      1    0    0 tbl_name='b' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      1    0    1 0             00 usesStmtJournal=0
  17 TableLock        1    1    0 sqlite_temp_master 00 iDb=1 root=1 write=0
  18 String8          0    2    0 b             00 r[2]='b'
REG[2] =   t1[b](8)
  19 String8          0    4    0 trigger       00 r[4]='trigger'
REG[4] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    1 5             00 root=1 iDb=1; sqlite_temp_master
   3 Explain          0    0    0 SCAN TABLE sqlite_temp_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_temp_master.tbl_name
REG[1] =   s1[b](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t1[b](8)
REG[1] =   s1[b](8)
   7 Column           0    0    3               00 r[3]=sqlite_temp_master.type
REG[3] =   s5[table](8)
   8 Eq               4   13    3 (BINARY)      52 if r[4]==r[3] goto 13
REG[4] =   t7[trigger](8)
REG[3] =   s5[table](8)
   9 Column           0    1    5               00 r[5]=sqlite_temp_master.name
REG[5] =   s1[b](8)
  10 Column           0    3    6               00 r[6]=sqlite_temp_master.rootpage
REG[6] =  i:2
  11 Column           0    4    7               00 r[7]=sqlite_temp_master.sql
REG[7] =   s25[CREATE TABLE b(](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s1[b](8)
REG[6] =  i:2
REG[7] =   s25[CREATE TABLE b(](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  29 Halt             0    0    0               00 
SQL: [;
;SELECT printf('(%2c)',char(1513));]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 String8          0    2    0 (%2c)         00 r[2]='(%2c)'
REG[2] =   t5[(%2c)](8)
   5 Integer       1513    4    0               00 r[4]=1513
REG[4] =  i:1513
   6 Function0        1    4    3 char(-1)      01 r[3]=func(r[4])
REG[4] =  i:1513
REG[3] =   z2[..](8)
   7 Goto             0    1    0               00 
   1 Function0        3    2    1 printf(-1)    02 r[1]=func(r[2..3])
REG[2] =   t5[(%2c)](8)
REG[3] =   z2[..](8)
REG[1] =   s4[( .)](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s4[( .)](8)
   3 Halt             0    0    0               00 
SQL: [pragma encoding = 'UTF-16LE'
;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Halt             0    0    0               00 
SQL: [;CREATE TRIGGER abc BEFORE INSERT ON t1 BEGIN
      SELECT CASE WHEN (NOT new.a BETWEEN 0 AND 20)
             THEN raise(rollback, 'aiieee') END;
    END;]
VDBE Trace:
   0 Init             0   14    0               00 Start at 14
  14 Transaction      0    1    1 0             01 usesStmtJournal=0
  15 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  16 Goto             0    1    0               00 
   1 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:2
   3 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
   4 String8          0    3    0 abc           00 r[3]='abc'
REG[3] =   t3[abc](8)
   5 String8          0    4    0 t1            00 r[4]='t1'
REG[4] =   t2[t1](8)
   6 Integer          0    5    0               00 r[5]=0
REG[5] =  i:0
   7 String8          0    6    0 CREATE TRIGGER abc BEFORE INSERT ON t1 BEGIN
      SELECT CASE WHEN (NOT new.a BETWEEN 0 AND 20)
             THEN raise(rollback, 'aiieee') END;
    END 00 r[6]='CREATE TRIGGER abc BEFORE INSERT ON t1 BEGIN
      SELECT CASE WHEN (NOT new.a BETWEEN 0 AND 
REG[6] =   t153[CREATE TRIGGER ](8)
   8 MakeRecord       2    5    7 BBBDB         00 r[7]=mkrec(r[2..6])
REG[7] =  s172[071B131108823F747269676765726162......?triggerab](8)
   9 Insert           0    7    1               18 intkey=r[1] data=r[7]
REG[7] =  s172[071B131108823F747269676765726162......?triggerab](8)
REG[1] =  i:2
  10 Close            0    0    0               00 
  11 SetCookie        0    1    2               00 
  12 ParseSchema      0    0    0 type='trigger' AND name='abc' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    2 0             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 trigger       00 r[2]='trigger'
REG[2] =   t7[trigger](8)
  19 String8          0    4    0 abc           00 r[4]='abc'
REG[4] =   t3[abc](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s5[table](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s5[table](8)
  13 Next             0    5    0               01 
   5 Column           0    0    1               00 r[1]=sqlite_master.type
REG[1] =   s7[trigger](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t7[trigger](8)
REG[1] =   s7[trigger](8)
   7 Column           0    1    3               00 r[3]=sqlite_master.name
REG[3] =   s3[abc](8)
   8 Ne               4   13    3 (BINARY)      52 if r[4]!=r[3] goto 13
REG[4] =   t3[abc](8)
REG[3] =   s3[abc](8)
   9 Copy             3    5    0               00 r[5]=r[3]
REG[5] =   s3[abc](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:0
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s153[CREATE TRIGGER ](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s3[abc](8)
REG[6] =  i:0
REG[7] =   s153[CREATE TRIGGER ](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  13 Halt             0    0    0               00 
SQL: [;/* 64 rows */
      
;PRAGMA integrity_check 
;]
VDBE Trace:
   0 Init             0   23    0               00 Start at 23
  23 Transaction      0    0    2 0             01 usesStmtJournal=0
  24 Transaction      1    0    1 0             01 usesStmtJournal=0
  25 Goto             0    1    0               00 
   1 Integer        100    1    0               00 r[1]=100
REG[1] =  i:100
   2 IfPos            1    4    0               00 if r[1]>0 then r[1]-=0, goto 4
REG[1] =  i:100
   4 IntegrityCk      2    2    1 [1]           00 
   5 IsNull           2   10    0               00 if r[2]==NULL goto 10
REG[2] =  NULL
  10 IfPos            1   12    0               00 if r[1]>0 then r[1]-=0, goto 12
REG[1] =  i:100
  12 IntegrityCk      2    2    1 [1]           01 
  13 IsNull           2   18    0               00 if r[2]==NULL goto 18
REG[2] =  NULL
  18 AddImm           1 -100    0               00 r[1]=r[1]+-100
REG[1] =  i:100
  19 If               1   22    0               00 
REG[1] =  i:0
  20 String8          0    3    0 ok            00 r[3]='ok'
REG[3] =   t2[ok](8)
  21 ResultRow        3    1    0               00 output=r[3]
REG[3] =   t2[ok](8)
  22 Halt             0    0    0               00 
SQL: [PRAGMA journal_mode=DELETE 
;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 JournalMode      1    1    0               00 
REG[1] =   t6[delete](8)
   2 JournalMode      0    1    0               00 
REG[1] =   t6[memory](8)
   3 ResultRow        1    1    0               00 output=r[1]
REG[1] =   t6[memory](8)
   4 Halt             0    0    0               00 
SQL: [INSERT INTO "main"."t1"(a,a,a,a,a) VALUES(1,0,'radian',nullif('radian','radian'),'RDAM')
;]
VDBE Trace:
   0 Init             0   15    0               00 Start at 15
  15 Transaction      0    1    2 0             01 usesStmtJournal=1
  16 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  17 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   2 Integer         -1    3    0               00 r[3]=-1
REG[3] =  i:-1
   3 Integer          1    4    0               00 r[4]=1
REG[4] =  i:1
   4 Copy             4    5    0               00 r[5]=r[4]
REG[5] =  i:1
   5 Affinity         4    1    0 B             00 affinity(r[4])
   6 Program          1   13    6 program       01 Call: abc.default
   0 Init             0    0    0 -- TRIGGER abc 00 Start at 0; Start: abc.default (BEFORE INSERT ON t1)
   1 Param            3    2    0               00 new.a -> $2
REG[2] =   e1[1](8)
   2 Integer          0    3    0               00 r[3]=0
REG[3] =  i:0
   3 Lt               3    6    2 (BINARY)      42 if r[3]<r[2] goto 6
REG[3] =  i:0
REG[2] =   e1[1](8)
   4 Integer         20    3    0               00 r[3]=20
REG[3] =  i:20
   5 Le               3    8    2 (BINARY)      52 if r[3]<=r[2] goto 8
REG[3] =  i:20
REG[2] =   e1[1](8)
   8 Null             0    1    0               00 r[1]=NULL
REG[1] =  NULL
   9 Halt             0    0    0               00 End: abc.default
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   8 Copy             5    2    0               00 r[2]=r[5]
REG[2] =  i:1
   9 Eq               2   11    2 (BINARY)      52 if r[2]==r[2] goto 11

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fe4c34f0859 in __GI_abort () at abort.c:79
#2  0x00007fe4c34f0729 in __assert_fail_base (fmt=0x7fe4c3686588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=<optimized out>)
    at assert.c:92
#3  0x00007fe4c3501fd6 in __GI___assert_fail (assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=0x21067c "int sqlite3VdbeMemStringify(Mem *, u8, u8)") at assert.c:101
#4  0x000000000027a9de in sqlite3VdbeMemStringify (pMem=0x993370, enc=1 '\001', bForce=1 '\001') at sqlite3.c:68526
#5  0x00000000003c7fc0 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:78710
#6  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#7  0x000000000024b5e9 in main (argc=1, argv=0x7ffd5a35a758) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 30902] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
