GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000208,sig:06,src:022739+020554,time:5092066,execs:866890,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;CREATE TABLE t1i1 ( t2i1 NVARCHAR, i1 NVARCHAR );]
VDBE Trace:
   0 Init             0   32    0               00 Start at 32
  32 Transaction      0    1    4 2             01 usesStmtJournal=0
  33 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  34 Goto             0    1    0               00 
   1 ReadCookie       0    3    2               00 
REG[3] =  i:4
   2 If               3    5    0               00 
REG[3] =  i:4
   5 CreateTable      0    2    0               00 r[2]=root iDb=0
REG[2] =  i:6
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:5
   8 Blob             6    3    0              00 r[3]= (len=6)
REG[3] =  t6[060000000000......](8)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
REG[3] =  t6[060000000000......](8)
REG[1] =  i:5
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
REG[4] =  NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain          0    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 MustBeInt        1   18    0               00 
REG[1] =  i:5
  16 NotExists        1   18    1               00 intkey=r[1]; pk
REG[1] =  i:5
  17 Rowid            1    5    0               00 r[5]=rowid
REG[5] =  i:5
  18 Integer          0   12    0               00 r[12]=0
REG[12] =  i:0
  19 IsNull           5   28    0               00 if r[5]==NULL goto 28
REG[5] =  i:5
  20 String8          0    6    0 table         00 r[6]='table'
REG[6] =   t5[table](8)
  21 String8          0    7    0 t1i1          00 r[7]='t1i1'
REG[7] =   t4[t1i1](8)
  22 String8          0    8    0 t1i1          00 r[8]='t1i1'
REG[8] =   t4[t1i1](8)
  23 Copy             2    9    0               00 r[9]=r[2]
REG[9] =  i:6
  24 String8          0   10    0 CREATE TABLE t1i1 ( t2i1 NVARCHAR, i1 NVARCHAR ) 00 r[10]='CREATE TABLE t1i1 ( t2i1 NVARCHAR, i1 NVARCHAR )'
REG[10] =   t48[CREATE TABLE t1](8)
  25 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
REG[11] =  s68[06171515016D7461626C657431693174.....mtablet1i1t](8)
  26 Insert           1   11    5               00 intkey=r[5] data=r[11]
REG[11] =  s68[06171515016D7461626C657431693174.....mtablet1i1t](8)
REG[5] =  i:5
  27 AddImm          12    1    0               00 r[12]=r[12]+1
REG[12] =  i:0
  28 Close            1    0    0               00 
  29 SetCookie        0    1    5               00 
  30 ParseSchema      0    0    0 tbl_name='t1i1' AND type!='trigger' 00 
VDBE Trace:
   0 Init             0   16    0               00 Start at 16
  16 Transaction      0    0    5 2             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 t1i1          00 r[2]='t1i1'
REG[2] =   t4[t1i1](8)
  19 String8          0    4    0 trigger       00 r[4]='trigger'
REG[4] =   t7[trigger](8)
  20 Goto             0    1    0               00 
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s2[t1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t4[t1i1](8)
REG[1] =   s2[t1](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[c](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t4[t1i1](8)
REG[1] =   s1[c](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[w](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t4[t1i1](8)
REG[1] =   s1[w](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s1[x](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t4[t1i1](8)
REG[1] =   s1[x](8)
  13 Next             0    5    0               01 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
REG[1] =   s4[t1i1](8)
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
REG[2] =   t4[t1i1](8)
REG[1] =   s4[t1i1](8)
   7 Column           0    0    3               00 r[3]=sqlite_master.type
REG[3] =   s5[table](8)
   8 Eq               4   13    3 (BINARY)      52 if r[4]==r[3] goto 13
REG[4] =   t7[trigger](8)
REG[3] =   s5[table](8)
   9 Column           0    1    5               00 r[5]=sqlite_master.name
REG[5] =   s4[t1i1](8)
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
REG[6] =  i:6
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
REG[7] =   s48[CREATE TABLE t1](8)
  12 ResultRow        5    3    0               00 output=r[5..7]
REG[5] =   s4[t1i1](8)
REG[6] =  i:6
REG[7] =   s48[CREATE TABLE t1](8)
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  31 Halt             0    0    0               00 
SQL: [;
;SELECT printf('|%,t1i1|%,t1i1|',123456,-123456);]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 String8          0    2    0 |%,t1i1|%,t1i1| 00 r[2]='|%,t1i1|%,t1i1|'
REG[2] =   t15[|%,t1i1|%,t1i1|](8)
   5 Integer       123456    3    0               00 r[3]=123456
REG[3] =  i:123456
   6 Integer       -123456    4    0               00 r[4]=-123456
REG[4] =  i:-123456
   7 Goto             0    1    0               00 
   1 Function0        7    2    1 printf(-1)    03 r[1]=func(r[2..4])
REG[2] =   t15[|%,t1i1|%,t1i1|](8)
REG[3] =  i:123456
REG[4] =  i:-123456
REG[1] =   s1[|](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s1[|](8)
   3 Halt             0    0    0               00 
SQL: [DELETE FROM t1i1 WHERE rowid=4;]
VDBE Trace:
   0 Init             0   13    0               00 Start at 13
  13 Transaction      0    1    5 2             01 usesStmtJournal=0
  14 TableLock        0    6    1 t1i1          00 iDb=0 root=6 write=1
  15 Goto             0    1    0               00 
   1 Integer          0    1    0               00 r[1]=0
REG[1] =  i:0
   2 Null             0    2    0               00 r[2]=NULL
REG[2] =  NULL
   3 OpenWrite        0    6    0 2             00 root=6 iDb=0; t1i1
   4 Explain          0    0    0 SEARCH TABLE t1i1 USING INTEGER PRIMARY KEY (rowid=?) 00 
   5 Integer          4    3    0               00 r[3]=4
REG[3] =  i:4
   6 MustBeInt        3   10    0               00 
REG[3] =  i:4
   7 NotExists        0   10    3               00 intkey=r[3]; pk
REG[3] =  i:4
  10 Close            0    0    0               00 
  11 ResultRow        1    1    0               00 output=r[1]
REG[1] =  i:0
  12 Halt             0    0    0               00 
SQL: [;
;pragma collation_list;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Integer          0    1    0               00 r[1]=0
REG[1] =  i:0
   2 String8          0    2    0 RTRIM         00 r[2]='RTRIM'
REG[2] =   t5[RTRIM](8)
   3 ResultRow        1    2    0               00 output=r[1..2]
REG[1] =  i:0
REG[2] =   t5[RTRIM](8)
   4 Integer          1    1    0               00 r[1]=1
REG[1] =  i:1
   5 String8          0    2    0 NOCASE        00 r[2]='NOCASE'
REG[2] =   t6[NOCASE](8)
   6 ResultRow        1    2    0               00 output=r[1..2]
REG[1] =  i:1
REG[2] =   t6[NOCASE](8)
   7 Integer          2    1    0               00 r[1]=2
REG[1] =  i:2
   8 String8          0    2    0 BINARY        00 r[2]='BINARY'
REG[2] =   t6[BINARY](8)
   9 ResultRow        1    2    0               00 output=r[1..2]
REG[1] =  i:2
REG[2] =   t6[BINARY](8)
  10 Halt             0    0    0               00 
SQL: [;INSERT INTO c ( abc, abc ) VALUES ( 'C1.1', 'abc for C1.1' );]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    1    5 2             01 usesStmtJournal=0
  12 TableLock        0    3    1 c             00 iDb=0 root=3 write=1
  13 Null             0    3    0               00 r[3]=NULL
REG[3] =  NULL
  14 Goto             0    1    0               00 
   1 Integer          0    4    0               00 r[4]=0
REG[4] =  i:0
   2 OpenWrite        0    3    0 2             00 root=3 iDb=0; c
   3 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   4 String8          0    2    0 C1.1          00 r[2]='C1.1'
REG[2] =   t4[C1.1](8)
   5 MakeRecord       2    2    5               00 r[5]=mkrec(r[2..3])
REG[5] =  s7[03150043312E31...C1.1](8)
   6 Insert           0    5    1 c             1B intkey=r[1] data=r[5]
REG[5] =  s7[03150043312E31...C1.1](8)
REG[1] =  i:1
   7 AddImm           4    1    0               00 r[4]=r[4]+1
REG[4] =  i:0
   8 Close            0    0    0               00 
   9 ResultRow        4    1    0               00 output=r[4]
REG[4] =  i:1
  10 Halt             0    0    0               00 
SQL: [;
;SELECT * FROM t1i1 WHERE rowid==11
  
;]
VDBE Trace:
   0 Init             0   11    0               00 Start at 11
  11 Transaction      0    0    5 2             01 usesStmtJournal=0
  12 TableLock        0    6    0 t1i1          00 iDb=0 root=6 write=0
  13 Goto             0    1    0               00 
   1 OpenRead         0    6    0 2             00 root=6 iDb=0; t1i1
   2 Explain          0    0    0 SEARCH TABLE t1i1 USING INTEGER PRIMARY KEY (rowid=?) 00 
   3 Integer         11    1    0               00 r[1]=11
REG[1] =  i:11
   4 MustBeInt        1    9    0               00 
REG[1] =  i:11
   5 NotExists        0    9    1               00 intkey=r[1]; pk
REG[1] =  i:11
   9 Close            0    0    0               00 
  10 Halt             0    0    0               00 
SQL: [;
;SELECT printf('(%!.3Q)','הנה מה־טוב ומה־נעים שבת אחים גם־יחד');]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 String8          0    2    0 (%!.3Q)       00 r[2]='(%!.3Q)'
REG[2] =   t7[(%!.3Q)](8)
   5 String8          0    3    0 הנה מה־טוב ומה־נעים שבת אחים גם־יחד 00 r[3]='הנה מה־טוב ומה־נעים שבת אחים גם־יחד'
REG[3] =   t65[...... ........](8)
   6 Goto             0    1    0               00 
   1 Function0        3    2    1 printf(-1)    02 r[1]=func(r[2..3])
REG[2] =   t7[(%!.3Q)](8)
REG[3] =   t65[...... ........](8)
REG[1] =   s7[('...')](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s7[('...')](8)
   3 Halt             0    0    0               00 
SQL: [;INSERT INTO w ( r1, r1, r1 )
       VALUES ( 2, 'C1.2', 'C2.2' );]
VDBE Trace:
   0 Init             0   13    0               00 Start at 13
  13 Transaction      0    1    5 2             01 usesStmtJournal=0
  14 TableLock        0    4    1 w             00 iDb=0 root=4 write=1
  15 Goto             0    1    0               00 
   1 Integer          0    3    0               00 r[3]=0
REG[3] =  i:0
   2 OpenWrite        0    4    0 1             00 root=4 iDb=0; w
   3 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   4 Integer          2    2    0               00 r[2]=2
REG[2] =  i:2
   5 Ne               2    7    2 (BINARY)      52 if r[2]!=r[2] goto 7

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007fd661005859 in __GI_abort () at abort.c:79
#2  0x00007fd661005729 in __assert_fail_base (fmt=0x7fd66119b588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=<optimized out>)
    at assert.c:92
#3  0x00007fd661016fd6 in __GI___assert_fail (assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=0x21067c "int sqlite3VdbeMemStringify(Mem *, u8, u8)") at assert.c:101
#4  0x000000000027a9de in sqlite3VdbeMemStringify (pMem=0x1ac05d0, enc=1 '\001', bForce=1 '\001') at sqlite3.c:68526
#5  0x00000000003c7fc0 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:78710
#6  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#7  0x000000000024b5e9 in main (argc=1, argv=0x7fffa13f6e48) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 28515] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
