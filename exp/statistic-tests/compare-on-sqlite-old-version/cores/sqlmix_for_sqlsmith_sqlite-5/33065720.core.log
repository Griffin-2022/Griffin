GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000117,sig:06,src:020278+021897,time:3583542,execs:529929,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_trace=on;]
VDBE Trace:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;
;SELECT printf('(%2c)',char(1513));]
VDBE Trace:
   0 Init             0    4    0               00 Start at 4
   4 String8          0    2    0 (%2c)         00 r[2]='(%2c)'
REG[2] =   t5[(%2c)](8)
   5 Integer       1513    4    0               00 r[4]=1513
REG[4] =  i:1513
   6 Function0        1    4    3 char(-1)      01 r[3]=func(r[4])
REG[4] =  i:1513
REG[3] =   z2[..](8)
   7 Goto             0    1    0               00 
   1 Function0        3    2    1 printf(-1)    02 r[1]=func(r[2..3])
REG[2] =   t5[(%2c)](8)
REG[3] =   z2[..](8)
REG[1] =   s4[( .)](8)
   2 ResultRow        1    1    0               00 output=r[1]
REG[1] =   s4[( .)](8)
   3 Halt             0    0    0               00 
SQL: [SELECT count(*) FROM t1 WHERE 1+(a IN ('abc','xyz'))==2
    
;]
VDBE Trace:
   0 Init             0   24    0               00 Start at 24
  24 Transaction      0    0    1 0             01 usesStmtJournal=0
  25 TableLock        0    2    0 t1            00 iDb=0 root=2 write=0
  26 Integer          1    3    0               00 r[3]=1
REG[3] =  i:1
  27 String8          0    7    0 abc           00 r[7]='abc'
REG[7] =   t3[abc](8)
  28 String8          0    8    0 xyz           00 r[8]='xyz'
REG[8] =   t3[xyz](8)
  29 Integer          2    9    0               00 r[9]=2
REG[9] =  i:2
  30 Goto             0    1    0               00 
   1 Null             0    1    1               00 r[1..1]=NULL
REG[1] =  NULL
   2 OpenRead         0    2    0 1             00 root=2 iDb=0; t1
   3 Explain          0    0    0 SCAN TABLE t1 00 
   4 Rewind           0   19    0               00 
  19 Close            0    0    0               00 
  20 AggFinal         1    0    0 count(0)      00 accum=r[1] N=0
  21 Copy             1   10    0               00 r[10]=r[1]
REG[10] =  i:0
  22 ResultRow       10    1    0               00 output=r[10]
REG[10] =  i:0
  23 Halt             0    0    0               00 
SQL: [;PRAGMA integrity_check;]
VDBE Trace:
   0 Init             0   23    0               00 Start at 23
  23 Transaction      0    0    1 0             01 usesStmtJournal=0
  24 Transaction      1    0    0 0             01 usesStmtJournal=0
  25 Goto             0    1    0               00 
   1 Integer        100    1    0               00 r[1]=100
REG[1] =  i:100
   2 IfPos            1    4    0               00 if r[1]>0 then r[1]-=0, goto 4
REG[1] =  i:100
   4 IntegrityCk      2    2    1 [1]           00 
   5 IsNull           2   10    0               00 if r[2]==NULL goto 10
REG[2] =  NULL
  10 IfPos            1   12    0               00 if r[1]>0 then r[1]-=0, goto 12
REG[1] =  i:100
  12 IntegrityCk      2    1    1 ]             01 
  13 IsNull           2   18    0               00 if r[2]==NULL goto 18
REG[2] =  NULL
  18 AddImm           1 -100    0               00 r[1]=r[1]+-100
REG[1] =  i:100
  19 If               1   22    0               00 
REG[1] =  i:0
  20 String8          0    3    0 ok            00 r[3]='ok'
REG[3] =   t2[ok](8)
  21 ResultRow        3    1    0               00 output=r[3]
REG[3] =   t2[ok](8)
  22 Halt             0    0    0               00 
SQL: [INSERT INTO "main"."t1"(a,a,a,a,a) VALUES(1,0,'rallying',nullif('rallying','rallying'),'RLMC')
;]
VDBE Trace:
   0 Init             0   10    0               00 Start at 10
  10 Transaction      0    1    1 0             01 usesStmtJournal=0
  11 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  12 Goto             0    1    0               00 
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
REG[1] =  i:1
   3 Integer          1    2    0               00 r[2]=1
REG[2] =  i:1
   4 Eq               2    6    2 (BINARY)      52 if r[2]==r[2] goto 6

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f45931a9859 in __GI_abort () at abort.c:79
#2  0x00007f45931a9729 in __assert_fail_base (fmt=0x7f459333f588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=<optimized out>)
    at assert.c:92
#3  0x00007f45931bafd6 in __GI___assert_fail (assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=0x21067c "int sqlite3VdbeMemStringify(Mem *, u8, u8)") at assert.c:101
#4  0x000000000027a9de in sqlite3VdbeMemStringify (pMem=0x1e58c78, enc=1 '\001', bForce=1 '\001') at sqlite3.c:68526
#5  0x00000000003c7fc0 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:78710
#6  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#7  0x000000000024b5e9 in main (argc=1, argv=0x7fff62dfa298) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 27810] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
