GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000077,sig:06,src:020292+020221,time:2816661,execs:372461,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    0    0               00 Start at 0
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT coalesce(strftime('%H:%M:%f',1237962480.000,'unixepoch'),'NULL')
;]
VDBE Program Listing:
   0 Init             0    6    0               00 Start at 6
   1 Function0        7    2    1 strftime(-1)  03 r[1]=func(r[2..4])
   2 NotNull          1    4    0               00 if r[1]!=NULL goto 4
   3 String8          0    1    0 NULL          00 r[1]='NULL'
   4 ResultRow        1    1    0               00 output=r[1]
   5 Halt             0    0    0               00 
   6 String8          0    2    0 %H:%M:%f      00 r[2]='%H:%M:%f'
   7 Real             0    3    0 1237962480    00 r[3]=1237962480
   8 String8          0    4    0 unixepoch     00 r[4]='unixepoch'
   9 Goto             0    1    0               00 
SQL: [;CREATE TABLE c(abc INTEGER PRIMARY KEY,t2);]
VDBE Program Listing:
   0 Init             0   30    0               00 Start at 30
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    3               00 
   5 CreateTable      0    2    0               00 r[2]=root iDb=0
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain          0    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 MustBeInt        1   18    0               00 
  16 NotExists        1   18    1               00 intkey=r[1]; pk
  17 Rowid            1    5    0               00 r[5]=rowid
  18 IsNull           5   26    0               00 if r[5]==NULL goto 26
  19 String8          0    6    0 table         00 r[6]='table'
  20 String8          0    7    0 c             00 r[7]='c'
  21 String8          0    8    0 c             00 r[8]='c'
  22 Copy             2    9    0               00 r[9]=r[2]
  23 String8          0   10    0 CREATE TABLE c(abc INTEGER PRIMARY KEY,t2) 00 r[10]='CREATE TABLE c(abc INTEGER PRIMARY KEY,t2)'
  24 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  25 Insert           1   11    5               00 intkey=r[5] data=r[11]
  26 Close            1    0    0               00 
  27 SetCookie        0    1    3               00 
  28 ParseSchema      0    0    0 tbl_name='c' AND type!='trigger' 00 
  29 Halt             0    0    0               00 
  30 Transaction      0    1    2 1             01 usesStmtJournal=0
  31 TableLock        0    1    1 sqlite_master 00 iDb=0 root=1 write=1
  32 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          0    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[2]!=r[1] goto 13
   7 Column           0    0    3               00 r[3]=sqlite_master.type
   8 Eq               4   13    3 (BINARY)      52 if r[4]==r[3] goto 13
   9 Column           0    1    5               00 r[5]=sqlite_master.name
  10 Column           0    3    6               00 r[6]=sqlite_master.rootpage
  11 Column           0    4    7               00 r[7]=sqlite_master.sql
  12 ResultRow        5    3    0               00 output=r[5..7]
  13 Next             0    5    0               01 
  14 Close            0    0    0               00 
  15 Halt             0    0    0               00 
  16 Transaction      0    0    3 1             00 usesStmtJournal=0
  17 TableLock        0    1    0 sqlite_master 00 iDb=0 root=1 write=0
  18 String8          0    2    0 c             00 r[2]='c'
  19 String8          0    4    0 trigger       00 r[4]='trigger'
  20 Goto             0    1    0               00 
SQL: [;INSERT INTO t1(a) VALUES(x'0123456789abcdef0123456789abcdef0123456789');]
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Blob            21    2    0 #Eg‰«Íï#Eg‰«Íï#Eg‰ 00 r[2]=#Eg‰«Íï#Eg‰«Íï#Eg‰ (len=21)
   4 Lt               2    6    2 (BINARY)      42 if r[2]<r[2] goto 6
   5 Le               4    7    2 (BINARY)      52 if r[4]<=r[2] goto 7
   6 Halt           275    2    0 t1            03 
   7 MakeRecord       2    1    3 B             00 r[3]=mkrec(r[2])
   8 Insert           0    3    1 t1            1B intkey=r[1] data=r[3]
   9 Noop             0    0    0               00 
  10 Halt             0    0    0               00 
  11 Transaction      0    1    3 1             01 usesStmtJournal=0
  12 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  13 Integer       999999    4    0               00 r[4]=999999
  14 Goto             0    1    0               00 
SQL: [;INSERT INTO t1(a) VALUES(NULL);]
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 OpenWrite        0    2    0 1             00 root=2 iDb=0; t1
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Null             0    2    0               00 r[2]=NULL
   4 Lt               2    6    2 (BINARY)      42 if r[2]<r[2] goto 6
   5 Le               4    7    2 (BINARY)      52 if r[4]<=r[2] goto 7
   6 Halt           275    2    0 t1            03 
   7 MakeRecord       2    1    3 B             00 r[3]=mkrec(r[2])
   8 Insert           0    3    1 t1            1B intkey=r[1] data=r[3]
   9 Noop             0    0    0               00 
  10 Halt             0    0    0               00 
  11 Transaction      0    1    3 1             01 usesStmtJournal=0
  12 TableLock        0    2    1 t1            00 iDb=0 root=2 write=1
  13 Integer       999999    4    0               00 r[4]=999999
  14 Goto             0    1    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f2994070859 in __GI_abort () at abort.c:79
#2  0x00007f2994070729 in __assert_fail_base (fmt=0x7f2994206588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=<optimized out>)
    at assert.c:92
#3  0x00007f2994081fd6 in __GI___assert_fail (assertion=0x20a915 "!(fg&(MEM_Str|MEM_Blob))", file=0x222c23 "sqlite3.c", line=68526, function=0x21067c "int sqlite3VdbeMemStringify(Mem *, u8, u8)") at assert.c:101
#4  0x000000000027a9de in sqlite3VdbeMemStringify (pMem=0x136c268, enc=3 '\003', bForce=1 '\001') at sqlite3.c:68526
#5  0x00000000003c7fc0 in sqlite3VdbeExec (p=<optimized out>) at sqlite3.c:78710
#6  0x000000000028b140 in sqlite3_step (pStmt=<optimized out>) at sqlite3.c:75131
#7  0x000000000024b5e9 in main (argc=1, argv=0x7ffe14224d48) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 27462] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
