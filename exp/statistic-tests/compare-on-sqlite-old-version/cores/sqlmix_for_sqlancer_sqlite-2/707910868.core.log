GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000124,sig:06,src:020561+011022,time:1672863,execs:199708,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;PRAGMA sql_trace=off;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT c0, ntile(3) OVER (ORDER BY c0) FROM t0

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Integer          3    6    0               00 r[6]=3
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 ntile(1)      01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    2 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL: [SELECT c0, ntile(4) OVER (ORDER BY c0) FROM t0

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Integer          4    6    0               00 r[6]=4
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 ntile(1)      01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    2 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL: [SELECT c0, ntile(5) OVER (ORDER BY c0) FROM t0

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Integer          5    6    0               00 r[6]=5
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 ntile(1)      01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    2 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL: [SELECT c0, ntile(7) OVER (ORDER BY c0) FROM t0

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Integer          7    6    0               00 r[6]=7
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 ntile(1)      01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    2 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL: [;SELECT * FROM t0 WHERE c0=1;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 OpenRead         1    3    0 k(2,,)        02 root=3 iDb=0; sqlite_autoindex_t0_1
   2 Explain          2    0    0 SEARCH TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 (c0=?) 00 
   3 Integer          1    1    0               00 r[1]=1
   4 Affinity         1    1    0 B             00 affinity(r[1])
   5 SeekGE           1    9    1 1             00 key=r[1]
   6 IdxGT            1    9    1 1             00 key=r[1]
   7 Column           1    0    2               00 r[2]=t0.c0
   8 ResultRow        2    1    0               00 output=r[2]
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Goto             0    1    0               00 
SQL: [PRAGMA optimize 
;]
VDBE Program Listing:
   0 Init             0    3    0               00 Start at 3
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
   3 Transaction      0    0    2 0             01 usesStmtJournal=0
   4 Goto             0    1    0               00 
SQL: [;-- 2
    CREATE TABLE preceding(t1, x, PRIMARY KEY(t1, x));]
VDBE Program Listing:
   0 Init             0   39    0               00 Start at 39
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Noop             0   22    0               00 
  12 CreateBtree      0    4    2               00 r[4]=root iDb=0 flags=2
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 NewRowid         1    5    0               00 r[5]=rowid
  15 String8          0    6    0 index         00 r[6]='index'
  16 String8          0    7    0 sqlite_autoindex_preceding_1 00 r[7]='sqlite_autoindex_preceding_1'
  17 String8          0    8    0 preceding     00 r[8]='preceding'
  18 Copy             4    9    0               00 r[9]=r[4]
  19 Null             0   10    0               00 r[10]=NULL
  20 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  21 Insert           1   11    5               18 intkey=r[5] data=r[11]
  22 Close            0    0    0               00 
  23 Null             0   12   13               00 r[12..13]=NULL
  24 OpenWrite        2    1    0 5             00 root=1 iDb=0; sqlite_master
  25 Explain         25    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  26 SeekRowid        2   28    1               00 intkey=r[1]
  27 Rowid            2   13    0               00 r[13]=rowid
  28 IsNull          13   36    0               00 if r[13]==NULL goto 36
  29 String8          0   14    0 table         00 r[14]='table'
  30 String8          0   15    0 preceding     00 r[15]='preceding'
  31 String8          0   16    0 preceding     00 r[16]='preceding'
  32 Copy             2   17    0               00 r[17]=r[2]
  33 String8          0   18    0 CREATE TABLE preceding(t1, x, PRIMARY KEY(t1, x)) 00 r[18]='CREATE TABLE preceding(t1, x, PRIMARY KEY(t1, x))'
  34 MakeRecord      14    5   19 BBBDB         00 r[19]=mkrec(r[14..18])
  35 Insert           2   19   13               00 intkey=r[13] data=r[19]
  36 SetCookie        0    1    3               00 
  37 ParseSchema      0    0    0 tbl_name='preceding' AND type!='trigger' 00 
  38 Halt             0    0    0               00 
  39 Transaction      0    1    2 0             01 usesStmtJournal=0
  40 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    3 0             00 usesStmtJournal=0
  16 String8          0    2    0 preceding     00 r[2]='preceding'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [SELECT following, ntile(12) OVER (ORDER BY following) FROM v0

;]
VDBE Program Listing:
   0 Init             0   69    0               00 Start at 69
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  10 Explain         10    7    0 SCAN TABLE v0 00 
  11 Rewind           0   18    0               00 
  12 Column           0    1    5               00 r[5]=v0.following
  13 Integer         12    6    0               00 r[6]=12
  14 Column           0    1    4               00 r[4]=v0.following
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
  16 SorterInsert     6    8    4 3             00 key=r[8]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    2    7               00 r[7]=
  23 Column           7    0    6               00 r[6]=
  24 Column           7    1    5               00 r[5]=
  25 Yield            3    0    0               00 
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
  28 Integer          1   10    0               00 r[10]=1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   48    0               00 next row of subquery_2
  32 Copy             5   12    0               00 r[12]=r[5]
  33 Copy             6   13    0               00 r[13]=r[6]
  34 Copy             7   14    0               00 r[14]=r[7]
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  36 NewRowid         2   16    0               00 r[16]=rowid
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
  38 Ne              10   44   16               00 if r[16]!=r[10] goto 44
  39 Null             0    1    0               00 r[1]=NULL
  40 Rewind           3    1    0               00 
  41 Rewind           1    1    0               00 
  42 Rewind           4    1    0               00 
  43 Goto             0   47    0               00 
  44 Column           4    2   17               00 r[17]=
  45 AggStep          0   17    1 ntile(1)      01 accum=r[1] step(r[17])
  46 Next             4   47    0               00 
  47 Goto             0   31    0               00 
  48 Rewind           2   61    0               00 
  49 Column           4    2   17               00 r[17]=
  50 AggStep          0   17    1 ntile(1)      01 accum=r[1] step(r[17])
  51 Next             4   52    0               00 
  52 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  53 Gosub           11   63    0               00 
  54 Next             1   56    0               00 
  55 Goto             0   61    0               00 
  56 Column           3    2   17               00 r[17]=
  57 AggInverse       1   17    1 ntile(1)      01 accum=r[1] inverse(r[17])
  58 Delete           3    0    0               02 
  59 Next             3   60    0               00 
  60 Goto             0   52    0               00 
  61 ResetSorter      1    0    0               00 
  62 Goto             0   68    0               00 
  63 Noop             0    0    0               00 inner-loop subroutine
  64 Column           1    0   18               00 r[18]=
  65 Copy             2   19    0               00 r[19]=r[2]
  66 ResultRow       18    2    0               00 output=r[18..19]
  67 Return          11    0    0               00 end inner-loop subroutine
  68 Halt             0    0    0               00 
  69 Transaction      0    0    3 0             01 usesStmtJournal=0
  70 Goto             0    1    0               00 
SQL: [SELECT c0, ntile(13) OVER (ORDER BY c0) FROM t0

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Integer         13    6    0               00 r[6]=13
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 ntile(1)      01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    3 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL: [SELECT over, ntile(14) OVER (ORDER BY over) FROM v0

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  10 Explain         10    7    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=v0.over
  13 Column           7    0    5               00 r[5]=v0.over
  14 Integer         14    6    0               00 r[6]=14
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 ntile(1)      01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    3 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL: [SELECT following, ntile(15) OVER (ORDER BY following) FROM v0

;]
VDBE Program Listing:
   0 Init             0   69    0               00 Start at 69
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  10 Explain         10    7    0 SCAN TABLE v0 00 
  11 Rewind           0   18    0               00 
  12 Column           0    1    5               00 r[5]=v0.following
  13 Integer         15    6    0               00 r[6]=15
  14 Column           0    1    4               00 r[4]=v0.following
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
  16 SorterInsert     6    8    4 3             00 key=r[8]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    2    7               00 r[7]=
  23 Column           7    0    6               00 r[6]=
  24 Column           7    1    5               00 r[5]=
  25 Yield            3    0    0               00 
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
  28 Integer          1   10    0               00 r[10]=1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   48    0               00 next row of subquery_2
  32 Copy             5   12    0               00 r[12]=r[5]
  33 Copy             6   13    0               00 r[13]=r[6]
  34 Copy             7   14    0               00 r[14]=r[7]
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  36 NewRowid         2   16    0               00 r[16]=rowid
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
  38 Ne              10   44   16               00 if r[16]!=r[10] goto 44
  39 Null             0    1    0               00 r[1]=NULL
  40 Rewind           3    1    0               00 
  41 Rewind           1    1    0               00 
  42 Rewind           4    1    0               00 
  43 Goto             0   47    0               00 
  44 Column           4    2   17               00 r[17]=
  45 AggStep          0   17    1 ntile(1)      01 accum=r[1] step(r[17])
  46 Next             4   47    0               00 
  47 Goto             0   31    0               00 
  48 Rewind           2   61    0               00 
  49 Column           4    2   17               00 r[17]=
  50 AggStep          0   17    1 ntile(1)      01 accum=r[1] step(r[17])
  51 Next             4   52    0               00 
  52 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  53 Gosub           11   63    0               00 
  54 Next             1   56    0               00 
  55 Goto             0   61    0               00 
  56 Column           3    2   17               00 r[17]=
  57 AggInverse       1   17    1 ntile(1)      01 accum=r[1] inverse(r[17])
  58 Delete           3    0    0               02 
  59 Next             3   60    0               00 
  60 Goto             0   52    0               00 
  61 ResetSorter      1    0    0               00 
  62 Goto             0   68    0               00 
  63 Noop             0    0    0               00 inner-loop subroutine
  64 Column           1    0   18               00 r[18]=
  65 Copy             2   19    0               00 r[19]=r[2]
  66 ResultRow       18    2    0               00 output=r[18..19]
  67 Return          11    0    0               00 end inner-loop subroutine
  68 Halt             0    0    0               00 
  69 Transaction      0    0    3 0             01 usesStmtJournal=0
  70 Goto             0    1    0               00 
SQL: [SELECT c0, ntile(16) OVER (ORDER BY c0) FROM t0

;]
VDBE Program Listing:
   0 Init             0   59    0               00 Start at 59
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Integer         16    6    0               00 r[6]=16
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 Explain         19    0    0 SCAN SUBQUERY 2 00 
  20 InitCoroutine    3    0    7               00 
  21 Yield            3   38    0               00 next row of subquery_2
  22 Copy             4    9    0               00 r[9]=r[4]
  23 Copy             5   10    0               00 r[10]=r[5]
  24 Copy             6   11    0               00 r[11]=r[6]
  25 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  26 NewRowid         2   13    0               00 r[13]=rowid
  27 Insert           2   12   13               00 intkey=r[13] data=r[12]
  28 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  29 Null             0    1    0               00 r[1]=NULL
  30 Rewind           3    1    0               00 
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           4    2   14               00 r[14]=
  35 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  36 Next             4   37    0               00 
  37 Goto             0   21    0               00 
  38 Rewind           2   51    0               00 
  39 Column           4    2   14               00 r[14]=
  40 AggStep          0   14    1 ntile(1)      01 accum=r[1] step(r[14])
  41 Next             4   42    0               00 
  42 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             1   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           3    2   14               00 r[14]=
  47 AggInverse       1   14    1 ntile(1)      01 accum=r[1] inverse(r[14])
  48 Delete           3    0    0               02 
  49 Next             3   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      1    0    0               00 
  52 Goto             0   58    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Column           1    0   15               00 r[15]=
  55 Copy             2   16    0               00 r[16]=r[2]
  56 ResultRow       15    2    0               00 output=r[15..16]
  57 Return           8    0    0               00 end inner-loop subroutine
  58 Halt             0    0    0               00 
  59 Transaction      0    0    3 0             01 usesStmtJournal=0
  60 Goto             0    1    0               00 
SQL: [SELECT following, ntile(18) OVER (ORDER BY following) FROM v0

;]
VDBE Program Listing:
   0 Init             0   69    0               00 Start at 69
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  10 Explain         10    7    0 SCAN TABLE v0 00 
  11 Rewind           0   18    0               00 
  12 Column           0    1    5               00 r[5]=v0.following
  13 Integer         18    6    0               00 r[6]=18
  14 Column           0    1    4               00 r[4]=v0.following
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
  16 SorterInsert     6    8    4 3             00 key=r[8]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    2    7               00 r[7]=
  23 Column           7    0    6               00 r[6]=
  24 Column           7    1    5               00 r[5]=
  25 Yield            3    0    0               00 
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
  28 Integer          1   10    0               00 r[10]=1
  29 Explain         29    0    0 SCAN SUBQUERY 2 00 
  30 InitCoroutine    3    0    7               00 
  31 Yield            3   48    0               00 next row of subquery_2
  32 Copy             5   12    0               00 r[12]=r[5]
  33 Copy             6   13    0               00 r[13]=r[6]
  34 Copy             7   14    0               00 r[14]=r[7]
  35 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  36 NewRowid         2   16    0               00 r[16]=rowid
  37 Insert           2   15   16               00 intkey=r[16] data=r[15]
  38 Ne              10   44   16               00 if r[16]!=r[10] goto 44
  39 Null             0    1    0               00 r[1]=NULL
  40 Rewind           3    1    0               00 
  41 Rewind           1    1    0               00 
  42 Rewind           4    1    0               00 
  43 Goto             0   47    0               00 
  44 Column           4    2   17               00 r[17]=
  45 AggStep          0   17    1 ntile(1)      01 accum=r[1] step(r[17])
  46 Next             4   47    0               00 
  47 Goto             0   31    0               00 
  48 Rewind           2   61    0               00 
  49 Column           4    2   17               00 r[17]=
  50 AggStep          0   17    1 ntile(1)      01 accum=r[1] step(r[17])
  51 Next             4   52    0               00 
  52 AggValue         1    1    2 ntile(1)      00 r[2]=value N=1
  53 Gosub           11   63    0               00 
  54 Next             1   56    0               00 
  55 Goto             0   61    0               00 
  56 Column           3    2   17               00 r[17]=
  57 AggInverse       1   17    1 ntile(1)      01 accum=r[1] inverse(r[17])
  58 Delete           3    0    0               02 
  59 Next             3   60    0               00 
  60 Goto             0   52    0               00 
  61 ResetSorter      1    0    0               00 
  62 Goto             0   68    0               00 
  63 Noop             0    0    0               00 inner-loop subroutine
  64 Column           1    0   18               00 r[18]=
  65 Copy             2   19    0               00 r[19]=r[2]
  66 ResultRow       18    2    0               00 output=r[18..19]
  67 Return          11    0    0               00 end inner-loop subroutine
  68 Halt             0    0    0               00 
  69 Transaction      0    0    3 0             01 usesStmtJournal=0
  70 Goto             0    1    0               00 
SQL: [DROP TABLE IF EXISTS t4;]
VDBE Program Listing:
   0 Init             0    2    0               00 Start at 2
   1 Halt             0    0    0               00 
   2 Transaction      0    0    3 0             01 usesStmtJournal=0
   3 Transaction      1    0    0 0             01 usesStmtJournal=0
   4 Goto             0    1    0               00 
SQL: [;CREATE TABLE test001(last_field INTEGER PRIMARY KEY, test002 TEXT, field1 INTEGER);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 test001       00 r[7]='test001'
  20 String8          0    8    0 test001       00 r[8]='test001'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE test001(last_field INTEGER PRIMARY KEY, test002 TEXT, field1 INTEGER) 00 r[10]='CREATE TABLE test001(last_field INTEGER PRIMARY KEY, test002 TEXT, field1 INTEGER)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    4               00 
  26 ParseSchema      0    0    0 tbl_name='test001' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    3 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    4 0             00 usesStmtJournal=0
  16 String8          0    2    0 test001       00 r[2]='test001'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO test001 VALUES(4, 'D', 10);]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 OpenWrite        0    8    0 3             00 root=8 iDb=0; test001
   2 Integer          4    1    0               00 r[1]=4
   3 NotNull          1    5    0               00 if r[1]!=NULL goto 5
   4 NewRowid         0    1    0               00 r[1]=rowid
   5 MustBeInt        1    0    0               00 
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 String8          0    3    0 D             00 r[3]='D'
   8 Integer         10    4    0               00 r[4]=10
   9 Noop             0    0    0               00 uniqueness check for ROWID
  10 Abortable        0    0    0               00 
  11 NotExists        0   13    1               00 intkey=r[1]
  12 Halt          1555    2    0 test001.last_field 02 
  13 MakeRecord       2    3    5 DBD           00 r[5]=mkrec(r[2..4])
  14 Insert           0    5    1 test001       31 intkey=r[1] data=r[5]
  15 Halt             0    0    0               00 
  16 Transaction      0    1    4 0             01 usesStmtJournal=0
  17 Goto             0    1    0               00 
SQL: [;INSERT INTO test001 VALUES(6, 'F', 1);]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 OpenWrite        0    8    0 3             00 root=8 iDb=0; test001
   2 Integer          6    1    0               00 r[1]=6
   3 NotNull          1    5    0               00 if r[1]!=NULL goto 5
   4 NewRowid         0    1    0               00 r[1]=rowid
   5 MustBeInt        1    0    0               00 
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 String8          0    3    0 F             00 r[3]='F'
   8 Integer          1    4    0               00 r[4]=1
   9 Noop             0    0    0               00 uniqueness check for ROWID
  10 Abortable        0    0    0               00 
  11 NotExists        0   13    1               00 intkey=r[1]
  12 Halt          1555    2    0 test001.last_field 02 
  13 MakeRecord       2    3    5 DBD           00 r[5]=mkrec(r[2..4])
  14 Insert           0    5    1 test001       31 intkey=r[1] data=r[5]
  15 Halt             0    0    0               00 
  16 Transaction      0    1    4 0             01 usesStmtJournal=0
  17 Goto             0    1    0               00 
SQL: [;INSERT INTO test001 VALUES(9, 'I', 10);]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 OpenWrite        0    8    0 3             00 root=8 iDb=0; test001
   2 Integer          9    1    0               00 r[1]=9
   3 NotNull          1    5    0               00 if r[1]!=NULL goto 5
   4 NewRowid         0    1    0               00 r[1]=rowid
   5 MustBeInt        1    0    0               00 
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 String8          0    3    0 I             00 r[3]='I'
   8 Integer         10    4    0               00 r[4]=10
   9 Noop             0    0    0               00 uniqueness check for ROWID
  10 Abortable        0    0    0               00 
  11 NotExists        0   13    1               00 intkey=r[1]
  12 Halt          1555    2    0 test001.last_field 02 
  13 MakeRecord       2    3    5 DBD           00 r[5]=mkrec(r[2..4])
  14 Insert           0    5    1 test001       31 intkey=r[1] data=r[5]
  15 Halt             0    0    0               00 
  16 Transaction      0    1    4 0             01 usesStmtJournal=0
  17 Goto             0    1    0               00 
SQL: [SELECT over, lead(over) OVER (ORDER BY over) FROM v0

;]
VDBE Program Listing:
   0 Init             0   58    0               00 Start at 58
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  10 Explain         10    7    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=v0.over
  13 Column           7    0    5               00 r[5]=v0.over
  14 Column           7    0    6               00 r[6]=v0.over
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 OpenDup          8    1    0               00 
  20 Explain         20    0    0 SCAN SUBQUERY 2 00 
  21 InitCoroutine    3    0    7               00 
  22 Yield            3   37    0               00 next row of subquery_2
  23 Copy             4    9    0               00 r[9]=r[4]
  24 Copy             5   10    0               00 r[10]=r[5]
  25 Copy             6   11    0               00 r[11]=r[6]
  26 MakeRecord       9    3   12               00 r[12]=mkrec(r[9..11])
  27 NewRowid         2   13    0               00 r[13]=rowid
  28 Insert           2   12   13               00 intkey=r[13] data=r[12]
  29 Ne               7   34   13               00 if r[13]!=r[7] goto 34
  30 Null             0    1    0               00 r[1]=NULL
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   36    0               00 
  34 Column           4    2   14               00 r[14]=
  35 Next             4   36    0               00 
  36 Goto             0   22    0               00 
  37 Rewind           2   50    0               00 
  38 Column           4    2   14               00 r[14]=
  39 Next             4   40    0               00 
  40 AggValue         1    1    2 lead(1)       00 r[2]=value N=1
  41 Null             0    2    0               00 r[2]=NULL
  42 Rowid            1   15    0               00 r[15]=rowid
  43 AddImm          15    1    0               00 r[15]=r[15]+1
  44 SeekRowid        8   46   15               00 intkey=r[15]
  45 Column           8    2    2               00 r[2]=
  46 Gosub            8   52    0               00 
  47 Next             1   49    0               00 
  48 Goto             0   50    0               00 
  49 Goto             0   40    0               00 
  50 ResetSorter      1    0    0               00 
  51 Goto             0   57    0               00 
  52 Noop             0    0    0               00 inner-loop subroutine
  53 Column           1    0   16               00 r[16]=
  54 Copy             2   17    0               00 r[17]=r[2]
  55 ResultRow       16    2    0               00 output=r[16..17]
  56 Return           8    0    0               00 end inner-loop subroutine
  57 Halt             0    0    0               00 
  58 Transaction      0    0    4 0             01 usesStmtJournal=0
  59 Goto             0    1    0               00 
SQL: [SELECT t1, lag(x, 2) OVER (ORDER BY t1) FROM preceding

;]
VDBE Program Listing:
   0 Init             0   72    0               00 Start at 72
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   19    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    6    0               00 
   9 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  10 Explain         10    7    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  11 Rewind           7   18    4 0             00 
  12 Column           7    0    4               00 r[4]=preceding.t1
  13 Column           7    0    5               00 r[5]=preceding.t1
  14 Column           7    1    6               00 r[6]=preceding.x
  15 Integer          2    7    0               00 r[7]=2
  16 Yield            3    0    0               00 
  17 Next             7   12    0               01 
  18 EndCoroutine     3    0    0               00 
  19 Integer          1    8    0               00 r[8]=1
  20 OpenDup          8    1    0               00 
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   49    0               00 next row of subquery_2
  24 Copy             4   10    0               00 r[10]=r[4]
  25 Copy             5   11    0               00 r[11]=r[5]
  26 Copy             6   12    0               00 r[12]=r[6]
  27 Copy             7   13    0               00 r[13]=r[7]
  28 MakeRecord      10    4   14               00 r[14]=mkrec(r[10..13])
  29 NewRowid         2   15    0               00 r[15]=rowid
  30 Insert           2   14   15               00 intkey=r[15] data=r[14]
  31 Ne               8   36   15               00 if r[15]!=r[8] goto 36
  32 Null             0    1    0               00 r[1]=NULL
  33 Rewind           1    1    0               00 
  34 Rewind           4    1    0               00 
  35 Goto             0   48    0               00 
  36 Column           4    2   16               00 r[16]=
  37 Column           4    3   17               00 r[17]=
  38 Next             4   39    0               00 
  39 AggValue         1    2    2 lag(2)        00 r[2]=value N=2
  40 Null             0    2    0               00 r[2]=NULL
  41 Rowid            1   18    0               00 r[18]=rowid
  42 Column           1    3   19               00 r[19]=
  43 Subtract        19   18   18               00 r[18]=r[18]-r[19]
  44 SeekRowid        8   46   18               00 intkey=r[18]
  45 Column           8    2    2               00 r[2]=
  46 Gosub            9   66    0               00 
  47 Next             1   48    0               00 
  48 Goto             0   23    0               00 
  49 Rewind           2   64    0               00 
  50 Column           4    2   16               00 r[16]=
  51 Column           4    3   17               00 r[17]=
  52 Next             4   53    0               00 
  53 AggValue         1    2    2 lag(2)        00 r[2]=value N=2
  54 Null             0    2    0               00 r[2]=NULL
  55 Rowid            1   18    0               00 r[18]=rowid
  56 Column           1    3   19               00 r[19]=
  57 Subtract        19   18   18               00 r[18]=r[18]-r[19]
  58 SeekRowid        8   60   18               00 intkey=r[18]
  59 Column           8    2    2               00 r[2]=
  60 Gosub            9   66    0               00 
  61 Next             1   63    0               00 
  62 Goto             0   64    0               00 
  63 Goto             0   53    0               00 
  64 ResetSorter      1    0    0               00 
  65 Goto             0   71    0               00 
  66 Noop             0    0    0               00 inner-loop subroutine
  67 Column           1    0   20               00 r[20]=
  68 Copy             2   21    0               00 r[21]=r[2]
  69 ResultRow       20    2    0               00 output=r[20..21]
  70 Return           9    0    0               00 end inner-loop subroutine
  71 Halt             0    0    0               00 
  72 Transaction      0    0    4 0             01 usesStmtJournal=0
  73 Goto             0    1    0               00 
SQL: [;CREATE TABLE test003(field2 INTEGER PRIMARY KEY, test004 TEXT, field3 TEXT, test005 INTEGER);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 test003       00 r[7]='test003'
  20 String8          0    8    0 test003       00 r[8]='test003'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE test003(field2 INTEGER PRIMARY KEY, test004 TEXT, field3 TEXT, test005 INTEGER) 00 r[10]='CREATE TABLE test003(field2 INTEGER PRIMARY KEY, test004 TEXT, field3 TEXT, test005 INTEGER)
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    5               00 
  26 ParseSchema      0    0    0 tbl_name='test003' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    4 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    5 0             00 usesStmtJournal=0
  16 String8          0    2    0 test003       00 r[2]='test003'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;SELECT x, nth_value(x, x) OVER (ORDER BY x) FROM preceding

;]
VDBE Program Listing:
   0 Init             0  119    0               00 Start at 119
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   30    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    6    0 k(1,B)        00 
   9 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  10 Explain         10    7    0 SCAN TABLE preceding 00 
  11 Rewind           0   19    0               00 
  12 Column           0    1    5               00 r[5]=preceding.x
  13 Column           0    1    6               00 r[6]=preceding.x
  14 Column           0    1    7               00 r[7]=preceding.x
  15 Column           0    1    4               00 r[4]=preceding.x
  16 MakeRecord       4    4    9               00 r[9]=mkrec(r[4..7])
  17 SorterInsert     6    9    4 4             00 key=r[9]
  18 Next             0   12    0               01 
  19 Explain         19    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  20 OpenPseudo       7   10    6               00 6 columns in r[10]
  21 SorterSort       6   29    0               00 
  22 SorterData       6   10    7               00 r[10]=data
  23 Column           7    0    8               00 r[8]=
  24 Column           7    3    7               00 r[7]=
  25 Column           7    2    6               00 r[6]=
  26 Column           7    1    5               00 r[5]=
  27 Yield            3    0    0               00 
  28 SorterNext       6   22    0               00 
  29 EndCoroutine     3    0    0               00 
  30 Integer          1   11    0               00 r[11]=1
  31 OpenDup          8    1    0               00 
  32 Explain         32    0    0 SCAN SUBQUERY 2 00 
  33 InitCoroutine    3    0    7               00 
  34 Yield            3   83    0               00 next row of subquery_2
  35 Copy             5   15    0               00 r[15]=r[5]
  36 Copy             6   16    0               00 r[16]=r[6]
  37 Copy             7   17    0               00 r[17]=r[7]
  38 Copy             8   18    0               00 r[18]=r[8]
  39 MakeRecord      15    4   19               00 r[19]=mkrec(r[15..18])
  40 NewRowid         2   20    0               00 r[20]=rowid
  41 Insert           2   19   20               00 intkey=r[20] data=r[19]
  42 Ne              11   53   20               00 if r[20]!=r[11] goto 53
  43 Null             0    1    0               00 r[1]=NULL
  44 Integer          0   12    0               00 r[12]=0
  45 Integer          0   13    0               00 r[13]=0
  46 Rewind           1    1    0               00 
  47 Rewind           4    1    0               00 
  48 Copy            16   21    0               00 r[21]=r[16]
  49 Copy            21   22    0               00 r[22]=r[21]
  50 Copy            21   23    0               00 r[23]=r[21]
  51 Copy            21   24    0               00 r[24]=r[21]
  52 Goto             0   82    0               00 
  53 Compare         21   16    1 k(1,B)        00 r[21] <-> r[16]
  54 Jump            55   82   55               00 
  55 Copy            16   21    0               00 r[21]=r[16]
  56 Column           4    2   25               00 r[25]=
  57 Column           1    3   26               00 r[26]=
  58 AddImm          13    1    0               00 r[13]=r[13]+1
  59 Next             4   61    0               00 
  60 Goto             0   65    0               00 
  61 Column           4    1   27               00 r[27]=
  62 Compare         24   27    1 k(1,B)        00 r[24] <-> r[27]
  63 Jump            64   56   64               00 
  64 Copy            27   24    0               00 r[24]=r[27]
  65 Null             0    2    0               00 r[2]=NULL
  66 Column           1    3   27               00 r[27]=
  67 Integer          0   28    0               00 r[28]=0
  68 MustBeInt       27   70    0               00 
  69 Gt              28   71   27               00 if r[27]>r[28] goto 71
  70 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
  71 Add             27   12   27               00 r[27]=r[27]+r[12]
  72 Gt              13   75   27               00 if r[27]>r[13] goto 75
  73 SeekRowid        8    0   27               00 intkey=r[27]
  74 Column           8    2    2               00 r[2]=
  75 Gosub           14  113    0               00 
  76 Next             1   78    0               00 
  77 Goto             0   82    0               00 
  78 Column           1    1   27               00 r[27]=
  79 Compare         23   27    1 k(1,B)        00 r[23] <-> r[27]
  80 Jump            81   65   81               00 
  81 Copy            27   23    0               00 r[23]=r[27]
  82 Goto             0   34    0               00 
  83 Rewind           2  111    0               00 
  84 Column           4    2   25               00 r[25]=
  85 Column           1    3   26               00 r[26]=
  86 AddImm          13    1    0               00 r[13]=r[13]+1
  87 Next             4   89    0               00 
  88 Goto             0   93    0               00 
  89 Column           4    1   27               00 r[27]=
  90 Compare         24   27    1 k(1,B)        00 r[24] <-> r[27]
  91 Jump            92   84   92               00 
  92 Copy            27   24    0               00 r[24]=r[27]
  93 Null             0    2    0               00 r[2]=NULL
  94 Column           1    3   27               00 r[27]=
  95 Integer          0   28    0               00 r[28]=0
  96 MustBeInt       27   98    0               00 
  97 Gt              28   99   27               00 if r[27]>r[28] goto 99
  98 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
  99 Add             27   12   27               00 r[27]=r[27]+r[12]
 100 Gt              13  103   27               00 if r[27]>r[13] goto 103
 101 SeekRowid        8    0   27               00 intkey=r[27]
 102 Column           8    2    2               00 r[2]=
 103 Gosub           14  113    0               00 
 104 Next             1  106    0               00 
 105 Goto             0  111    0               00 
 106 Column           1    1   27               00 r[27]=
 107 Compare         23   27    1 k(1,B)        00 r[23] <-> r[27]
 108 Jump           109   93  109               00 
 109 Copy            27   23    0               00 r[23]=r[27]
 110 Goto             0   93    0               00 
 111 ResetSorter      1    0    0               00 
 112 Goto             0  118    0               00 
 113 Noop             0    0    0               00 inner-loop subroutine
 114 Column           1    0   29               00 r[29]=
 115 Copy             2   30    0               00 r[30]=r[2]
 116 ResultRow       29    2    0               00 output=r[29..30]
 117 Return          14    0    0               00 end inner-loop subroutine
 118 Halt             0    0    0               00 
 119 Transaction      0    0    5 0             01 usesStmtJournal=0
 120 Goto             0    1    0               00 
SQL: [SELECT c0, nth_value(c0, c0) OVER (PARTITION BY c0 ORDER BY c0) FROM t0

;]
VDBE Program Listing:
   0 Init             0  140    0               00 Start at 140
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   43    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   27    4 0             00 
  12 Column           7    0    6               00 r[6]=t0.c0
  13 Column           7    0    7               00 r[7]=t0.c0
  14 Column           7    0    8               00 r[8]=t0.c0
  15 Column           7    0    9               00 r[9]=t0.c0
  16 Column           7    0    4               00 r[4]=t0.c0
  17 Column           7    0    5               00 r[5]=t0.c0
  18 MakeRecord       5    5   11               00 r[11]=mkrec(r[5..9])
  19 SequenceTest     6   24    0               00 if( cursor[6].ctr++ ) pc = 24
  20 Compare         12    4    1 k(2,B,B)      00 r[12] <-> r[4]
  21 Jump            22   25   22               00 
  22 Gosub           13   30    0               00 
  23 ResetSorter      6    0    0               00 
  24 Move             4   12    1               00 r[12]=r[4]
  25 SorterInsert     6   11    5 5             00 key=r[11]
  26 Next             7   12    0               01 
  27 Explain         27    7    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  28 Gosub           13   30    0               00 
  29 Goto             0   42    0               00 
  30 Once             0   32    0               00 
  31 OpenPseudo       8   14    7               00 7 columns in r[14]
  32 SorterSort       6   42    0               00 
  33 SorterData       6   14    8               00 r[14]=data
  34 Column           8    0   10               00 r[10]=
  35 Column           8    4    9               00 r[9]=
  36 Column           8    3    8               00 r[8]=
  37 Column           8    2    7               00 r[7]=
  38 Column           8    1    6               00 r[6]=
  39 Yield            3    0    0               00 
  40 SorterNext       6   33    0               00 
  41 Return          13    0    0               00 
  42 EndCoroutine     3    0    0               00 
  43 Null             0   15   15               00 r[15..15]=NULL
  44 Integer          1   16    0               00 r[16]=1
  45 OpenDup          9    1    0               00 
  46 Explain         46    0    0 SCAN SUBQUERY 2 00 
  47 InitCoroutine    3    0    7               00 
  48 Yield            3  102    0               00 next row of subquery_2
  49 Copy             6   20    0               00 r[20]=r[6]
  50 Copy             7   21    0               00 r[21]=r[7]
  51 Copy             8   22    0               00 r[22]=r[8]
  52 Copy             9   23    0               00 r[23]=r[9]
  53 Copy            10   24    0               00 r[24]=r[10]
  54 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  55 Compare         21   15    1 k(1,B)        00 r[21] <-> r[15]
  56 Jump            57   59   57               00 
  57 Gosub           31  103    0               00 call flush_partition
  58 Copy            21   15    0               00 r[15]=r[21]
  59 NewRowid         2   26    0               00 r[26]=rowid
  60 Insert           2   25   26               00 intkey=r[26] data=r[25]
  61 Ne              16   72   26               00 if r[26]!=r[16] goto 72
  62 Null             0    1    0               00 r[1]=NULL
  63 Integer          0   17    0               00 r[17]=0
  64 Integer          0   18    0               00 r[18]=0
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Copy            22   27    0               00 r[27]=r[22]
  68 Copy            27   28    0               00 r[28]=r[27]
  69 Copy            27   29    0               00 r[29]=r[27]
  70 Copy            27   30    0               00 r[30]=r[27]
  71 Goto             0  101    0               00 
  72 Compare         27   22    1 k(1,B)        00 r[27] <-> r[22]
  73 Jump            74  101   74               00 
  74 Copy            22   27    0               00 r[27]=r[22]
  75 Column           4    3   32               00 r[32]=
  76 Column           1    4   33               00 r[33]=
  77 AddImm          18    1    0               00 r[18]=r[18]+1
  78 Next             4   80    0               00 
  79 Goto             0   84    0               00 
  80 Column           4    2   34               00 r[34]=
  81 Compare         30   34    1 k(1,B)        00 r[30] <-> r[34]
  82 Jump            83   75   83               00 
  83 Copy            34   30    0               00 r[30]=r[34]
  84 Null             0    2    0               00 r[2]=NULL
  85 Column           1    4   34               00 r[34]=
  86 Integer          0   35    0               00 r[35]=0
  87 MustBeInt       34   89    0               00 
  88 Gt              35   90   34               00 if r[34]>r[35] goto 90
  89 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
  90 Add             34   17   34               00 r[34]=r[34]+r[17]
  91 Gt              18   94   34               00 if r[34]>r[18] goto 94
  92 SeekRowid        9    0   34               00 intkey=r[34]
  93 Column           9    3    2               00 r[2]=
  94 Gosub           19  134    0               00 
  95 Next             1   97    0               00 
  96 Goto             0  101    0               00 
  97 Column           1    2   34               00 r[34]=
  98 Compare         29   34    1 k(1,B)        00 r[29] <-> r[34]
  99 Jump           100   84  100               00 
 100 Copy            34   29    0               00 r[29]=r[34]
 101 Goto             0   48    0               00 
 102 Integer        132   31    0               00 r[31]=132
 103 Rewind           2  131    0               00 
 104 Column           4    3   32               00 r[32]=
 105 Column           1    4   33               00 r[33]=
 106 AddImm          18    1    0               00 r[18]=r[18]+1
 107 Next             4  109    0               00 
 108 Goto             0  113    0               00 
 109 Column           4    2   34               00 r[34]=
 110 Compare         30   34    1 k(1,B)        00 r[30] <-> r[34]
 111 Jump           112  104  112               00 
 112 Copy            34   30    0               00 r[30]=r[34]
 113 Null             0    2    0               00 r[2]=NULL
 114 Column           1    4   34               00 r[34]=
 115 Integer          0   35    0               00 r[35]=0
 116 MustBeInt       34  118    0               00 
 117 Gt              35  119   34               00 if r[34]>r[35] goto 119
 118 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
 119 Add             34   17   34               00 r[34]=r[34]+r[17]
 120 Gt              18  123   34               00 if r[34]>r[18] goto 123
 121 SeekRowid        9    0   34               00 intkey=r[34]
 122 Column           9    3    2               00 r[2]=
 123 Gosub           19  134    0               00 
 124 Next             1  126    0               00 
 125 Goto             0  131    0               00 
 126 Column           1    2   34               00 r[34]=
 127 Compare         29   34    1 k(1,B)        00 r[29] <-> r[34]
 128 Jump           129  113  129               00 
 129 Copy            34   29    0               00 r[29]=r[34]
 130 Goto             0  113    0               00 
 131 ResetSorter      1    0    0               00 
 132 Return          31    0    0               00 
 133 Goto             0  139    0               00 
 134 Noop             0    0    0               00 inner-loop subroutine
 135 Column           1    0   36               00 r[36]=
 136 Copy             2   37    0               00 r[37]=r[2]
 137 ResultRow       36    2    0               00 output=r[36..37]
 138 Return          19    0    0               00 end inner-loop subroutine
 139 Halt             0    0    0               00 
 140 Transaction      0    0    5 0             01 usesStmtJournal=0
 141 Goto             0    1    0               00 
SQL: [SELECT c0, max(c0) OVER (ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 2 PRECEDING)
  FROM t0

;]
VDBE Program Listing:
   0 Init             0   99    0               00 Start at 99
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Column           7    0    6               00 r[6]=t0.c0
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 OpenEphemeral    8    2    0 k(1,B)        00 nColumn=2
  20 Integer          0    9    0               00 r[9]=0
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   77    0               00 next row of subquery_2
  24 Copy             4   12    0               00 r[12]=r[4]
  25 Copy             5   13    0               00 r[13]=r[5]
  26 Copy             6   14    0               00 r[14]=r[6]
  27 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  28 NewRowid         2   16    0               00 r[16]=rowid
  29 Insert           2   15   16               00 intkey=r[16] data=r[15]
  30 Ne               7   56   16               00 if r[16]!=r[7] goto 56
  31 Null             0    1    0               00 r[1]=NULL
  32 ResetSorter      8    0    0               00 
  33 Integer          0    9    0               00 r[9]=0
  34 Integer          1   17    0               00 r[17]=1
  35 Integer          0   20    0               00 r[20]=0
  36 MustBeInt       17   38    0               00 
  37 Ge              20   39   17               00 if r[17]>=r[20] goto 39
  38 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  39 Integer          2   18    0               00 r[18]=2
  40 Integer          0   20    0               00 r[20]=0
  41 MustBeInt       18   43    0               00 
  42 Ge              20   44   18               00 if r[18]>=r[20] goto 44
  43 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  44 Le              17   52   18               00 if r[18]<=r[17] goto 52
  45 Null             0    2    0               00 r[2]=NULL
  46 Last             8   48    0               00 
  47 Column           8    0    2               00 r[2]=
  48 Rewind           1    1    0               00 
  49 Gosub           11   93    0               00 
  50 ResetSorter      1    0    0               00 
  51 Goto             0   76    0               00 
  52 Rewind           3    1    0               00 
  53 Rewind           1    1    0               00 
  54 Rewind           4    1    0               00 
  55 Goto             0   76    0               00 
  56 IfPos           18   64    1               00 if r[18]>0 then r[18]-=1, goto 64
  57 Column           4    2   19               00 r[19]=
  58 IsNull          19   63    0               00 if r[19]==NULL goto 63
  59 AddImm           9    1    0               00 r[9]=r[9]+1
  60 SCopy           19    8    0               00 r[8]=r[19]
  61 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  62 IdxInsert        8   10    0               00 key=r[10]
  63 Next             4   64    0               00 
  64 Null             0    2    0               00 r[2]=NULL
  65 Last             8   67    0               00 
  66 Column           8    0    2               00 r[2]=
  67 Gosub           11   93    0               00 
  68 Next             1   69    0               00 
  69 IfPos           17   76    1               00 if r[17]>0 then r[17]-=1, goto 76
  70 Column           3    2   19               00 r[19]=
  71 IsNull          19   74    0               00 if r[19]==NULL goto 74
  72 SeekGE           8   74   19 1             00 key=r[19]
  73 Delete           8    0    0               00 
  74 Delete           3    0    0               02 
  75 Next             3   76    0               00 
  76 Goto             0   23    0               00 
  77 Rewind           2   91    0               00 
  78 IfPos           18   86    1               00 if r[18]>0 then r[18]-=1, goto 86
  79 Column           4    2   19               00 r[19]=
  80 IsNull          19   85    0               00 if r[19]==NULL goto 85
  81 AddImm           9    1    0               00 r[9]=r[9]+1
  82 SCopy           19    8    0               00 r[8]=r[19]
  83 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  84 IdxInsert        8   10    0               00 key=r[10]
  85 Next             4   86    0               00 
  86 Null             0    2    0               00 r[2]=NULL
  87 Last             8   89    0               00 
  88 Column           8    0    2               00 r[2]=
  89 Gosub           11   93    0               00 
  90 Next             1   91    0               00 
  91 ResetSorter      1    0    0               00 
  92 Goto             0   98    0               00 
  93 Noop             0    0    0               00 inner-loop subroutine
  94 Column           1    0   21               00 r[21]=
  95 Copy             2   22    0               00 r[22]=r[2]
  96 ResultRow       21    2    0               00 output=r[21..22]
  97 Return          11    0    0               00 end inner-loop subroutine
  98 Halt             0    0    0               00 
  99 Transaction      0    0    5 0             01 usesStmtJournal=0
 100 Goto             0    1    0               00 
SQL: [SELECT t1, max(t1) OVER (ORDER BY t1 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM preceding

;]
VDBE Program Listing:
   0 Init             0   99    0               00 Start at 99
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  10 Explain         10    7    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=preceding.t1
  13 Column           7    0    5               00 r[5]=preceding.t1
  14 Column           7    0    6               00 r[6]=preceding.t1
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 OpenEphemeral    8    2    0 k(1,B)        00 nColumn=2
  20 Integer          0    9    0               00 r[9]=0
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   77    0               00 next row of subquery_2
  24 Copy             4   12    0               00 r[12]=r[4]
  25 Copy             5   13    0               00 r[13]=r[5]
  26 Copy             6   14    0               00 r[14]=r[6]
  27 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  28 NewRowid         2   16    0               00 r[16]=rowid
  29 Insert           2   15   16               00 intkey=r[16] data=r[15]
  30 Ne               7   56   16               00 if r[16]!=r[7] goto 56
  31 Null             0    1    0               00 r[1]=NULL
  32 ResetSorter      8    0    0               00 
  33 Integer          0    9    0               00 r[9]=0
  34 Integer          1   17    0               00 r[17]=1
  35 Integer          0   20    0               00 r[20]=0
  36 MustBeInt       17   38    0               00 
  37 Ge              20   39   17               00 if r[17]>=r[20] goto 39
  38 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  39 Integer          1   18    0               00 r[18]=1
  40 Integer          0   20    0               00 r[20]=0
  41 MustBeInt       18   43    0               00 
  42 Ge              20   44   18               00 if r[18]>=r[20] goto 44
  43 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  44 Le              17   52   18               00 if r[18]<=r[17] goto 52
  45 Null             0    2    0               00 r[2]=NULL
  46 Last             8   48    0               00 
  47 Column           8    0    2               00 r[2]=
  48 Rewind           1    1    0               00 
  49 Gosub           11   93    0               00 
  50 ResetSorter      1    0    0               00 
  51 Goto             0   76    0               00 
  52 Rewind           3    1    0               00 
  53 Rewind           1    1    0               00 
  54 Rewind           4    1    0               00 
  55 Goto             0   76    0               00 
  56 IfPos           18   64    1               00 if r[18]>0 then r[18]-=1, goto 64
  57 Column           4    2   19               00 r[19]=
  58 IsNull          19   63    0               00 if r[19]==NULL goto 63
  59 AddImm           9    1    0               00 r[9]=r[9]+1
  60 SCopy           19    8    0               00 r[8]=r[19]
  61 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  62 IdxInsert        8   10    0               00 key=r[10]
  63 Next             4   64    0               00 
  64 Null             0    2    0               00 r[2]=NULL
  65 Last             8   67    0               00 
  66 Column           8    0    2               00 r[2]=
  67 Gosub           11   93    0               00 
  68 Next             1   69    0               00 
  69 IfPos           17   76    1               00 if r[17]>0 then r[17]-=1, goto 76
  70 Column           3    2   19               00 r[19]=
  71 IsNull          19   74    0               00 if r[19]==NULL goto 74
  72 SeekGE           8   74   19 1             00 key=r[19]
  73 Delete           8    0    0               00 
  74 Delete           3    0    0               02 
  75 Next             3   76    0               00 
  76 Goto             0   23    0               00 
  77 Rewind           2   91    0               00 
  78 IfPos           18   86    1               00 if r[18]>0 then r[18]-=1, goto 86
  79 Column           4    2   19               00 r[19]=
  80 IsNull          19   85    0               00 if r[19]==NULL goto 85
  81 AddImm           9    1    0               00 r[9]=r[9]+1
  82 SCopy           19    8    0               00 r[8]=r[19]
  83 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  84 IdxInsert        8   10    0               00 key=r[10]
  85 Next             4   86    0               00 
  86 Null             0    2    0               00 r[2]=NULL
  87 Last             8   89    0               00 
  88 Column           8    0    2               00 r[2]=
  89 Gosub           11   93    0               00 
  90 Next             1   91    0               00 
  91 ResetSorter      1    0    0               00 
  92 Goto             0   98    0               00 
  93 Noop             0    0    0               00 inner-loop subroutine
  94 Column           1    0   21               00 r[21]=
  95 Copy             2   22    0               00 r[22]=r[2]
  96 ResultRow       21    2    0               00 output=r[21..22]
  97 Return          11    0    0               00 end inner-loop subroutine
  98 Halt             0    0    0               00 
  99 Transaction      0    0    5 0             01 usesStmtJournal=0
 100 Goto             0    1    0               00 
SQL: [SELECT t1, max(x) OVER (ORDER BY t1 ROWS BETWEEN 0 PRECEDING AND 0 PRECEDING)
  FROM preceding

;]
VDBE Program Listing:
   0 Init             0   99    0               00 Start at 99
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  10 Explain         10    7    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=preceding.t1
  13 Column           7    0    5               00 r[5]=preceding.t1
  14 Column           7    1    6               00 r[6]=preceding.x
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 OpenEphemeral    8    2    0 k(1,B)        00 nColumn=2
  20 Integer          0    9    0               00 r[9]=0
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   77    0               00 next row of subquery_2
  24 Copy             4   12    0               00 r[12]=r[4]
  25 Copy             5   13    0               00 r[13]=r[5]
  26 Copy             6   14    0               00 r[14]=r[6]
  27 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  28 NewRowid         2   16    0               00 r[16]=rowid
  29 Insert           2   15   16               00 intkey=r[16] data=r[15]
  30 Ne               7   56   16               00 if r[16]!=r[7] goto 56
  31 Null             0    1    0               00 r[1]=NULL
  32 ResetSorter      8    0    0               00 
  33 Integer          0    9    0               00 r[9]=0
  34 Integer          0   17    0               00 r[17]=0
  35 Integer          0   20    0               00 r[20]=0
  36 MustBeInt       17   38    0               00 
  37 Ge              20   39   17               00 if r[17]>=r[20] goto 39
  38 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  39 Integer          0   18    0               00 r[18]=0
  40 Integer          0   20    0               00 r[20]=0
  41 MustBeInt       18   43    0               00 
  42 Ge              20   44   18               00 if r[18]>=r[20] goto 44
  43 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  44 Le              17   52   18               00 if r[18]<=r[17] goto 52
  45 Null             0    2    0               00 r[2]=NULL
  46 Last             8   48    0               00 
  47 Column           8    0    2               00 r[2]=
  48 Rewind           1    1    0               00 
  49 Gosub           11   93    0               00 
  50 ResetSorter      1    0    0               00 
  51 Goto             0   76    0               00 
  52 Rewind           3    1    0               00 
  53 Rewind           1    1    0               00 
  54 Rewind           4    1    0               00 
  55 Goto             0   76    0               00 
  56 IfPos           18   64    1               00 if r[18]>0 then r[18]-=1, goto 64
  57 Column           4    2   19               00 r[19]=
  58 IsNull          19   63    0               00 if r[19]==NULL goto 63
  59 AddImm           9    1    0               00 r[9]=r[9]+1
  60 SCopy           19    8    0               00 r[8]=r[19]
  61 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  62 IdxInsert        8   10    0               00 key=r[10]
  63 Next             4   64    0               00 
  64 Null             0    2    0               00 r[2]=NULL
  65 Last             8   67    0               00 
  66 Column           8    0    2               00 r[2]=
  67 Gosub           11   93    0               00 
  68 Next             1   69    0               00 
  69 IfPos           17   76    1               00 if r[17]>0 then r[17]-=1, goto 76
  70 Column           3    2   19               00 r[19]=
  71 IsNull          19   74    0               00 if r[19]==NULL goto 74
  72 SeekGE           8   74   19 1             00 key=r[19]
  73 Delete           8    0    0               00 
  74 Delete           3    0    0               02 
  75 Next             3   76    0               00 
  76 Goto             0   23    0               00 
  77 Rewind           2   91    0               00 
  78 IfPos           18   86    1               00 if r[18]>0 then r[18]-=1, goto 86
  79 Column           4    2   19               00 r[19]=
  80 IsNull          19   85    0               00 if r[19]==NULL goto 85
  81 AddImm           9    1    0               00 r[9]=r[9]+1
  82 SCopy           19    8    0               00 r[8]=r[19]
  83 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  84 IdxInsert        8   10    0               00 key=r[10]
  85 Next             4   86    0               00 
  86 Null             0    2    0               00 r[2]=NULL
  87 Last             8   89    0               00 
  88 Column           8    0    2               00 r[2]=
  89 Gosub           11   93    0               00 
  90 Next             1   91    0               00 
  91 ResetSorter      1    0    0               00 
  92 Goto             0   98    0               00 
  93 Noop             0    0    0               00 inner-loop subroutine
  94 Column           1    0   21               00 r[21]=
  95 Copy             2   22    0               00 r[22]=r[2]
  96 ResultRow       21    2    0               00 output=r[21..22]
  97 Return          11    0    0               00 end inner-loop subroutine
  98 Halt             0    0    0               00 
  99 Transaction      0    0    5 0             01 usesStmtJournal=0
 100 Goto             0    1    0               00 
SQL: [SELECT over, max(over) OVER (ORDER BY over ROWS BETWEEN 2 FOLLOWING AND 1 FOLLOWING)
  FROM v0

;]
VDBE Program Listing:
   0 Init             0  118    0               00 Start at 118
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  10 Explain         10    7    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=v0.over
  13 Column           7    0    5               00 r[5]=v0.over
  14 Column           7    0    6               00 r[6]=v0.over
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 OpenEphemeral    8    2    0 k(1,B)        00 nColumn=2
  20 Integer          0    9    0               00 r[9]=0
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   78    0               00 next row of subquery_2
  24 Copy             4   12    0               00 r[12]=r[4]
  25 Copy             5   13    0               00 r[13]=r[5]
  26 Copy             6   14    0               00 r[14]=r[6]
  27 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  28 NewRowid         2   16    0               00 r[16]=rowid
  29 Insert           2   15   16               00 intkey=r[16] data=r[15]
  30 Ne               7   57   16               00 if r[16]!=r[7] goto 57
  31 Null             0    1    0               00 r[1]=NULL
  32 ResetSorter      8    0    0               00 
  33 Integer          0    9    0               00 r[9]=0
  34 Integer          2   17    0               00 r[17]=2
  35 Integer          0   20    0               00 r[20]=0
  36 MustBeInt       17   38    0               00 
  37 Ge              20   39   17               00 if r[17]>=r[20] goto 39
  38 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  39 Integer          1   18    0               00 r[18]=1
  40 Integer          0   20    0               00 r[20]=0
  41 MustBeInt       18   43    0               00 
  42 Ge              20   44   18               00 if r[18]>=r[20] goto 44
  43 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  44 Ge              17   52   18               00 if r[18]>=r[17] goto 52
  45 Null             0    2    0               00 r[2]=NULL
  46 Last             8   48    0               00 
  47 Column           8    0    2               00 r[2]=
  48 Rewind           1    1    0               00 
  49 Gosub           11  112    0               00 
  50 ResetSorter      1    0    0               00 
  51 Goto             0   77    0               00 
  52 Subtract        17   18   17               00 r[17]=r[18]-r[17]
  53 Rewind           3    1    0               00 
  54 Rewind           1    1    0               00 
  55 Rewind           4    1    0               00 
  56 Goto             0   77    0               00 
  57 Column           4    2   19               00 r[19]=
  58 IsNull          19   63    0               00 if r[19]==NULL goto 63
  59 AddImm           9    1    0               00 r[9]=r[9]+1
  60 SCopy           19    8    0               00 r[8]=r[19]
  61 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  62 IdxInsert        8   10    0               00 key=r[10]
  63 Next             4   64    0               00 
  64 IfPos           18   71    1               00 if r[18]>0 then r[18]-=1, goto 71
  65 Null             0    2    0               00 r[2]=NULL
  66 Last             8   68    0               00 
  67 Column           8    0    2               00 r[2]=
  68 Gosub           11  112    0               00 
  69 Delete           1    0    0               02 
  70 Next             1   71    0               00 
  71 IfPos           17   77    1               00 if r[17]>0 then r[17]-=1, goto 77
  72 Column           3    2   19               00 r[19]=
  73 IsNull          19   76    0               00 if r[19]==NULL goto 76
  74 SeekGE           8   76   19 1             00 key=r[19]
  75 Delete           8    0    0               00 
  76 Next             3   77    0               00 
  77 Goto             0   23    0               00 
  78 Rewind           2  110    0               00 
  79 Column           4    2   19               00 r[19]=
  80 IsNull          19   85    0               00 if r[19]==NULL goto 85
  81 AddImm           9    1    0               00 r[9]=r[9]+1
  82 SCopy           19    8    0               00 r[8]=r[19]
  83 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  84 IdxInsert        8   10    0               00 key=r[10]
  85 Next             4   86    0               00 
  86 IfPos           18   94    1               00 if r[18]>0 then r[18]-=1, goto 94
  87 Null             0    2    0               00 r[2]=NULL
  88 Last             8   90    0               00 
  89 Column           8    0    2               00 r[2]=
  90 Gosub           11  112    0               00 
  91 Delete           1    0    0               02 
  92 Next             1   94    0               00 
  93 Goto             0  110    0               00 
  94 IfPos           17  101    1               00 if r[17]>0 then r[17]-=1, goto 101
  95 Column           3    2   19               00 r[19]=
  96 IsNull          19   99    0               00 if r[19]==NULL goto 99
  97 SeekGE           8   99   19 1             00 key=r[19]
  98 Delete           8    0    0               00 
  99 Next             3  101    0               00 
 100 Goto             0  102    0               00 
 101 Goto             0   86    0               00 
 102 Null             0    2    0               00 r[2]=NULL
 103 Last             8  105    0               00 
 104 Column           8    0    2               00 r[2]=
 105 Gosub           11  112    0               00 
 106 Delete           1    0    0               02 
 107 Next             1  109    0               00 
 108 Goto             0  110    0               00 
 109 Goto             0  102    0               00 
 110 ResetSorter      1    0    0               00 
 111 Goto             0  117    0               00 
 112 Noop             0    0    0               00 inner-loop subroutine
 113 Column           1    0   21               00 r[21]=
 114 Copy             2   22    0               00 r[22]=r[2]
 115 ResultRow       21    2    0               00 output=r[21..22]
 116 Return          11    0    0               00 end inner-loop subroutine
 117 Halt             0    0    0               00 
 118 Transaction      0    0    5 0             01 usesStmtJournal=0
 119 Goto             0    1    0               00 
SQL: [SELECT c0, max(c0) OVER (ORDER BY c0 ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING)
  FROM t0

;]
VDBE Program Listing:
   0 Init             0  118    0               00 Start at 118
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=t0.c0
  13 Column           7    0    5               00 r[5]=t0.c0
  14 Column           7    0    6               00 r[6]=t0.c0
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 OpenEphemeral    8    2    0 k(1,B)        00 nColumn=2
  20 Integer          0    9    0               00 r[9]=0
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   78    0               00 next row of subquery_2
  24 Copy             4   12    0               00 r[12]=r[4]
  25 Copy             5   13    0               00 r[13]=r[5]
  26 Copy             6   14    0               00 r[14]=r[6]
  27 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  28 NewRowid         2   16    0               00 r[16]=rowid
  29 Insert           2   15   16               00 intkey=r[16] data=r[15]
  30 Ne               7   57   16               00 if r[16]!=r[7] goto 57
  31 Null             0    1    0               00 r[1]=NULL
  32 ResetSorter      8    0    0               00 
  33 Integer          0    9    0               00 r[9]=0
  34 Integer          1   17    0               00 r[17]=1
  35 Integer          0   20    0               00 r[20]=0
  36 MustBeInt       17   38    0               00 
  37 Ge              20   39   17               00 if r[17]>=r[20] goto 39
  38 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  39 Integer          1   18    0               00 r[18]=1
  40 Integer          0   20    0               00 r[20]=0
  41 MustBeInt       18   43    0               00 
  42 Ge              20   44   18               00 if r[18]>=r[20] goto 44
  43 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  44 Ge              17   52   18               00 if r[18]>=r[17] goto 52
  45 Null             0    2    0               00 r[2]=NULL
  46 Last             8   48    0               00 
  47 Column           8    0    2               00 r[2]=
  48 Rewind           1    1    0               00 
  49 Gosub           11  112    0               00 
  50 ResetSorter      1    0    0               00 
  51 Goto             0   77    0               00 
  52 Subtract        17   18   17               00 r[17]=r[18]-r[17]
  53 Rewind           3    1    0               00 
  54 Rewind           1    1    0               00 
  55 Rewind           4    1    0               00 
  56 Goto             0   77    0               00 
  57 Column           4    2   19               00 r[19]=
  58 IsNull          19   63    0               00 if r[19]==NULL goto 63
  59 AddImm           9    1    0               00 r[9]=r[9]+1
  60 SCopy           19    8    0               00 r[8]=r[19]
  61 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  62 IdxInsert        8   10    0               00 key=r[10]
  63 Next             4   64    0               00 
  64 IfPos           18   71    1               00 if r[18]>0 then r[18]-=1, goto 71
  65 Null             0    2    0               00 r[2]=NULL
  66 Last             8   68    0               00 
  67 Column           8    0    2               00 r[2]=
  68 Gosub           11  112    0               00 
  69 Delete           1    0    0               02 
  70 Next             1   71    0               00 
  71 IfPos           17   77    1               00 if r[17]>0 then r[17]-=1, goto 77
  72 Column           3    2   19               00 r[19]=
  73 IsNull          19   76    0               00 if r[19]==NULL goto 76
  74 SeekGE           8   76   19 1             00 key=r[19]
  75 Delete           8    0    0               00 
  76 Next             3   77    0               00 
  77 Goto             0   23    0               00 
  78 Rewind           2  110    0               00 
  79 Column           4    2   19               00 r[19]=
  80 IsNull          19   85    0               00 if r[19]==NULL goto 85
  81 AddImm           9    1    0               00 r[9]=r[9]+1
  82 SCopy           19    8    0               00 r[8]=r[19]
  83 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  84 IdxInsert        8   10    0               00 key=r[10]
  85 Next             4   86    0               00 
  86 IfPos           18   94    1               00 if r[18]>0 then r[18]-=1, goto 94
  87 Null             0    2    0               00 r[2]=NULL
  88 Last             8   90    0               00 
  89 Column           8    0    2               00 r[2]=
  90 Gosub           11  112    0               00 
  91 Delete           1    0    0               02 
  92 Next             1   94    0               00 
  93 Goto             0  110    0               00 
  94 IfPos           17  101    1               00 if r[17]>0 then r[17]-=1, goto 101
  95 Column           3    2   19               00 r[19]=
  96 IsNull          19   99    0               00 if r[19]==NULL goto 99
  97 SeekGE           8   99   19 1             00 key=r[19]
  98 Delete           8    0    0               00 
  99 Next             3  101    0               00 
 100 Goto             0  102    0               00 
 101 Goto             0   86    0               00 
 102 Null             0    2    0               00 r[2]=NULL
 103 Last             8  105    0               00 
 104 Column           8    0    2               00 r[2]=
 105 Gosub           11  112    0               00 
 106 Delete           1    0    0               02 
 107 Next             1  109    0               00 
 108 Goto             0  110    0               00 
 109 Goto             0  102    0               00 
 110 ResetSorter      1    0    0               00 
 111 Goto             0  117    0               00 
 112 Noop             0    0    0               00 inner-loop subroutine
 113 Column           1    0   21               00 r[21]=
 114 Copy             2   22    0               00 r[22]=r[2]
 115 ResultRow       21    2    0               00 output=r[21..22]
 116 Return          11    0    0               00 end inner-loop subroutine
 117 Halt             0    0    0               00 
 118 Transaction      0    0    5 0             01 usesStmtJournal=0
 119 Goto             0    1    0               00 
SQL: [SELECT t1, max(x) OVER (ORDER BY t1 ROWS BETWEEN 0 FOLLOWING AND 0 FOLLOWING)
  FROM preceding

;]
VDBE Program Listing:
   0 Init             0  115    0               00 Start at 115
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   18    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    5    0               00 
   9 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  10 Explain         10    7    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  11 Rewind           7   17    4 0             00 
  12 Column           7    0    4               00 r[4]=preceding.t1
  13 Column           7    0    5               00 r[5]=preceding.t1
  14 Column           7    1    6               00 r[6]=preceding.x
  15 Yield            3    0    0               00 
  16 Next             7   12    0               01 
  17 EndCoroutine     3    0    0               00 
  18 Integer          1    7    0               00 r[7]=1
  19 OpenEphemeral    8    2    0 k(1,B)        00 nColumn=2
  20 Integer          0    9    0               00 r[9]=0
  21 Explain         21    0    0 SCAN SUBQUERY 2 00 
  22 InitCoroutine    3    0    7               00 
  23 Yield            3   77    0               00 next row of subquery_2
  24 Copy             4   12    0               00 r[12]=r[4]
  25 Copy             5   13    0               00 r[13]=r[5]
  26 Copy             6   14    0               00 r[14]=r[6]
  27 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  28 NewRowid         2   16    0               00 r[16]=rowid
  29 Insert           2   15   16               00 intkey=r[16] data=r[15]
  30 Ne               7   57   16               00 if r[16]!=r[7] goto 57
  31 Null             0    1    0               00 r[1]=NULL
  32 ResetSorter      8    0    0               00 
  33 Integer          0    9    0               00 r[9]=0
  34 Integer          0   17    0               00 r[17]=0
  35 Integer          0   20    0               00 r[20]=0
  36 MustBeInt       17   38    0               00 
  37 Ge              20   39   17               00 if r[17]>=r[20] goto 39
  38 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  39 Integer          0   18    0               00 r[18]=0
  40 Integer          0   20    0               00 r[20]=0
  41 MustBeInt       18   43    0               00 
  42 Ge              20   44   18               00 if r[18]>=r[20] goto 44
  43 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  44 Ge              17   52   18               00 if r[18]>=r[17] goto 52
  45 Null             0    2    0               00 r[2]=NULL
  46 Last             8   48    0               00 
  47 Column           8    0    2               00 r[2]=
  48 Rewind           1    1    0               00 
  49 Gosub           11  109    0               00 
  50 ResetSorter      1    0    0               00 
  51 Goto             0   76    0               00 
  52 Subtract        17   18   17               00 r[17]=r[18]-r[17]
  53 Rewind           3    1    0               00 
  54 Rewind           1    1    0               00 
  55 Rewind           4    1    0               00 
  56 Goto             0   76    0               00 
  57 Column           4    2   19               00 r[19]=
  58 IsNull          19   63    0               00 if r[19]==NULL goto 63
  59 AddImm           9    1    0               00 r[9]=r[9]+1
  60 SCopy           19    8    0               00 r[8]=r[19]
  61 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  62 IdxInsert        8   10    0               00 key=r[10]
  63 Next             4   64    0               00 
  64 IfPos           18   70    1               00 if r[18]>0 then r[18]-=1, goto 70
  65 Null             0    2    0               00 r[2]=NULL
  66 Last             8   68    0               00 
  67 Column           8    0    2               00 r[2]=
  68 Gosub           11  109    0               00 
  69 Next             1   70    0               00 
  70 IfPos           17   76    1               00 if r[17]>0 then r[17]-=1, goto 76
  71 Column           3    2   19               00 r[19]=
  72 IsNull          19   75    0               00 if r[19]==NULL goto 75
  73 SeekGE           8   75   19 1             00 key=r[19]
  74 Delete           8    0    0               00 
  75 Next             3   76    0               00 
  76 Goto             0   23    0               00 
  77 Rewind           2  107    0               00 
  78 Column           4    2   19               00 r[19]=
  79 IsNull          19   84    0               00 if r[19]==NULL goto 84
  80 AddImm           9    1    0               00 r[9]=r[9]+1
  81 SCopy           19    8    0               00 r[8]=r[19]
  82 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  83 IdxInsert        8   10    0               00 key=r[10]
  84 Next             4   85    0               00 
  85 IfPos           18   92    1               00 if r[18]>0 then r[18]-=1, goto 92
  86 Null             0    2    0               00 r[2]=NULL
  87 Last             8   89    0               00 
  88 Column           8    0    2               00 r[2]=
  89 Gosub           11  109    0               00 
  90 Next             1   92    0               00 
  91 Goto             0  107    0               00 
  92 IfPos           17   99    1               00 if r[17]>0 then r[17]-=1, goto 99
  93 Column           3    2   19               00 r[19]=
  94 IsNull          19   97    0               00 if r[19]==NULL goto 97
  95 SeekGE           8   97   19 1             00 key=r[19]
  96 Delete           8    0    0               00 
  97 Next             3   99    0               00 
  98 Goto             0  100    0               00 
  99 Goto             0   85    0               00 
 100 Null             0    2    0               00 r[2]=NULL
 101 Last             8  103    0               00 
 102 Column           8    0    2               00 r[2]=
 103 Gosub           11  109    0               00 
 104 Next             1  106    0               00 
 105 Goto             0  107    0               00 
 106 Goto             0  100    0               00 
 107 ResetSorter      1    0    0               00 
 108 Goto             0  114    0               00 
 109 Noop             0    0    0               00 inner-loop subroutine
 110 Column           1    0   21               00 r[21]=
 111 Copy             2   22    0               00 r[22]=r[2]
 112 ResultRow       21    2    0               00 output=r[21..22]
 113 Return          11    0    0               00 end inner-loop subroutine
 114 Halt             0    0    0               00 
 115 Transaction      0    0    5 0             01 usesStmtJournal=0
 116 Goto             0    1    0               00 
SQL: [DROP TABLE IF EXISTS ttt;]
VDBE Program Listing:
   0 Init             0    2    0               00 Start at 2
   1 Halt             0    0    0               00 
   2 Transaction      0    0    5 0             01 usesStmtJournal=0
   3 Transaction      1    0    0 0             01 usesStmtJournal=0
   4 Goto             0    1    0               00 
SQL: [;INSERT INTO test001 VALUES(7, 1, 3);]
VDBE Program Listing:
   0 Init             0   16    0               00 Start at 16
   1 OpenWrite        0    8    0 3             00 root=8 iDb=0; test001
   2 Integer          7    1    0               00 r[1]=7
   3 NotNull          1    5    0               00 if r[1]!=NULL goto 5
   4 NewRowid         0    1    0               00 r[1]=rowid
   5 MustBeInt        1    0    0               00 
   6 SoftNull         2    0    0               00 r[2]=NULL
   7 Integer          1    3    0               00 r[3]=1
   8 Integer          3    4    0               00 r[4]=3
   9 Noop             0    0    0               00 uniqueness check for ROWID
  10 Abortable        0    0    0               00 
  11 NotExists        0   13    1               00 intkey=r[1]
  12 Halt          1555    2    0 test001.last_field 02 
  13 MakeRecord       2    3    5 DBD           00 r[5]=mkrec(r[2..4])
  14 Insert           0    5    1 test001       31 intkey=r[1] data=r[5]
  15 Halt             0    0    0               00 
  16 Transaction      0    1    5 0             01 usesStmtJournal=0
  17 Goto             0    1    0               00 
SQL: [;
;SELECT abs(max(over) OVER (ORDER BY over)) FROM v0 GROUP BY over;]
VDBE Program Listing:
   0 Init             0  109    0               00 Start at 109
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    2    0               00 nColumn=2
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   41    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    4    0               00 
   9 Noop             7    1    0               00 
  10 Integer          0    6    0               00 r[6]=0; clear abort flag
  11 Null             0    9    9               00 r[9..9]=NULL
  12 Gosub            8   37    0               00 
  13 OpenRead         8    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  14 Explain         14    7    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  15 Rewind           8   27   11 0             00 
  16 Column           8    0   10               00 r[10]=v0.over
  17 Compare          9   10    1 k(1,B)        00 r[9] <-> r[10]
  18 Jump            19   23   19               00 
  19 Move            10    9    1               00 r[9]=r[10]
  20 Gosub            7   31    0               00 output one row
  21 IfPos            6   40    0               00 if r[6]>0 then r[6]-=0, goto 40; check abort flag
  22 Gosub            8   37    0               00 reset accumulator
  23 If               5   25    0               00 
  24 Column           8    0    4               00 r[4]=v0.over
  25 Integer          1    5    0               00 r[5]=1; indicate data in accumulator
  26 Next             8   16    0               01 
  27 Gosub            7   31    0               00 output final row
  28 Goto             0   40    0               00 
  29 Integer          1    6    0               00 r[6]=1; set abort flag
  30 Return           7    0    0               00 
  31 IfPos            5   33    0               00 if r[5]>0 then r[5]-=0, goto 33; Groupby result generator entry point
  32 Return           7    0    0               00 
  33 Copy             4   11    0               00 r[11]=r[4]
  34 Copy             4   12    0               00 r[12]=r[4]
  35 Yield            3    0    0               00 
  36 Return           7    0    0               00 end groupby result generator
  37 Null             0    4    4               00 r[4..4]=NULL
  38 Integer          0    5    0               00 r[5]=0; indicate accumulator empty
  39 Return           8    0    0               00 
  40 EndCoroutine     3    0    0               00 
  41 Integer          1   13    0               00 r[13]=1
  42 Explain         42    0    0 SCAN SUBQUERY 2 00 
  43 InitCoroutine    3    0    7               00 
  44 Yield            3   81    0               00 next row of subquery_2
  45 Copy            11   15    0               00 r[15]=r[11]
  46 Copy            12   16    0               00 r[16]=r[12]
  47 MakeRecord      15    2   17               00 r[17]=mkrec(r[15..16])
  48 NewRowid         2   18    0               00 r[18]=rowid
  49 Insert           2   17   18               00 intkey=r[18] data=r[17]
  50 Ne              13   59   18               00 if r[18]!=r[13] goto 59
  51 Null             0    1    0               00 r[1]=NULL
  52 Rewind           1    1    0               00 
  53 Rewind           4    1    0               00 
  54 Copy            15   19    0               00 r[19]=r[15]
  55 Copy            19   20    0               00 r[20]=r[19]
  56 Copy            19   21    0               00 r[21]=r[19]
  57 Copy            19   22    0               00 r[22]=r[19]
  58 Goto             0   80    0               00 
  59 Compare         19   15    1 k(1,B)        00 r[19] <-> r[15]
  60 Jump            61   80   61               00 
  61 Copy            15   19    0               00 r[19]=r[15]
  62 Column           4    1   23               00 r[23]=
  63 CollSeq          0    0    0 (BINARY)      00 
  64 AggStep          0   23    1 max(1)        01 accum=r[1] step(r[23])
  65 Next             4   67    0               00 
  66 Goto             0   71    0               00 
  67 Column           4    0   24               00 r[24]=
  68 Compare         22   24    1 k(1,B)        00 r[22] <-> r[24]
  69 Jump            70   62   70               00 
  70 Copy            24   22    0               00 r[22]=r[24]
  71 AggValue         1    1    2 max(1)        00 r[2]=value N=1
  72 Gosub           14  103    0               00 
  73 Delete           1    0    0               02 
  74 Next             1   76    0               00 
  75 Goto             0   80    0               00 
  76 Column           1    0   24               00 r[24]=
  77 Compare         21   24    1 k(1,B)        00 r[21] <-> r[24]
  78 Jump            79   72   79               00 
  79 Copy            24   21    0               00 r[21]=r[24]
  80 Goto             0   44    0               00 
  81 Rewind           2  101    0               00 
  82 Column           4    1   23               00 r[23]=
  83 CollSeq          0    0    0 (BINARY)      00 
  84 AggStep          0   23    1 max(1)        01 accum=r[1] step(r[23])
  85 Next             4   87    0               00 
  86 Goto             0   91    0               00 
  87 Column           4    0   24               00 r[24]=
  88 Compare         22   24    1 k(1,B)        00 r[22] <-> r[24]
  89 Jump            90   82   90               00 
  90 Copy            24   22    0               00 r[22]=r[24]
  91 AggValue         1    1    2 max(1)        00 r[2]=value N=1
  92 Gosub           14  103    0               00 
  93 Delete           1    0    0               02 
  94 Next             1   96    0               00 
  95 Goto             0  101    0               00 
  96 Column           1    0   24               00 r[24]=
  97 Compare         21   24    1 k(1,B)        00 r[21] <-> r[24]
  98 Jump            99   92   99               00 
  99 Copy            24   21    0               00 r[21]=r[24]
 100 Goto             0   91    0               00 
 101 ResetSorter      1    0    0               00 
 102 Goto             0  108    0               00 
 103 Noop             0    0    0               00 inner-loop subroutine
 104 Copy             2   24    0               00 r[24]=r[2]
 105 Function0        0   24   25 abs(1)        01 r[25]=func(r[24])
 106 ResultRow       25    1    0               00 output=r[25]
 107 Return          14    0    0               00 end inner-loop subroutine
 108 Halt             0    0    0               00 
 109 Transaction      0    0    5 0             01 usesStmtJournal=0
 110 Goto             0    1    0               00 
SQL: [;
;SELECT sum(x) OVER (
    ORDER BY t1 RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING
  ) FROM preceding;]
VDBE Program Listing:
   0 Init             0   82    0               00 Start at 82
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    2    0               00 nColumn=2
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   17    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    4    0               00 
   9 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  10 Explain         10    7    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  11 Rewind           7   16    4 0             00 
  12 Column           7    0    4               00 r[4]=preceding.t1
  13 Column           7    1    5               00 r[5]=preceding.x
  14 Yield            3    0    0               00 
  15 Next             7   12    0               01 
  16 EndCoroutine     3    0    0               00 
  17 Integer          1    6    0               00 r[6]=1
  18 Explain         18    0    0 SCAN SUBQUERY 2 00 
  19 InitCoroutine    3    0    7               00 
  20 Yield            3   48    0               00 next row of subquery_2
  21 Copy             4    8    0               00 r[8]=r[4]
  22 Copy             5    9    0               00 r[9]=r[5]
  23 MakeRecord       8    2   10               00 r[10]=mkrec(r[8..9])
  24 NewRowid         2   11    0               00 r[11]=rowid
  25 Insert           2   10   11               00 intkey=r[11] data=r[10]
  26 Ne               6   36   11               00 if r[11]!=r[6] goto 36
  27 Null             0    1    0               00 r[1]=NULL
  28 Rewind           3    1    0               00 
  29 Rewind           1    1    0               00 
  30 Rewind           4    1    0               00 
  31 Copy             8   12    0               00 r[12]=r[8]
  32 Copy            12   13    0               00 r[13]=r[12]
  33 Copy            12   14    0               00 r[14]=r[12]
  34 Copy            12   15    0               00 r[15]=r[12]
  35 Goto             0   47    0               00 
  36 Compare         12    8    1 k(1,B)        00 r[12] <-> r[8]
  37 Jump            38   47   38               00 
  38 Copy             8   12    0               00 r[12]=r[8]
  39 Column           4    1   16               00 r[16]=
  40 AggStep          0   16    1 sum(1)        01 accum=r[1] step(r[16])
  41 Next             4   43    0               00 
  42 Goto             0   47    0               00 
  43 Column           4    0   17               00 r[17]=
  44 Compare         15   17    1 k(1,B)        00 r[15] <-> r[17]
  45 Jump            46   39   46               00 
  46 Copy            17   15    0               00 r[15]=r[17]
  47 Goto             0   20    0               00 
  48 Rewind           2   75    0               00 
  49 Column           4    1   16               00 r[16]=
  50 AggStep          0   16    1 sum(1)        01 accum=r[1] step(r[16])
  51 Next             4   53    0               00 
  52 Goto             0   57    0               00 
  53 Column           4    0   17               00 r[17]=
  54 Compare         15   17    1 k(1,B)        00 r[15] <-> r[17]
  55 Jump            56   49   56               00 
  56 Copy            17   15    0               00 r[15]=r[17]
  57 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  58 Gosub            7   77    0               00 
  59 Next             1   61    0               00 
  60 Goto             0   75    0               00 
  61 Column           1    0   17               00 r[17]=
  62 Compare         14   17    1 k(1,B)        00 r[14] <-> r[17]
  63 Jump            64   58   64               00 
  64 Copy            17   14    0               00 r[14]=r[17]
  65 Column           3    1   16               00 r[16]=
  66 AggInverse       1   16    1 sum(1)        01 accum=r[1] inverse(r[16])
  67 Delete           3    0    0               02 
  68 Next             3   70    0               00 
  69 Goto             0   74    0               00 
  70 Column           3    0   17               00 r[17]=
  71 Compare         13   17    1 k(1,B)        00 r[13] <-> r[17]
  72 Jump            73   65   73               00 
  73 Copy            17   13    0               00 r[13]=r[17]
  74 Goto             0   57    0               00 
  75 ResetSorter      1    0    0               00 
  76 Goto             0   81    0               00 
  77 Noop             0    0    0               00 inner-loop subroutine
  78 Copy             2   18    0               00 r[18]=r[2]
  79 ResultRow       18    1    0               00 output=r[18]
  80 Return           7    0    0               00 end inner-loop subroutine
  81 Halt             0    0    0               00 
  82 Transaction      0    0    5 0             01 usesStmtJournal=0
  83 Goto             0    1    0               00 
SQL: [;
;SELECT max(t1) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(t1) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  119    0               00 Start at 119
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   21    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 Noop             6    8    0               00 
  10 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  11 Explain         11    8    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  12 Rewind           7   20    6 0             00 
  13 Column           7    1    6               00 r[6]=preceding.x
  14 Column           7    0    7               00 r[7]=preceding.t1
  15 Column           7    1    8               00 r[8]=preceding.x
  16 Column           7    0    9               00 r[9]=preceding.t1
  17 Column           7    0   10               00 r[10]=preceding.t1
  18 Yield            5    0    0               00 
  19 Next             7   13    0               01 
  20 EndCoroutine     5    0    0               00 
  21 SorterOpen       8    4    0 k(1,B)        00 
  22 Null             0   11   11               00 r[11..11]=NULL
  23 Integer          1   12    0               00 r[12]=1
  24 Explain         24    0    0 SCAN SUBQUERY 2 00 
  25 InitCoroutine    5    0    8               00 
  26 Yield            5   75    0               00 next row of subquery_2
  27 Copy             6   14    0               00 r[14]=r[6]
  28 Copy             7   15    0               00 r[15]=r[7]
  29 Copy             8   16    0               00 r[16]=r[8]
  30 Copy             9   17    0               00 r[17]=r[9]
  31 Copy            10   18    0               00 r[18]=r[10]
  32 MakeRecord      14    5   19               00 r[19]=mkrec(r[14..18])
  33 Compare         15   11    1 k(1,B)        00 r[15] <-> r[11]
  34 Jump            35   37   35               00 
  35 Gosub           25   76    0               00 call flush_partition
  36 Copy            15   11    0               00 r[11]=r[15]
  37 NewRowid         2   20    0               00 r[20]=rowid
  38 Insert           2   19   20               00 intkey=r[20] data=r[19]
  39 Ne              12   49   20               00 if r[20]!=r[12] goto 49
  40 Null             0    1    0               00 r[1]=NULL
  41 Null             0    3    0               00 r[3]=NULL
  42 Rewind           1    1    0               00 
  43 Rewind           4    1    0               00 
  44 Copy            16   21    0               00 r[21]=r[16]
  45 Copy            21   22    0               00 r[22]=r[21]
  46 Copy            21   23    0               00 r[23]=r[21]
  47 Copy            21   24    0               00 r[24]=r[21]
  48 Goto             0   74    0               00 
  49 Compare         21   16    1 k(1,B)        00 r[21] <-> r[16]
  50 Jump            51   74   51               00 
  51 Copy            16   21    0               00 r[21]=r[16]
  52 Column           4    3   26               00 r[26]=
  53 CollSeq          0    0    0 (BINARY)      00 
  54 AggStep          0   26    1 min(1)        01 accum=r[1] step(r[26])
  55 Column           4    4   26               00 r[26]=
  56 CollSeq          0    0    0 (BINARY)      00 
  57 AggStep          0   26    3 max(1)        01 accum=r[3] step(r[26])
  58 Next             4   60    0               00 
  59 Goto             0   64    0               00 
  60 Column           4    2   27               00 r[27]=
  61 Compare         24   27    1 k(1,B)        00 r[24] <-> r[27]
  62 Jump            63   52   63               00 
  63 Copy            27   24    0               00 r[24]=r[27]
  64 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  65 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  66 Gosub           13  103    0               00 
  67 Delete           1    0    0               02 
  68 Next             1   70    0               00 
  69 Goto             0   74    0               00 
  70 Column           1    2   27               00 r[27]=
  71 Compare         23   27    1 k(1,B)        00 r[23] <-> r[27]
  72 Jump            73   66   73               00 
  73 Copy            27   23    0               00 r[23]=r[27]
  74 Goto             0   26    0               00 
  75 Integer        101   25    0               00 r[25]=101
  76 Rewind           2  100    0               00 
  77 Column           4    3   26               00 r[26]=
  78 CollSeq          0    0    0 (BINARY)      00 
  79 AggStep          0   26    1 min(1)        01 accum=r[1] step(r[26])
  80 Column           4    4   26               00 r[26]=
  81 CollSeq          0    0    0 (BINARY)      00 
  82 AggStep          0   26    3 max(1)        01 accum=r[3] step(r[26])
  83 Next             4   85    0               00 
  84 Goto             0   89    0               00 
  85 Column           4    2   27               00 r[27]=
  86 Compare         24   27    1 k(1,B)        00 r[24] <-> r[27]
  87 Jump            88   77   88               00 
  88 Copy            27   24    0               00 r[24]=r[27]
  89 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  90 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  91 Gosub           13  103    0               00 
  92 Delete           1    0    0               02 
  93 Next             1   95    0               00 
  94 Goto             0  100    0               00 
  95 Column           1    2   27               00 r[27]=
  96 Compare         23   27    1 k(1,B)        00 r[23] <-> r[27]
  97 Jump            98   91   98               00 
  98 Copy            27   23    0               00 r[23]=r[27]
  99 Goto             0   89    0               00 
 100 ResetSorter      1    0    0               00 
 101 Return          25    0    0               00 
 102 Goto             0  110    0               00 
 103 Noop             0    0    0               00 inner-loop subroutine
 104 Copy             4   29    0               00 r[29]=r[4]
 105 Copy             2   30    0               00 r[30]=r[2]
 106 Column           1    0   28               00 r[28]=
 107 MakeRecord      28    3   31               00 r[31]=mkrec(r[28..30])
 108 SorterInsert     8   31   28 3             00 key=r[31]
 109 Return          13    0    0               00 end inner-loop subroutine
 110 Explain        110    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 111 OpenPseudo       9   32    4               00 4 columns in r[32]
 112 SorterSort       8  118    0               00 
 113 SorterData       8   32    9               00 r[32]=data
 114 Column           9    2   30               00 r[30]=min(t1) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 115 Column           9    1   29               00 r[29]=max(t1) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 116 ResultRow       29    2    0               00 output=r[29..30]
 117 SorterNext       8  113    0               00 
 118 Halt             0    0    0               00 
 119 Transaction      0    0    5 0             01 usesStmtJournal=0
 120 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  210    0               00 Start at 210
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  121    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    8    0               00 nColumn=8
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   30   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   29    7 0             00 
  19 Column          12    0    7               00 r[7]=t0.c0
  20 Column          12    0    8               00 r[8]=t0.c0
  21 Column          12    0    9               00 r[9]=t0.c0
  22 Column          12    0   10               00 r[10]=t0.c0
  23 Column          12    0   11               00 r[11]=t0.c0
  24 Column          12    0   12               00 r[12]=t0.c0
  25 Column          12    0   13               00 r[13]=t0.c0
  26 Column          12    0   14               00 r[14]=t0.c0
  27 Yield            6    0    0               00 
  28 Next            12   19    0               01 
  29 EndCoroutine     6    0    0               00 
  30 SorterOpen      13    8    0 k(2,B,B)      00 
  31 Integer          1   15    0               00 r[15]=1
  32 Explain         32    7    0 SCAN SUBQUERY 3 00 
  33 InitCoroutine    6    0   14               00 
  34 Yield            6   77    0               00 next row of subquery_3
  35 Copy             7   17    0               00 r[17]=r[7]
  36 Copy             8   18    0               00 r[18]=r[8]
  37 Copy             9   19    0               00 r[19]=r[9]
  38 Copy            10   20    0               00 r[20]=r[10]
  39 Copy            11   21    0               00 r[21]=r[11]
  40 Copy            12   22    0               00 r[22]=r[12]
  41 Copy            13   23    0               00 r[23]=r[13]
  42 Copy            14   24    0               00 r[24]=r[14]
  43 MakeRecord      17    8   25               00 r[25]=mkrec(r[17..24])
  44 NewRowid         7   26    0               00 r[26]=rowid
  45 Insert           7   25   26               00 intkey=r[26] data=r[25]
  46 Ne              15   55   26               00 if r[26]!=r[15] goto 55
  47 Null             0    4    0               00 r[4]=NULL
  48 Rewind           6    1    0               00 
  49 Rewind           9    1    0               00 
  50 Copy            23   27    0               00 r[27]=r[23]
  51 Copy            27   28    0               00 r[28]=r[27]
  52 Copy            27   29    0               00 r[29]=r[27]
  53 Copy            27   30    0               00 r[30]=r[27]
  54 Goto             0   76    0               00 
  55 Compare         27   23    1 k(1,B)        00 r[27] <-> r[23]
  56 Jump            57   76   57               00 
  57 Copy            23   27    0               00 r[27]=r[23]
  58 Column           9    7   31               00 r[31]=
  59 CollSeq          0    0    0 (BINARY)      00 
  60 AggStep          0   31    4 min(1)        01 accum=r[4] step(r[31])
  61 Next             9   63    0               00 
  62 Goto             0   67    0               00 
  63 Column           9    6   32               00 r[32]=
  64 Compare         30   32    1 k(1,B)        00 r[30] <-> r[32]
  65 Jump            66   58   66               00 
  66 Copy            32   30    0               00 r[30]=r[32]
  67 AggValue         4    1    5 min(1)        00 r[5]=value N=1
  68 Gosub           16   99    0               00 
  69 Delete           6    0    0               02 
  70 Next             6   72    0               00 
  71 Goto             0   76    0               00 
  72 Column           6    6   32               00 r[32]=
  73 Compare         29   32    1 k(1,B)        00 r[29] <-> r[32]
  74 Jump            75   68   75               00 
  75 Copy            32   29    0               00 r[29]=r[32]
  76 Goto             0   34    0               00 
  77 Rewind           7   97    0               00 
  78 Column           9    7   31               00 r[31]=
  79 CollSeq          0    0    0 (BINARY)      00 
  80 AggStep          0   31    4 min(1)        01 accum=r[4] step(r[31])
  81 Next             9   83    0               00 
  82 Goto             0   87    0               00 
  83 Column           9    6   32               00 r[32]=
  84 Compare         30   32    1 k(1,B)        00 r[30] <-> r[32]
  85 Jump            86   78   86               00 
  86 Copy            32   30    0               00 r[30]=r[32]
  87 AggValue         4    1    5 min(1)        00 r[5]=value N=1
  88 Gosub           16   99    0               00 
  89 Delete           6    0    0               02 
  90 Next             6   92    0               00 
  91 Goto             0   97    0               00 
  92 Column           6    6   32               00 r[32]=
  93 Compare         29   32    1 k(1,B)        00 r[29] <-> r[32]
  94 Jump            95   88   95               00 
  95 Copy            32   29    0               00 r[29]=r[32]
  96 Goto             0   87    0               00 
  97 ResetSorter      6    0    0               00 
  98 Goto             0  109    0               00 
  99 Noop             0    0    0               00 inner-loop subroutine
 100 Copy             5   35    0               00 r[35]=r[5]
 101 Column           6    0   36               00 r[36]=
 102 Column           6    1   37               00 r[37]=
 103 Column           6    2   38               00 r[38]=
 104 Column           6    4   33               00 r[33]=
 105 Column           6    5   34               00 r[34]=
 106 MakeRecord      33    6   40               00 r[40]=mkrec(r[33..38])
 107 SorterInsert    13   40   33 6             00 key=r[40]
 108 Return          16    0    0               00 end inner-loop subroutine
 109 Explain        109    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 110 OpenPseudo      14   41    8               00 8 columns in r[41]
 111 SorterSort      13  120    0               00 
 112 SorterData      13   41   14               00 r[41]=data
 113 Column          14    1   39               00 r[39]=
 114 Column          14    5   38               00 r[38]=
 115 Column          14    4   37               00 r[37]=
 116 Column          14    3   36               00 r[36]=
 117 Column          14    2   35               00 r[35]=
 118 Yield            3    0    0               00 
 119 SorterNext      13  112    0               00 
 120 EndCoroutine     3    0    0               00 
 121 SorterOpen      15    4    0 k(1,B)        00 
 122 Null             0   42   42               00 r[42..42]=NULL
 123 Integer          1   43    0               00 r[43]=1
 124 Explain        124    0    0 SCAN SUBQUERY 2 00 
 125 InitCoroutine    3    0    7               00 
 126 Yield            3  170    0               00 next row of subquery_2
 127 Copy            35   45    0               00 r[45]=r[35]
 128 Copy            36   46    0               00 r[46]=r[36]
 129 Copy            37   47    0               00 r[47]=r[37]
 130 Copy            38   48    0               00 r[48]=r[38]
 131 Copy            39   49    0               00 r[49]=r[39]
 132 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 133 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 134 Jump           135  137  135               00 
 135 Gosub           56  171    0               00 call flush_partition
 136 Copy            47   42    0               00 r[42]=r[47]
 137 NewRowid         2   51    0               00 r[51]=rowid
 138 Insert           2   50   51               00 intkey=r[51] data=r[50]
 139 Ne              43  148   51               00 if r[51]!=r[43] goto 148
 140 Null             0    1    0               00 r[1]=NULL
 141 Rewind           1    1    0               00 
 142 Rewind           4    1    0               00 
 143 Copy            48   52    0               00 r[52]=r[48]
 144 Copy            52   53    0               00 r[53]=r[52]
 145 Copy            52   54    0               00 r[54]=r[52]
 146 Copy            52   55    0               00 r[55]=r[52]
 147 Goto             0  169    0               00 
 148 Compare         52   48    1 k(1,B)        00 r[52] <-> r[48]
 149 Jump           150  169  150               00 
 150 Copy            48   52    0               00 r[52]=r[48]
 151 Column           4    4   57               00 r[57]=
 152 CollSeq          0    0    0 (BINARY)      00 
 153 AggStep          0   57    1 max(1)        01 accum=r[1] step(r[57])
 154 Next             4  156    0               00 
 155 Goto             0  160    0               00 
 156 Column           4    3   58               00 r[58]=
 157 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 158 Jump           159  151  159               00 
 159 Copy            58   55    0               00 r[55]=r[58]
 160 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 161 Gosub           44  194    0               00 
 162 Delete           1    0    0               02 
 163 Next             1  165    0               00 
 164 Goto             0  169    0               00 
 165 Column           1    3   58               00 r[58]=
 166 Compare         54   58    1 k(1,B)        00 r[54] <-> r[58]
 167 Jump           168  161  168               00 
 168 Copy            58   54    0               00 r[54]=r[58]
 169 Goto             0  126    0               00 
 170 Integer        192   56    0               00 r[56]=192
 171 Rewind           2  191    0               00 
 172 Column           4    4   57               00 r[57]=
 173 CollSeq          0    0    0 (BINARY)      00 
 174 AggStep          0   57    1 max(1)        01 accum=r[1] step(r[57])
 175 Next             4  177    0               00 
 176 Goto             0  181    0               00 
 177 Column           4    3   58               00 r[58]=
 178 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 179 Jump           180  172  180               00 
 180 Copy            58   55    0               00 r[55]=r[58]
 181 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 182 Gosub           44  194    0               00 
 183 Delete           1    0    0               02 
 184 Next             1  186    0               00 
 185 Goto             0  191    0               00 
 186 Column           1    3   58               00 r[58]=
 187 Compare         54   58    1 k(1,B)        00 r[54] <-> r[58]
 188 Jump           189  182  189               00 
 189 Copy            58   54    0               00 r[54]=r[58]
 190 Goto             0  181    0               00 
 191 ResetSorter      1    0    0               00 
 192 Return          56    0    0               00 
 193 Goto             0  201    0               00 
 194 Noop             0    0    0               00 inner-loop subroutine
 195 Copy             2   60    0               00 r[60]=r[2]
 196 Column           1    0   61               00 r[61]=
 197 Column           1    1   59               00 r[59]=
 198 MakeRecord      59    3   62               00 r[62]=mkrec(r[59..61])
 199 SorterInsert    15   62   59 3             00 key=r[62]
 200 Return          44    0    0               00 end inner-loop subroutine
 201 Explain        201    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 202 OpenPseudo      16   63    4               00 4 columns in r[63]
 203 SorterSort      15  209    0               00 
 204 SorterData      15   63   16               00 r[63]=data
 205 Column          16    2   61               00 r[61]=min(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 206 Column          16    1   60               00 r[60]=max(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 207 ResultRow       60    2    0               00 output=r[60..61]
 208 SorterNext      15  204    0               00 
 209 Halt             0    0    0               00 
 210 Transaction      0    0    5 0             01 usesStmtJournal=0
 211 Goto             0    1    0               00 
SQL: [SELECT max(t1) OVER (PARTITION BY x, x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(t1) OVER (PARTITION BY x, x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  136    0               00 Start at 136
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    6    0               00 nColumn=6
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   37    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6   10    0 k(3,B,B,B)    00 
  10 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  11 Explain         11    8    0 SCAN TABLE preceding 00 
  12 Rewind           0   24    0               00 
  13 Column           0    1    9               00 r[9]=preceding.x
  14 Column           0    1   10               00 r[10]=preceding.x
  15 Column           0    1   11               00 r[11]=preceding.x
  16 Column           0    0   12               00 r[12]=preceding.t1
  17 Column           0    0   13               00 r[13]=preceding.t1
  18 Column           0    1    6               00 r[6]=preceding.x
  19 Column           0    1    7               00 r[7]=preceding.x
  20 Column           0    1    8               00 r[8]=preceding.x
  21 MakeRecord       6    8   15               00 r[15]=mkrec(r[6..13])
  22 SorterInsert     6   15    6 8             00 key=r[15]
  23 Next             0   13    0               01 
  24 Explain         24    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  25 OpenPseudo       7   16   10               00 10 columns in r[16]
  26 SorterSort       6   36    0               00 
  27 SorterData       6   16    7               00 r[16]=data
  28 Column           7    7   14               00 r[14]=
  29 Column           7    6   13               00 r[13]=
  30 Column           7    2   12               00 r[12]=
  31 Column           7    5   11               00 r[11]=
  32 Column           7    4   10               00 r[10]=
  33 Column           7    3    9               00 r[9]=
  34 Yield            5    0    0               00 
  35 SorterNext       6   27    0               00 
  36 EndCoroutine     5    0    0               00 
  37 SorterOpen       8    4    0 k(1,B)        00 
  38 Null             0   17   18               00 r[17..18]=NULL
  39 Integer          1   19    0               00 r[19]=1
  40 Explain         40    0    0 SCAN SUBQUERY 2 00 
  41 InitCoroutine    5    0    8               00 
  42 Yield            5   92    0               00 next row of subquery_2
  43 Copy             9   21    0               00 r[21]=r[9]
  44 Copy            10   22    0               00 r[22]=r[10]
  45 Copy            11   23    0               00 r[23]=r[11]
  46 Copy            12   24    0               00 r[24]=r[12]
  47 Copy            13   25    0               00 r[25]=r[13]
  48 Copy            14   26    0               00 r[26]=r[14]
  49 MakeRecord      21    6   27               00 r[27]=mkrec(r[21..26])
  50 Compare         22   17    2 k(2,B,B)      00 r[22..23] <-> r[17..18]
  51 Jump            52   54   52               00 
  52 Gosub           33   93    0               00 call flush_partition
  53 Copy            22   17    1               00 r[17..18]=r[22..23]
  54 NewRowid         2   28    0               00 r[28]=rowid
  55 Insert           2   27   28               00 intkey=r[28] data=r[27]
  56 Ne              19   66   28               00 if r[28]!=r[19] goto 66
  57 Null             0    1    0               00 r[1]=NULL
  58 Null             0    3    0               00 r[3]=NULL
  59 Rewind           1    1    0               00 
  60 Rewind           4    1    0               00 
  61 Copy            24   29    0               00 r[29]=r[24]
  62 Copy            29   30    0               00 r[30]=r[29]
  63 Copy            29   31    0               00 r[31]=r[29]
  64 Copy            29   32    0               00 r[32]=r[29]
  65 Goto             0   91    0               00 
  66 Compare         29   24    1 k(1,B)        00 r[29] <-> r[24]
  67 Jump            68   91   68               00 
  68 Copy            24   29    0               00 r[29]=r[24]
  69 Column           4    4   34               00 r[34]=
  70 CollSeq          0    0    0 (BINARY)      00 
  71 AggStep          0   34    1 min(1)        01 accum=r[1] step(r[34])
  72 Column           4    5   34               00 r[34]=
  73 CollSeq          0    0    0 (BINARY)      00 
  74 AggStep          0   34    3 max(1)        01 accum=r[3] step(r[34])
  75 Next             4   77    0               00 
  76 Goto             0   81    0               00 
  77 Column           4    3   35               00 r[35]=
  78 Compare         32   35    1 k(1,B)        00 r[32] <-> r[35]
  79 Jump            80   69   80               00 
  80 Copy            35   32    0               00 r[32]=r[35]
  81 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  82 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  83 Gosub           20  120    0               00 
  84 Delete           1    0    0               02 
  85 Next             1   87    0               00 
  86 Goto             0   91    0               00 
  87 Column           1    3   35               00 r[35]=
  88 Compare         31   35    1 k(1,B)        00 r[31] <-> r[35]
  89 Jump            90   83   90               00 
  90 Copy            35   31    0               00 r[31]=r[35]
  91 Goto             0   42    0               00 
  92 Integer        118   33    0               00 r[33]=118
  93 Rewind           2  117    0               00 
  94 Column           4    4   34               00 r[34]=
  95 CollSeq          0    0    0 (BINARY)      00 
  96 AggStep          0   34    1 min(1)        01 accum=r[1] step(r[34])
  97 Column           4    5   34               00 r[34]=
  98 CollSeq          0    0    0 (BINARY)      00 
  99 AggStep          0   34    3 max(1)        01 accum=r[3] step(r[34])
 100 Next             4  102    0               00 
 101 Goto             0  106    0               00 
 102 Column           4    3   35               00 r[35]=
 103 Compare         32   35    1 k(1,B)        00 r[32] <-> r[35]
 104 Jump           105   94  105               00 
 105 Copy            35   32    0               00 r[32]=r[35]
 106 AggValue         1    1    2 min(1)        00 r[2]=value N=1
 107 AggValue         3    1    4 max(1)        00 r[4]=value N=1
 108 Gosub           20  120    0               00 
 109 Delete           1    0    0               02 
 110 Next             1  112    0               00 
 111 Goto             0  117    0               00 
 112 Column           1    3   35               00 r[35]=
 113 Compare         31   35    1 k(1,B)        00 r[31] <-> r[35]
 114 Jump           115  108  115               00 
 115 Copy            35   31    0               00 r[31]=r[35]
 116 Goto             0  106    0               00 
 117 ResetSorter      1    0    0               00 
 118 Return          33    0    0               00 
 119 Goto             0  127    0               00 
 120 Noop             0    0    0               00 inner-loop subroutine
 121 Copy             4   37    0               00 r[37]=r[4]
 122 Copy             2   38    0               00 r[38]=r[2]
 123 Column           1    0   36               00 r[36]=
 124 MakeRecord      36    3   39               00 r[39]=mkrec(r[36..38])
 125 SorterInsert     8   39   36 3             00 key=r[39]
 126 Return          20    0    0               00 end inner-loop subroutine
 127 Explain        127    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 128 OpenPseudo       9   40    4               00 4 columns in r[40]
 129 SorterSort       8  135    0               00 
 130 SorterData       8   40    9               00 r[40]=data
 131 Column           9    2   38               00 r[38]=min(t1) OVER (PARTITION BY x, x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 132 Column           9    1   37               00 r[37]=max(t1) OVER (PARTITION BY x, x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 133 ResultRow       37    2    0               00 output=r[37..38]
 134 SorterNext       8  130    0               00 
 135 Halt             0    0    0               00 
 136 Transaction      0    0    5 0             01 usesStmtJournal=0
 137 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  142    0               00 Start at 142
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    6    0               00 nColumn=6
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   47    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    7    0 k(2,B,B)      00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   30    6 0             00 
  13 Column           7    0    9               00 r[9]=t0.c0
  14 Column           7    0   10               00 r[10]=t0.c0
  15 Column           7    0   11               00 r[11]=t0.c0
  16 Column           7    0   12               00 r[12]=t0.c0
  17 Column           7    0   13               00 r[13]=t0.c0
  18 Column           7    0    6               00 r[6]=t0.c0
  19 Column           7    0    7               00 r[7]=t0.c0
  20 Column           7    0    8               00 r[8]=t0.c0
  21 MakeRecord       7    7   15               00 r[15]=mkrec(r[7..13])
  22 SequenceTest     6   27    0               00 if( cursor[6].ctr++ ) pc = 27
  23 Compare         16    6    1 k(3,B,B,B)    00 r[16] <-> r[6]
  24 Jump            25   28   25               00 
  25 Gosub           17   33    0               00 
  26 ResetSorter      6    0    0               00 
  27 Move             6   16    1               00 r[16]=r[6]
  28 SorterInsert     6   15    7 7             00 key=r[15]
  29 Next             7   13    0               01 
  30 Explain         30    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  31 Gosub           17   33    0               00 
  32 Goto             0   46    0               00 
  33 Once             0   35    0               00 
  34 OpenPseudo       8   18    9               00 9 columns in r[18]
  35 SorterSort       6   46    0               00 
  36 SorterData       6   18    8               00 r[18]=data
  37 Column           8    1   14               00 r[14]=
  38 Column           8    6   13               00 r[13]=
  39 Column           8    5   12               00 r[12]=
  40 Column           8    4   11               00 r[11]=
  41 Column           8    3   10               00 r[10]=
  42 Column           8    2    9               00 r[9]=
  43 Yield            5    0    0               00 
  44 SorterNext       6   36    0               00 
  45 Return          17    0    0               00 
  46 EndCoroutine     5    0    0               00 
  47 SorterOpen       9    4    0 k(1,B)        00 
  48 Null             0   19   20               00 r[19..20]=NULL
  49 Integer          1   21    0               00 r[21]=1
  50 Explain         50    0    0 SCAN SUBQUERY 2 00 
  51 InitCoroutine    5    0    8               00 
  52 Yield            5  100    0               00 next row of subquery_2
  53 Copy             9   23    0               00 r[23]=r[9]
  54 Copy            10   24    0               00 r[24]=r[10]
  55 Copy            11   25    0               00 r[25]=r[11]
  56 Copy            12   26    0               00 r[26]=r[12]
  57 Copy            13   27    0               00 r[27]=r[13]
  58 Copy            14   28    0               00 r[28]=r[14]
  59 MakeRecord      23    6   29               00 r[29]=mkrec(r[23..28])
  60 Compare         24   19    2 k(2,B,B)      00 r[24..25] <-> r[19..20]
  61 Jump            62   64   62               00 
  62 Gosub           35  101    0               00 call flush_partition
  63 Copy            24   19    1               00 r[19..20]=r[24..25]
  64 NewRowid         2   30    0               00 r[30]=rowid
  65 Insert           2   29   30               00 intkey=r[30] data=r[29]
  66 Ne              21   76   30               00 if r[30]!=r[21] goto 76
  67 Null             0    1    0               00 r[1]=NULL
  68 Null             0    3    0               00 r[3]=NULL
  69 Rewind           1    1    0               00 
  70 Rewind           4    1    0               00 
  71 Copy            26   31    0               00 r[31]=r[26]
  72 Copy            31   32    0               00 r[32]=r[31]
  73 Copy            31   33    0               00 r[33]=r[31]
  74 Copy            31   34    0               00 r[34]=r[31]
  75 Goto             0   99    0               00 
  76 Compare         31   26    1 k(1,B)        00 r[31] <-> r[26]
  77 Jump            78   99   78               00 
  78 Copy            26   31    0               00 r[31]=r[26]
  79 Column           4    4   36               00 r[36]=
  80 AggStep          0   36    1 sum(1)        01 accum=r[1] step(r[36])
  81 Column           4    5   36               00 r[36]=
  82 AggStep          0   36    3 sum(1)        01 accum=r[3] step(r[36])
  83 Next             4   85    0               00 
  84 Goto             0   89    0               00 
  85 Column           4    3   37               00 r[37]=
  86 Compare         34   37    1 k(1,B)        00 r[34] <-> r[37]
  87 Jump            88   79   88               00 
  88 Copy            37   34    0               00 r[34]=r[37]
  89 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  90 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  91 Gosub           22  126    0               00 
  92 Delete           1    0    0               02 
  93 Next             1   95    0               00 
  94 Goto             0   99    0               00 
  95 Column           1    3   37               00 r[37]=
  96 Compare         33   37    1 k(1,B)        00 r[33] <-> r[37]
  97 Jump            98   91   98               00 
  98 Copy            37   33    0               00 r[33]=r[37]
  99 Goto             0   52    0               00 
 100 Integer        124   35    0               00 r[35]=124
 101 Rewind           2  123    0               00 
 102 Column           4    4   36               00 r[36]=
 103 AggStep          0   36    1 sum(1)        01 accum=r[1] step(r[36])
 104 Column           4    5   36               00 r[36]=
 105 AggStep          0   36    3 sum(1)        01 accum=r[3] step(r[36])
 106 Next             4  108    0               00 
 107 Goto             0  112    0               00 
 108 Column           4    3   37               00 r[37]=
 109 Compare         34   37    1 k(1,B)        00 r[34] <-> r[37]
 110 Jump           111  102  111               00 
 111 Copy            37   34    0               00 r[34]=r[37]
 112 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 113 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
 114 Gosub           22  126    0               00 
 115 Delete           1    0    0               02 
 116 Next             1  118    0               00 
 117 Goto             0  123    0               00 
 118 Column           1    3   37               00 r[37]=
 119 Compare         33   37    1 k(1,B)        00 r[33] <-> r[37]
 120 Jump           121  114  121               00 
 121 Copy            37   33    0               00 r[33]=r[37]
 122 Goto             0  112    0               00 
 123 ResetSorter      1    0    0               00 
 124 Return          35    0    0               00 
 125 Goto             0  133    0               00 
 126 Noop             0    0    0               00 inner-loop subroutine
 127 Copy             4   39    0               00 r[39]=r[4]
 128 Copy             2   40    0               00 r[40]=r[2]
 129 Column           1    0   38               00 r[38]=
 130 MakeRecord      38    3   41               00 r[41]=mkrec(r[38..40])
 131 SorterInsert     9   41   38 3             00 key=r[41]
 132 Return          22    0    0               00 end inner-loop subroutine
 133 Explain        133    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 134 OpenPseudo      10   42    4               00 4 columns in r[42]
 135 SorterSort       9  141    0               00 
 136 SorterData       9   42   10               00 r[42]=data
 137 Column          10    2   40               00 r[40]=sum(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 138 Column          10    1   39               00 r[39]=sum(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 139 ResultRow       39    2    0               00 output=r[39..40]
 140 SorterNext       9  136    0               00 
 141 Halt             0    0    0               00 
 142 Transaction      0    0    5 0             01 usesStmtJournal=0
 143 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  218    0               00 Start at 218
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    6    0               00 nColumn=6
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  128    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6   10    0               00 nColumn=10
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   32   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   12    0               00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   31    7 0             00 
  19 Column          12    0    7               00 r[7]=t0.c0
  20 Column          12    0    8               00 r[8]=t0.c0
  21 Column          12    0    9               00 r[9]=t0.c0
  22 Column          12    0   10               00 r[10]=t0.c0
  23 Column          12    0   11               00 r[11]=t0.c0
  24 Column          12    0   12               00 r[12]=t0.c0
  25 Column          12    0   13               00 r[13]=t0.c0
  26 Column          12    0   14               00 r[14]=t0.c0
  27 Column          12    0   15               00 r[15]=t0.c0
  28 Column          12    0   16               00 r[16]=t0.c0
  29 Yield            6    0    0               00 
  30 Next            12   19    0               01 
  31 EndCoroutine     6    0    0               00 
  32 SorterOpen      13   10    0 k(3,B,B,B)    00 
  33 Integer          1   17    0               00 r[17]=1
  34 Explain         34    7    0 SCAN SUBQUERY 3 00 
  35 InitCoroutine    6    0   14               00 
  36 Yield            6   81    0               00 next row of subquery_3
  37 Copy             7   19    0               00 r[19]=r[7]
  38 Copy             8   20    0               00 r[20]=r[8]
  39 Copy             9   21    0               00 r[21]=r[9]
  40 Copy            10   22    0               00 r[22]=r[10]
  41 Copy            11   23    0               00 r[23]=r[11]
  42 Copy            12   24    0               00 r[24]=r[12]
  43 Copy            13   25    0               00 r[25]=r[13]
  44 Copy            14   26    0               00 r[26]=r[14]
  45 Copy            15   27    0               00 r[27]=r[15]
  46 Copy            16   28    0               00 r[28]=r[16]
  47 MakeRecord      19   10   29               00 r[29]=mkrec(r[19..28])
  48 NewRowid         7   30    0               00 r[30]=rowid
  49 Insert           7   29   30               00 intkey=r[30] data=r[29]
  50 Ne              17   59   30               00 if r[30]!=r[17] goto 59
  51 Null             0    4    0               00 r[4]=NULL
  52 Rewind           6    1    0               00 
  53 Rewind           9    1    0               00 
  54 Copy            27   31    0               00 r[31]=r[27]
  55 Copy            31   32    0               00 r[32]=r[31]
  56 Copy            31   33    0               00 r[33]=r[31]
  57 Copy            31   34    0               00 r[34]=r[31]
  58 Goto             0   80    0               00 
  59 Compare         31   27    1 k(1,B)        00 r[31] <-> r[27]
  60 Jump            61   80   61               00 
  61 Copy            27   31    0               00 r[31]=r[27]
  62 Column           9    9   35               00 r[35]=
  63 CollSeq          0    0    0 (BINARY)      00 
  64 AggStep          0   35    4 min(1)        01 accum=r[4] step(r[35])
  65 Next             9   67    0               00 
  66 Goto             0   71    0               00 
  67 Column           9    8   36               00 r[36]=
  68 Compare         34   36    1 k(1,B)        00 r[34] <-> r[36]
  69 Jump            70   62   70               00 
  70 Copy            36   34    0               00 r[34]=r[36]
  71 AggValue         4    1    5 min(1)        00 r[5]=value N=1
  72 Gosub           18  103    0               00 
  73 Delete           6    0    0               02 
  74 Next             6   76    0               00 
  75 Goto             0   80    0               00 
  76 Column           6    8   36               00 r[36]=
  77 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
  78 Jump            79   72   79               00 
  79 Copy            36   33    0               00 r[33]=r[36]
  80 Goto             0   36    0               00 
  81 Rewind           7  101    0               00 
  82 Column           9    9   35               00 r[35]=
  83 CollSeq          0    0    0 (BINARY)      00 
  84 AggStep          0   35    4 min(1)        01 accum=r[4] step(r[35])
  85 Next             9   87    0               00 
  86 Goto             0   91    0               00 
  87 Column           9    8   36               00 r[36]=
  88 Compare         34   36    1 k(1,B)        00 r[34] <-> r[36]
  89 Jump            90   82   90               00 
  90 Copy            36   34    0               00 r[34]=r[36]
  91 AggValue         4    1    5 min(1)        00 r[5]=value N=1
  92 Gosub           18  103    0               00 
  93 Delete           6    0    0               02 
  94 Next             6   96    0               00 
  95 Goto             0  101    0               00 
  96 Column           6    8   36               00 r[36]=
  97 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
  98 Jump            99   92   99               00 
  99 Copy            36   33    0               00 r[33]=r[36]
 100 Goto             0   91    0               00 
 101 ResetSorter      6    0    0               00 
 102 Goto             0  115    0               00 
 103 Noop             0    0    0               00 inner-loop subroutine
 104 Copy             5   40    0               00 r[40]=r[5]
 105 Column           6    0   41               00 r[41]=
 106 Column           6    1   42               00 r[42]=
 107 Column           6    2   43               00 r[43]=
 108 Column           6    3   44               00 r[44]=
 109 Column           6    5   37               00 r[37]=
 110 Column           6    6   38               00 r[38]=
 111 Column           6    7   39               00 r[39]=
 112 MakeRecord      37    8   46               00 r[46]=mkrec(r[37..44])
 113 SorterInsert    13   46   37 8             00 key=r[46]
 114 Return          18    0    0               00 end inner-loop subroutine
 115 Explain        115    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 116 OpenPseudo      14   47   10               00 10 columns in r[47]
 117 SorterSort      13  127    0               00 
 118 SorterData      13   47   14               00 r[47]=data
 119 Column          14    2   45               00 r[45]=
 120 Column          14    7   44               00 r[44]=
 121 Column          14    6   43               00 r[43]=
 122 Column          14    5   42               00 r[42]=
 123 Column          14    4   41               00 r[41]=
 124 Column          14    3   40               00 r[40]=
 125 Yield            3    0    0               00 
 126 SorterNext      13  118    0               00 
 127 EndCoroutine     3    0    0               00 
 128 SorterOpen      15    4    0 k(1,B)        00 
 129 Null             0   48   49               00 r[48..49]=NULL
 130 Integer          1   50    0               00 r[50]=1
 131 Explain        131    0    0 SCAN SUBQUERY 2 00 
 132 InitCoroutine    3    0    7               00 
 133 Yield            3  178    0               00 next row of subquery_2
 134 Copy            40   52    0               00 r[52]=r[40]
 135 Copy            41   53    0               00 r[53]=r[41]
 136 Copy            42   54    0               00 r[54]=r[42]
 137 Copy            43   55    0               00 r[55]=r[43]
 138 Copy            44   56    0               00 r[56]=r[44]
 139 Copy            45   57    0               00 r[57]=r[45]
 140 MakeRecord      52    6   58               00 r[58]=mkrec(r[52..57])
 141 Compare         54   48    2 k(2,B,B)      00 r[54..55] <-> r[48..49]
 142 Jump           143  145  143               00 
 143 Gosub           64  179    0               00 call flush_partition
 144 Copy            54   48    1               00 r[48..49]=r[54..55]
 145 NewRowid         2   59    0               00 r[59]=rowid
 146 Insert           2   58   59               00 intkey=r[59] data=r[58]
 147 Ne              50  156   59               00 if r[59]!=r[50] goto 156
 148 Null             0    1    0               00 r[1]=NULL
 149 Rewind           1    1    0               00 
 150 Rewind           4    1    0               00 
 151 Copy            56   60    0               00 r[60]=r[56]
 152 Copy            60   61    0               00 r[61]=r[60]
 153 Copy            60   62    0               00 r[62]=r[60]
 154 Copy            60   63    0               00 r[63]=r[60]
 155 Goto             0  177    0               00 
 156 Compare         60   56    1 k(1,B)        00 r[60] <-> r[56]
 157 Jump           158  177  158               00 
 158 Copy            56   60    0               00 r[60]=r[56]
 159 Column           4    5   65               00 r[65]=
 160 CollSeq          0    0    0 (BINARY)      00 
 161 AggStep          0   65    1 max(1)        01 accum=r[1] step(r[65])
 162 Next             4  164    0               00 
 163 Goto             0  168    0               00 
 164 Column           4    4   66               00 r[66]=
 165 Compare         63   66    1 k(1,B)        00 r[63] <-> r[66]
 166 Jump           167  159  167               00 
 167 Copy            66   63    0               00 r[63]=r[66]
 168 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 169 Gosub           51  202    0               00 
 170 Delete           1    0    0               02 
 171 Next             1  173    0               00 
 172 Goto             0  177    0               00 
 173 Column           1    4   66               00 r[66]=
 174 Compare         62   66    1 k(1,B)        00 r[62] <-> r[66]
 175 Jump           176  169  176               00 
 176 Copy            66   62    0               00 r[62]=r[66]
 177 Goto             0  133    0               00 
 178 Integer        200   64    0               00 r[64]=200
 179 Rewind           2  199    0               00 
 180 Column           4    5   65               00 r[65]=
 181 CollSeq          0    0    0 (BINARY)      00 
 182 AggStep          0   65    1 max(1)        01 accum=r[1] step(r[65])
 183 Next             4  185    0               00 
 184 Goto             0  189    0               00 
 185 Column           4    4   66               00 r[66]=
 186 Compare         63   66    1 k(1,B)        00 r[63] <-> r[66]
 187 Jump           188  180  188               00 
 188 Copy            66   63    0               00 r[63]=r[66]
 189 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 190 Gosub           51  202    0               00 
 191 Delete           1    0    0               02 
 192 Next             1  194    0               00 
 193 Goto             0  199    0               00 
 194 Column           1    4   66               00 r[66]=
 195 Compare         62   66    1 k(1,B)        00 r[62] <-> r[66]
 196 Jump           197  190  197               00 
 197 Copy            66   62    0               00 r[62]=r[66]
 198 Goto             0  189    0               00 
 199 ResetSorter      1    0    0               00 
 200 Return          64    0    0               00 
 201 Goto             0  209    0               00 
 202 Noop             0    0    0               00 inner-loop subroutine
 203 Copy             2   68    0               00 r[68]=r[2]
 204 Column           1    0   69               00 r[69]=
 205 Column           1    1   67               00 r[67]=
 206 MakeRecord      67    3   70               00 r[70]=mkrec(r[67..69])
 207 SorterInsert    15   70   67 3             00 key=r[70]
 208 Return          51    0    0               00 end inner-loop subroutine
 209 Explain        209    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 210 OpenPseudo      16   71    4               00 4 columns in r[71]
 211 SorterSort      15  217    0               00 
 212 SorterData      15   71   16               00 r[71]=data
 213 Column          16    2   69               00 r[69]=min(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 214 Column          16    1   68               00 r[68]=max(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 215 ResultRow       68    2    0               00 output=r[68..69]
 216 SorterNext      15  212    0               00 
 217 Halt             0    0    0               00 
 218 Transaction      0    0    5 0             01 usesStmtJournal=0
 219 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER (PARTITION BY following, following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(following) OVER ( ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  231    0               00 Start at 231
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    6    0               00 nColumn=6
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  143    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6   10    0               00 nColumn=10
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   49   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   12    0 k(1,B)        00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   32    0               00 
  19 Column           0    1    8               00 r[8]=v0.following
  20 Column           0    1    9               00 r[9]=v0.following
  21 Column           0    1   10               00 r[10]=v0.following
  22 Column           0    1   11               00 r[11]=v0.following
  23 Column           0    1   12               00 r[12]=v0.following
  24 Column           0    1   13               00 r[13]=v0.following
  25 Column           0    1   14               00 r[14]=v0.following
  26 Column           0    1   15               00 r[15]=v0.following
  27 Column           0    1   16               00 r[16]=v0.following
  28 Column           0    1    7               00 r[7]=v0.following
  29 MakeRecord       7   10   18               00 r[18]=mkrec(r[7..16])
  30 SorterInsert    11   18    7 10            00 key=r[18]
  31 Next             0   19    0               01 
  32 Explain         32   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  33 OpenPseudo      12   19   12               00 12 columns in r[19]
  34 SorterSort      11   48    0               00 
  35 SorterData      11   19   12               00 r[19]=data
  36 Column          12    0   17               00 r[17]=
  37 Column          12    9   16               00 r[16]=
  38 Column          12    8   15               00 r[15]=
  39 Column          12    7   14               00 r[14]=
  40 Column          12    6   13               00 r[13]=
  41 Column          12    5   12               00 r[12]=
  42 Column          12    4   11               00 r[11]=
  43 Column          12    3   10               00 r[10]=
  44 Column          12    2    9               00 r[9]=
  45 Column          12    1    8               00 r[8]=
  46 Yield            6    0    0               00 
  47 SorterNext      11   35    0               00 
  48 EndCoroutine     6    0    0               00 
  49 SorterOpen      13   10    0 k(3,B,B,B)    00 
  50 Integer          1   20    0               00 r[20]=1
  51 Explain         51    7    0 SCAN SUBQUERY 3 00 
  52 InitCoroutine    6    0   14               00 
  53 Yield            6   97    0               00 next row of subquery_3
  54 Copy             8   22    0               00 r[22]=r[8]
  55 Copy             9   23    0               00 r[23]=r[9]
  56 Copy            10   24    0               00 r[24]=r[10]
  57 Copy            11   25    0               00 r[25]=r[11]
  58 Copy            12   26    0               00 r[26]=r[12]
  59 Copy            13   27    0               00 r[27]=r[13]
  60 Copy            14   28    0               00 r[28]=r[14]
  61 Copy            15   29    0               00 r[29]=r[15]
  62 Copy            16   30    0               00 r[30]=r[16]
  63 Copy            17   31    0               00 r[31]=r[17]
  64 MakeRecord      22   10   32               00 r[32]=mkrec(r[22..31])
  65 NewRowid         7   33    0               00 r[33]=rowid
  66 Insert           7   32   33               00 intkey=r[33] data=r[32]
  67 Ne              20   76   33               00 if r[33]!=r[20] goto 76
  68 Null             0    4    0               00 r[4]=NULL
  69 Rewind           6    1    0               00 
  70 Rewind           9    1    0               00 
  71 Copy            30   34    0               00 r[34]=r[30]
  72 Copy            34   35    0               00 r[35]=r[34]
  73 Copy            34   36    0               00 r[36]=r[34]
  74 Copy            34   37    0               00 r[37]=r[34]
  75 Goto             0   96    0               00 
  76 Compare         34   30    1 k(1,B)        00 r[34] <-> r[30]
  77 Jump            78   96   78               00 
  78 Copy            30   34    0               00 r[34]=r[30]
  79 Column           9    9   38               00 r[38]=
  80 AggStep          0   38    4 sum(1)        01 accum=r[4] step(r[38])
  81 Next             9   83    0               00 
  82 Goto             0   87    0               00 
  83 Column           9    8   39               00 r[39]=
  84 Compare         37   39    1 k(1,B)        00 r[37] <-> r[39]
  85 Jump            86   79   86               00 
  86 Copy            39   37    0               00 r[37]=r[39]
  87 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  88 Gosub           21  118    0               00 
  89 Delete           6    0    0               02 
  90 Next             6   92    0               00 
  91 Goto             0   96    0               00 
  92 Column           6    8   39               00 r[39]=
  93 Compare         36   39    1 k(1,B)        00 r[36] <-> r[39]
  94 Jump            95   88   95               00 
  95 Copy            39   36    0               00 r[36]=r[39]
  96 Goto             0   53    0               00 
  97 Rewind           7  116    0               00 
  98 Column           9    9   38               00 r[38]=
  99 AggStep          0   38    4 sum(1)        01 accum=r[4] step(r[38])
 100 Next             9  102    0               00 
 101 Goto             0  106    0               00 
 102 Column           9    8   39               00 r[39]=
 103 Compare         37   39    1 k(1,B)        00 r[37] <-> r[39]
 104 Jump           105   98  105               00 
 105 Copy            39   37    0               00 r[37]=r[39]
 106 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 107 Gosub           21  118    0               00 
 108 Delete           6    0    0               02 
 109 Next             6  111    0               00 
 110 Goto             0  116    0               00 
 111 Column           6    8   39               00 r[39]=
 112 Compare         36   39    1 k(1,B)        00 r[36] <-> r[39]
 113 Jump           114  107  114               00 
 114 Copy            39   36    0               00 r[36]=r[39]
 115 Goto             0  106    0               00 
 116 ResetSorter      6    0    0               00 
 117 Goto             0  130    0               00 
 118 Noop             0    0    0               00 inner-loop subroutine
 119 Copy             5   43    0               00 r[43]=r[5]
 120 Column           6    0   44               00 r[44]=
 121 Column           6    1   45               00 r[45]=
 122 Column           6    2   46               00 r[46]=
 123 Column           6    3   47               00 r[47]=
 124 Column           6    5   40               00 r[40]=
 125 Column           6    6   41               00 r[41]=
 126 Column           6    7   42               00 r[42]=
 127 MakeRecord      40    8   49               00 r[49]=mkrec(r[40..47])
 128 SorterInsert    13   49   40 8             00 key=r[49]
 129 Return          21    0    0               00 end inner-loop subroutine
 130 Explain        130    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 131 OpenPseudo      14   50   10               00 10 columns in r[50]
 132 SorterSort      13  142    0               00 
 133 SorterData      13   50   14               00 r[50]=data
 134 Column          14    2   48               00 r[48]=
 135 Column          14    7   47               00 r[47]=
 136 Column          14    6   46               00 r[46]=
 137 Column          14    5   45               00 r[45]=
 138 Column          14    4   44               00 r[44]=
 139 Column          14    3   43               00 r[43]=
 140 Yield            3    0    0               00 
 141 SorterNext      13  133    0               00 
 142 EndCoroutine     3    0    0               00 
 143 SorterOpen      15    4    0 k(1,B)        00 
 144 Null             0   51   52               00 r[51..52]=NULL
 145 Integer          1   53    0               00 r[53]=1
 146 Explain        146    0    0 SCAN SUBQUERY 2 00 
 147 InitCoroutine    3    0    7               00 
 148 Yield            3  192    0               00 next row of subquery_2
 149 Copy            43   55    0               00 r[55]=r[43]
 150 Copy            44   56    0               00 r[56]=r[44]
 151 Copy            45   57    0               00 r[57]=r[45]
 152 Copy            46   58    0               00 r[58]=r[46]
 153 Copy            47   59    0               00 r[59]=r[47]
 154 Copy            48   60    0               00 r[60]=r[48]
 155 MakeRecord      55    6   61               00 r[61]=mkrec(r[55..60])
 156 Compare         57   51    2 k(2,B,B)      00 r[57..58] <-> r[51..52]
 157 Jump           158  160  158               00 
 158 Gosub           67  193    0               00 call flush_partition
 159 Copy            57   51    1               00 r[51..52]=r[57..58]
 160 NewRowid         2   62    0               00 r[62]=rowid
 161 Insert           2   61   62               00 intkey=r[62] data=r[61]
 162 Ne              53  171   62               00 if r[62]!=r[53] goto 171
 163 Null             0    1    0               00 r[1]=NULL
 164 Rewind           1    1    0               00 
 165 Rewind           4    1    0               00 
 166 Copy            59   63    0               00 r[63]=r[59]
 167 Copy            63   64    0               00 r[64]=r[63]
 168 Copy            63   65    0               00 r[65]=r[63]
 169 Copy            63   66    0               00 r[66]=r[63]
 170 Goto             0  191    0               00 
 171 Compare         63   59    1 k(1,B)        00 r[63] <-> r[59]
 172 Jump           173  191  173               00 
 173 Copy            59   63    0               00 r[63]=r[59]
 174 Column           4    5   68               00 r[68]=
 175 AggStep          0   68    1 sum(1)        01 accum=r[1] step(r[68])
 176 Next             4  178    0               00 
 177 Goto             0  182    0               00 
 178 Column           4    4   69               00 r[69]=
 179 Compare         66   69    1 k(1,B)        00 r[66] <-> r[69]
 180 Jump           181  174  181               00 
 181 Copy            69   66    0               00 r[66]=r[69]
 182 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 183 Gosub           54  215    0               00 
 184 Delete           1    0    0               02 
 185 Next             1  187    0               00 
 186 Goto             0  191    0               00 
 187 Column           1    4   69               00 r[69]=
 188 Compare         65   69    1 k(1,B)        00 r[65] <-> r[69]
 189 Jump           190  183  190               00 
 190 Copy            69   65    0               00 r[65]=r[69]
 191 Goto             0  148    0               00 
 192 Integer        213   67    0               00 r[67]=213
 193 Rewind           2  212    0               00 
 194 Column           4    5   68               00 r[68]=
 195 AggStep          0   68    1 sum(1)        01 accum=r[1] step(r[68])
 196 Next             4  198    0               00 
 197 Goto             0  202    0               00 
 198 Column           4    4   69               00 r[69]=
 199 Compare         66   69    1 k(1,B)        00 r[66] <-> r[69]
 200 Jump           201  194  201               00 
 201 Copy            69   66    0               00 r[66]=r[69]
 202 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 203 Gosub           54  215    0               00 
 204 Delete           1    0    0               02 
 205 Next             1  207    0               00 
 206 Goto             0  212    0               00 
 207 Column           1    4   69               00 r[69]=
 208 Compare         65   69    1 k(1,B)        00 r[65] <-> r[69]
 209 Jump           210  203  210               00 
 210 Copy            69   65    0               00 r[65]=r[69]
 211 Goto             0  202    0               00 
 212 ResetSorter      1    0    0               00 
 213 Return          67    0    0               00 
 214 Goto             0  222    0               00 
 215 Noop             0    0    0               00 inner-loop subroutine
 216 Copy             2   71    0               00 r[71]=r[2]
 217 Column           1    0   72               00 r[72]=
 218 Column           1    1   70               00 r[70]=
 219 MakeRecord      70    3   73               00 r[73]=mkrec(r[70..72])
 220 SorterInsert    15   73   70 3             00 key=r[73]
 221 Return          54    0    0               00 end inner-loop subroutine
 222 Explain        222    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 223 OpenPseudo      16   74    4               00 4 columns in r[74]
 224 SorterSort      15  230    0               00 
 225 SorterData      15   74   16               00 r[74]=data
 226 Column          16    2   72               00 r[72]=sum(following) OVER ( ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 227 Column          16    1   71               00 r[71]=sum(following) OVER (PARTITION BY following, following ORDER BY following RANGE BETWEEN UNBOU
 228 ResultRow       71    2    0               00 output=r[71..72]
 229 SorterNext      15  225    0               00 
 230 Halt             0    0    0               00 
 231 Transaction      0    0    5 0             01 usesStmtJournal=0
 232 Goto             0    1    0               00 
SQL: [SELECT sum(over) OVER (PARTITION BY over, following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  241    0               00 Start at 241
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    6    0               00 nColumn=6
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  153    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6   11    0               00 nColumn=11
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   52   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   14    0 k(2,B,B)      00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   34    0               00 
  19 Column           0    1    9               00 r[9]=v0.following
  20 Column           0    0   10               00 r[10]=v0.over
  21 Column           0    1   11               00 r[11]=v0.following
  22 Column           0    1   12               00 r[12]=v0.following
  23 Column           0    0   13               00 r[13]=v0.over
  24 Column           0    0   14               00 r[14]=v0.over
  25 Column           0    1   15               00 r[15]=v0.following
  26 Column           0    1   16               00 r[16]=v0.following
  27 Column           0    1   17               00 r[17]=v0.following
  28 Column           0    0   18               00 r[18]=v0.over
  29 Column           0    1    7               00 r[7]=v0.following
  30 Column           0    1    8               00 r[8]=v0.following
  31 MakeRecord       7   12   20               00 r[20]=mkrec(r[7..18])
  32 SorterInsert    11   20    7 12            00 key=r[20]
  33 Next             0   19    0               01 
  34 Explain         34   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  35 OpenPseudo      12   21   14               00 14 columns in r[21]
  36 SorterSort      11   51    0               00 
  37 SorterData      11   21   12               00 r[21]=data
  38 Column          12   11   19               00 r[19]=
  39 Column          12    1   18               00 r[18]=
  40 Column          12   10   17               00 r[17]=
  41 Column          12    9   16               00 r[16]=
  42 Column          12    8   15               00 r[15]=
  43 Column          12    7   14               00 r[14]=
  44 Column          12    6   13               00 r[13]=
  45 Column          12    5   12               00 r[12]=
  46 Column          12    4   11               00 r[11]=
  47 Column          12    3   10               00 r[10]=
  48 Column          12    2    9               00 r[9]=
  49 Yield            6    0    0               00 
  50 SorterNext      11   37    0               00 
  51 EndCoroutine     6    0    0               00 
  52 SorterOpen      13   10    0 k(3,B,B,B)    00 
  53 Null             0   22   22               00 r[22..22]=NULL
  54 Integer          1   23    0               00 r[23]=1
  55 Explain         55    7    0 SCAN SUBQUERY 3 00 
  56 InitCoroutine    6    0   14               00 
  57 Yield            6  106    0               00 next row of subquery_3
  58 Copy             9   25    0               00 r[25]=r[9]
  59 Copy            10   26    0               00 r[26]=r[10]
  60 Copy            11   27    0               00 r[27]=r[11]
  61 Copy            12   28    0               00 r[28]=r[12]
  62 Copy            13   29    0               00 r[29]=r[13]
  63 Copy            14   30    0               00 r[30]=r[14]
  64 Copy            15   31    0               00 r[31]=r[15]
  65 Copy            16   32    0               00 r[32]=r[16]
  66 Copy            17   33    0               00 r[33]=r[17]
  67 Copy            18   34    0               00 r[34]=r[18]
  68 Copy            19   35    0               00 r[35]=r[19]
  69 MakeRecord      25   11   36               00 r[36]=mkrec(r[25..35])
  70 Compare         33   22    1 k(1,B)        00 r[33] <-> r[22]
  71 Jump            72   74   72               00 
  72 Gosub           42  107    0               00 call flush_partition
  73 Copy            33   22    0               00 r[22]=r[33]
  74 NewRowid         7   37    0               00 r[37]=rowid
  75 Insert           7   36   37               00 intkey=r[37] data=r[36]
  76 Ne              23   85   37               00 if r[37]!=r[23] goto 85
  77 Null             0    4    0               00 r[4]=NULL
  78 Rewind           6    1    0               00 
  79 Rewind           9    1    0               00 
  80 Copy            34   38    0               00 r[38]=r[34]
  81 Copy            38   39    0               00 r[39]=r[38]
  82 Copy            38   40    0               00 r[40]=r[38]
  83 Copy            38   41    0               00 r[41]=r[38]
  84 Goto             0  105    0               00 
  85 Compare         38   34    1 k(1,B)        00 r[38] <-> r[34]
  86 Jump            87  105   87               00 
  87 Copy            34   38    0               00 r[38]=r[34]
  88 Column           9   10   43               00 r[43]=
  89 AggStep          0   43    4 sum(1)        01 accum=r[4] step(r[43])
  90 Next             9   92    0               00 
  91 Goto             0   96    0               00 
  92 Column           9    9   44               00 r[44]=
  93 Compare         41   44    1 k(1,B)        00 r[41] <-> r[44]
  94 Jump            95   88   95               00 
  95 Copy            44   41    0               00 r[41]=r[44]
  96 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  97 Gosub           24  129    0               00 
  98 Delete           6    0    0               02 
  99 Next             6  101    0               00 
 100 Goto             0  105    0               00 
 101 Column           6    9   44               00 r[44]=
 102 Compare         40   44    1 k(1,B)        00 r[40] <-> r[44]
 103 Jump           104   97  104               00 
 104 Copy            44   40    0               00 r[40]=r[44]
 105 Goto             0   57    0               00 
 106 Integer        127   42    0               00 r[42]=127
 107 Rewind           7  126    0               00 
 108 Column           9   10   43               00 r[43]=
 109 AggStep          0   43    4 sum(1)        01 accum=r[4] step(r[43])
 110 Next             9  112    0               00 
 111 Goto             0  116    0               00 
 112 Column           9    9   44               00 r[44]=
 113 Compare         41   44    1 k(1,B)        00 r[41] <-> r[44]
 114 Jump           115  108  115               00 
 115 Copy            44   41    0               00 r[41]=r[44]
 116 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 117 Gosub           24  129    0               00 
 118 Delete           6    0    0               02 
 119 Next             6  121    0               00 
 120 Goto             0  126    0               00 
 121 Column           6    9   44               00 r[44]=
 122 Compare         40   44    1 k(1,B)        00 r[40] <-> r[44]
 123 Jump           124  117  124               00 
 124 Copy            44   40    0               00 r[40]=r[44]
 125 Goto             0  116    0               00 
 126 ResetSorter      6    0    0               00 
 127 Return          42    0    0               00 
 128 Goto             0  140    0               00 
 129 Noop             0    0    0               00 inner-loop subroutine
 130 Copy             5   48    0               00 r[48]=r[5]
 131 Column           6    0   49               00 r[49]=
 132 Column           6    1   50               00 r[50]=
 133 Column           6    2   51               00 r[51]=
 134 Column           6    5   45               00 r[45]=
 135 Column           6    6   46               00 r[46]=
 136 Column           6    7   47               00 r[47]=
 137 MakeRecord      45    7   54               00 r[54]=mkrec(r[45..51])
 138 SorterInsert    13   54   45 7             00 key=r[54]
 139 Return          24    0    0               00 end inner-loop subroutine
 140 Explain        140    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 141 OpenPseudo      14   55   10               00 10 columns in r[55]
 142 SorterSort      13  152    0               00 
 143 SorterData      13   55   14               00 r[55]=data
 144 Column          14    0   53               00 r[53]=
 145 Column          14    2   52               00 r[52]=
 146 Column          14    6   51               00 r[51]=
 147 Column          14    5   50               00 r[50]=
 148 Column          14    4   49               00 r[49]=
 149 Column          14    3   48               00 r[48]=
 150 Yield            3    0    0               00 
 151 SorterNext      13  143    0               00 
 152 EndCoroutine     3    0    0               00 
 153 SorterOpen      15    4    0 k(1,B)        00 
 154 Null             0   56   57               00 r[56..57]=NULL
 155 Integer          1   58    0               00 r[58]=1
 156 Explain        156    0    0 SCAN SUBQUERY 2 00 
 157 InitCoroutine    3    0    7               00 
 158 Yield            3  202    0               00 next row of subquery_2
 159 Copy            48   60    0               00 r[60]=r[48]
 160 Copy            49   61    0               00 r[61]=r[49]
 161 Copy            50   62    0               00 r[62]=r[50]
 162 Copy            51   63    0               00 r[63]=r[51]
 163 Copy            52   64    0               00 r[64]=r[52]
 164 Copy            53   65    0               00 r[65]=r[53]
 165 MakeRecord      60    6   66               00 r[66]=mkrec(r[60..65])
 166 Compare         62   56    2 k(2,B,B)      00 r[62..63] <-> r[56..57]
 167 Jump           168  170  168               00 
 168 Gosub           72  203    0               00 call flush_partition
 169 Copy            62   56    1               00 r[56..57]=r[62..63]
 170 NewRowid         2   67    0               00 r[67]=rowid
 171 Insert           2   66   67               00 intkey=r[67] data=r[66]
 172 Ne              58  181   67               00 if r[67]!=r[58] goto 181
 173 Null             0    1    0               00 r[1]=NULL
 174 Rewind           1    1    0               00 
 175 Rewind           4    1    0               00 
 176 Copy            64   68    0               00 r[68]=r[64]
 177 Copy            68   69    0               00 r[69]=r[68]
 178 Copy            68   70    0               00 r[70]=r[68]
 179 Copy            68   71    0               00 r[71]=r[68]
 180 Goto             0  201    0               00 
 181 Compare         68   64    1 k(1,B)        00 r[68] <-> r[64]
 182 Jump           183  201  183               00 
 183 Copy            64   68    0               00 r[68]=r[64]
 184 Column           4    5   73               00 r[73]=
 185 AggStep          0   73    1 sum(1)        01 accum=r[1] step(r[73])
 186 Next             4  188    0               00 
 187 Goto             0  192    0               00 
 188 Column           4    4   74               00 r[74]=
 189 Compare         71   74    1 k(1,B)        00 r[71] <-> r[74]
 190 Jump           191  184  191               00 
 191 Copy            74   71    0               00 r[71]=r[74]
 192 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 193 Gosub           59  225    0               00 
 194 Delete           1    0    0               02 
 195 Next             1  197    0               00 
 196 Goto             0  201    0               00 
 197 Column           1    4   74               00 r[74]=
 198 Compare         70   74    1 k(1,B)        00 r[70] <-> r[74]
 199 Jump           200  193  200               00 
 200 Copy            74   70    0               00 r[70]=r[74]
 201 Goto             0  158    0               00 
 202 Integer        223   72    0               00 r[72]=223
 203 Rewind           2  222    0               00 
 204 Column           4    5   73               00 r[73]=
 205 AggStep          0   73    1 sum(1)        01 accum=r[1] step(r[73])
 206 Next             4  208    0               00 
 207 Goto             0  212    0               00 
 208 Column           4    4   74               00 r[74]=
 209 Compare         71   74    1 k(1,B)        00 r[71] <-> r[74]
 210 Jump           211  204  211               00 
 211 Copy            74   71    0               00 r[71]=r[74]
 212 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 213 Gosub           59  225    0               00 
 214 Delete           1    0    0               02 
 215 Next             1  217    0               00 
 216 Goto             0  222    0               00 
 217 Column           1    4   74               00 r[74]=
 218 Compare         70   74    1 k(1,B)        00 r[70] <-> r[74]
 219 Jump           220  213  220               00 
 220 Copy            74   70    0               00 r[70]=r[74]
 221 Goto             0  212    0               00 
 222 ResetSorter      1    0    0               00 
 223 Return          72    0    0               00 
 224 Goto             0  232    0               00 
 225 Noop             0    0    0               00 inner-loop subroutine
 226 Copy             2   76    0               00 r[76]=r[2]
 227 Column           1    0   77               00 r[77]=
 228 Column           1    1   75               00 r[75]=
 229 MakeRecord      75    3   78               00 r[78]=mkrec(r[75..77])
 230 SorterInsert    15   78   75 3             00 key=r[78]
 231 Return          59    0    0               00 end inner-loop subroutine
 232 Explain        232    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 233 OpenPseudo      16   79    4               00 4 columns in r[79]
 234 SorterSort      15  240    0               00 
 235 SorterData      15   79   16               00 r[79]=data
 236 Column          16    2   77               00 r[77]=sum(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING A
 237 Column          16    1   76               00 r[76]=sum(over) OVER (PARTITION BY over, following ORDER BY following RANGE BETWEEN UNBOUNDED PRECE
 238 ResultRow       76    2    0               00 output=r[76..77]
 239 SorterNext      15  235    0               00 
 240 Halt             0    0    0               00 
 241 Transaction      0    0    5 0             01 usesStmtJournal=0
 242 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER ( ORDER BY over RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(following) OVER (PARTITION BY following ORDER BY over RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY over

;]
VDBE Program Listing:
   0 Init             0  197    0               00 Start at 197
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  130    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    6    0               00 nColumn=6
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   41   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    9    0 k(2,B,B)      00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   28    0               00 
  19 Column           0    0    9               00 r[9]=v0.over
  20 Column           0    1   10               00 r[10]=v0.following
  21 Column           0    0   11               00 r[11]=v0.over
  22 Column           0    1   12               00 r[12]=v0.following
  23 Column           0    1    7               00 r[7]=v0.following
  24 Column           0    0    8               00 r[8]=v0.over
  25 MakeRecord       7    6   15               00 r[15]=mkrec(r[7..12])
  26 SorterInsert    11   15    7 6             00 key=r[15]
  27 Next             0   19    0               01 
  28 Explain         28   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  29 OpenPseudo      12   16    9               00 9 columns in r[16]
  30 SorterSort      11   40    0               00 
  31 SorterData      11   16   12               00 r[16]=data
  32 Column          12    0   14               00 r[14]=
  33 Column          12    1   13               00 r[13]=
  34 Column          12    5   12               00 r[12]=
  35 Column          12    4   11               00 r[11]=
  36 Column          12    3   10               00 r[10]=
  37 Column          12    2    9               00 r[9]=
  38 Yield            6    0    0               00 
  39 SorterNext      11   31    0               00 
  40 EndCoroutine     6    0    0               00 
  41 SorterOpen      13    5    0 k(1,B)        00 
  42 Null             0   17   17               00 r[17..17]=NULL
  43 Integer          1   18    0               00 r[18]=1
  44 Explain         44    7    0 SCAN SUBQUERY 3 00 
  45 InitCoroutine    6    0   14               00 
  46 Yield            6   90    0               00 next row of subquery_3
  47 Copy             9   20    0               00 r[20]=r[9]
  48 Copy            10   21    0               00 r[21]=r[10]
  49 Copy            11   22    0               00 r[22]=r[11]
  50 Copy            12   23    0               00 r[23]=r[12]
  51 Copy            13   24    0               00 r[24]=r[13]
  52 Copy            14   25    0               00 r[25]=r[14]
  53 MakeRecord      20    6   26               00 r[26]=mkrec(r[20..25])
  54 Compare         23   17    1 k(1,B)        00 r[23] <-> r[17]
  55 Jump            56   58   56               00 
  56 Gosub           32   91    0               00 call flush_partition
  57 Copy            23   17    0               00 r[17]=r[23]
  58 NewRowid         7   27    0               00 r[27]=rowid
  59 Insert           7   26   27               00 intkey=r[27] data=r[26]
  60 Ne              18   69   27               00 if r[27]!=r[18] goto 69
  61 Null             0    4    0               00 r[4]=NULL
  62 Rewind           6    1    0               00 
  63 Rewind           9    1    0               00 
  64 Copy            24   28    0               00 r[28]=r[24]
  65 Copy            28   29    0               00 r[29]=r[28]
  66 Copy            28   30    0               00 r[30]=r[28]
  67 Copy            28   31    0               00 r[31]=r[28]
  68 Goto             0   89    0               00 
  69 Compare         28   24    1 k(1,B)        00 r[28] <-> r[24]
  70 Jump            71   89   71               00 
  71 Copy            24   28    0               00 r[28]=r[24]
  72 Column           9    5   33               00 r[33]=
  73 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
  74 Next             9   76    0               00 
  75 Goto             0   80    0               00 
  76 Column           9    4   34               00 r[34]=
  77 Compare         31   34    1 k(1,B)        00 r[31] <-> r[34]
  78 Jump            79   72   79               00 
  79 Copy            34   31    0               00 r[31]=r[34]
  80 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  81 Gosub           19  113    0               00 
  82 Delete           6    0    0               02 
  83 Next             6   85    0               00 
  84 Goto             0   89    0               00 
  85 Column           6    4   34               00 r[34]=
  86 Compare         30   34    1 k(1,B)        00 r[30] <-> r[34]
  87 Jump            88   81   88               00 
  88 Copy            34   30    0               00 r[30]=r[34]
  89 Goto             0   46    0               00 
  90 Integer        111   32    0               00 r[32]=111
  91 Rewind           7  110    0               00 
  92 Column           9    5   33               00 r[33]=
  93 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
  94 Next             9   96    0               00 
  95 Goto             0  100    0               00 
  96 Column           9    4   34               00 r[34]=
  97 Compare         31   34    1 k(1,B)        00 r[31] <-> r[34]
  98 Jump            99   92   99               00 
  99 Copy            34   31    0               00 r[31]=r[34]
 100 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 101 Gosub           19  113    0               00 
 102 Delete           6    0    0               02 
 103 Next             6  105    0               00 
 104 Goto             0  110    0               00 
 105 Column           6    4   34               00 r[34]=
 106 Compare         30   34    1 k(1,B)        00 r[30] <-> r[34]
 107 Jump           108  101  108               00 
 108 Copy            34   30    0               00 r[30]=r[34]
 109 Goto             0  100    0               00 
 110 ResetSorter      6    0    0               00 
 111 Return          32    0    0               00 
 112 Goto             0  120    0               00 
 113 Noop             0    0    0               00 inner-loop subroutine
 114 Copy             5   36    0               00 r[36]=r[5]
 115 Column           6    1   37               00 r[37]=
 116 Column           6    2   35               00 r[35]=
 117 MakeRecord      35    3   39               00 r[39]=mkrec(r[35..37])
 118 SorterInsert    13   39   35 3             00 key=r[39]
 119 Return          19    0    0               00 end inner-loop subroutine
 120 Explain        120    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 121 OpenPseudo      14   40    5               00 5 columns in r[40]
 122 SorterSort      13  129    0               00 
 123 SorterData      13   40   14               00 r[40]=data
 124 Column          14    2   38               00 r[38]=
 125 Column          14    0   37               00 r[37]=
 126 Column          14    1   36               00 r[36]=
 127 Yield            3    0    0               00 
 128 SorterNext      13  123    0               00 
 129 EndCoroutine     3    0    0               00 
 130 Integer          1   41    0               00 r[41]=1
 131 Explain        131    0    0 SCAN SUBQUERY 2 00 
 132 InitCoroutine    3    0    7               00 
 133 Yield            3  170    0               00 next row of subquery_2
 134 Copy            36   43    0               00 r[43]=r[36]
 135 Copy            37   44    0               00 r[44]=r[37]
 136 Copy            38   45    0               00 r[45]=r[38]
 137 MakeRecord      43    3   46               00 r[46]=mkrec(r[43..45])
 138 NewRowid         2   47    0               00 r[47]=rowid
 139 Insert           2   46   47               00 intkey=r[47] data=r[46]
 140 Ne              41  149   47               00 if r[47]!=r[41] goto 149
 141 Null             0    1    0               00 r[1]=NULL
 142 Rewind           1    1    0               00 
 143 Rewind           4    1    0               00 
 144 Copy            44   48    0               00 r[48]=r[44]
 145 Copy            48   49    0               00 r[49]=r[48]
 146 Copy            48   50    0               00 r[50]=r[48]
 147 Copy            48   51    0               00 r[51]=r[48]
 148 Goto             0  169    0               00 
 149 Compare         48   44    1 k(1,B)        00 r[48] <-> r[44]
 150 Jump           151  169  151               00 
 151 Copy            44   48    0               00 r[48]=r[44]
 152 Column           4    2   52               00 r[52]=
 153 AggStep          0   52    1 sum(1)        01 accum=r[1] step(r[52])
 154 Next             4  156    0               00 
 155 Goto             0  160    0               00 
 156 Column           4    1   53               00 r[53]=
 157 Compare         51   53    1 k(1,B)        00 r[51] <-> r[53]
 158 Jump           159  152  159               00 
 159 Copy            53   51    0               00 r[51]=r[53]
 160 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 161 Gosub           42  191    0               00 
 162 Delete           1    0    0               02 
 163 Next             1  165    0               00 
 164 Goto             0  169    0               00 
 165 Column           1    1   53               00 r[53]=
 166 Compare         50   53    1 k(1,B)        00 r[50] <-> r[53]
 167 Jump           168  161  168               00 
 168 Copy            53   50    0               00 r[50]=r[53]
 169 Goto             0  133    0               00 
 170 Rewind           2  189    0               00 
 171 Column           4    2   52               00 r[52]=
 172 AggStep          0   52    1 sum(1)        01 accum=r[1] step(r[52])
 173 Next             4  175    0               00 
 174 Goto             0  179    0               00 
 175 Column           4    1   53               00 r[53]=
 176 Compare         51   53    1 k(1,B)        00 r[51] <-> r[53]
 177 Jump           178  171  178               00 
 178 Copy            53   51    0               00 r[51]=r[53]
 179 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 180 Gosub           42  191    0               00 
 181 Delete           1    0    0               02 
 182 Next             1  184    0               00 
 183 Goto             0  189    0               00 
 184 Column           1    1   53               00 r[53]=
 185 Compare         50   53    1 k(1,B)        00 r[50] <-> r[53]
 186 Jump           187  180  187               00 
 187 Copy            53   50    0               00 r[50]=r[53]
 188 Goto             0  179    0               00 
 189 ResetSorter      1    0    0               00 
 190 Goto             0  196    0               00 
 191 Noop             0    0    0               00 inner-loop subroutine
 192 Copy             2   54    0               00 r[54]=r[2]
 193 Column           1    0   55               00 r[55]=
 194 ResultRow       54    2    0               00 output=r[54..55]
 195 Return          42    0    0               00 end inner-loop subroutine
 196 Halt             0    0    0               00 
 197 Transaction      0    0    5 0             01 usesStmtJournal=0
 198 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  216    0               00 Start at 216
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  147    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   55   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    8    0 k(2,B,B)      00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   37    7 0             00 
  19 Column          12    0   10               00 r[10]=t0.c0
  20 Column          12    0   11               00 r[11]=t0.c0
  21 Column          12    0   12               00 r[12]=t0.c0
  22 Column          12    0   13               00 r[13]=t0.c0
  23 Column          12    0   14               00 r[14]=t0.c0
  24 Column          12    0   15               00 r[15]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 Column          12    0    9               00 r[9]=t0.c0
  28 MakeRecord       8    8   17               00 r[17]=mkrec(r[8..15])
  29 SequenceTest    11   34    0               00 if( cursor[11].ctr++ ) pc = 34
  30 Compare         18    7    1 k(3,B,B,B)    00 r[18] <-> r[7]
  31 Jump            32   35   32               00 
  32 Gosub           19   40    0               00 
  33 ResetSorter     11    0    0               00 
  34 Move             7   18    1               00 r[18]=r[7]
  35 SorterInsert    11   17    8 8             00 key=r[17]
  36 Next            12   19    0               01 
  37 Explain         37   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  38 Gosub           19   40    0               00 
  39 Goto             0   54    0               00 
  40 Once             0   42    0               00 
  41 OpenPseudo      13   20   10               00 10 columns in r[20]
  42 SorterSort      11   54    0               00 
  43 SorterData      11   20   13               00 r[20]=data
  44 Column          13    1   16               00 r[16]=
  45 Column          13    7   15               00 r[15]=
  46 Column          13    6   14               00 r[14]=
  47 Column          13    5   13               00 r[13]=
  48 Column          13    4   12               00 r[12]=
  49 Column          13    3   11               00 r[11]=
  50 Column          13    2   10               00 r[10]=
  51 Yield            6    0    0               00 
  52 SorterNext      11   43    0               00 
  53 Return          19    0    0               00 
  54 EndCoroutine     6    0    0               00 
  55 SorterOpen      14    5    0 k(1,B)        00 
  56 Null             0   21   22               00 r[21..22]=NULL
  57 Integer          1   23    0               00 r[23]=1
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  106    0               00 next row of subquery_3
  61 Copy            10   25    0               00 r[25]=r[10]
  62 Copy            11   26    0               00 r[26]=r[11]
  63 Copy            12   27    0               00 r[27]=r[12]
  64 Copy            13   28    0               00 r[28]=r[13]
  65 Copy            14   29    0               00 r[29]=r[14]
  66 Copy            15   30    0               00 r[30]=r[15]
  67 Copy            16   31    0               00 r[31]=r[16]
  68 MakeRecord      25    7   32               00 r[32]=mkrec(r[25..31])
  69 Compare         28   21    2 k(2,B,B)      00 r[28..29] <-> r[21..22]
  70 Jump            71   73   71               00 
  71 Gosub           38  107    0               00 call flush_partition
  72 Copy            28   21    1               00 r[21..22]=r[28..29]
  73 NewRowid         7   33    0               00 r[33]=rowid
  74 Insert           7   32   33               00 intkey=r[33] data=r[32]
  75 Ne              23   84   33               00 if r[33]!=r[23] goto 84
  76 Null             0    4    0               00 r[4]=NULL
  77 Rewind           6    1    0               00 
  78 Rewind           9    1    0               00 
  79 Copy            30   34    0               00 r[34]=r[30]
  80 Copy            34   35    0               00 r[35]=r[34]
  81 Copy            34   36    0               00 r[36]=r[34]
  82 Copy            34   37    0               00 r[37]=r[34]
  83 Goto             0  105    0               00 
  84 Compare         34   30    1 k(1,B)        00 r[34] <-> r[30]
  85 Jump            86  105   86               00 
  86 Copy            30   34    0               00 r[34]=r[30]
  87 Column           9    6   39               00 r[39]=
  88 CollSeq          0    0    0 (BINARY)      00 
  89 AggStep          0   39    4 min(1)        01 accum=r[4] step(r[39])
  90 Next             9   92    0               00 
  91 Goto             0   96    0               00 
  92 Column           9    5   40               00 r[40]=
  93 Compare         37   40    1 k(1,B)        00 r[37] <-> r[40]
  94 Jump            95   87   95               00 
  95 Copy            40   37    0               00 r[37]=r[40]
  96 AggValue         4    1    5 min(1)        00 r[5]=value N=1
  97 Gosub           24  130    0               00 
  98 Delete           6    0    0               02 
  99 Next             6  101    0               00 
 100 Goto             0  105    0               00 
 101 Column           6    5   40               00 r[40]=
 102 Compare         36   40    1 k(1,B)        00 r[36] <-> r[40]
 103 Jump           104   97  104               00 
 104 Copy            40   36    0               00 r[36]=r[40]
 105 Goto             0   60    0               00 
 106 Integer        128   38    0               00 r[38]=128
 107 Rewind           7  127    0               00 
 108 Column           9    6   39               00 r[39]=
 109 CollSeq          0    0    0 (BINARY)      00 
 110 AggStep          0   39    4 min(1)        01 accum=r[4] step(r[39])
 111 Next             9  113    0               00 
 112 Goto             0  117    0               00 
 113 Column           9    5   40               00 r[40]=
 114 Compare         37   40    1 k(1,B)        00 r[37] <-> r[40]
 115 Jump           116  108  116               00 
 116 Copy            40   37    0               00 r[37]=r[40]
 117 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 118 Gosub           24  130    0               00 
 119 Delete           6    0    0               02 
 120 Next             6  122    0               00 
 121 Goto             0  127    0               00 
 122 Column           6    5   40               00 r[40]=
 123 Compare         36   40    1 k(1,B)        00 r[36] <-> r[40]
 124 Jump           125  118  125               00 
 125 Copy            40   36    0               00 r[36]=r[40]
 126 Goto             0  117    0               00 
 127 ResetSorter      6    0    0               00 
 128 Return          38    0    0               00 
 129 Goto             0  137    0               00 
 130 Noop             0    0    0               00 inner-loop subroutine
 131 Copy             5   42    0               00 r[42]=r[5]
 132 Column           6    0   43               00 r[43]=
 133 Column           6    2   41               00 r[41]=
 134 MakeRecord      41    3   45               00 r[45]=mkrec(r[41..43])
 135 SorterInsert    14   45   41 3             00 key=r[45]
 136 Return          24    0    0               00 end inner-loop subroutine
 137 Explain        137    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 138 OpenPseudo      15   46    5               00 5 columns in r[46]
 139 SorterSort      14  146    0               00 
 140 SorterData      14   46   15               00 r[46]=data
 141 Column          15    0   44               00 r[44]=
 142 Column          15    2   43               00 r[43]=
 143 Column          15    1   42               00 r[42]=
 144 Yield            3    0    0               00 
 145 SorterNext      14  140    0               00 
 146 EndCoroutine     3    0    0               00 
 147 Integer          1   47    0               00 r[47]=1
 148 Explain        148    0    0 SCAN SUBQUERY 2 00 
 149 InitCoroutine    3    0    7               00 
 150 Yield            3  188    0               00 next row of subquery_2
 151 Copy            42   49    0               00 r[49]=r[42]
 152 Copy            43   50    0               00 r[50]=r[43]
 153 Copy            44   51    0               00 r[51]=r[44]
 154 MakeRecord      49    3   52               00 r[52]=mkrec(r[49..51])
 155 NewRowid         2   53    0               00 r[53]=rowid
 156 Insert           2   52   53               00 intkey=r[53] data=r[52]
 157 Ne              47  166   53               00 if r[53]!=r[47] goto 166
 158 Null             0    1    0               00 r[1]=NULL
 159 Rewind           1    1    0               00 
 160 Rewind           4    1    0               00 
 161 Copy            50   54    0               00 r[54]=r[50]
 162 Copy            54   55    0               00 r[55]=r[54]
 163 Copy            54   56    0               00 r[56]=r[54]
 164 Copy            54   57    0               00 r[57]=r[54]
 165 Goto             0  187    0               00 
 166 Compare         54   50    1 k(1,B)        00 r[54] <-> r[50]
 167 Jump           168  187  168               00 
 168 Copy            50   54    0               00 r[54]=r[50]
 169 Column           4    2   58               00 r[58]=
 170 CollSeq          0    0    0 (BINARY)      00 
 171 AggStep          0   58    1 max(1)        01 accum=r[1] step(r[58])
 172 Next             4  174    0               00 
 173 Goto             0  178    0               00 
 174 Column           4    1   59               00 r[59]=
 175 Compare         57   59    1 k(1,B)        00 r[57] <-> r[59]
 176 Jump           177  169  177               00 
 177 Copy            59   57    0               00 r[57]=r[59]
 178 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 179 Gosub           48  210    0               00 
 180 Delete           1    0    0               02 
 181 Next             1  183    0               00 
 182 Goto             0  187    0               00 
 183 Column           1    1   59               00 r[59]=
 184 Compare         56   59    1 k(1,B)        00 r[56] <-> r[59]
 185 Jump           186  179  186               00 
 186 Copy            59   56    0               00 r[56]=r[59]
 187 Goto             0  150    0               00 
 188 Rewind           2  208    0               00 
 189 Column           4    2   58               00 r[58]=
 190 CollSeq          0    0    0 (BINARY)      00 
 191 AggStep          0   58    1 max(1)        01 accum=r[1] step(r[58])
 192 Next             4  194    0               00 
 193 Goto             0  198    0               00 
 194 Column           4    1   59               00 r[59]=
 195 Compare         57   59    1 k(1,B)        00 r[57] <-> r[59]
 196 Jump           197  189  197               00 
 197 Copy            59   57    0               00 r[57]=r[59]
 198 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 199 Gosub           48  210    0               00 
 200 Delete           1    0    0               02 
 201 Next             1  203    0               00 
 202 Goto             0  208    0               00 
 203 Column           1    1   59               00 r[59]=
 204 Compare         56   59    1 k(1,B)        00 r[56] <-> r[59]
 205 Jump           206  199  206               00 
 206 Copy            59   56    0               00 r[56]=r[59]
 207 Goto             0  198    0               00 
 208 ResetSorter      1    0    0               00 
 209 Goto             0  215    0               00 
 210 Noop             0    0    0               00 inner-loop subroutine
 211 Copy             2   60    0               00 r[60]=r[2]
 212 Column           1    0   61               00 r[61]=
 213 ResultRow       60    2    0               00 output=r[60..61]
 214 Return          48    0    0               00 end inner-loop subroutine
 215 Halt             0    0    0               00 
 216 Transaction      0    0    5 0             01 usesStmtJournal=0
 217 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(c0) OVER (PARTITION BY c0, c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  212    0               00 Start at 212
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  145    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   55   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    8    0 k(2,B,B)      00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   37    7 0             00 
  19 Column          12    0   10               00 r[10]=t0.c0
  20 Column          12    0   11               00 r[11]=t0.c0
  21 Column          12    0   12               00 r[12]=t0.c0
  22 Column          12    0   13               00 r[13]=t0.c0
  23 Column          12    0   14               00 r[14]=t0.c0
  24 Column          12    0   15               00 r[15]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 Column          12    0    9               00 r[9]=t0.c0
  28 MakeRecord       8    8   17               00 r[17]=mkrec(r[8..15])
  29 SequenceTest    11   34    0               00 if( cursor[11].ctr++ ) pc = 34
  30 Compare         18    7    1 k(3,B,B,B)    00 r[18] <-> r[7]
  31 Jump            32   35   32               00 
  32 Gosub           19   40    0               00 
  33 ResetSorter     11    0    0               00 
  34 Move             7   18    1               00 r[18]=r[7]
  35 SorterInsert    11   17    8 8             00 key=r[17]
  36 Next            12   19    0               01 
  37 Explain         37   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  38 Gosub           19   40    0               00 
  39 Goto             0   54    0               00 
  40 Once             0   42    0               00 
  41 OpenPseudo      13   20   10               00 10 columns in r[20]
  42 SorterSort      11   54    0               00 
  43 SorterData      11   20   13               00 r[20]=data
  44 Column          13    1   16               00 r[16]=
  45 Column          13    7   15               00 r[15]=
  46 Column          13    6   14               00 r[14]=
  47 Column          13    5   13               00 r[13]=
  48 Column          13    4   12               00 r[12]=
  49 Column          13    3   11               00 r[11]=
  50 Column          13    2   10               00 r[10]=
  51 Yield            6    0    0               00 
  52 SorterNext      11   43    0               00 
  53 Return          19    0    0               00 
  54 EndCoroutine     6    0    0               00 
  55 SorterOpen      14    5    0 k(1,B)        00 
  56 Null             0   21   22               00 r[21..22]=NULL
  57 Integer          1   23    0               00 r[23]=1
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  105    0               00 next row of subquery_3
  61 Copy            10   25    0               00 r[25]=r[10]
  62 Copy            11   26    0               00 r[26]=r[11]
  63 Copy            12   27    0               00 r[27]=r[12]
  64 Copy            13   28    0               00 r[28]=r[13]
  65 Copy            14   29    0               00 r[29]=r[14]
  66 Copy            15   30    0               00 r[30]=r[15]
  67 Copy            16   31    0               00 r[31]=r[16]
  68 MakeRecord      25    7   32               00 r[32]=mkrec(r[25..31])
  69 Compare         28   21    2 k(2,B,B)      00 r[28..29] <-> r[21..22]
  70 Jump            71   73   71               00 
  71 Gosub           38  106    0               00 call flush_partition
  72 Copy            28   21    1               00 r[21..22]=r[28..29]
  73 NewRowid         7   33    0               00 r[33]=rowid
  74 Insert           7   32   33               00 intkey=r[33] data=r[32]
  75 Ne              23   84   33               00 if r[33]!=r[23] goto 84
  76 Null             0    4    0               00 r[4]=NULL
  77 Rewind           6    1    0               00 
  78 Rewind           9    1    0               00 
  79 Copy            30   34    0               00 r[34]=r[30]
  80 Copy            34   35    0               00 r[35]=r[34]
  81 Copy            34   36    0               00 r[36]=r[34]
  82 Copy            34   37    0               00 r[37]=r[34]
  83 Goto             0  104    0               00 
  84 Compare         34   30    1 k(1,B)        00 r[34] <-> r[30]
  85 Jump            86  104   86               00 
  86 Copy            30   34    0               00 r[34]=r[30]
  87 Column           9    6   39               00 r[39]=
  88 AggStep          0   39    4 sum(1)        01 accum=r[4] step(r[39])
  89 Next             9   91    0               00 
  90 Goto             0   95    0               00 
  91 Column           9    5   40               00 r[40]=
  92 Compare         37   40    1 k(1,B)        00 r[37] <-> r[40]
  93 Jump            94   87   94               00 
  94 Copy            40   37    0               00 r[37]=r[40]
  95 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  96 Gosub           24  128    0               00 
  97 Delete           6    0    0               02 
  98 Next             6  100    0               00 
  99 Goto             0  104    0               00 
 100 Column           6    5   40               00 r[40]=
 101 Compare         36   40    1 k(1,B)        00 r[36] <-> r[40]
 102 Jump           103   96  103               00 
 103 Copy            40   36    0               00 r[36]=r[40]
 104 Goto             0   60    0               00 
 105 Integer        126   38    0               00 r[38]=126
 106 Rewind           7  125    0               00 
 107 Column           9    6   39               00 r[39]=
 108 AggStep          0   39    4 sum(1)        01 accum=r[4] step(r[39])
 109 Next             9  111    0               00 
 110 Goto             0  115    0               00 
 111 Column           9    5   40               00 r[40]=
 112 Compare         37   40    1 k(1,B)        00 r[37] <-> r[40]
 113 Jump           114  107  114               00 
 114 Copy            40   37    0               00 r[37]=r[40]
 115 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 116 Gosub           24  128    0               00 
 117 Delete           6    0    0               02 
 118 Next             6  120    0               00 
 119 Goto             0  125    0               00 
 120 Column           6    5   40               00 r[40]=
 121 Compare         36   40    1 k(1,B)        00 r[36] <-> r[40]
 122 Jump           123  116  123               00 
 123 Copy            40   36    0               00 r[36]=r[40]
 124 Goto             0  115    0               00 
 125 ResetSorter      6    0    0               00 
 126 Return          38    0    0               00 
 127 Goto             0  135    0               00 
 128 Noop             0    0    0               00 inner-loop subroutine
 129 Copy             5   42    0               00 r[42]=r[5]
 130 Column           6    0   43               00 r[43]=
 131 Column           6    2   41               00 r[41]=
 132 MakeRecord      41    3   45               00 r[45]=mkrec(r[41..43])
 133 SorterInsert    14   45   41 3             00 key=r[45]
 134 Return          24    0    0               00 end inner-loop subroutine
 135 Explain        135    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 136 OpenPseudo      15   46    5               00 5 columns in r[46]
 137 SorterSort      14  144    0               00 
 138 SorterData      14   46   15               00 r[46]=data
 139 Column          15    0   44               00 r[44]=
 140 Column          15    2   43               00 r[43]=
 141 Column          15    1   42               00 r[42]=
 142 Yield            3    0    0               00 
 143 SorterNext      14  138    0               00 
 144 EndCoroutine     3    0    0               00 
 145 Integer          1   47    0               00 r[47]=1
 146 Explain        146    0    0 SCAN SUBQUERY 2 00 
 147 InitCoroutine    3    0    7               00 
 148 Yield            3  185    0               00 next row of subquery_2
 149 Copy            42   49    0               00 r[49]=r[42]
 150 Copy            43   50    0               00 r[50]=r[43]
 151 Copy            44   51    0               00 r[51]=r[44]
 152 MakeRecord      49    3   52               00 r[52]=mkrec(r[49..51])
 153 NewRowid         2   53    0               00 r[53]=rowid
 154 Insert           2   52   53               00 intkey=r[53] data=r[52]
 155 Ne              47  164   53               00 if r[53]!=r[47] goto 164
 156 Null             0    1    0               00 r[1]=NULL
 157 Rewind           1    1    0               00 
 158 Rewind           4    1    0               00 
 159 Copy            50   54    0               00 r[54]=r[50]
 160 Copy            54   55    0               00 r[55]=r[54]
 161 Copy            54   56    0               00 r[56]=r[54]
 162 Copy            54   57    0               00 r[57]=r[54]
 163 Goto             0  184    0               00 
 164 Compare         54   50    1 k(1,B)        00 r[54] <-> r[50]
 165 Jump           166  184  166               00 
 166 Copy            50   54    0               00 r[54]=r[50]
 167 Column           4    2   58               00 r[58]=
 168 AggStep          0   58    1 sum(1)        01 accum=r[1] step(r[58])
 169 Next             4  171    0               00 
 170 Goto             0  175    0               00 
 171 Column           4    1   59               00 r[59]=
 172 Compare         57   59    1 k(1,B)        00 r[57] <-> r[59]
 173 Jump           174  167  174               00 
 174 Copy            59   57    0               00 r[57]=r[59]
 175 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 176 Gosub           48  206    0               00 
 177 Delete           1    0    0               02 
 178 Next             1  180    0               00 
 179 Goto             0  184    0               00 
 180 Column           1    1   59               00 r[59]=
 181 Compare         56   59    1 k(1,B)        00 r[56] <-> r[59]
 182 Jump           183  176  183               00 
 183 Copy            59   56    0               00 r[56]=r[59]
 184 Goto             0  148    0               00 
 185 Rewind           2  204    0               00 
 186 Column           4    2   58               00 r[58]=
 187 AggStep          0   58    1 sum(1)        01 accum=r[1] step(r[58])
 188 Next             4  190    0               00 
 189 Goto             0  194    0               00 
 190 Column           4    1   59               00 r[59]=
 191 Compare         57   59    1 k(1,B)        00 r[57] <-> r[59]
 192 Jump           193  186  193               00 
 193 Copy            59   57    0               00 r[57]=r[59]
 194 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 195 Gosub           48  206    0               00 
 196 Delete           1    0    0               02 
 197 Next             1  199    0               00 
 198 Goto             0  204    0               00 
 199 Column           1    1   59               00 r[59]=
 200 Compare         56   59    1 k(1,B)        00 r[56] <-> r[59]
 201 Jump           202  195  202               00 
 202 Copy            59   56    0               00 r[56]=r[59]
 203 Goto             0  194    0               00 
 204 ResetSorter      1    0    0               00 
 205 Goto             0  211    0               00 
 206 Noop             0    0    0               00 inner-loop subroutine
 207 Copy             2   60    0               00 r[60]=r[2]
 208 Column           1    0   61               00 r[61]=
 209 ResultRow       60    2    0               00 output=r[60..61]
 210 Return          48    0    0               00 end inner-loop subroutine
 211 Halt             0    0    0               00 
 212 Transaction      0    0    5 0             01 usesStmtJournal=0
 213 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0   97    0               00 Start at 97
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    3    0               00 nColumn=3
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   19    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 Noop             6    5    0               00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   18    6 0             00 
  13 Column           7    0    6               00 r[6]=t0.c0
  14 Column           7    0    7               00 r[7]=t0.c0
  15 Column           7    0    8               00 r[8]=t0.c0
  16 Yield            5    0    0               00 
  17 Next             7   13    0               01 
  18 EndCoroutine     5    0    0               00 
  19 Integer          1    9    0               00 r[9]=1
  20 Explain         20    0    0 SCAN SUBQUERY 2 00 
  21 InitCoroutine    5    0    8               00 
  22 Yield            5   65    0               00 next row of subquery_2
  23 Copy             6   11    0               00 r[11]=r[6]
  24 Copy             7   12    0               00 r[12]=r[7]
  25 Copy             8   13    0               00 r[13]=r[8]
  26 MakeRecord      11    3   14               00 r[14]=mkrec(r[11..13])
  27 NewRowid         2   15    0               00 r[15]=rowid
  28 Insert           2   14   15               00 intkey=r[15] data=r[14]
  29 Ne               9   39   15               00 if r[15]!=r[9] goto 39
  30 Null             0    1    0               00 r[1]=NULL
  31 Null             0    3    0               00 r[3]=NULL
  32 Rewind           1    1    0               00 
  33 Rewind           4    1    0               00 
  34 Copy            11   16    0               00 r[16]=r[11]
  35 Copy            16   17    0               00 r[17]=r[16]
  36 Copy            16   18    0               00 r[18]=r[16]
  37 Copy            16   19    0               00 r[19]=r[16]
  38 Goto             0   64    0               00 
  39 Compare         16   11    1 k(1,B)        00 r[16] <-> r[11]
  40 Jump            41   64   41               00 
  41 Copy            11   16    0               00 r[16]=r[11]
  42 Column           4    1   20               00 r[20]=
  43 CollSeq          0    0    0 (BINARY)      00 
  44 AggStep          0   20    1 min(1)        01 accum=r[1] step(r[20])
  45 Column           4    2   20               00 r[20]=
  46 CollSeq          0    0    0 (BINARY)      00 
  47 AggStep          0   20    3 max(1)        01 accum=r[3] step(r[20])
  48 Next             4   50    0               00 
  49 Goto             0   54    0               00 
  50 Column           4    0   21               00 r[21]=
  51 Compare         19   21    1 k(1,B)        00 r[19] <-> r[21]
  52 Jump            53   42   53               00 
  53 Copy            21   19    0               00 r[19]=r[21]
  54 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  55 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  56 Gosub           10   91    0               00 
  57 Delete           1    0    0               02 
  58 Next             1   60    0               00 
  59 Goto             0   64    0               00 
  60 Column           1    0   21               00 r[21]=
  61 Compare         18   21    1 k(1,B)        00 r[18] <-> r[21]
  62 Jump            63   56   63               00 
  63 Copy            21   18    0               00 r[18]=r[21]
  64 Goto             0   22    0               00 
  65 Rewind           2   89    0               00 
  66 Column           4    1   20               00 r[20]=
  67 CollSeq          0    0    0 (BINARY)      00 
  68 AggStep          0   20    1 min(1)        01 accum=r[1] step(r[20])
  69 Column           4    2   20               00 r[20]=
  70 CollSeq          0    0    0 (BINARY)      00 
  71 AggStep          0   20    3 max(1)        01 accum=r[3] step(r[20])
  72 Next             4   74    0               00 
  73 Goto             0   78    0               00 
  74 Column           4    0   21               00 r[21]=
  75 Compare         19   21    1 k(1,B)        00 r[19] <-> r[21]
  76 Jump            77   66   77               00 
  77 Copy            21   19    0               00 r[19]=r[21]
  78 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  79 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  80 Gosub           10   91    0               00 
  81 Delete           1    0    0               02 
  82 Next             1   84    0               00 
  83 Goto             0   89    0               00 
  84 Column           1    0   21               00 r[21]=
  85 Compare         18   21    1 k(1,B)        00 r[18] <-> r[21]
  86 Jump            87   80   87               00 
  87 Copy            21   18    0               00 r[18]=r[21]
  88 Goto             0   78    0               00 
  89 ResetSorter      1    0    0               00 
  90 Goto             0   96    0               00 
  91 Noop             0    0    0               00 inner-loop subroutine
  92 Copy             4   22    0               00 r[22]=r[4]
  93 Copy             2   23    0               00 r[23]=r[2]
  94 ResultRow       22    2    0               00 output=r[22..23]
  95 Return          10    0    0               00 end inner-loop subroutine
  96 Halt             0    0    0               00 
  97 Transaction      0    0    5 0             01 usesStmtJournal=0
  98 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(c0) OVER ( ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0   93    0               00 Start at 93
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    3    0               00 nColumn=3
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   19    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 Noop             6    5    0               00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   18    6 0             00 
  13 Column           7    0    6               00 r[6]=t0.c0
  14 Column           7    0    7               00 r[7]=t0.c0
  15 Column           7    0    8               00 r[8]=t0.c0
  16 Yield            5    0    0               00 
  17 Next             7   13    0               01 
  18 EndCoroutine     5    0    0               00 
  19 Integer          1    9    0               00 r[9]=1
  20 Explain         20    0    0 SCAN SUBQUERY 2 00 
  21 InitCoroutine    5    0    8               00 
  22 Yield            5   63    0               00 next row of subquery_2
  23 Copy             6   11    0               00 r[11]=r[6]
  24 Copy             7   12    0               00 r[12]=r[7]
  25 Copy             8   13    0               00 r[13]=r[8]
  26 MakeRecord      11    3   14               00 r[14]=mkrec(r[11..13])
  27 NewRowid         2   15    0               00 r[15]=rowid
  28 Insert           2   14   15               00 intkey=r[15] data=r[14]
  29 Ne               9   39   15               00 if r[15]!=r[9] goto 39
  30 Null             0    1    0               00 r[1]=NULL
  31 Null             0    3    0               00 r[3]=NULL
  32 Rewind           1    1    0               00 
  33 Rewind           4    1    0               00 
  34 Copy            11   16    0               00 r[16]=r[11]
  35 Copy            16   17    0               00 r[17]=r[16]
  36 Copy            16   18    0               00 r[18]=r[16]
  37 Copy            16   19    0               00 r[19]=r[16]
  38 Goto             0   62    0               00 
  39 Compare         16   11    1 k(1,B)        00 r[16] <-> r[11]
  40 Jump            41   62   41               00 
  41 Copy            11   16    0               00 r[16]=r[11]
  42 Column           4    1   20               00 r[20]=
  43 AggStep          0   20    1 sum(1)        01 accum=r[1] step(r[20])
  44 Column           4    2   20               00 r[20]=
  45 AggStep          0   20    3 sum(1)        01 accum=r[3] step(r[20])
  46 Next             4   48    0               00 
  47 Goto             0   52    0               00 
  48 Column           4    0   21               00 r[21]=
  49 Compare         19   21    1 k(1,B)        00 r[19] <-> r[21]
  50 Jump            51   42   51               00 
  51 Copy            21   19    0               00 r[19]=r[21]
  52 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  53 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  54 Gosub           10   87    0               00 
  55 Delete           1    0    0               02 
  56 Next             1   58    0               00 
  57 Goto             0   62    0               00 
  58 Column           1    0   21               00 r[21]=
  59 Compare         18   21    1 k(1,B)        00 r[18] <-> r[21]
  60 Jump            61   54   61               00 
  61 Copy            21   18    0               00 r[18]=r[21]
  62 Goto             0   22    0               00 
  63 Rewind           2   85    0               00 
  64 Column           4    1   20               00 r[20]=
  65 AggStep          0   20    1 sum(1)        01 accum=r[1] step(r[20])
  66 Column           4    2   20               00 r[20]=
  67 AggStep          0   20    3 sum(1)        01 accum=r[3] step(r[20])
  68 Next             4   70    0               00 
  69 Goto             0   74    0               00 
  70 Column           4    0   21               00 r[21]=
  71 Compare         19   21    1 k(1,B)        00 r[19] <-> r[21]
  72 Jump            73   64   73               00 
  73 Copy            21   19    0               00 r[19]=r[21]
  74 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  75 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  76 Gosub           10   87    0               00 
  77 Delete           1    0    0               02 
  78 Next             1   80    0               00 
  79 Goto             0   85    0               00 
  80 Column           1    0   21               00 r[21]=
  81 Compare         18   21    1 k(1,B)        00 r[18] <-> r[21]
  82 Jump            83   76   83               00 
  83 Copy            21   18    0               00 r[18]=r[21]
  84 Goto             0   74    0               00 
  85 ResetSorter      1    0    0               00 
  86 Goto             0   92    0               00 
  87 Noop             0    0    0               00 inner-loop subroutine
  88 Copy             4   22    0               00 r[22]=r[4]
  89 Copy             2   23    0               00 r[23]=r[2]
  90 ResultRow       22    2    0               00 output=r[22..23]
  91 Return          10    0    0               00 end inner-loop subroutine
  92 Halt             0    0    0               00 
  93 Transaction      0    0    5 0             01 usesStmtJournal=0
  94 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  138    0               00 Start at 138
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,B)        00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=t0.c0
  14 Column           7    0    9               00 r[9]=t0.c0
  15 Column           7    0   10               00 r[10]=t0.c0
  16 Column           7    0   11               00 r[11]=t0.c0
  17 Column           7    0    6               00 r[6]=t0.c0
  18 Column           7    0    7               00 r[7]=t0.c0
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    0   12               00 r[12]=
  36 Column           8    4   11               00 r[11]=
  37 Column           8    3   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 Explain         47    0    0 SCAN SUBQUERY 2 00 
  48 InitCoroutine    5    0    8               00 
  49 Yield            5   96    0               00 next row of subquery_2
  50 Copy             8   20    0               00 r[20]=r[8]
  51 Copy             9   21    0               00 r[21]=r[9]
  52 Copy            10   22    0               00 r[22]=r[10]
  53 Copy            11   23    0               00 r[23]=r[11]
  54 Copy            12   24    0               00 r[24]=r[12]
  55 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  56 Compare         21   17    1 k(1,B)        00 r[21] <-> r[17]
  57 Jump            58   60   58               00 
  58 Gosub           31   97    0               00 call flush_partition
  59 Copy            21   17    0               00 r[17]=r[21]
  60 NewRowid         2   26    0               00 r[26]=rowid
  61 Insert           2   25   26               00 intkey=r[26] data=r[25]
  62 Ne              18   72   26               00 if r[26]!=r[18] goto 72
  63 Null             0    1    0               00 r[1]=NULL
  64 Null             0    3    0               00 r[3]=NULL
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Copy            22   27    0               00 r[27]=r[22]
  68 Copy            27   28    0               00 r[28]=r[27]
  69 Copy            27   29    0               00 r[29]=r[27]
  70 Copy            27   30    0               00 r[30]=r[27]
  71 Goto             0   95    0               00 
  72 Compare         27   22    1 k(1,B)        00 r[27] <-> r[22]
  73 Jump            74   95   74               00 
  74 Copy            22   27    0               00 r[27]=r[22]
  75 Column           4    3   32               00 r[32]=
  76 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
  77 Column           4    4   32               00 r[32]=
  78 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
  79 Next             4   81    0               00 
  80 Goto             0   85    0               00 
  81 Column           4    2   33               00 r[33]=
  82 Compare         30   33    1 k(1,B)        00 r[30] <-> r[33]
  83 Jump            84   75   84               00 
  84 Copy            33   30    0               00 r[30]=r[33]
  85 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  86 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  87 Gosub           19  122    0               00 
  88 Delete           1    0    0               02 
  89 Next             1   91    0               00 
  90 Goto             0   95    0               00 
  91 Column           1    2   33               00 r[33]=
  92 Compare         29   33    1 k(1,B)        00 r[29] <-> r[33]
  93 Jump            94   87   94               00 
  94 Copy            33   29    0               00 r[29]=r[33]
  95 Goto             0   49    0               00 
  96 Integer        120   31    0               00 r[31]=120
  97 Rewind           2  119    0               00 
  98 Column           4    3   32               00 r[32]=
  99 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
 100 Column           4    4   32               00 r[32]=
 101 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
 102 Next             4  104    0               00 
 103 Goto             0  108    0               00 
 104 Column           4    2   33               00 r[33]=
 105 Compare         30   33    1 k(1,B)        00 r[30] <-> r[33]
 106 Jump           107   98  107               00 
 107 Copy            33   30    0               00 r[30]=r[33]
 108 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 109 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
 110 Gosub           19  122    0               00 
 111 Delete           1    0    0               02 
 112 Next             1  114    0               00 
 113 Goto             0  119    0               00 
 114 Column           1    2   33               00 r[33]=
 115 Compare         29   33    1 k(1,B)        00 r[29] <-> r[33]
 116 Jump           117  110  117               00 
 117 Copy            33   29    0               00 r[29]=r[33]
 118 Goto             0  108    0               00 
 119 ResetSorter      1    0    0               00 
 120 Return          31    0    0               00 
 121 Goto             0  129    0               00 
 122 Noop             0    0    0               00 inner-loop subroutine
 123 Copy             4   35    0               00 r[35]=r[4]
 124 Copy             2   36    0               00 r[36]=r[2]
 125 Column           1    0   34               00 r[34]=
 126 MakeRecord      34    3   37               00 r[37]=mkrec(r[34..36])
 127 SorterInsert     9   37   34 3             00 key=r[37]
 128 Return          19    0    0               00 end inner-loop subroutine
 129 Explain        129    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 130 OpenPseudo      10   38    4               00 4 columns in r[38]
 131 SorterSort       9  137    0               00 
 132 SorterData       9   38   10               00 r[38]=data
 133 Column          10    2   36               00 r[36]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 134 Column          10    1   35               00 r[35]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 135 ResultRow       35    2    0               00 output=r[35..36]
 136 SorterNext       9  132    0               00 
 137 Halt             0    0    0               00 
 138 Transaction      0    0    5 0             01 usesStmtJournal=0
 139 Goto             0    1    0               00 
SQL: [SELECT max(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  132    0               00 Start at 132
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   34    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    8    0 k(2,B,B)      00 
  10 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  11 Explain         11    8    0 SCAN TABLE v0 00 
  12 Rewind           0   22    0               00 
  13 Column           0    1    8               00 r[8]=v0.following
  14 Column           0    1    9               00 r[9]=v0.following
  15 Column           0    1   10               00 r[10]=v0.following
  16 Column           0    1   11               00 r[11]=v0.following
  17 Column           0    1    6               00 r[6]=v0.following
  18 Column           0    1    7               00 r[7]=v0.following
  19 MakeRecord       6    6   13               00 r[13]=mkrec(r[6..11])
  20 SorterInsert     6   13    6 6             00 key=r[13]
  21 Next             0   13    0               01 
  22 Explain         22    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  23 OpenPseudo       7   14    8               00 8 columns in r[14]
  24 SorterSort       6   33    0               00 
  25 SorterData       6   14    7               00 r[14]=data
  26 Column           7    1   12               00 r[12]=
  27 Column           7    5   11               00 r[11]=
  28 Column           7    4   10               00 r[10]=
  29 Column           7    3    9               00 r[9]=
  30 Column           7    2    8               00 r[8]=
  31 Yield            5    0    0               00 
  32 SorterNext       6   25    0               00 
  33 EndCoroutine     5    0    0               00 
  34 SorterOpen       8    4    0 k(1,B)        00 
  35 Null             0   15   15               00 r[15..15]=NULL
  36 Integer          1   16    0               00 r[16]=1
  37 Explain         37    0    0 SCAN SUBQUERY 2 00 
  38 InitCoroutine    5    0    8               00 
  39 Yield            5   88    0               00 next row of subquery_2
  40 Copy             8   18    0               00 r[18]=r[8]
  41 Copy             9   19    0               00 r[19]=r[9]
  42 Copy            10   20    0               00 r[20]=r[10]
  43 Copy            11   21    0               00 r[21]=r[11]
  44 Copy            12   22    0               00 r[22]=r[12]
  45 MakeRecord      18    5   23               00 r[23]=mkrec(r[18..22])
  46 Compare         19   15    1 k(1,B)        00 r[19] <-> r[15]
  47 Jump            48   50   48               00 
  48 Gosub           29   89    0               00 call flush_partition
  49 Copy            19   15    0               00 r[15]=r[19]
  50 NewRowid         2   24    0               00 r[24]=rowid
  51 Insert           2   23   24               00 intkey=r[24] data=r[23]
  52 Ne              16   62   24               00 if r[24]!=r[16] goto 62
  53 Null             0    1    0               00 r[1]=NULL
  54 Null             0    3    0               00 r[3]=NULL
  55 Rewind           1    1    0               00 
  56 Rewind           4    1    0               00 
  57 Copy            20   25    0               00 r[25]=r[20]
  58 Copy            25   26    0               00 r[26]=r[25]
  59 Copy            25   27    0               00 r[27]=r[25]
  60 Copy            25   28    0               00 r[28]=r[25]
  61 Goto             0   87    0               00 
  62 Compare         25   20    1 k(1,B)        00 r[25] <-> r[20]
  63 Jump            64   87   64               00 
  64 Copy            20   25    0               00 r[25]=r[20]
  65 Column           4    3   30               00 r[30]=
  66 CollSeq          0    0    0 (BINARY)      00 
  67 AggStep          0   30    1 min(1)        01 accum=r[1] step(r[30])
  68 Column           4    4   30               00 r[30]=
  69 CollSeq          0    0    0 (BINARY)      00 
  70 AggStep          0   30    3 max(1)        01 accum=r[3] step(r[30])
  71 Next             4   73    0               00 
  72 Goto             0   77    0               00 
  73 Column           4    2   31               00 r[31]=
  74 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
  75 Jump            76   65   76               00 
  76 Copy            31   28    0               00 r[28]=r[31]
  77 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  78 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  79 Gosub           17  116    0               00 
  80 Delete           1    0    0               02 
  81 Next             1   83    0               00 
  82 Goto             0   87    0               00 
  83 Column           1    2   31               00 r[31]=
  84 Compare         27   31    1 k(1,B)        00 r[27] <-> r[31]
  85 Jump            86   79   86               00 
  86 Copy            31   27    0               00 r[27]=r[31]
  87 Goto             0   39    0               00 
  88 Integer        114   29    0               00 r[29]=114
  89 Rewind           2  113    0               00 
  90 Column           4    3   30               00 r[30]=
  91 CollSeq          0    0    0 (BINARY)      00 
  92 AggStep          0   30    1 min(1)        01 accum=r[1] step(r[30])
  93 Column           4    4   30               00 r[30]=
  94 CollSeq          0    0    0 (BINARY)      00 
  95 AggStep          0   30    3 max(1)        01 accum=r[3] step(r[30])
  96 Next             4   98    0               00 
  97 Goto             0  102    0               00 
  98 Column           4    2   31               00 r[31]=
  99 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
 100 Jump           101   90  101               00 
 101 Copy            31   28    0               00 r[28]=r[31]
 102 AggValue         1    1    2 min(1)        00 r[2]=value N=1
 103 AggValue         3    1    4 max(1)        00 r[4]=value N=1
 104 Gosub           17  116    0               00 
 105 Delete           1    0    0               02 
 106 Next             1  108    0               00 
 107 Goto             0  113    0               00 
 108 Column           1    2   31               00 r[31]=
 109 Compare         27   31    1 k(1,B)        00 r[27] <-> r[31]
 110 Jump           111  104  111               00 
 111 Copy            31   27    0               00 r[27]=r[31]
 112 Goto             0  102    0               00 
 113 ResetSorter      1    0    0               00 
 114 Return          29    0    0               00 
 115 Goto             0  123    0               00 
 116 Noop             0    0    0               00 inner-loop subroutine
 117 Copy             4   33    0               00 r[33]=r[4]
 118 Copy             2   34    0               00 r[34]=r[2]
 119 Column           1    0   32               00 r[32]=
 120 MakeRecord      32    3   35               00 r[35]=mkrec(r[32..34])
 121 SorterInsert     8   35   32 3             00 key=r[35]
 122 Return          17    0    0               00 end inner-loop subroutine
 123 Explain        123    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 124 OpenPseudo       9   36    4               00 4 columns in r[36]
 125 SorterSort       8  131    0               00 
 126 SorterData       8   36    9               00 r[36]=data
 127 Column           9    2   34               00 r[34]=min(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECED
 128 Column           9    1   33               00 r[33]=max(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECED
 129 ResultRow       33    2    0               00 output=r[33..34]
 130 SorterNext       8  126    0               00 
 131 Halt             0    0    0               00 
 132 Transaction      0    0    5 0             01 usesStmtJournal=0
 133 Goto             0    1    0               00 
SQL: [SELECT sum(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  128    0               00 Start at 128
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   34    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    8    0 k(2,B,B)      00 
  10 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  11 Explain         11    8    0 SCAN TABLE v0 00 
  12 Rewind           0   22    0               00 
  13 Column           0    1    8               00 r[8]=v0.following
  14 Column           0    1    9               00 r[9]=v0.following
  15 Column           0    0   10               00 r[10]=v0.over
  16 Column           0    0   11               00 r[11]=v0.over
  17 Column           0    1    6               00 r[6]=v0.following
  18 Column           0    1    7               00 r[7]=v0.following
  19 MakeRecord       6    6   13               00 r[13]=mkrec(r[6..11])
  20 SorterInsert     6   13    6 6             00 key=r[13]
  21 Next             0   13    0               01 
  22 Explain         22    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  23 OpenPseudo       7   14    8               00 8 columns in r[14]
  24 SorterSort       6   33    0               00 
  25 SorterData       6   14    7               00 r[14]=data
  26 Column           7    5   12               00 r[12]=
  27 Column           7    4   11               00 r[11]=
  28 Column           7    1   10               00 r[10]=
  29 Column           7    3    9               00 r[9]=
  30 Column           7    2    8               00 r[8]=
  31 Yield            5    0    0               00 
  32 SorterNext       6   25    0               00 
  33 EndCoroutine     5    0    0               00 
  34 SorterOpen       8    4    0 k(1,B)        00 
  35 Null             0   15   15               00 r[15..15]=NULL
  36 Integer          1   16    0               00 r[16]=1
  37 Explain         37    0    0 SCAN SUBQUERY 2 00 
  38 InitCoroutine    5    0    8               00 
  39 Yield            5   86    0               00 next row of subquery_2
  40 Copy             8   18    0               00 r[18]=r[8]
  41 Copy             9   19    0               00 r[19]=r[9]
  42 Copy            10   20    0               00 r[20]=r[10]
  43 Copy            11   21    0               00 r[21]=r[11]
  44 Copy            12   22    0               00 r[22]=r[12]
  45 MakeRecord      18    5   23               00 r[23]=mkrec(r[18..22])
  46 Compare         19   15    1 k(1,B)        00 r[19] <-> r[15]
  47 Jump            48   50   48               00 
  48 Gosub           29   87    0               00 call flush_partition
  49 Copy            19   15    0               00 r[15]=r[19]
  50 NewRowid         2   24    0               00 r[24]=rowid
  51 Insert           2   23   24               00 intkey=r[24] data=r[23]
  52 Ne              16   62   24               00 if r[24]!=r[16] goto 62
  53 Null             0    1    0               00 r[1]=NULL
  54 Null             0    3    0               00 r[3]=NULL
  55 Rewind           1    1    0               00 
  56 Rewind           4    1    0               00 
  57 Copy            20   25    0               00 r[25]=r[20]
  58 Copy            25   26    0               00 r[26]=r[25]
  59 Copy            25   27    0               00 r[27]=r[25]
  60 Copy            25   28    0               00 r[28]=r[25]
  61 Goto             0   85    0               00 
  62 Compare         25   20    1 k(1,B)        00 r[25] <-> r[20]
  63 Jump            64   85   64               00 
  64 Copy            20   25    0               00 r[25]=r[20]
  65 Column           4    3   30               00 r[30]=
  66 AggStep          0   30    1 sum(1)        01 accum=r[1] step(r[30])
  67 Column           4    4   30               00 r[30]=
  68 AggStep          0   30    3 sum(1)        01 accum=r[3] step(r[30])
  69 Next             4   71    0               00 
  70 Goto             0   75    0               00 
  71 Column           4    2   31               00 r[31]=
  72 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
  73 Jump            74   65   74               00 
  74 Copy            31   28    0               00 r[28]=r[31]
  75 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  76 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  77 Gosub           17  112    0               00 
  78 Delete           1    0    0               02 
  79 Next             1   81    0               00 
  80 Goto             0   85    0               00 
  81 Column           1    2   31               00 r[31]=
  82 Compare         27   31    1 k(1,B)        00 r[27] <-> r[31]
  83 Jump            84   77   84               00 
  84 Copy            31   27    0               00 r[27]=r[31]
  85 Goto             0   39    0               00 
  86 Integer        110   29    0               00 r[29]=110
  87 Rewind           2  109    0               00 
  88 Column           4    3   30               00 r[30]=
  89 AggStep          0   30    1 sum(1)        01 accum=r[1] step(r[30])
  90 Column           4    4   30               00 r[30]=
  91 AggStep          0   30    3 sum(1)        01 accum=r[3] step(r[30])
  92 Next             4   94    0               00 
  93 Goto             0   98    0               00 
  94 Column           4    2   31               00 r[31]=
  95 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
  96 Jump            97   88   97               00 
  97 Copy            31   28    0               00 r[28]=r[31]
  98 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  99 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
 100 Gosub           17  112    0               00 
 101 Delete           1    0    0               02 
 102 Next             1  104    0               00 
 103 Goto             0  109    0               00 
 104 Column           1    2   31               00 r[31]=
 105 Compare         27   31    1 k(1,B)        00 r[27] <-> r[31]
 106 Jump           107  100  107               00 
 107 Copy            31   27    0               00 r[27]=r[31]
 108 Goto             0   98    0               00 
 109 ResetSorter      1    0    0               00 
 110 Return          29    0    0               00 
 111 Goto             0  119    0               00 
 112 Noop             0    0    0               00 inner-loop subroutine
 113 Copy             4   33    0               00 r[33]=r[4]
 114 Copy             2   34    0               00 r[34]=r[2]
 115 Column           1    0   32               00 r[32]=
 116 MakeRecord      32    3   35               00 r[35]=mkrec(r[32..34])
 117 SorterInsert     8   35   32 3             00 key=r[35]
 118 Return          17    0    0               00 end inner-loop subroutine
 119 Explain        119    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 120 OpenPseudo       9   36    4               00 4 columns in r[36]
 121 SorterSort       8  127    0               00 
 122 SorterData       8   36    9               00 r[36]=data
 123 Column           9    2   34               00 r[34]=sum(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING A
 124 Column           9    1   33               00 r[33]=sum(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING A
 125 ResultRow       33    2    0               00 output=r[33..34]
 126 SorterNext       8  122    0               00 
 127 Halt             0    0    0               00 
 128 Transaction      0    0    5 0             01 usesStmtJournal=0
 129 Goto             0    1    0               00 
SQL: [SELECT sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  202    0               00 Start at 202
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  115    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   43   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  17 Explain         17   14    0 SCAN TABLE preceding 00 
  18 Rewind           0   29    0               00 
  19 Column           0    0    9               00 r[9]=preceding.t1
  20 Column           0    1   10               00 r[10]=preceding.x
  21 Column           0    0   11               00 r[11]=preceding.t1
  22 Column           0    0   12               00 r[12]=preceding.t1
  23 Column           0    0   13               00 r[13]=preceding.t1
  24 Column           0    1    7               00 r[7]=preceding.x
  25 Column           0    0    8               00 r[8]=preceding.t1
  26 MakeRecord       7    7   16               00 r[16]=mkrec(r[7..13])
  27 SorterInsert    11   16    7 7             00 key=r[16]
  28 Next             0   19    0               01 
  29 Explain         29   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  30 OpenPseudo      12   17   10               00 10 columns in r[17]
  31 SorterSort      11   42    0               00 
  32 SorterData      11   17   12               00 r[17]=data
  33 Column          12    1   15               00 r[15]=
  34 Column          12    6   14               00 r[14]=
  35 Column          12    0   13               00 r[13]=
  36 Column          12    5   12               00 r[12]=
  37 Column          12    4   11               00 r[11]=
  38 Column          12    3   10               00 r[10]=
  39 Column          12    2    9               00 r[9]=
  40 Yield            6    0    0               00 
  41 SorterNext      11   32    0               00 
  42 EndCoroutine     6    0    0               00 
  43 Null             0   18   18               00 r[18..18]=NULL
  44 Integer          1   19    0               00 r[19]=1
  45 Explain         45    7    0 SCAN SUBQUERY 3 00 
  46 InitCoroutine    6    0   14               00 
  47 Yield            6   83    0               00 next row of subquery_3
  48 Copy             9   21    0               00 r[21]=r[9]
  49 Copy            10   22    0               00 r[22]=r[10]
  50 Copy            11   23    0               00 r[23]=r[11]
  51 Copy            12   24    0               00 r[24]=r[12]
  52 Copy            13   25    0               00 r[25]=r[13]
  53 Copy            14   26    0               00 r[26]=r[14]
  54 Copy            15   27    0               00 r[27]=r[15]
  55 MakeRecord      21    7   28               00 r[28]=mkrec(r[21..27])
  56 Compare         25   18    1 k(1,B)        00 r[25] <-> r[18]
  57 Jump            58   60   58               00 
  58 Gosub           34   84    0               00 call flush_partition
  59 Copy            25   18    0               00 r[18]=r[25]
  60 NewRowid         7   29    0               00 r[29]=rowid
  61 Insert           7   28   29               00 intkey=r[29] data=r[28]
  62 Ne              19   71   29               00 if r[29]!=r[19] goto 71
  63 Null             0    4    0               00 r[4]=NULL
  64 Rewind           6    1    0               00 
  65 Rewind           9    1    0               00 
  66 Copy            26   30    0               00 r[30]=r[26]
  67 Copy            30   31    0               00 r[31]=r[30]
  68 Copy            30   32    0               00 r[32]=r[30]
  69 Copy            30   33    0               00 r[33]=r[30]
  70 Goto             0   82    0               00 
  71 Compare         30   26    1 k(1,B)        00 r[30] <-> r[26]
  72 Jump            73   82   73               00 
  73 Copy            26   30    0               00 r[30]=r[26]
  74 Column           9    6   35               00 r[35]=
  75 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  76 Next             9   78    0               00 
  77 Goto             0   82    0               00 
  78 Column           9    5   36               00 r[36]=
  79 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
  80 Jump            81   74   81               00 
  81 Copy            36   33    0               00 r[33]=r[36]
  82 Goto             0   47    0               00 
  83 Integer        104   34    0               00 r[34]=104
  84 Rewind           7  103    0               00 
  85 Column           9    6   35               00 r[35]=
  86 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  87 Next             9   89    0               00 
  88 Goto             0   93    0               00 
  89 Column           9    5   36               00 r[36]=
  90 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
  91 Jump            92   85   92               00 
  92 Copy            36   33    0               00 r[33]=r[36]
  93 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  94 Gosub           20  106    0               00 
  95 Delete           6    0    0               02 
  96 Next             6   98    0               00 
  97 Goto             0  103    0               00 
  98 Column           6    5   36               00 r[36]=
  99 Compare         32   36    1 k(1,B)        00 r[32] <-> r[36]
 100 Jump           101   94  101               00 
 101 Copy            36   32    0               00 r[32]=r[36]
 102 Goto             0   93    0               00 
 103 ResetSorter      6    0    0               00 
 104 Return          34    0    0               00 
 105 Goto             0  114    0               00 
 106 Noop             0    0    0               00 inner-loop subroutine
 107 Copy             5   37    0               00 r[37]=r[5]
 108 Column           6    0   38               00 r[38]=
 109 Column           6    1   39               00 r[39]=
 110 Column           6    2   40               00 r[40]=
 111 Column           6    3   41               00 r[41]=
 112 Yield            3    0    0               00 
 113 Return          20    0    0               00 end inner-loop subroutine
 114 EndCoroutine     3    0    0               00 
 115 SorterOpen      13    4    0 k(1,B)        00 
 116 Null             0   42   42               00 r[42..42]=NULL
 117 Integer          1   43    0               00 r[43]=1
 118 Explain        118    0    0 SCAN SUBQUERY 2 00 
 119 InitCoroutine    3    0    7               00 
 120 Yield            3  163    0               00 next row of subquery_2
 121 Copy            37   45    0               00 r[45]=r[37]
 122 Copy            38   46    0               00 r[46]=r[38]
 123 Copy            39   47    0               00 r[47]=r[39]
 124 Copy            40   48    0               00 r[48]=r[40]
 125 Copy            41   49    0               00 r[49]=r[41]
 126 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 127 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 128 Jump           129  131  129               00 
 129 Gosub           56  164    0               00 call flush_partition
 130 Copy            47   42    0               00 r[42]=r[47]
 131 NewRowid         2   51    0               00 r[51]=rowid
 132 Insert           2   50   51               00 intkey=r[51] data=r[50]
 133 Ne              43  142   51               00 if r[51]!=r[43] goto 142
 134 Null             0    1    0               00 r[1]=NULL
 135 Rewind           1    1    0               00 
 136 Rewind           4    1    0               00 
 137 Copy            48   52    0               00 r[52]=r[48]
 138 Copy            52   53    0               00 r[53]=r[52]
 139 Copy            52   54    0               00 r[54]=r[52]
 140 Copy            52   55    0               00 r[55]=r[52]
 141 Goto             0  162    0               00 
 142 Compare         52   48    1 k(1,B)        00 r[52] <-> r[48]
 143 Jump           144  162  144               00 
 144 Copy            48   52    0               00 r[52]=r[48]
 145 Column           4    4   57               00 r[57]=
 146 AggStep          0   57    1 sum(1)        01 accum=r[1] step(r[57])
 147 Next             4  149    0               00 
 148 Goto             0  153    0               00 
 149 Column           4    3   58               00 r[58]=
 150 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 151 Jump           152  145  152               00 
 152 Copy            58   55    0               00 r[55]=r[58]
 153 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 154 Gosub           44  186    0               00 
 155 Delete           1    0    0               02 
 156 Next             1  158    0               00 
 157 Goto             0  162    0               00 
 158 Column           1    3   58               00 r[58]=
 159 Compare         54   58    1 k(1,B)        00 r[54] <-> r[58]
 160 Jump           161  154  161               00 
 161 Copy            58   54    0               00 r[54]=r[58]
 162 Goto             0  120    0               00 
 163 Integer        184   56    0               00 r[56]=184
 164 Rewind           2  183    0               00 
 165 Column           4    4   57               00 r[57]=
 166 AggStep          0   57    1 sum(1)        01 accum=r[1] step(r[57])
 167 Next             4  169    0               00 
 168 Goto             0  173    0               00 
 169 Column           4    3   58               00 r[58]=
 170 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 171 Jump           172  165  172               00 
 172 Copy            58   55    0               00 r[55]=r[58]
 173 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 174 Gosub           44  186    0               00 
 175 Delete           1    0    0               02 
 176 Next             1  178    0               00 
 177 Goto             0  183    0               00 
 178 Column           1    3   58               00 r[58]=
 179 Compare         54   58    1 k(1,B)        00 r[54] <-> r[58]
 180 Jump           181  174  181               00 
 181 Copy            58   54    0               00 r[54]=r[58]
 182 Goto             0  173    0               00 
 183 ResetSorter      1    0    0               00 
 184 Return          56    0    0               00 
 185 Goto             0  193    0               00 
 186 Noop             0    0    0               00 inner-loop subroutine
 187 Copy             2   60    0               00 r[60]=r[2]
 188 Column           1    0   61               00 r[61]=
 189 Column           1    1   59               00 r[59]=
 190 MakeRecord      59    3   62               00 r[62]=mkrec(r[59..61])
 191 SorterInsert    13   62   59 3             00 key=r[62]
 192 Return          44    0    0               00 end inner-loop subroutine
 193 Explain        193    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 194 OpenPseudo      14   63    4               00 4 columns in r[63]
 195 SorterSort      13  201    0               00 
 196 SorterData      13   63   14               00 r[63]=data
 197 Column          14    2   61               00 r[61]=sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLL
 198 Column          14    1   60               00 r[60]=sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 199 ResultRow       60    2    0               00 output=r[60..61]
 200 SorterNext      13  196    0               00 
 201 Halt             0    0    0               00 
 202 Transaction      0    0    5 0             01 usesStmtJournal=0
 203 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  239    0               00 Start at 239
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  152    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  112    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           36  113    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   83   31               00 if r[31]!=r[21] goto 83
  74 Null             0    4    0               00 r[4]=NULL
  75 Rewind           8    1    0               00 
  76 Rewind           6    1    0               00 
  77 Rewind           9    1    0               00 
  78 Copy            28   32    0               00 r[32]=r[28]
  79 Copy            32   33    0               00 r[33]=r[32]
  80 Copy            32   34    0               00 r[34]=r[32]
  81 Copy            32   35    0               00 r[35]=r[32]
  82 Goto             0  111    0               00 
  83 Compare         32   28    1 k(1,B)        00 r[32] <-> r[28]
  84 Jump            85  111   85               00 
  85 Copy            28   32    0               00 r[32]=r[28]
  86 Column           9    6   37               00 r[37]=
  87 AggStep          0   37    4 sum(1)        01 accum=r[4] step(r[37])
  88 Next             9   90    0               00 
  89 Goto             0   94    0               00 
  90 Column           9    5   38               00 r[38]=
  91 Compare         35   38    1 k(1,B)        00 r[35] <-> r[38]
  92 Jump            93   86   93               00 
  93 Copy            38   35    0               00 r[35]=r[38]
  94 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  95 Gosub           22  143    0               00 
  96 Next             6   98    0               00 
  97 Goto             0  102    0               00 
  98 Column           6    5   38               00 r[38]=
  99 Compare         34   38    1 k(1,B)        00 r[34] <-> r[38]
 100 Jump           101   95  101               00 
 101 Copy            38   34    0               00 r[34]=r[38]
 102 Column           8    6   37               00 r[37]=
 103 AggInverse       1   37    4 sum(1)        01 accum=r[4] inverse(r[37])
 104 Delete           8    0    0               02 
 105 Next             8  107    0               00 
 106 Goto             0  111    0               00 
 107 Column           8    5   38               00 r[38]=
 108 Compare         33   38    1 k(1,B)        00 r[33] <-> r[38]
 109 Jump           110  102  110               00 
 110 Copy            38   33    0               00 r[33]=r[38]
 111 Goto             0   58    0               00 
 112 Integer        141   36    0               00 r[36]=141
 113 Rewind           7  140    0               00 
 114 Column           9    6   37               00 r[37]=
 115 AggStep          0   37    4 sum(1)        01 accum=r[4] step(r[37])
 116 Next             9  118    0               00 
 117 Goto             0  122    0               00 
 118 Column           9    5   38               00 r[38]=
 119 Compare         35   38    1 k(1,B)        00 r[35] <-> r[38]
 120 Jump           121  114  121               00 
 121 Copy            38   35    0               00 r[35]=r[38]
 122 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 123 Gosub           22  143    0               00 
 124 Next             6  126    0               00 
 125 Goto             0  140    0               00 
 126 Column           6    5   38               00 r[38]=
 127 Compare         34   38    1 k(1,B)        00 r[34] <-> r[38]
 128 Jump           129  123  129               00 
 129 Copy            38   34    0               00 r[34]=r[38]
 130 Column           8    6   37               00 r[37]=
 131 AggInverse       1   37    4 sum(1)        01 accum=r[4] inverse(r[37])
 132 Delete           8    0    0               02 
 133 Next             8  135    0               00 
 134 Goto             0  139    0               00 
 135 Column           8    5   38               00 r[38]=
 136 Compare         33   38    1 k(1,B)        00 r[33] <-> r[38]
 137 Jump           138  130  138               00 
 138 Copy            38   33    0               00 r[33]=r[38]
 139 Goto             0  122    0               00 
 140 ResetSorter      6    0    0               00 
 141 Return          36    0    0               00 
 142 Goto             0  151    0               00 
 143 Noop             0    0    0               00 inner-loop subroutine
 144 Copy             5   39    0               00 r[39]=r[5]
 145 Column           6    0   40               00 r[40]=
 146 Column           6    1   41               00 r[41]=
 147 Column           6    2   42               00 r[42]=
 148 Column           6    3   43               00 r[43]=
 149 Yield            3    0    0               00 
 150 Return          22    0    0               00 end inner-loop subroutine
 151 EndCoroutine     3    0    0               00 
 152 SorterOpen      14    4    0 k(1,B)        00 
 153 Null             0   44   44               00 r[44..44]=NULL
 154 Integer          1   45    0               00 r[45]=1
 155 Explain        155    0    0 SCAN SUBQUERY 2 00 
 156 InitCoroutine    3    0    7               00 
 157 Yield            3  200    0               00 next row of subquery_2
 158 Copy            39   47    0               00 r[47]=r[39]
 159 Copy            40   48    0               00 r[48]=r[40]
 160 Copy            41   49    0               00 r[49]=r[41]
 161 Copy            42   50    0               00 r[50]=r[42]
 162 Copy            43   51    0               00 r[51]=r[43]
 163 MakeRecord      47    5   52               00 r[52]=mkrec(r[47..51])
 164 Compare         49   44    1 k(1,B)        00 r[49] <-> r[44]
 165 Jump           166  168  166               00 
 166 Gosub           58  201    0               00 call flush_partition
 167 Copy            49   44    0               00 r[44]=r[49]
 168 NewRowid         2   53    0               00 r[53]=rowid
 169 Insert           2   52   53               00 intkey=r[53] data=r[52]
 170 Ne              45  179   53               00 if r[53]!=r[45] goto 179
 171 Null             0    1    0               00 r[1]=NULL
 172 Rewind           1    1    0               00 
 173 Rewind           4    1    0               00 
 174 Copy            50   54    0               00 r[54]=r[50]
 175 Copy            54   55    0               00 r[55]=r[54]
 176 Copy            54   56    0               00 r[56]=r[54]
 177 Copy            54   57    0               00 r[57]=r[54]
 178 Goto             0  199    0               00 
 179 Compare         54   50    1 k(1,B)        00 r[54] <-> r[50]
 180 Jump           181  199  181               00 
 181 Copy            50   54    0               00 r[54]=r[50]
 182 Column           4    4   59               00 r[59]=
 183 AggStep          0   59    1 sum(1)        01 accum=r[1] step(r[59])
 184 Next             4  186    0               00 
 185 Goto             0  190    0               00 
 186 Column           4    3   60               00 r[60]=
 187 Compare         57   60    1 k(1,B)        00 r[57] <-> r[60]
 188 Jump           189  182  189               00 
 189 Copy            60   57    0               00 r[57]=r[60]
 190 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 191 Gosub           46  223    0               00 
 192 Delete           1    0    0               02 
 193 Next             1  195    0               00 
 194 Goto             0  199    0               00 
 195 Column           1    3   60               00 r[60]=
 196 Compare         56   60    1 k(1,B)        00 r[56] <-> r[60]
 197 Jump           198  191  198               00 
 198 Copy            60   56    0               00 r[56]=r[60]
 199 Goto             0  157    0               00 
 200 Integer        221   58    0               00 r[58]=221
 201 Rewind           2  220    0               00 
 202 Column           4    4   59               00 r[59]=
 203 AggStep          0   59    1 sum(1)        01 accum=r[1] step(r[59])
 204 Next             4  206    0               00 
 205 Goto             0  210    0               00 
 206 Column           4    3   60               00 r[60]=
 207 Compare         57   60    1 k(1,B)        00 r[57] <-> r[60]
 208 Jump           209  202  209               00 
 209 Copy            60   57    0               00 r[57]=r[60]
 210 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 211 Gosub           46  223    0               00 
 212 Delete           1    0    0               02 
 213 Next             1  215    0               00 
 214 Goto             0  220    0               00 
 215 Column           1    3   60               00 r[60]=
 216 Compare         56   60    1 k(1,B)        00 r[56] <-> r[60]
 217 Jump           218  211  218               00 
 218 Copy            60   56    0               00 r[56]=r[60]
 219 Goto             0  210    0               00 
 220 ResetSorter      1    0    0               00 
 221 Return          58    0    0               00 
 222 Goto             0  230    0               00 
 223 Noop             0    0    0               00 inner-loop subroutine
 224 Copy             2   62    0               00 r[62]=r[2]
 225 Column           1    0   63               00 r[63]=
 226 Column           1    1   61               00 r[61]=
 227 MakeRecord      61    3   64               00 r[64]=mkrec(r[61..63])
 228 SorterInsert    14   64   61 3             00 key=r[64]
 229 Return          46    0    0               00 end inner-loop subroutine
 230 Explain        230    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 231 OpenPseudo      15   65    4               00 4 columns in r[65]
 232 SorterSort      14  238    0               00 
 233 SorterData      14   65   15               00 r[65]=data
 234 Column          15    2   63               00 r[63]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
 235 Column          15    1   62               00 r[62]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 236 ResultRow       62    2    0               00 output=r[62..63]
 237 SorterNext      14  233    0               00 
 238 Halt             0    0    0               00 
 239 Transaction      0    0    5 0             01 usesStmtJournal=0
 240 Goto             0    1    0               00 
SQL: [SELECT max(over) OVER (PARTITION BY over ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(over) OVER (PARTITION BY over ORDER BY following RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  215    0               00 Start at 215
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  126    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   29   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  17 Explain         17   14    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  18 Rewind          12   28    7 0             00 
  19 Column          12    1    7               00 r[7]=v0.following
  20 Column          12    0    8               00 r[8]=v0.over
  21 Column          12    1    9               00 r[9]=v0.following
  22 Column          12    0   10               00 r[10]=v0.over
  23 Column          12    0   11               00 r[11]=v0.over
  24 Column          12    1   12               00 r[12]=v0.following
  25 Column          12    0   13               00 r[13]=v0.over
  26 Yield            6    0    0               00 
  27 Next            12   19    0               01 
  28 EndCoroutine     6    0    0               00 
  29 Null             0   14   14               00 r[14..14]=NULL
  30 Integer          1   15    0               00 r[15]=1
  31 OpenEphemeral   13    2    0 k(1,-B)       00 nColumn=2
  32 Integer          0   17    0               00 r[17]=0
  33 Explain         33    7    0 SCAN SUBQUERY 3 00 
  34 InitCoroutine    6    0   14               00 
  35 Yield            6   78    0               00 next row of subquery_3
  36 Copy             7   20    0               00 r[20]=r[7]
  37 Copy             8   21    0               00 r[21]=r[8]
  38 Copy             9   22    0               00 r[22]=r[9]
  39 Copy            10   23    0               00 r[23]=r[10]
  40 Copy            11   24    0               00 r[24]=r[11]
  41 Copy            12   25    0               00 r[25]=r[12]
  42 Copy            13   26    0               00 r[26]=r[13]
  43 MakeRecord      20    7   27               00 r[27]=mkrec(r[20..26])
  44 Compare         24   14    1 k(1,B)        00 r[24] <-> r[14]
  45 Jump            46   48   46               00 
  46 Gosub           33   79    0               00 call flush_partition
  47 Copy            24   14    0               00 r[14]=r[24]
  48 NewRowid         7   28    0               00 r[28]=rowid
  49 Insert           7   27   28               00 intkey=r[28] data=r[27]
  50 Ne              15   62   28               00 if r[28]!=r[15] goto 62
  51 Null             0    4    0               00 r[4]=NULL
  52 ResetSorter     13    0    0               00 
  53 Integer          0   17    0               00 r[17]=0
  54 Rewind           8    1    0               00 
  55 Rewind           6    1    0               00 
  56 Rewind           9    1    0               00 
  57 Copy            25   29    0               00 r[29]=r[25]
  58 Copy            29   30    0               00 r[30]=r[29]
  59 Copy            29   31    0               00 r[31]=r[29]
  60 Copy            29   32    0               00 r[32]=r[29]
  61 Goto             0   77    0               00 
  62 Compare         29   25    1 k(1,B)        00 r[29] <-> r[25]
  63 Jump            64   77   64               00 
  64 Copy            25   29    0               00 r[29]=r[25]
  65 Column           9    6   34               00 r[34]=
  66 IsNull          34   71    0               00 if r[34]==NULL goto 71
  67 AddImm          17    1    0               00 r[17]=r[17]+1
  68 SCopy           34   16    0               00 r[16]=r[34]
  69 MakeRecord      16    2   18               00 r[18]=mkrec(r[16..17])
  70 IdxInsert       13   18    0               00 key=r[18]
  71 Next             9   73    0               00 
  72 Goto             0   77    0               00 
  73 Column           9    5   35               00 r[35]=
  74 Compare         32   35    1 k(1,B)        00 r[32] <-> r[35]
  75 Jump            76   65   76               00 
  76 Copy            35   32    0               00 r[32]=r[35]
  77 Goto             0   35    0               00 
  78 Integer        115   33    0               00 r[33]=115
  79 Rewind           7  114    0               00 
  80 Column           9    6   34               00 r[34]=
  81 IsNull          34   86    0               00 if r[34]==NULL goto 86
  82 AddImm          17    1    0               00 r[17]=r[17]+1
  83 SCopy           34   16    0               00 r[16]=r[34]
  84 MakeRecord      16    2   18               00 r[18]=mkrec(r[16..17])
  85 IdxInsert       13   18    0               00 key=r[18]
  86 Next             9   88    0               00 
  87 Goto             0   92    0               00 
  88 Column           9    5   35               00 r[35]=
  89 Compare         32   35    1 k(1,B)        00 r[32] <-> r[35]
  90 Jump            91   80   91               00 
  91 Copy            35   32    0               00 r[32]=r[35]
  92 Null             0    5    0               00 r[5]=NULL
  93 Last            13   95    0               00 
  94 Column          13    0    5               00 r[5]=
  95 Gosub           19  117    0               00 
  96 Next             6   98    0               00 
  97 Goto             0  114    0               00 
  98 Column           6    5   35               00 r[35]=
  99 Compare         31   35    1 k(1,B)        00 r[31] <-> r[35]
 100 Jump           101   95  101               00 
 101 Copy            35   31    0               00 r[31]=r[35]
 102 Column           8    6   34               00 r[34]=
 103 IsNull          34  106    0               00 if r[34]==NULL goto 106
 104 SeekGE          13  106   34 1             00 key=r[34]
 105 Delete          13    0    0               00 
 106 Delete           8    0    0               02 
 107 Next             8  109    0               00 
 108 Goto             0  113    0               00 
 109 Column           8    5   35               00 r[35]=
 110 Compare         30   35    1 k(1,B)        00 r[30] <-> r[35]
 111 Jump           112  102  112               00 
 112 Copy            35   30    0               00 r[30]=r[35]
 113 Goto             0   92    0               00 
 114 ResetSorter      6    0    0               00 
 115 Return          33    0    0               00 
 116 Goto             0  125    0               00 
 117 Noop             0    0    0               00 inner-loop subroutine
 118 Copy             5   36    0               00 r[36]=r[5]
 119 Column           6    0   37               00 r[37]=
 120 Column           6    1   38               00 r[38]=
 121 Column           6    2   39               00 r[39]=
 122 Column           6    3   40               00 r[40]=
 123 Yield            3    0    0               00 
 124 Return          19    0    0               00 end inner-loop subroutine
 125 EndCoroutine     3    0    0               00 
 126 SorterOpen      14    4    0 k(1,B)        00 
 127 Null             0   41   41               00 r[41..41]=NULL
 128 Integer          1   42    0               00 r[42]=1
 129 Explain        129    0    0 SCAN SUBQUERY 2 00 
 130 InitCoroutine    3    0    7               00 
 131 Yield            3  175    0               00 next row of subquery_2
 132 Copy            36   44    0               00 r[44]=r[36]
 133 Copy            37   45    0               00 r[45]=r[37]
 134 Copy            38   46    0               00 r[46]=r[38]
 135 Copy            39   47    0               00 r[47]=r[39]
 136 Copy            40   48    0               00 r[48]=r[40]
 137 MakeRecord      44    5   49               00 r[49]=mkrec(r[44..48])
 138 Compare         46   41    1 k(1,B)        00 r[46] <-> r[41]
 139 Jump           140  142  140               00 
 140 Gosub           55  176    0               00 call flush_partition
 141 Copy            46   41    0               00 r[41]=r[46]
 142 NewRowid         2   50    0               00 r[50]=rowid
 143 Insert           2   49   50               00 intkey=r[50] data=r[49]
 144 Ne              42  153   50               00 if r[50]!=r[42] goto 153
 145 Null             0    1    0               00 r[1]=NULL
 146 Rewind           1    1    0               00 
 147 Rewind           4    1    0               00 
 148 Copy            47   51    0               00 r[51]=r[47]
 149 Copy            51   52    0               00 r[52]=r[51]
 150 Copy            51   53    0               00 r[53]=r[51]
 151 Copy            51   54    0               00 r[54]=r[51]
 152 Goto             0  174    0               00 
 153 Compare         51   47    1 k(1,B)        00 r[51] <-> r[47]
 154 Jump           155  174  155               00 
 155 Copy            47   51    0               00 r[51]=r[47]
 156 Column           4    4   56               00 r[56]=
 157 CollSeq          0    0    0 (BINARY)      00 
 158 AggStep          0   56    1 max(1)        01 accum=r[1] step(r[56])
 159 Next             4  161    0               00 
 160 Goto             0  165    0               00 
 161 Column           4    3   57               00 r[57]=
 162 Compare         54   57    1 k(1,B)        00 r[54] <-> r[57]
 163 Jump           164  156  164               00 
 164 Copy            57   54    0               00 r[54]=r[57]
 165 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 166 Gosub           43  199    0               00 
 167 Delete           1    0    0               02 
 168 Next             1  170    0               00 
 169 Goto             0  174    0               00 
 170 Column           1    3   57               00 r[57]=
 171 Compare         53   57    1 k(1,B)        00 r[53] <-> r[57]
 172 Jump           173  166  173               00 
 173 Copy            57   53    0               00 r[53]=r[57]
 174 Goto             0  131    0               00 
 175 Integer        197   55    0               00 r[55]=197
 176 Rewind           2  196    0               00 
 177 Column           4    4   56               00 r[56]=
 178 CollSeq          0    0    0 (BINARY)      00 
 179 AggStep          0   56    1 max(1)        01 accum=r[1] step(r[56])
 180 Next             4  182    0               00 
 181 Goto             0  186    0               00 
 182 Column           4    3   57               00 r[57]=
 183 Compare         54   57    1 k(1,B)        00 r[54] <-> r[57]
 184 Jump           185  177  185               00 
 185 Copy            57   54    0               00 r[54]=r[57]
 186 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 187 Gosub           43  199    0               00 
 188 Delete           1    0    0               02 
 189 Next             1  191    0               00 
 190 Goto             0  196    0               00 
 191 Column           1    3   57               00 r[57]=
 192 Compare         53   57    1 k(1,B)        00 r[53] <-> r[57]
 193 Jump           194  187  194               00 
 194 Copy            57   53    0               00 r[53]=r[57]
 195 Goto             0  186    0               00 
 196 ResetSorter      1    0    0               00 
 197 Return          55    0    0               00 
 198 Goto             0  206    0               00 
 199 Noop             0    0    0               00 inner-loop subroutine
 200 Copy             2   59    0               00 r[59]=r[2]
 201 Column           1    0   60               00 r[60]=
 202 Column           1    1   58               00 r[58]=
 203 MakeRecord      58    3   61               00 r[61]=mkrec(r[58..60])
 204 SorterInsert    14   61   58 3             00 key=r[61]
 205 Return          43    0    0               00 end inner-loop subroutine
 206 Explain        206    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 207 OpenPseudo      15   62    4               00 4 columns in r[62]
 208 SorterSort      14  214    0               00 
 209 SorterData      14   62   15               00 r[62]=data
 210 Column          15    2   60               00 r[60]=min(over) OVER (PARTITION BY over ORDER BY following RANGE BETWEEN CURRENT ROW AND UNBOUNDED 
 211 Column          15    1   59               00 r[59]=max(over) OVER (PARTITION BY over ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CU
 212 ResultRow       59    2    0               00 output=r[59..60]
 213 SorterNext      14  209    0               00 
 214 Halt             0    0    0               00 
 215 Transaction      0    0    5 0             01 usesStmtJournal=0
 216 Goto             0    1    0               00 
SQL: [SELECT sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  197    0               00 Start at 197
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  110    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   29   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   28    7 0             00 
  19 Column          12    1    7               00 r[7]=preceding.x
  20 Column          12    0    8               00 r[8]=preceding.t1
  21 Column          12    1    9               00 r[9]=preceding.x
  22 Column          12    1   10               00 r[10]=preceding.x
  23 Column          12    0   11               00 r[11]=preceding.t1
  24 Column          12    1   12               00 r[12]=preceding.x
  25 Column          12    1   13               00 r[13]=preceding.x
  26 Yield            6    0    0               00 
  27 Next            12   19    0               01 
  28 EndCoroutine     6    0    0               00 
  29 Null             0   14   14               00 r[14..14]=NULL
  30 Integer          1   15    0               00 r[15]=1
  31 Explain         31    7    0 SCAN SUBQUERY 3 00 
  32 InitCoroutine    6    0   14               00 
  33 Yield            6   70    0               00 next row of subquery_3
  34 Copy             7   17    0               00 r[17]=r[7]
  35 Copy             8   18    0               00 r[18]=r[8]
  36 Copy             9   19    0               00 r[19]=r[9]
  37 Copy            10   20    0               00 r[20]=r[10]
  38 Copy            11   21    0               00 r[21]=r[11]
  39 Copy            12   22    0               00 r[22]=r[12]
  40 Copy            13   23    0               00 r[23]=r[13]
  41 MakeRecord      17    7   24               00 r[24]=mkrec(r[17..23])
  42 Compare         21   14    1 k(1,B)        00 r[21] <-> r[14]
  43 Jump            44   46   44               00 
  44 Gosub           30   71    0               00 call flush_partition
  45 Copy            21   14    0               00 r[14]=r[21]
  46 NewRowid         7   25    0               00 r[25]=rowid
  47 Insert           7   24   25               00 intkey=r[25] data=r[24]
  48 Ne              15   58   25               00 if r[25]!=r[15] goto 58
  49 Null             0    4    0               00 r[4]=NULL
  50 Rewind           8    1    0               00 
  51 Rewind           6    1    0               00 
  52 Rewind           9    1    0               00 
  53 Copy            22   26    0               00 r[26]=r[22]
  54 Copy            26   27    0               00 r[27]=r[26]
  55 Copy            26   28    0               00 r[28]=r[26]
  56 Copy            26   29    0               00 r[29]=r[26]
  57 Goto             0   69    0               00 
  58 Compare         26   22    1 k(1,B)        00 r[26] <-> r[22]
  59 Jump            60   69   60               00 
  60 Copy            22   26    0               00 r[26]=r[22]
  61 Column           9    6   31               00 r[31]=
  62 AggStep          0   31    4 sum(1)        01 accum=r[4] step(r[31])
  63 Next             9   65    0               00 
  64 Goto             0   69    0               00 
  65 Column           9    5   32               00 r[32]=
  66 Compare         29   32    1 k(1,B)        00 r[29] <-> r[32]
  67 Jump            68   61   68               00 
  68 Copy            32   29    0               00 r[29]=r[32]
  69 Goto             0   33    0               00 
  70 Integer         99   30    0               00 r[30]=99
  71 Rewind           7   98    0               00 
  72 Column           9    6   31               00 r[31]=
  73 AggStep          0   31    4 sum(1)        01 accum=r[4] step(r[31])
  74 Next             9   76    0               00 
  75 Goto             0   80    0               00 
  76 Column           9    5   32               00 r[32]=
  77 Compare         29   32    1 k(1,B)        00 r[29] <-> r[32]
  78 Jump            79   72   79               00 
  79 Copy            32   29    0               00 r[29]=r[32]
  80 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  81 Gosub           16  101    0               00 
  82 Next             6   84    0               00 
  83 Goto             0   98    0               00 
  84 Column           6    5   32               00 r[32]=
  85 Compare         28   32    1 k(1,B)        00 r[28] <-> r[32]
  86 Jump            87   81   87               00 
  87 Copy            32   28    0               00 r[28]=r[32]
  88 Column           8    6   31               00 r[31]=
  89 AggInverse       1   31    4 sum(1)        01 accum=r[4] inverse(r[31])
  90 Delete           8    0    0               02 
  91 Next             8   93    0               00 
  92 Goto             0   97    0               00 
  93 Column           8    5   32               00 r[32]=
  94 Compare         27   32    1 k(1,B)        00 r[27] <-> r[32]
  95 Jump            96   88   96               00 
  96 Copy            32   27    0               00 r[27]=r[32]
  97 Goto             0   80    0               00 
  98 ResetSorter      6    0    0               00 
  99 Return          30    0    0               00 
 100 Goto             0  109    0               00 
 101 Noop             0    0    0               00 inner-loop subroutine
 102 Copy             5   33    0               00 r[33]=r[5]
 103 Column           6    0   34               00 r[34]=
 104 Column           6    1   35               00 r[35]=
 105 Column           6    2   36               00 r[36]=
 106 Column           6    3   37               00 r[37]=
 107 Yield            3    0    0               00 
 108 Return          16    0    0               00 end inner-loop subroutine
 109 EndCoroutine     3    0    0               00 
 110 SorterOpen      13    4    0 k(1,B)        00 
 111 Null             0   38   38               00 r[38..38]=NULL
 112 Integer          1   39    0               00 r[39]=1
 113 Explain        113    0    0 SCAN SUBQUERY 2 00 
 114 InitCoroutine    3    0    7               00 
 115 Yield            3  158    0               00 next row of subquery_2
 116 Copy            33   41    0               00 r[41]=r[33]
 117 Copy            34   42    0               00 r[42]=r[34]
 118 Copy            35   43    0               00 r[43]=r[35]
 119 Copy            36   44    0               00 r[44]=r[36]
 120 Copy            37   45    0               00 r[45]=r[37]
 121 MakeRecord      41    5   46               00 r[46]=mkrec(r[41..45])
 122 Compare         43   38    1 k(1,B)        00 r[43] <-> r[38]
 123 Jump           124  126  124               00 
 124 Gosub           52  159    0               00 call flush_partition
 125 Copy            43   38    0               00 r[38]=r[43]
 126 NewRowid         2   47    0               00 r[47]=rowid
 127 Insert           2   46   47               00 intkey=r[47] data=r[46]
 128 Ne              39  137   47               00 if r[47]!=r[39] goto 137
 129 Null             0    1    0               00 r[1]=NULL
 130 Rewind           1    1    0               00 
 131 Rewind           4    1    0               00 
 132 Copy            44   48    0               00 r[48]=r[44]
 133 Copy            48   49    0               00 r[49]=r[48]
 134 Copy            48   50    0               00 r[50]=r[48]
 135 Copy            48   51    0               00 r[51]=r[48]
 136 Goto             0  157    0               00 
 137 Compare         48   44    1 k(1,B)        00 r[48] <-> r[44]
 138 Jump           139  157  139               00 
 139 Copy            44   48    0               00 r[48]=r[44]
 140 Column           4    4   53               00 r[53]=
 141 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 142 Next             4  144    0               00 
 143 Goto             0  148    0               00 
 144 Column           4    3   54               00 r[54]=
 145 Compare         51   54    1 k(1,B)        00 r[51] <-> r[54]
 146 Jump           147  140  147               00 
 147 Copy            54   51    0               00 r[51]=r[54]
 148 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 149 Gosub           40  181    0               00 
 150 Delete           1    0    0               02 
 151 Next             1  153    0               00 
 152 Goto             0  157    0               00 
 153 Column           1    3   54               00 r[54]=
 154 Compare         50   54    1 k(1,B)        00 r[50] <-> r[54]
 155 Jump           156  149  156               00 
 156 Copy            54   50    0               00 r[50]=r[54]
 157 Goto             0  115    0               00 
 158 Integer        179   52    0               00 r[52]=179
 159 Rewind           2  178    0               00 
 160 Column           4    4   53               00 r[53]=
 161 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 162 Next             4  164    0               00 
 163 Goto             0  168    0               00 
 164 Column           4    3   54               00 r[54]=
 165 Compare         51   54    1 k(1,B)        00 r[51] <-> r[54]
 166 Jump           167  160  167               00 
 167 Copy            54   51    0               00 r[51]=r[54]
 168 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 169 Gosub           40  181    0               00 
 170 Delete           1    0    0               02 
 171 Next             1  173    0               00 
 172 Goto             0  178    0               00 
 173 Column           1    3   54               00 r[54]=
 174 Compare         50   54    1 k(1,B)        00 r[50] <-> r[54]
 175 Jump           176  169  176               00 
 176 Copy            54   50    0               00 r[50]=r[54]
 177 Goto             0  168    0               00 
 178 ResetSorter      1    0    0               00 
 179 Return          52    0    0               00 
 180 Goto             0  188    0               00 
 181 Noop             0    0    0               00 inner-loop subroutine
 182 Copy             2   56    0               00 r[56]=r[2]
 183 Column           1    0   57               00 r[57]=
 184 Column           1    1   55               00 r[55]=
 185 MakeRecord      55    3   58               00 r[58]=mkrec(r[55..57])
 186 SorterInsert    13   58   55 3             00 key=r[58]
 187 Return          40    0    0               00 end inner-loop subroutine
 188 Explain        188    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 189 OpenPseudo      14   59    4               00 4 columns in r[59]
 190 SorterSort      13  196    0               00 
 191 SorterData      13   59   14               00 r[59]=data
 192 Column          14    2   57               00 r[57]=sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
 193 Column          14    1   56               00 r[56]=sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 194 ResultRow       56    2    0               00 output=r[56..57]
 195 SorterNext      13  191    0               00 
 196 Halt             0    0    0               00 
 197 Transaction      0    0    5 0             01 usesStmtJournal=0
 198 Goto             0    1    0               00 
SQL: [SELECT sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 
         sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  203    0               00 Start at 203
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  125    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   44   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  17 Explain         17   14    0 SCAN TABLE preceding 00 
  18 Rewind           0   30    0               00 
  19 Column           0    1    9               00 r[9]=preceding.x
  20 Column           0    1   10               00 r[10]=preceding.x
  21 Column           0    1   11               00 r[11]=preceding.x
  22 Column           0    0   12               00 r[12]=preceding.t1
  23 Column           0    1   13               00 r[13]=preceding.x
  24 Column           0    0   14               00 r[14]=preceding.t1
  25 Column           0    1    7               00 r[7]=preceding.x
  26 Column           0    1    8               00 r[8]=preceding.x
  27 MakeRecord       7    8   16               00 r[16]=mkrec(r[7..14])
  28 SorterInsert    11   16    7 8             00 key=r[16]
  29 Next             0   19    0               01 
  30 Explain         30   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  31 OpenPseudo      12   17   10               00 10 columns in r[17]
  32 SorterSort      11   43    0               00 
  33 SorterData      11   17   12               00 r[17]=data
  34 Column          12    7   15               00 r[15]=
  35 Column          12    1   14               00 r[14]=
  36 Column          12    6   13               00 r[13]=
  37 Column          12    5   12               00 r[12]=
  38 Column          12    4   11               00 r[11]=
  39 Column          12    3   10               00 r[10]=
  40 Column          12    2    9               00 r[9]=
  41 Yield            6    0    0               00 
  42 SorterNext      11   33    0               00 
  43 EndCoroutine     6    0    0               00 
  44 Null             0   18   18               00 r[18..18]=NULL
  45 Integer          1   19    0               00 r[19]=1
  46 Explain         46    7    0 SCAN SUBQUERY 3 00 
  47 InitCoroutine    6    0   14               00 
  48 Yield            6   93    0               00 next row of subquery_3
  49 Copy             9   21    0               00 r[21]=r[9]
  50 Copy            10   22    0               00 r[22]=r[10]
  51 Copy            11   23    0               00 r[23]=r[11]
  52 Copy            12   24    0               00 r[24]=r[12]
  53 Copy            13   25    0               00 r[25]=r[13]
  54 Copy            14   26    0               00 r[26]=r[14]
  55 Copy            15   27    0               00 r[27]=r[15]
  56 MakeRecord      21    7   28               00 r[28]=mkrec(r[21..27])
  57 Compare         25   18    1 k(1,B)        00 r[25] <-> r[18]
  58 Jump            59   61   59               00 
  59 Gosub           34   94    0               00 call flush_partition
  60 Copy            25   18    0               00 r[18]=r[25]
  61 NewRowid         7   29    0               00 r[29]=rowid
  62 Insert           7   28   29               00 intkey=r[29] data=r[28]
  63 Ne              19   72   29               00 if r[29]!=r[19] goto 72
  64 Null             0    4    0               00 r[4]=NULL
  65 Rewind           6    1    0               00 
  66 Rewind           9    1    0               00 
  67 Copy            26   30    0               00 r[30]=r[26]
  68 Copy            30   31    0               00 r[31]=r[30]
  69 Copy            30   32    0               00 r[32]=r[30]
  70 Copy            30   33    0               00 r[33]=r[30]
  71 Goto             0   92    0               00 
  72 Compare         30   26    1 k(1,B)        00 r[30] <-> r[26]
  73 Jump            74   92   74               00 
  74 Copy            26   30    0               00 r[30]=r[26]
  75 Column           9    6   35               00 r[35]=
  76 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  77 Next             9   79    0               00 
  78 Goto             0   83    0               00 
  79 Column           9    5   36               00 r[36]=
  80 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
  81 Jump            82   75   82               00 
  82 Copy            36   33    0               00 r[33]=r[36]
  83 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  84 Gosub           20  116    0               00 
  85 Delete           6    0    0               02 
  86 Next             6   88    0               00 
  87 Goto             0   92    0               00 
  88 Column           6    5   36               00 r[36]=
  89 Compare         32   36    1 k(1,B)        00 r[32] <-> r[36]
  90 Jump            91   84   91               00 
  91 Copy            36   32    0               00 r[32]=r[36]
  92 Goto             0   48    0               00 
  93 Integer        114   34    0               00 r[34]=114
  94 Rewind           7  113    0               00 
  95 Column           9    6   35               00 r[35]=
  96 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  97 Next             9   99    0               00 
  98 Goto             0  103    0               00 
  99 Column           9    5   36               00 r[36]=
 100 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
 101 Jump           102   95  102               00 
 102 Copy            36   33    0               00 r[33]=r[36]
 103 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 104 Gosub           20  116    0               00 
 105 Delete           6    0    0               02 
 106 Next             6  108    0               00 
 107 Goto             0  113    0               00 
 108 Column           6    5   36               00 r[36]=
 109 Compare         32   36    1 k(1,B)        00 r[32] <-> r[36]
 110 Jump           111  104  111               00 
 111 Copy            36   32    0               00 r[32]=r[36]
 112 Goto             0  103    0               00 
 113 ResetSorter      6    0    0               00 
 114 Return          34    0    0               00 
 115 Goto             0  124    0               00 
 116 Noop             0    0    0               00 inner-loop subroutine
 117 Copy             5   37    0               00 r[37]=r[5]
 118 Column           6    0   38               00 r[38]=
 119 Column           6    1   39               00 r[39]=
 120 Column           6    2   40               00 r[40]=
 121 Column           6    3   41               00 r[41]=
 122 Yield            3    0    0               00 
 123 Return          20    0    0               00 end inner-loop subroutine
 124 EndCoroutine     3    0    0               00 
 125 SorterOpen      13    4    0 k(1,B)        00 
 126 Null             0   42   42               00 r[42..42]=NULL
 127 Integer          1   43    0               00 r[43]=1
 128 Explain        128    0    0 SCAN SUBQUERY 2 00 
 129 InitCoroutine    3    0    7               00 
 130 Yield            3  164    0               00 next row of subquery_2
 131 Copy            37   45    0               00 r[45]=r[37]
 132 Copy            38   46    0               00 r[46]=r[38]
 133 Copy            39   47    0               00 r[47]=r[39]
 134 Copy            40   48    0               00 r[48]=r[40]
 135 Copy            41   49    0               00 r[49]=r[41]
 136 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 137 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 138 Jump           139  141  139               00 
 139 Gosub           56  165    0               00 call flush_partition
 140 Copy            47   42    0               00 r[42]=r[47]
 141 NewRowid         2   51    0               00 r[51]=rowid
 142 Insert           2   50   51               00 intkey=r[51] data=r[50]
 143 Ne              43  152   51               00 if r[51]!=r[43] goto 152
 144 Null             0    1    0               00 r[1]=NULL
 145 Rewind           1    1    0               00 
 146 Rewind           4    1    0               00 
 147 Copy            48   52    0               00 r[52]=r[48]
 148 Copy            52   53    0               00 r[53]=r[52]
 149 Copy            52   54    0               00 r[54]=r[52]
 150 Copy            52   55    0               00 r[55]=r[52]
 151 Goto             0  163    0               00 
 152 Compare         52   48    1 k(1,B)        00 r[52] <-> r[48]
 153 Jump           154  163  154               00 
 154 Copy            48   52    0               00 r[52]=r[48]
 155 Column           4    4   57               00 r[57]=
 156 AggStep          0   57    1 sum(1)        01 accum=r[1] step(r[57])
 157 Next             4  159    0               00 
 158 Goto             0  163    0               00 
 159 Column           4    3   58               00 r[58]=
 160 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 161 Jump           162  155  162               00 
 162 Copy            58   55    0               00 r[55]=r[58]
 163 Goto             0  130    0               00 
 164 Integer        185   56    0               00 r[56]=185
 165 Rewind           2  184    0               00 
 166 Column           4    4   57               00 r[57]=
 167 AggStep          0   57    1 sum(1)        01 accum=r[1] step(r[57])
 168 Next             4  170    0               00 
 169 Goto             0  174    0               00 
 170 Column           4    3   58               00 r[58]=
 171 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 172 Jump           173  166  173               00 
 173 Copy            58   55    0               00 r[55]=r[58]
 174 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 175 Gosub           44  187    0               00 
 176 Delete           1    0    0               02 
 177 Next             1  179    0               00 
 178 Goto             0  184    0               00 
 179 Column           1    3   58               00 r[58]=
 180 Compare         54   58    1 k(1,B)        00 r[54] <-> r[58]
 181 Jump           182  175  182               00 
 182 Copy            58   54    0               00 r[54]=r[58]
 183 Goto             0  174    0               00 
 184 ResetSorter      1    0    0               00 
 185 Return          56    0    0               00 
 186 Goto             0  194    0               00 
 187 Noop             0    0    0               00 inner-loop subroutine
 188 Copy             2   60    0               00 r[60]=r[2]
 189 Column           1    0   61               00 r[61]=
 190 Column           1    1   59               00 r[59]=
 191 MakeRecord      59    3   62               00 r[62]=mkrec(r[59..61])
 192 SorterInsert    13   62   59 3             00 key=r[62]
 193 Return          44    0    0               00 end inner-loop subroutine
 194 Explain        194    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 195 OpenPseudo      14   63    4               00 4 columns in r[63]
 196 SorterSort      13  202    0               00 
 197 SorterData      13   63   14               00 r[63]=data
 198 Column          14    2   61               00 r[61]=sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 199 Column          14    1   60               00 r[60]=sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLO
 200 ResultRow       60    2    0               00 output=r[60..61]
 201 SorterNext      13  197    0               00 
 202 Halt             0    0    0               00 
 203 Transaction      0    0    5 0             01 usesStmtJournal=0
 204 Goto             0    1    0               00 
SQL: [SELECT sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 
         sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  118    0               00 Start at 118
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   34    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    8    0 k(2,B,B)      00 
  10 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  11 Explain         11    8    0 SCAN TABLE preceding 00 
  12 Rewind           0   22    0               00 
  13 Column           0    1    8               00 r[8]=preceding.x
  14 Column           0    1    9               00 r[9]=preceding.x
  15 Column           0    0   10               00 r[10]=preceding.t1
  16 Column           0    0   11               00 r[11]=preceding.t1
  17 Column           0    1    6               00 r[6]=preceding.x
  18 Column           0    1    7               00 r[7]=preceding.x
  19 MakeRecord       6    6   13               00 r[13]=mkrec(r[6..11])
  20 SorterInsert     6   13    6 6             00 key=r[13]
  21 Next             0   13    0               01 
  22 Explain         22    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  23 OpenPseudo       7   14    8               00 8 columns in r[14]
  24 SorterSort       6   33    0               00 
  25 SorterData       6   14    7               00 r[14]=data
  26 Column           7    5   12               00 r[12]=
  27 Column           7    4   11               00 r[11]=
  28 Column           7    1   10               00 r[10]=
  29 Column           7    3    9               00 r[9]=
  30 Column           7    2    8               00 r[8]=
  31 Yield            5    0    0               00 
  32 SorterNext       6   25    0               00 
  33 EndCoroutine     5    0    0               00 
  34 SorterOpen       8    4    0 k(1,B)        00 
  35 Null             0   15   15               00 r[15..15]=NULL
  36 Integer          1   16    0               00 r[16]=1
  37 Explain         37    0    0 SCAN SUBQUERY 2 00 
  38 InitCoroutine    5    0    8               00 
  39 Yield            5   76    0               00 next row of subquery_2
  40 Copy             8   18    0               00 r[18]=r[8]
  41 Copy             9   19    0               00 r[19]=r[9]
  42 Copy            10   20    0               00 r[20]=r[10]
  43 Copy            11   21    0               00 r[21]=r[11]
  44 Copy            12   22    0               00 r[22]=r[12]
  45 MakeRecord      18    5   23               00 r[23]=mkrec(r[18..22])
  46 Compare         19   15    1 k(1,B)        00 r[19] <-> r[15]
  47 Jump            48   50   48               00 
  48 Gosub           29   77    0               00 call flush_partition
  49 Copy            19   15    0               00 r[15]=r[19]
  50 NewRowid         2   24    0               00 r[24]=rowid
  51 Insert           2   23   24               00 intkey=r[24] data=r[23]
  52 Ne              16   62   24               00 if r[24]!=r[16] goto 62
  53 Null             0    1    0               00 r[1]=NULL
  54 Null             0    3    0               00 r[3]=NULL
  55 Rewind           1    1    0               00 
  56 Rewind           4    1    0               00 
  57 Copy            20   25    0               00 r[25]=r[20]
  58 Copy            25   26    0               00 r[26]=r[25]
  59 Copy            25   27    0               00 r[27]=r[25]
  60 Copy            25   28    0               00 r[28]=r[25]
  61 Goto             0   75    0               00 
  62 Compare         25   20    1 k(1,B)        00 r[25] <-> r[20]
  63 Jump            64   75   64               00 
  64 Copy            20   25    0               00 r[25]=r[20]
  65 Column           4    3   30               00 r[30]=
  66 AggStep          0   30    1 sum(1)        01 accum=r[1] step(r[30])
  67 Column           4    4   30               00 r[30]=
  68 AggStep          0   30    3 sum(1)        01 accum=r[3] step(r[30])
  69 Next             4   71    0               00 
  70 Goto             0   75    0               00 
  71 Column           4    2   31               00 r[31]=
  72 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
  73 Jump            74   65   74               00 
  74 Copy            31   28    0               00 r[28]=r[31]
  75 Goto             0   39    0               00 
  76 Integer        100   29    0               00 r[29]=100
  77 Rewind           2   99    0               00 
  78 Column           4    3   30               00 r[30]=
  79 AggStep          0   30    1 sum(1)        01 accum=r[1] step(r[30])
  80 Column           4    4   30               00 r[30]=
  81 AggStep          0   30    3 sum(1)        01 accum=r[3] step(r[30])
  82 Next             4   84    0               00 
  83 Goto             0   88    0               00 
  84 Column           4    2   31               00 r[31]=
  85 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
  86 Jump            87   78   87               00 
  87 Copy            31   28    0               00 r[28]=r[31]
  88 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  89 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  90 Gosub           17  102    0               00 
  91 Delete           1    0    0               02 
  92 Next             1   94    0               00 
  93 Goto             0   99    0               00 
  94 Column           1    2   31               00 r[31]=
  95 Compare         27   31    1 k(1,B)        00 r[27] <-> r[31]
  96 Jump            97   90   97               00 
  97 Copy            31   27    0               00 r[27]=r[31]
  98 Goto             0   88    0               00 
  99 ResetSorter      1    0    0               00 
 100 Return          29    0    0               00 
 101 Goto             0  109    0               00 
 102 Noop             0    0    0               00 inner-loop subroutine
 103 Copy             4   33    0               00 r[33]=r[4]
 104 Copy             2   34    0               00 r[34]=r[2]
 105 Column           1    0   32               00 r[32]=
 106 MakeRecord      32    3   35               00 r[35]=mkrec(r[32..34])
 107 SorterInsert     8   35   32 3             00 key=r[35]
 108 Return          17    0    0               00 end inner-loop subroutine
 109 Explain        109    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 110 OpenPseudo       9   36    4               00 4 columns in r[36]
 111 SorterSort       8  117    0               00 
 112 SorterData       8   36    9               00 r[36]=data
 113 Column           9    2   34               00 r[34]=sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLO
 114 Column           9    1   33               00 r[33]=sum(t1) OVER (PARTITION BY x ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLO
 115 ResultRow       33    2    0               00 output=r[33..34]
 116 SorterNext       8  112    0               00 
 117 Halt             0    0    0               00 
 118 Transaction      0    0    5 0             01 usesStmtJournal=0
 119 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 
  min(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  252    0               00 Start at 252
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  172    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  124    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           39  125    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21   87   34               00 if r[34]!=r[21] goto 87
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Rewind           8    1    0               00 
  80 Rewind           6    1    0               00 
  81 Rewind           9    1    0               00 
  82 Copy            31   35    0               00 r[35]=r[31]
  83 Copy            35   36    0               00 r[36]=r[35]
  84 Copy            35   37    0               00 r[37]=r[35]
  85 Copy            35   38    0               00 r[38]=r[35]
  86 Goto             0  123    0               00 
  87 Compare         35   31    1 k(1,B)        00 r[35] <-> r[31]
  88 Jump            89  123   89               00 
  89 Copy            31   35    0               00 r[35]=r[31]
  90 Column           9    6   40               00 r[40]=
  91 IsNull          40   96    0               00 if r[40]==NULL goto 96
  92 AddImm          23    1    0               00 r[23]=r[23]+1
  93 SCopy           40   22    0               00 r[22]=r[40]
  94 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
  95 IdxInsert       14   24    0               00 key=r[24]
  96 Next             9   98    0               00 
  97 Goto             0  102    0               00 
  98 Column           9    5   41               00 r[41]=
  99 Compare         38   41    1 k(1,B)        00 r[38] <-> r[41]
 100 Jump           101   90  101               00 
 101 Copy            41   38    0               00 r[38]=r[41]
 102 Null             0    5    0               00 r[5]=NULL
 103 Last            14  105    0               00 
 104 Column          14    0    5               00 r[5]=
 105 Gosub           25  163    0               00 
 106 Next             6  108    0               00 
 107 Goto             0  112    0               00 
 108 Column           6    5   41               00 r[41]=
 109 Compare         37   41    1 k(1,B)        00 r[37] <-> r[41]
 110 Jump           111  105  111               00 
 111 Copy            41   37    0               00 r[37]=r[41]
 112 Column           8    6   40               00 r[40]=
 113 IsNull          40  116    0               00 if r[40]==NULL goto 116
 114 SeekGE          14  116   40 1             00 key=r[40]
 115 Delete          14    0    0               00 
 116 Delete           8    0    0               02 
 117 Next             8  119    0               00 
 118 Goto             0  123    0               00 
 119 Column           8    5   41               00 r[41]=
 120 Compare         36   41    1 k(1,B)        00 r[36] <-> r[41]
 121 Jump           122  112  122               00 
 122 Copy            41   36    0               00 r[36]=r[41]
 123 Goto             0   60    0               00 
 124 Integer        161   39    0               00 r[39]=161
 125 Rewind           7  160    0               00 
 126 Column           9    6   40               00 r[40]=
 127 IsNull          40  132    0               00 if r[40]==NULL goto 132
 128 AddImm          23    1    0               00 r[23]=r[23]+1
 129 SCopy           40   22    0               00 r[22]=r[40]
 130 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 131 IdxInsert       14   24    0               00 key=r[24]
 132 Next             9  134    0               00 
 133 Goto             0  138    0               00 
 134 Column           9    5   41               00 r[41]=
 135 Compare         38   41    1 k(1,B)        00 r[38] <-> r[41]
 136 Jump           137  126  137               00 
 137 Copy            41   38    0               00 r[38]=r[41]
 138 Null             0    5    0               00 r[5]=NULL
 139 Last            14  141    0               00 
 140 Column          14    0    5               00 r[5]=
 141 Gosub           25  163    0               00 
 142 Next             6  144    0               00 
 143 Goto             0  160    0               00 
 144 Column           6    5   41               00 r[41]=
 145 Compare         37   41    1 k(1,B)        00 r[37] <-> r[41]
 146 Jump           147  141  147               00 
 147 Copy            41   37    0               00 r[37]=r[41]
 148 Column           8    6   40               00 r[40]=
 149 IsNull          40  152    0               00 if r[40]==NULL goto 152
 150 SeekGE          14  152   40 1             00 key=r[40]
 151 Delete          14    0    0               00 
 152 Delete           8    0    0               02 
 153 Next             8  155    0               00 
 154 Goto             0  159    0               00 
 155 Column           8    5   41               00 r[41]=
 156 Compare         36   41    1 k(1,B)        00 r[36] <-> r[41]
 157 Jump           158  148  158               00 
 158 Copy            41   36    0               00 r[36]=r[41]
 159 Goto             0  138    0               00 
 160 ResetSorter      6    0    0               00 
 161 Return          39    0    0               00 
 162 Goto             0  171    0               00 
 163 Noop             0    0    0               00 inner-loop subroutine
 164 Copy             5   42    0               00 r[42]=r[5]
 165 Column           6    0   43               00 r[43]=
 166 Column           6    1   44               00 r[44]=
 167 Column           6    2   45               00 r[45]=
 168 Column           6    3   46               00 r[46]=
 169 Yield            3    0    0               00 
 170 Return          25    0    0               00 end inner-loop subroutine
 171 EndCoroutine     3    0    0               00 
 172 SorterOpen      15    4    0 k(1,B)        00 
 173 Null             0   47   47               00 r[47..47]=NULL
 174 Integer          1   48    0               00 r[48]=1
 175 Explain        175    0    0 SCAN SUBQUERY 2 00 
 176 InitCoroutine    3    0    7               00 
 177 Yield            3  212    0               00 next row of subquery_2
 178 Copy            42   50    0               00 r[50]=r[42]
 179 Copy            43   51    0               00 r[51]=r[43]
 180 Copy            44   52    0               00 r[52]=r[44]
 181 Copy            45   53    0               00 r[53]=r[45]
 182 Copy            46   54    0               00 r[54]=r[46]
 183 MakeRecord      50    5   55               00 r[55]=mkrec(r[50..54])
 184 Compare         52   47    1 k(1,B)        00 r[52] <-> r[47]
 185 Jump           186  188  186               00 
 186 Gosub           61  213    0               00 call flush_partition
 187 Copy            52   47    0               00 r[47]=r[52]
 188 NewRowid         2   56    0               00 r[56]=rowid
 189 Insert           2   55   56               00 intkey=r[56] data=r[55]
 190 Ne              48  199   56               00 if r[56]!=r[48] goto 199
 191 Null             0    1    0               00 r[1]=NULL
 192 Rewind           1    1    0               00 
 193 Rewind           4    1    0               00 
 194 Copy            53   57    0               00 r[57]=r[53]
 195 Copy            57   58    0               00 r[58]=r[57]
 196 Copy            57   59    0               00 r[59]=r[57]
 197 Copy            57   60    0               00 r[60]=r[57]
 198 Goto             0  211    0               00 
 199 Compare         57   53    1 k(1,B)        00 r[57] <-> r[53]
 200 Jump           201  211  201               00 
 201 Copy            53   57    0               00 r[57]=r[53]
 202 Column           4    4   62               00 r[62]=
 203 CollSeq          0    0    0 (BINARY)      00 
 204 AggStep          0   62    1 max(1)        01 accum=r[1] step(r[62])
 205 Next             4  207    0               00 
 206 Goto             0  211    0               00 
 207 Column           4    3   63               00 r[63]=
 208 Compare         60   63    1 k(1,B)        00 r[60] <-> r[63]
 209 Jump           210  202  210               00 
 210 Copy            63   60    0               00 r[60]=r[63]
 211 Goto             0  177    0               00 
 212 Integer        234   61    0               00 r[61]=234
 213 Rewind           2  233    0               00 
 214 Column           4    4   62               00 r[62]=
 215 CollSeq          0    0    0 (BINARY)      00 
 216 AggStep          0   62    1 max(1)        01 accum=r[1] step(r[62])
 217 Next             4  219    0               00 
 218 Goto             0  223    0               00 
 219 Column           4    3   63               00 r[63]=
 220 Compare         60   63    1 k(1,B)        00 r[60] <-> r[63]
 221 Jump           222  214  222               00 
 222 Copy            63   60    0               00 r[60]=r[63]
 223 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 224 Gosub           49  236    0               00 
 225 Delete           1    0    0               02 
 226 Next             1  228    0               00 
 227 Goto             0  233    0               00 
 228 Column           1    3   63               00 r[63]=
 229 Compare         59   63    1 k(1,B)        00 r[59] <-> r[63]
 230 Jump           231  224  231               00 
 231 Copy            63   59    0               00 r[59]=r[63]
 232 Goto             0  223    0               00 
 233 ResetSorter      1    0    0               00 
 234 Return          61    0    0               00 
 235 Goto             0  243    0               00 
 236 Noop             0    0    0               00 inner-loop subroutine
 237 Copy             2   65    0               00 r[65]=r[2]
 238 Column           1    0   66               00 r[66]=
 239 Column           1    1   64               00 r[64]=
 240 MakeRecord      64    3   67               00 r[67]=mkrec(r[64..66])
 241 SorterInsert    15   67   64 3             00 key=r[67]
 242 Return          49    0    0               00 end inner-loop subroutine
 243 Explain        243    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 244 OpenPseudo      16   68    4               00 4 columns in r[68]
 245 SorterSort      15  251    0               00 
 246 SorterData      15   68   16               00 r[68]=data
 247 Column          16    2   66               00 r[66]=min(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
 248 Column          16    1   65               00 r[65]=max(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOL
 249 ResultRow       65    2    0               00 output=r[65..66]
 250 SorterNext      15  246    0               00 
 251 Halt             0    0    0               00 
 252 Transaction      0    0    5 0             01 usesStmtJournal=0
 253 Goto             0    1    0               00 
SQL: [SELECT sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN CURRENT ROW AND CURRENT ROW), 
         sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  228    0               00 Start at 228
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  124    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   43   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  17 Explain         17   14    0 SCAN TABLE preceding 00 
  18 Rewind           0   29    0               00 
  19 Column           0    0    9               00 r[9]=preceding.t1
  20 Column           0    1   10               00 r[10]=preceding.x
  21 Column           0    0   11               00 r[11]=preceding.t1
  22 Column           0    0   12               00 r[12]=preceding.t1
  23 Column           0    0   13               00 r[13]=preceding.t1
  24 Column           0    1    7               00 r[7]=preceding.x
  25 Column           0    0    8               00 r[8]=preceding.t1
  26 MakeRecord       7    7   16               00 r[16]=mkrec(r[7..13])
  27 SorterInsert    11   16    7 7             00 key=r[16]
  28 Next             0   19    0               01 
  29 Explain         29   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  30 OpenPseudo      12   17   10               00 10 columns in r[17]
  31 SorterSort      11   42    0               00 
  32 SorterData      11   17   12               00 r[17]=data
  33 Column          12    1   15               00 r[15]=
  34 Column          12    6   14               00 r[14]=
  35 Column          12    0   13               00 r[13]=
  36 Column          12    5   12               00 r[12]=
  37 Column          12    4   11               00 r[11]=
  38 Column          12    3   10               00 r[10]=
  39 Column          12    2    9               00 r[9]=
  40 Yield            6    0    0               00 
  41 SorterNext      11   32    0               00 
  42 EndCoroutine     6    0    0               00 
  43 Null             0   18   18               00 r[18..18]=NULL
  44 Integer          1   19    0               00 r[19]=1
  45 Explain         45    7    0 SCAN SUBQUERY 3 00 
  46 InitCoroutine    6    0   14               00 
  47 Yield            6   92    0               00 next row of subquery_3
  48 Copy             9   21    0               00 r[21]=r[9]
  49 Copy            10   22    0               00 r[22]=r[10]
  50 Copy            11   23    0               00 r[23]=r[11]
  51 Copy            12   24    0               00 r[24]=r[12]
  52 Copy            13   25    0               00 r[25]=r[13]
  53 Copy            14   26    0               00 r[26]=r[14]
  54 Copy            15   27    0               00 r[27]=r[15]
  55 MakeRecord      21    7   28               00 r[28]=mkrec(r[21..27])
  56 Compare         25   18    1 k(1,B)        00 r[25] <-> r[18]
  57 Jump            58   60   58               00 
  58 Gosub           34   93    0               00 call flush_partition
  59 Copy            25   18    0               00 r[18]=r[25]
  60 NewRowid         7   29    0               00 r[29]=rowid
  61 Insert           7   28   29               00 intkey=r[29] data=r[28]
  62 Ne              19   71   29               00 if r[29]!=r[19] goto 71
  63 Null             0    4    0               00 r[4]=NULL
  64 Rewind           6    1    0               00 
  65 Rewind           9    1    0               00 
  66 Copy            26   30    0               00 r[30]=r[26]
  67 Copy            30   31    0               00 r[31]=r[30]
  68 Copy            30   32    0               00 r[32]=r[30]
  69 Copy            30   33    0               00 r[33]=r[30]
  70 Goto             0   91    0               00 
  71 Compare         30   26    1 k(1,B)        00 r[30] <-> r[26]
  72 Jump            73   91   73               00 
  73 Copy            26   30    0               00 r[30]=r[26]
  74 Column           9    6   35               00 r[35]=
  75 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  76 Next             9   78    0               00 
  77 Goto             0   82    0               00 
  78 Column           9    5   36               00 r[36]=
  79 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
  80 Jump            81   74   81               00 
  81 Copy            36   33    0               00 r[33]=r[36]
  82 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  83 Gosub           20  115    0               00 
  84 Delete           6    0    0               02 
  85 Next             6   87    0               00 
  86 Goto             0   91    0               00 
  87 Column           6    5   36               00 r[36]=
  88 Compare         32   36    1 k(1,B)        00 r[32] <-> r[36]
  89 Jump            90   83   90               00 
  90 Copy            36   32    0               00 r[32]=r[36]
  91 Goto             0   47    0               00 
  92 Integer        113   34    0               00 r[34]=113
  93 Rewind           7  112    0               00 
  94 Column           9    6   35               00 r[35]=
  95 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  96 Next             9   98    0               00 
  97 Goto             0  102    0               00 
  98 Column           9    5   36               00 r[36]=
  99 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
 100 Jump           101   94  101               00 
 101 Copy            36   33    0               00 r[33]=r[36]
 102 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 103 Gosub           20  115    0               00 
 104 Delete           6    0    0               02 
 105 Next             6  107    0               00 
 106 Goto             0  112    0               00 
 107 Column           6    5   36               00 r[36]=
 108 Compare         32   36    1 k(1,B)        00 r[32] <-> r[36]
 109 Jump           110  103  110               00 
 110 Copy            36   32    0               00 r[32]=r[36]
 111 Goto             0  102    0               00 
 112 ResetSorter      6    0    0               00 
 113 Return          34    0    0               00 
 114 Goto             0  123    0               00 
 115 Noop             0    0    0               00 inner-loop subroutine
 116 Copy             5   37    0               00 r[37]=r[5]
 117 Column           6    0   38               00 r[38]=
 118 Column           6    1   39               00 r[39]=
 119 Column           6    2   40               00 r[40]=
 120 Column           6    3   41               00 r[41]=
 121 Yield            3    0    0               00 
 122 Return          20    0    0               00 end inner-loop subroutine
 123 EndCoroutine     3    0    0               00 
 124 SorterOpen      13    4    0 k(1,B)        00 
 125 Null             0   42   42               00 r[42..42]=NULL
 126 Integer          1   43    0               00 r[43]=1
 127 Explain        127    0    0 SCAN SUBQUERY 2 00 
 128 InitCoroutine    3    0    7               00 
 129 Yield            3  181    0               00 next row of subquery_2
 130 Copy            37   45    0               00 r[45]=r[37]
 131 Copy            38   46    0               00 r[46]=r[38]
 132 Copy            39   47    0               00 r[47]=r[39]
 133 Copy            40   48    0               00 r[48]=r[40]
 134 Copy            41   49    0               00 r[49]=r[41]
 135 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 136 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 137 Jump           138  140  138               00 
 138 Gosub           56  182    0               00 call flush_partition
 139 Copy            47   42    0               00 r[42]=r[47]
 140 NewRowid         2   51    0               00 r[51]=rowid
 141 Insert           2   50   51               00 intkey=r[51] data=r[50]
 142 Ne              43  152   51               00 if r[51]!=r[43] goto 152
 143 Null             0    1    0               00 r[1]=NULL
 144 Rewind           3    1    0               00 
 145 Rewind           1    1    0               00 
 146 Rewind           4    1    0               00 
 147 Copy            48   52    0               00 r[52]=r[48]
 148 Copy            52   53    0               00 r[53]=r[52]
 149 Copy            52   54    0               00 r[54]=r[52]
 150 Copy            52   55    0               00 r[55]=r[52]
 151 Goto             0  180    0               00 
 152 Compare         52   48    1 k(1,B)        00 r[52] <-> r[48]
 153 Jump           154  180  154               00 
 154 Copy            48   52    0               00 r[52]=r[48]
 155 Column           4    4   57               00 r[57]=
 156 AggStep          0   57    1 sum(1)        01 accum=r[1] step(r[57])
 157 Next             4  159    0               00 
 158 Goto             0  163    0               00 
 159 Column           4    3   58               00 r[58]=
 160 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 161 Jump           162  155  162               00 
 162 Copy            58   55    0               00 r[55]=r[58]
 163 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 164 Gosub           44  212    0               00 
 165 Next             1  167    0               00 
 166 Goto             0  171    0               00 
 167 Column           1    3   58               00 r[58]=
 168 Compare         54   58    1 k(1,B)        00 r[54] <-> r[58]
 169 Jump           170  164  170               00 
 170 Copy            58   54    0               00 r[54]=r[58]
 171 Column           3    4   57               00 r[57]=
 172 AggInverse       1   57    1 sum(1)        01 accum=r[1] inverse(r[57])
 173 Delete           3    0    0               02 
 174 Next             3  176    0               00 
 175 Goto             0  180    0               00 
 176 Column           3    3   58               00 r[58]=
 177 Compare         53   58    1 k(1,B)        00 r[53] <-> r[58]
 178 Jump           179  171  179               00 
 179 Copy            58   53    0               00 r[53]=r[58]
 180 Goto             0  129    0               00 
 181 Integer        210   56    0               00 r[56]=210
 182 Rewind           2  209    0               00 
 183 Column           4    4   57               00 r[57]=
 184 AggStep          0   57    1 sum(1)        01 accum=r[1] step(r[57])
 185 Next             4  187    0               00 
 186 Goto             0  191    0               00 
 187 Column           4    3   58               00 r[58]=
 188 Compare         55   58    1 k(1,B)        00 r[55] <-> r[58]
 189 Jump           190  183  190               00 
 190 Copy            58   55    0               00 r[55]=r[58]
 191 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 192 Gosub           44  212    0               00 
 193 Next             1  195    0               00 
 194 Goto             0  209    0               00 
 195 Column           1    3   58               00 r[58]=
 196 Compare         54   58    1 k(1,B)        00 r[54] <-> r[58]
 197 Jump           198  192  198               00 
 198 Copy            58   54    0               00 r[54]=r[58]
 199 Column           3    4   57               00 r[57]=
 200 AggInverse       1   57    1 sum(1)        01 accum=r[1] inverse(r[57])
 201 Delete           3    0    0               02 
 202 Next             3  204    0               00 
 203 Goto             0  208    0               00 
 204 Column           3    3   58               00 r[58]=
 205 Compare         53   58    1 k(1,B)        00 r[53] <-> r[58]
 206 Jump           207  199  207               00 
 207 Copy            58   53    0               00 r[53]=r[58]
 208 Goto             0  191    0               00 
 209 ResetSorter      1    0    0               00 
 210 Return          56    0    0               00 
 211 Goto             0  219    0               00 
 212 Noop             0    0    0               00 inner-loop subroutine
 213 Copy             2   60    0               00 r[60]=r[2]
 214 Column           1    0   61               00 r[61]=
 215 Column           1    1   59               00 r[59]=
 216 MakeRecord      59    3   62               00 r[62]=mkrec(r[59..61])
 217 SorterInsert    13   62   59 3             00 key=r[62]
 218 Return          44    0    0               00 end inner-loop subroutine
 219 Explain        219    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 220 OpenPseudo      14   63    4               00 4 columns in r[63]
 221 SorterSort      13  227    0               00 
 222 SorterData      13   63   14               00 r[63]=data
 223 Column          14    2   61               00 r[61]=sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 224 Column          14    1   60               00 r[60]=sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
 225 ResultRow       60    2    0               00 output=r[60..61]
 226 SorterNext      13  222    0               00 
 227 Halt             0    0    0               00 
 228 Transaction      0    0    5 0             01 usesStmtJournal=0
 229 Goto             0    1    0               00 
SQL: [SELECT max(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN CURRENT ROW AND CURRENT ROW), 
  min(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  264    0               00 Start at 264
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  140    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   43   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  17 Explain         17   14    0 SCAN TABLE preceding 00 
  18 Rewind           0   29    0               00 
  19 Column           0    0    9               00 r[9]=preceding.t1
  20 Column           0    1   10               00 r[10]=preceding.x
  21 Column           0    0   11               00 r[11]=preceding.t1
  22 Column           0    0   12               00 r[12]=preceding.t1
  23 Column           0    0   13               00 r[13]=preceding.t1
  24 Column           0    1    7               00 r[7]=preceding.x
  25 Column           0    0    8               00 r[8]=preceding.t1
  26 MakeRecord       7    7   16               00 r[16]=mkrec(r[7..13])
  27 SorterInsert    11   16    7 7             00 key=r[16]
  28 Next             0   19    0               01 
  29 Explain         29   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  30 OpenPseudo      12   17   10               00 10 columns in r[17]
  31 SorterSort      11   42    0               00 
  32 SorterData      11   17   12               00 r[17]=data
  33 Column          12    1   15               00 r[15]=
  34 Column          12    6   14               00 r[14]=
  35 Column          12    0   13               00 r[13]=
  36 Column          12    5   12               00 r[12]=
  37 Column          12    4   11               00 r[11]=
  38 Column          12    3   10               00 r[10]=
  39 Column          12    2    9               00 r[9]=
  40 Yield            6    0    0               00 
  41 SorterNext      11   32    0               00 
  42 EndCoroutine     6    0    0               00 
  43 Null             0   18   18               00 r[18..18]=NULL
  44 Integer          1   19    0               00 r[19]=1
  45 OpenEphemeral   13    2    0 k(1,-B)       00 nColumn=2
  46 Integer          0   21    0               00 r[21]=0
  47 Explain         47    7    0 SCAN SUBQUERY 3 00 
  48 InitCoroutine    6    0   14               00 
  49 Yield            6   92    0               00 next row of subquery_3
  50 Copy             9   24    0               00 r[24]=r[9]
  51 Copy            10   25    0               00 r[25]=r[10]
  52 Copy            11   26    0               00 r[26]=r[11]
  53 Copy            12   27    0               00 r[27]=r[12]
  54 Copy            13   28    0               00 r[28]=r[13]
  55 Copy            14   29    0               00 r[29]=r[14]
  56 Copy            15   30    0               00 r[30]=r[15]
  57 MakeRecord      24    7   31               00 r[31]=mkrec(r[24..30])
  58 Compare         28   18    1 k(1,B)        00 r[28] <-> r[18]
  59 Jump            60   62   60               00 
  60 Gosub           37   93    0               00 call flush_partition
  61 Copy            28   18    0               00 r[18]=r[28]
  62 NewRowid         7   32    0               00 r[32]=rowid
  63 Insert           7   31   32               00 intkey=r[32] data=r[31]
  64 Ne              19   76   32               00 if r[32]!=r[19] goto 76
  65 Null             0    4    0               00 r[4]=NULL
  66 ResetSorter     13    0    0               00 
  67 Integer          0   21    0               00 r[21]=0
  68 Rewind           8    1    0               00 
  69 Rewind           6    1    0               00 
  70 Rewind           9    1    0               00 
  71 Copy            29   33    0               00 r[33]=r[29]
  72 Copy            33   34    0               00 r[34]=r[33]
  73 Copy            33   35    0               00 r[35]=r[33]
  74 Copy            33   36    0               00 r[36]=r[33]
  75 Goto             0   91    0               00 
  76 Compare         33   29    1 k(1,B)        00 r[33] <-> r[29]
  77 Jump            78   91   78               00 
  78 Copy            29   33    0               00 r[33]=r[29]
  79 Column           9    6   38               00 r[38]=
  80 IsNull          38   85    0               00 if r[38]==NULL goto 85
  81 AddImm          21    1    0               00 r[21]=r[21]+1
  82 SCopy           38   20    0               00 r[20]=r[38]
  83 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
  84 IdxInsert       13   22    0               00 key=r[22]
  85 Next             9   87    0               00 
  86 Goto             0   91    0               00 
  87 Column           9    5   39               00 r[39]=
  88 Compare         36   39    1 k(1,B)        00 r[36] <-> r[39]
  89 Jump            90   79   90               00 
  90 Copy            39   36    0               00 r[36]=r[39]
  91 Goto             0   49    0               00 
  92 Integer        129   37    0               00 r[37]=129
  93 Rewind           7  128    0               00 
  94 Column           9    6   38               00 r[38]=
  95 IsNull          38  100    0               00 if r[38]==NULL goto 100
  96 AddImm          21    1    0               00 r[21]=r[21]+1
  97 SCopy           38   20    0               00 r[20]=r[38]
  98 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
  99 IdxInsert       13   22    0               00 key=r[22]
 100 Next             9  102    0               00 
 101 Goto             0  106    0               00 
 102 Column           9    5   39               00 r[39]=
 103 Compare         36   39    1 k(1,B)        00 r[36] <-> r[39]
 104 Jump           105   94  105               00 
 105 Copy            39   36    0               00 r[36]=r[39]
 106 Null             0    5    0               00 r[5]=NULL
 107 Last            13  109    0               00 
 108 Column          13    0    5               00 r[5]=
 109 Gosub           23  131    0               00 
 110 Next             6  112    0               00 
 111 Goto             0  128    0               00 
 112 Column           6    5   39               00 r[39]=
 113 Compare         35   39    1 k(1,B)        00 r[35] <-> r[39]
 114 Jump           115  109  115               00 
 115 Copy            39   35    0               00 r[35]=r[39]
 116 Column           8    6   38               00 r[38]=
 117 IsNull          38  120    0               00 if r[38]==NULL goto 120
 118 SeekGE          13  120   38 1             00 key=r[38]
 119 Delete          13    0    0               00 
 120 Delete           8    0    0               02 
 121 Next             8  123    0               00 
 122 Goto             0  127    0               00 
 123 Column           8    5   39               00 r[39]=
 124 Compare         34   39    1 k(1,B)        00 r[34] <-> r[39]
 125 Jump           126  116  126               00 
 126 Copy            39   34    0               00 r[34]=r[39]
 127 Goto             0  106    0               00 
 128 ResetSorter      6    0    0               00 
 129 Return          37    0    0               00 
 130 Goto             0  139    0               00 
 131 Noop             0    0    0               00 inner-loop subroutine
 132 Copy             5   40    0               00 r[40]=r[5]
 133 Column           6    0   41               00 r[41]=
 134 Column           6    1   42               00 r[42]=
 135 Column           6    2   43               00 r[43]=
 136 Column           6    3   44               00 r[44]=
 137 Yield            3    0    0               00 
 138 Return          23    0    0               00 end inner-loop subroutine
 139 EndCoroutine     3    0    0               00 
 140 SorterOpen      14    4    0 k(1,B)        00 
 141 Null             0   45   45               00 r[45..45]=NULL
 142 Integer          1   46    0               00 r[46]=1
 143 OpenEphemeral   15    2    0 k(1,B)        00 nColumn=2
 144 Integer          0   48    0               00 r[48]=0
 145 Explain        145    0    0 SCAN SUBQUERY 2 00 
 146 InitCoroutine    3    0    7               00 
 147 Yield            3  209    0               00 next row of subquery_2
 148 Copy            40   51    0               00 r[51]=r[40]
 149 Copy            41   52    0               00 r[52]=r[41]
 150 Copy            42   53    0               00 r[53]=r[42]
 151 Copy            43   54    0               00 r[54]=r[43]
 152 Copy            44   55    0               00 r[55]=r[44]
 153 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 154 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 155 Jump           156  158  156               00 
 156 Gosub           62  210    0               00 call flush_partition
 157 Copy            53   45    0               00 r[45]=r[53]
 158 NewRowid         2   57    0               00 r[57]=rowid
 159 Insert           2   56   57               00 intkey=r[57] data=r[56]
 160 Ne              46  172   57               00 if r[57]!=r[46] goto 172
 161 Null             0    1    0               00 r[1]=NULL
 162 ResetSorter     15    0    0               00 
 163 Integer          0   48    0               00 r[48]=0
 164 Rewind           3    1    0               00 
 165 Rewind           1    1    0               00 
 166 Rewind           4    1    0               00 
 167 Copy            54   58    0               00 r[58]=r[54]
 168 Copy            58   59    0               00 r[59]=r[58]
 169 Copy            58   60    0               00 r[60]=r[58]
 170 Copy            58   61    0               00 r[61]=r[58]
 171 Goto             0  208    0               00 
 172 Compare         58   54    1 k(1,B)        00 r[58] <-> r[54]
 173 Jump           174  208  174               00 
 174 Copy            54   58    0               00 r[58]=r[54]
 175 Column           4    4   63               00 r[63]=
 176 IsNull          63  181    0               00 if r[63]==NULL goto 181
 177 AddImm          48    1    0               00 r[48]=r[48]+1
 178 SCopy           63   47    0               00 r[47]=r[63]
 179 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 180 IdxInsert       15   49    0               00 key=r[49]
 181 Next             4  183    0               00 
 182 Goto             0  187    0               00 
 183 Column           4    3   64               00 r[64]=
 184 Compare         61   64    1 k(1,B)        00 r[61] <-> r[64]
 185 Jump           186  175  186               00 
 186 Copy            64   61    0               00 r[61]=r[64]
 187 Null             0    2    0               00 r[2]=NULL
 188 Last            15  190    0               00 
 189 Column          15    0    2               00 r[2]=
 190 Gosub           50  248    0               00 
 191 Next             1  193    0               00 
 192 Goto             0  197    0               00 
 193 Column           1    3   64               00 r[64]=
 194 Compare         60   64    1 k(1,B)        00 r[60] <-> r[64]
 195 Jump           196  190  196               00 
 196 Copy            64   60    0               00 r[60]=r[64]
 197 Column           3    4   63               00 r[63]=
 198 IsNull          63  201    0               00 if r[63]==NULL goto 201
 199 SeekGE          15  201   63 1             00 key=r[63]
 200 Delete          15    0    0               00 
 201 Delete           3    0    0               02 
 202 Next             3  204    0               00 
 203 Goto             0  208    0               00 
 204 Column           3    3   64               00 r[64]=
 205 Compare         59   64    1 k(1,B)        00 r[59] <-> r[64]
 206 Jump           207  197  207               00 
 207 Copy            64   59    0               00 r[59]=r[64]
 208 Goto             0  147    0               00 
 209 Integer        246   62    0               00 r[62]=246
 210 Rewind           2  245    0               00 
 211 Column           4    4   63               00 r[63]=
 212 IsNull          63  217    0               00 if r[63]==NULL goto 217
 213 AddImm          48    1    0               00 r[48]=r[48]+1
 214 SCopy           63   47    0               00 r[47]=r[63]
 215 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 216 IdxInsert       15   49    0               00 key=r[49]
 217 Next             4  219    0               00 
 218 Goto             0  223    0               00 
 219 Column           4    3   64               00 r[64]=
 220 Compare         61   64    1 k(1,B)        00 r[61] <-> r[64]
 221 Jump           222  211  222               00 
 222 Copy            64   61    0               00 r[61]=r[64]
 223 Null             0    2    0               00 r[2]=NULL
 224 Last            15  226    0               00 
 225 Column          15    0    2               00 r[2]=
 226 Gosub           50  248    0               00 
 227 Next             1  229    0               00 
 228 Goto             0  245    0               00 
 229 Column           1    3   64               00 r[64]=
 230 Compare         60   64    1 k(1,B)        00 r[60] <-> r[64]
 231 Jump           232  226  232               00 
 232 Copy            64   60    0               00 r[60]=r[64]
 233 Column           3    4   63               00 r[63]=
 234 IsNull          63  237    0               00 if r[63]==NULL goto 237
 235 SeekGE          15  237   63 1             00 key=r[63]
 236 Delete          15    0    0               00 
 237 Delete           3    0    0               02 
 238 Next             3  240    0               00 
 239 Goto             0  244    0               00 
 240 Column           3    3   64               00 r[64]=
 241 Compare         59   64    1 k(1,B)        00 r[59] <-> r[64]
 242 Jump           243  233  243               00 
 243 Copy            64   59    0               00 r[59]=r[64]
 244 Goto             0  223    0               00 
 245 ResetSorter      1    0    0               00 
 246 Return          62    0    0               00 
 247 Goto             0  255    0               00 
 248 Noop             0    0    0               00 inner-loop subroutine
 249 Copy             2   66    0               00 r[66]=r[2]
 250 Column           1    0   67               00 r[67]=
 251 Column           1    1   65               00 r[65]=
 252 MakeRecord      65    3   68               00 r[68]=mkrec(r[65..67])
 253 SorterInsert    14   68   65 3             00 key=r[68]
 254 Return          50    0    0               00 end inner-loop subroutine
 255 Explain        255    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 256 OpenPseudo      16   69    4               00 4 columns in r[69]
 257 SorterSort      14  263    0               00 
 258 SorterData      14   69   16               00 r[69]=data
 259 Column          16    2   67               00 r[67]=min(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
 260 Column          16    1   66               00 r[66]=max(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
 261 ResultRow       66    2    0               00 output=r[66..67]
 262 SorterNext      14  258    0               00 
 263 Halt             0    0    0               00 
 264 Transaction      0    0    5 0             01 usesStmtJournal=0
 265 Goto             0    1    0               00 
SQL: [SELECT sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING), 
         sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  188    0               00 Start at 188
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  101    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   29   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   28    7 0             00 
  19 Column          12    1    7               00 r[7]=preceding.x
  20 Column          12    0    8               00 r[8]=preceding.t1
  21 Column          12    1    9               00 r[9]=preceding.x
  22 Column          12    1   10               00 r[10]=preceding.x
  23 Column          12    0   11               00 r[11]=preceding.t1
  24 Column          12    1   12               00 r[12]=preceding.x
  25 Column          12    1   13               00 r[13]=preceding.x
  26 Yield            6    0    0               00 
  27 Next            12   19    0               01 
  28 EndCoroutine     6    0    0               00 
  29 Null             0   14   14               00 r[14..14]=NULL
  30 Integer          1   15    0               00 r[15]=1
  31 Explain         31    7    0 SCAN SUBQUERY 3 00 
  32 InitCoroutine    6    0   14               00 
  33 Yield            6   69    0               00 next row of subquery_3
  34 Copy             7   17    0               00 r[17]=r[7]
  35 Copy             8   18    0               00 r[18]=r[8]
  36 Copy             9   19    0               00 r[19]=r[9]
  37 Copy            10   20    0               00 r[20]=r[10]
  38 Copy            11   21    0               00 r[21]=r[11]
  39 Copy            12   22    0               00 r[22]=r[12]
  40 Copy            13   23    0               00 r[23]=r[13]
  41 MakeRecord      17    7   24               00 r[24]=mkrec(r[17..23])
  42 Compare         21   14    1 k(1,B)        00 r[21] <-> r[14]
  43 Jump            44   46   44               00 
  44 Gosub           30   70    0               00 call flush_partition
  45 Copy            21   14    0               00 r[14]=r[21]
  46 NewRowid         7   25    0               00 r[25]=rowid
  47 Insert           7   24   25               00 intkey=r[25] data=r[24]
  48 Ne              15   57   25               00 if r[25]!=r[15] goto 57
  49 Null             0    4    0               00 r[4]=NULL
  50 Rewind           6    1    0               00 
  51 Rewind           9    1    0               00 
  52 Copy            22   26    0               00 r[26]=r[22]
  53 Copy            26   27    0               00 r[27]=r[26]
  54 Copy            26   28    0               00 r[28]=r[26]
  55 Copy            26   29    0               00 r[29]=r[26]
  56 Goto             0   68    0               00 
  57 Compare         26   22    1 k(1,B)        00 r[26] <-> r[22]
  58 Jump            59   68   59               00 
  59 Copy            22   26    0               00 r[26]=r[22]
  60 Column           9    6   31               00 r[31]=
  61 AggStep          0   31    4 sum(1)        01 accum=r[4] step(r[31])
  62 Next             9   64    0               00 
  63 Goto             0   68    0               00 
  64 Column           9    5   32               00 r[32]=
  65 Compare         29   32    1 k(1,B)        00 r[29] <-> r[32]
  66 Jump            67   60   67               00 
  67 Copy            32   29    0               00 r[29]=r[32]
  68 Goto             0   33    0               00 
  69 Integer         90   30    0               00 r[30]=90
  70 Rewind           7   89    0               00 
  71 Column           9    6   31               00 r[31]=
  72 AggStep          0   31    4 sum(1)        01 accum=r[4] step(r[31])
  73 Next             9   75    0               00 
  74 Goto             0   79    0               00 
  75 Column           9    5   32               00 r[32]=
  76 Compare         29   32    1 k(1,B)        00 r[29] <-> r[32]
  77 Jump            78   71   78               00 
  78 Copy            32   29    0               00 r[29]=r[32]
  79 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  80 Gosub           16   92    0               00 
  81 Delete           6    0    0               02 
  82 Next             6   84    0               00 
  83 Goto             0   89    0               00 
  84 Column           6    5   32               00 r[32]=
  85 Compare         28   32    1 k(1,B)        00 r[28] <-> r[32]
  86 Jump            87   80   87               00 
  87 Copy            32   28    0               00 r[28]=r[32]
  88 Goto             0   79    0               00 
  89 ResetSorter      6    0    0               00 
  90 Return          30    0    0               00 
  91 Goto             0  100    0               00 
  92 Noop             0    0    0               00 inner-loop subroutine
  93 Copy             5   33    0               00 r[33]=r[5]
  94 Column           6    0   34               00 r[34]=
  95 Column           6    1   35               00 r[35]=
  96 Column           6    2   36               00 r[36]=
  97 Column           6    3   37               00 r[37]=
  98 Yield            3    0    0               00 
  99 Return          16    0    0               00 end inner-loop subroutine
 100 EndCoroutine     3    0    0               00 
 101 SorterOpen      13    4    0 k(1,B)        00 
 102 Null             0   38   38               00 r[38..38]=NULL
 103 Integer          1   39    0               00 r[39]=1
 104 Explain        104    0    0 SCAN SUBQUERY 2 00 
 105 InitCoroutine    3    0    7               00 
 106 Yield            3  141    0               00 next row of subquery_2
 107 Copy            33   41    0               00 r[41]=r[33]
 108 Copy            34   42    0               00 r[42]=r[34]
 109 Copy            35   43    0               00 r[43]=r[35]
 110 Copy            36   44    0               00 r[44]=r[36]
 111 Copy            37   45    0               00 r[45]=r[37]
 112 MakeRecord      41    5   46               00 r[46]=mkrec(r[41..45])
 113 Compare         43   38    1 k(1,B)        00 r[43] <-> r[38]
 114 Jump           115  117  115               00 
 115 Gosub           52  142    0               00 call flush_partition
 116 Copy            43   38    0               00 r[38]=r[43]
 117 NewRowid         2   47    0               00 r[47]=rowid
 118 Insert           2   46   47               00 intkey=r[47] data=r[46]
 119 Ne              39  129   47               00 if r[47]!=r[39] goto 129
 120 Null             0    1    0               00 r[1]=NULL
 121 Rewind           3    1    0               00 
 122 Rewind           1    1    0               00 
 123 Rewind           4    1    0               00 
 124 Copy            44   48    0               00 r[48]=r[44]
 125 Copy            48   49    0               00 r[49]=r[48]
 126 Copy            48   50    0               00 r[50]=r[48]
 127 Copy            48   51    0               00 r[51]=r[48]
 128 Goto             0  140    0               00 
 129 Compare         48   44    1 k(1,B)        00 r[48] <-> r[44]
 130 Jump           131  140  131               00 
 131 Copy            44   48    0               00 r[48]=r[44]
 132 Column           4    4   53               00 r[53]=
 133 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 134 Next             4  136    0               00 
 135 Goto             0  140    0               00 
 136 Column           4    3   54               00 r[54]=
 137 Compare         51   54    1 k(1,B)        00 r[51] <-> r[54]
 138 Jump           139  132  139               00 
 139 Copy            54   51    0               00 r[51]=r[54]
 140 Goto             0  106    0               00 
 141 Integer        170   52    0               00 r[52]=170
 142 Rewind           2  169    0               00 
 143 Column           4    4   53               00 r[53]=
 144 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 145 Next             4  147    0               00 
 146 Goto             0  151    0               00 
 147 Column           4    3   54               00 r[54]=
 148 Compare         51   54    1 k(1,B)        00 r[51] <-> r[54]
 149 Jump           150  143  150               00 
 150 Copy            54   51    0               00 r[51]=r[54]
 151 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 152 Gosub           40  172    0               00 
 153 Next             1  155    0               00 
 154 Goto             0  169    0               00 
 155 Column           1    3   54               00 r[54]=
 156 Compare         50   54    1 k(1,B)        00 r[50] <-> r[54]
 157 Jump           158  152  158               00 
 158 Copy            54   50    0               00 r[50]=r[54]
 159 Column           3    4   53               00 r[53]=
 160 AggInverse       1   53    1 sum(1)        01 accum=r[1] inverse(r[53])
 161 Delete           3    0    0               02 
 162 Next             3  164    0               00 
 163 Goto             0  168    0               00 
 164 Column           3    3   54               00 r[54]=
 165 Compare         49   54    1 k(1,B)        00 r[49] <-> r[54]
 166 Jump           167  159  167               00 
 167 Copy            54   49    0               00 r[49]=r[54]
 168 Goto             0  151    0               00 
 169 ResetSorter      1    0    0               00 
 170 Return          52    0    0               00 
 171 Goto             0  179    0               00 
 172 Noop             0    0    0               00 inner-loop subroutine
 173 Copy             2   56    0               00 r[56]=r[2]
 174 Column           1    0   57               00 r[57]=
 175 Column           1    1   55               00 r[55]=
 176 MakeRecord      55    3   58               00 r[58]=mkrec(r[55..57])
 177 SorterInsert    13   58   55 3             00 key=r[58]
 178 Return          40    0    0               00 end inner-loop subroutine
 179 Explain        179    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 180 OpenPseudo      14   59    4               00 4 columns in r[59]
 181 SorterSort      13  187    0               00 
 182 SorterData      13   59   14               00 r[59]=data
 183 Column          14    2   57               00 r[57]=sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLO
 184 Column          14    1   56               00 r[56]=sum(x) OVER (PARTITION BY t1 ORDER BY x RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
 185 ResultRow       56    2    0               00 output=r[56..57]
 186 SorterNext      13  182    0               00 
 187 Halt             0    0    0               00 
 188 Transaction      0    0    5 0             01 usesStmtJournal=0
 189 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER (PARTITION BY over ORDER BY over RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING), 
         sum(following) OVER (PARTITION BY over ORDER BY over RANGE BETWEEN CURRENT ROW AND CURRENT ROW)
  FROM v0 ORDER BY over

;]
VDBE Program Listing:
   0 Init             0  239    0               00 Start at 239
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  152    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  17 Explain         17   14    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=v0.over
  20 Column          12    0   10               00 r[10]=v0.over
  21 Column          12    0   11               00 r[11]=v0.over
  22 Column          12    1   12               00 r[12]=v0.following
  23 Column          12    0   13               00 r[13]=v0.over
  24 Column          12    1   14               00 r[14]=v0.following
  25 Column          12    0    7               00 r[7]=v0.over
  26 Column          12    0    8               00 r[8]=v0.over
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    6   15               00 r[15]=
  44 Column          13    0   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  112    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           36  113    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   83   31               00 if r[31]!=r[21] goto 83
  74 Null             0    4    0               00 r[4]=NULL
  75 Rewind           8    1    0               00 
  76 Rewind           6    1    0               00 
  77 Rewind           9    1    0               00 
  78 Copy            28   32    0               00 r[32]=r[28]
  79 Copy            32   33    0               00 r[33]=r[32]
  80 Copy            32   34    0               00 r[34]=r[32]
  81 Copy            32   35    0               00 r[35]=r[32]
  82 Goto             0  111    0               00 
  83 Compare         32   28    1 k(1,B)        00 r[32] <-> r[28]
  84 Jump            85  111   85               00 
  85 Copy            28   32    0               00 r[32]=r[28]
  86 Column           9    6   37               00 r[37]=
  87 AggStep          0   37    4 sum(1)        01 accum=r[4] step(r[37])
  88 Next             9   90    0               00 
  89 Goto             0   94    0               00 
  90 Column           9    5   38               00 r[38]=
  91 Compare         35   38    1 k(1,B)        00 r[35] <-> r[38]
  92 Jump            93   86   93               00 
  93 Copy            38   35    0               00 r[35]=r[38]
  94 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  95 Gosub           22  143    0               00 
  96 Next             6   98    0               00 
  97 Goto             0  102    0               00 
  98 Column           6    5   38               00 r[38]=
  99 Compare         34   38    1 k(1,B)        00 r[34] <-> r[38]
 100 Jump           101   95  101               00 
 101 Copy            38   34    0               00 r[34]=r[38]
 102 Column           8    6   37               00 r[37]=
 103 AggInverse       1   37    4 sum(1)        01 accum=r[4] inverse(r[37])
 104 Delete           8    0    0               02 
 105 Next             8  107    0               00 
 106 Goto             0  111    0               00 
 107 Column           8    5   38               00 r[38]=
 108 Compare         33   38    1 k(1,B)        00 r[33] <-> r[38]
 109 Jump           110  102  110               00 
 110 Copy            38   33    0               00 r[33]=r[38]
 111 Goto             0   58    0               00 
 112 Integer        141   36    0               00 r[36]=141
 113 Rewind           7  140    0               00 
 114 Column           9    6   37               00 r[37]=
 115 AggStep          0   37    4 sum(1)        01 accum=r[4] step(r[37])
 116 Next             9  118    0               00 
 117 Goto             0  122    0               00 
 118 Column           9    5   38               00 r[38]=
 119 Compare         35   38    1 k(1,B)        00 r[35] <-> r[38]
 120 Jump           121  114  121               00 
 121 Copy            38   35    0               00 r[35]=r[38]
 122 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 123 Gosub           22  143    0               00 
 124 Next             6  126    0               00 
 125 Goto             0  140    0               00 
 126 Column           6    5   38               00 r[38]=
 127 Compare         34   38    1 k(1,B)        00 r[34] <-> r[38]
 128 Jump           129  123  129               00 
 129 Copy            38   34    0               00 r[34]=r[38]
 130 Column           8    6   37               00 r[37]=
 131 AggInverse       1   37    4 sum(1)        01 accum=r[4] inverse(r[37])
 132 Delete           8    0    0               02 
 133 Next             8  135    0               00 
 134 Goto             0  139    0               00 
 135 Column           8    5   38               00 r[38]=
 136 Compare         33   38    1 k(1,B)        00 r[33] <-> r[38]
 137 Jump           138  130  138               00 
 138 Copy            38   33    0               00 r[33]=r[38]
 139 Goto             0  122    0               00 
 140 ResetSorter      6    0    0               00 
 141 Return          36    0    0               00 
 142 Goto             0  151    0               00 
 143 Noop             0    0    0               00 inner-loop subroutine
 144 Copy             5   39    0               00 r[39]=r[5]
 145 Column           6    0   40               00 r[40]=
 146 Column           6    1   41               00 r[41]=
 147 Column           6    2   42               00 r[42]=
 148 Column           6    3   43               00 r[43]=
 149 Yield            3    0    0               00 
 150 Return          22    0    0               00 end inner-loop subroutine
 151 EndCoroutine     3    0    0               00 
 152 SorterOpen      14    4    0 k(1,B)        00 
 153 Null             0   44   44               00 r[44..44]=NULL
 154 Integer          1   45    0               00 r[45]=1
 155 Explain        155    0    0 SCAN SUBQUERY 2 00 
 156 InitCoroutine    3    0    7               00 
 157 Yield            3  192    0               00 next row of subquery_2
 158 Copy            39   47    0               00 r[47]=r[39]
 159 Copy            40   48    0               00 r[48]=r[40]
 160 Copy            41   49    0               00 r[49]=r[41]
 161 Copy            42   50    0               00 r[50]=r[42]
 162 Copy            43   51    0               00 r[51]=r[43]
 163 MakeRecord      47    5   52               00 r[52]=mkrec(r[47..51])
 164 Compare         49   44    1 k(1,B)        00 r[49] <-> r[44]
 165 Jump           166  168  166               00 
 166 Gosub           58  193    0               00 call flush_partition
 167 Copy            49   44    0               00 r[44]=r[49]
 168 NewRowid         2   53    0               00 r[53]=rowid
 169 Insert           2   52   53               00 intkey=r[53] data=r[52]
 170 Ne              45  180   53               00 if r[53]!=r[45] goto 180
 171 Null             0    1    0               00 r[1]=NULL
 172 Rewind           3    1    0               00 
 173 Rewind           1    1    0               00 
 174 Rewind           4    1    0               00 
 175 Copy            50   54    0               00 r[54]=r[50]
 176 Copy            54   55    0               00 r[55]=r[54]
 177 Copy            54   56    0               00 r[56]=r[54]
 178 Copy            54   57    0               00 r[57]=r[54]
 179 Goto             0  191    0               00 
 180 Compare         54   50    1 k(1,B)        00 r[54] <-> r[50]
 181 Jump           182  191  182               00 
 182 Copy            50   54    0               00 r[54]=r[50]
 183 Column           4    4   59               00 r[59]=
 184 AggStep          0   59    1 sum(1)        01 accum=r[1] step(r[59])
 185 Next             4  187    0               00 
 186 Goto             0  191    0               00 
 187 Column           4    3   60               00 r[60]=
 188 Compare         57   60    1 k(1,B)        00 r[57] <-> r[60]
 189 Jump           190  183  190               00 
 190 Copy            60   57    0               00 r[57]=r[60]
 191 Goto             0  157    0               00 
 192 Integer        221   58    0               00 r[58]=221
 193 Rewind           2  220    0               00 
 194 Column           4    4   59               00 r[59]=
 195 AggStep          0   59    1 sum(1)        01 accum=r[1] step(r[59])
 196 Next             4  198    0               00 
 197 Goto             0  202    0               00 
 198 Column           4    3   60               00 r[60]=
 199 Compare         57   60    1 k(1,B)        00 r[57] <-> r[60]
 200 Jump           201  194  201               00 
 201 Copy            60   57    0               00 r[57]=r[60]
 202 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 203 Gosub           46  223    0               00 
 204 Next             1  206    0               00 
 205 Goto             0  220    0               00 
 206 Column           1    3   60               00 r[60]=
 207 Compare         56   60    1 k(1,B)        00 r[56] <-> r[60]
 208 Jump           209  203  209               00 
 209 Copy            60   56    0               00 r[56]=r[60]
 210 Column           3    4   59               00 r[59]=
 211 AggInverse       1   59    1 sum(1)        01 accum=r[1] inverse(r[59])
 212 Delete           3    0    0               02 
 213 Next             3  215    0               00 
 214 Goto             0  219    0               00 
 215 Column           3    3   60               00 r[60]=
 216 Compare         55   60    1 k(1,B)        00 r[55] <-> r[60]
 217 Jump           218  210  218               00 
 218 Copy            60   55    0               00 r[55]=r[60]
 219 Goto             0  202    0               00 
 220 ResetSorter      1    0    0               00 
 221 Return          58    0    0               00 
 222 Goto             0  230    0               00 
 223 Noop             0    0    0               00 inner-loop subroutine
 224 Copy             2   62    0               00 r[62]=r[2]
 225 Column           1    0   63               00 r[63]=
 226 Column           1    1   61               00 r[61]=
 227 MakeRecord      61    3   64               00 r[64]=mkrec(r[61..63])
 228 SorterInsert    14   64   61 3             00 key=r[64]
 229 Return          46    0    0               00 end inner-loop subroutine
 230 Explain        230    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 231 OpenPseudo      15   65    4               00 4 columns in r[65]
 232 SorterSort      14  238    0               00 
 233 SorterData      14   65   15               00 r[65]=data
 234 Column          15    2   63               00 r[63]=sum(following) OVER (PARTITION BY over ORDER BY over RANGE BETWEEN CURRENT ROW AND CURRENT RO
 235 Column          15    1   62               00 r[62]=sum(following) OVER (PARTITION BY over ORDER BY over RANGE BETWEEN CURRENT ROW AND UNBOUNDED 
 236 ResultRow       62    2    0               00 output=r[62..63]
 237 SorterNext      14  233    0               00 
 238 Halt             0    0    0               00 
 239 Transaction      0    0    5 0             01 usesStmtJournal=0
 240 Goto             0    1    0               00 
SQL: [SELECT max(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING), 
  min(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  161    0               00 Start at 161
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   34    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    8    0 k(2,B,B)      00 
  10 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  11 Explain         11    8    0 SCAN TABLE v0 00 
  12 Rewind           0   22    0               00 
  13 Column           0    1    8               00 r[8]=v0.following
  14 Column           0    1    9               00 r[9]=v0.following
  15 Column           0    0   10               00 r[10]=v0.over
  16 Column           0    0   11               00 r[11]=v0.over
  17 Column           0    1    6               00 r[6]=v0.following
  18 Column           0    1    7               00 r[7]=v0.following
  19 MakeRecord       6    6   13               00 r[13]=mkrec(r[6..11])
  20 SorterInsert     6   13    6 6             00 key=r[13]
  21 Next             0   13    0               01 
  22 Explain         22    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  23 OpenPseudo       7   14    8               00 8 columns in r[14]
  24 SorterSort       6   33    0               00 
  25 SorterData       6   14    7               00 r[14]=data
  26 Column           7    5   12               00 r[12]=
  27 Column           7    4   11               00 r[11]=
  28 Column           7    1   10               00 r[10]=
  29 Column           7    3    9               00 r[9]=
  30 Column           7    2    8               00 r[8]=
  31 Yield            5    0    0               00 
  32 SorterNext       6   25    0               00 
  33 EndCoroutine     5    0    0               00 
  34 SorterOpen       8    4    0 k(1,B)        00 
  35 Null             0   15   15               00 r[15..15]=NULL
  36 Integer          1   16    0               00 r[16]=1
  37 OpenEphemeral    9    2    0 k(1,-B)       00 nColumn=2
  38 Integer          0   18    0               00 r[18]=0
  39 OpenEphemeral   10    2    0 k(1,B)        00 nColumn=2
  40 Integer          0   21    0               00 r[21]=0
  41 Explain         41    0    0 SCAN SUBQUERY 2 00 
  42 InitCoroutine    5    0    8               00 
  43 Yield            5   93    0               00 next row of subquery_2
  44 Copy             8   24    0               00 r[24]=r[8]
  45 Copy             9   25    0               00 r[25]=r[9]
  46 Copy            10   26    0               00 r[26]=r[10]
  47 Copy            11   27    0               00 r[27]=r[11]
  48 Copy            12   28    0               00 r[28]=r[12]
  49 MakeRecord      24    5   29               00 r[29]=mkrec(r[24..28])
  50 Compare         25   15    1 k(1,B)        00 r[25] <-> r[15]
  51 Jump            52   54   52               00 
  52 Gosub           35   94    0               00 call flush_partition
  53 Copy            25   15    0               00 r[15]=r[25]
  54 NewRowid         2   30    0               00 r[30]=rowid
  55 Insert           2   29   30               00 intkey=r[30] data=r[29]
  56 Ne              16   71   30               00 if r[30]!=r[16] goto 71
  57 Null             0    1    0               00 r[1]=NULL
  58 ResetSorter      9    0    0               00 
  59 Integer          0   18    0               00 r[18]=0
  60 Null             0    3    0               00 r[3]=NULL
  61 ResetSorter     10    0    0               00 
  62 Integer          0   21    0               00 r[21]=0
  63 Rewind           3    1    0               00 
  64 Rewind           1    1    0               00 
  65 Rewind           4    1    0               00 
  66 Copy            26   31    0               00 r[31]=r[26]
  67 Copy            31   32    0               00 r[32]=r[31]
  68 Copy            31   33    0               00 r[33]=r[31]
  69 Copy            31   34    0               00 r[34]=r[31]
  70 Goto             0   92    0               00 
  71 Compare         31   26    1 k(1,B)        00 r[31] <-> r[26]
  72 Jump            73   92   73               00 
  73 Copy            26   31    0               00 r[31]=r[26]
  74 Column           4    3   36               00 r[36]=
  75 IsNull          36   80    0               00 if r[36]==NULL goto 80
  76 AddImm          18    1    0               00 r[18]=r[18]+1
  77 SCopy           36   17    0               00 r[17]=r[36]
  78 MakeRecord      17    2   19               00 r[19]=mkrec(r[17..18])
  79 IdxInsert        9   19    0               00 key=r[19]
  80 Column           4    4   36               00 r[36]=
  81 IsNull          36   86    0               00 if r[36]==NULL goto 86
  82 AddImm          21    1    0               00 r[21]=r[21]+1
  83 SCopy           36   20    0               00 r[20]=r[36]
  84 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
  85 IdxInsert       10   22    0               00 key=r[22]
  86 Next             4   88    0               00 
  87 Goto             0   92    0               00 
  88 Column           4    2   37               00 r[37]=
  89 Compare         34   37    1 k(1,B)        00 r[34] <-> r[37]
  90 Jump            91   74   91               00 
  91 Copy            37   34    0               00 r[34]=r[37]
  92 Goto             0   43    0               00 
  93 Integer        143   35    0               00 r[35]=143
  94 Rewind           2  142    0               00 
  95 Column           4    3   36               00 r[36]=
  96 IsNull          36  101    0               00 if r[36]==NULL goto 101
  97 AddImm          18    1    0               00 r[18]=r[18]+1
  98 SCopy           36   17    0               00 r[17]=r[36]
  99 MakeRecord      17    2   19               00 r[19]=mkrec(r[17..18])
 100 IdxInsert        9   19    0               00 key=r[19]
 101 Column           4    4   36               00 r[36]=
 102 IsNull          36  107    0               00 if r[36]==NULL goto 107
 103 AddImm          21    1    0               00 r[21]=r[21]+1
 104 SCopy           36   20    0               00 r[20]=r[36]
 105 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
 106 IdxInsert       10   22    0               00 key=r[22]
 107 Next             4  109    0               00 
 108 Goto             0  113    0               00 
 109 Column           4    2   37               00 r[37]=
 110 Compare         34   37    1 k(1,B)        00 r[34] <-> r[37]
 111 Jump           112   95  112               00 
 112 Copy            37   34    0               00 r[34]=r[37]
 113 Null             0    2    0               00 r[2]=NULL
 114 Last             9  116    0               00 
 115 Column           9    0    2               00 r[2]=
 116 Null             0    4    0               00 r[4]=NULL
 117 Last            10  119    0               00 
 118 Column          10    0    4               00 r[4]=
 119 Gosub           23  145    0               00 
 120 Next             1  122    0               00 
 121 Goto             0  142    0               00 
 122 Column           1    2   37               00 r[37]=
 123 Compare         33   37    1 k(1,B)        00 r[33] <-> r[37]
 124 Jump           125  119  125               00 
 125 Copy            37   33    0               00 r[33]=r[37]
 126 Column           3    3   36               00 r[36]=
 127 IsNull          36  130    0               00 if r[36]==NULL goto 130
 128 SeekGE           9  130   36 1             00 key=r[36]
 129 Delete           9    0    0               00 
 130 Column           3    4   36               00 r[36]=
 131 IsNull          36  134    0               00 if r[36]==NULL goto 134
 132 SeekGE          10  134   36 1             00 key=r[36]
 133 Delete          10    0    0               00 
 134 Delete           3    0    0               02 
 135 Next             3  137    0               00 
 136 Goto             0  141    0               00 
 137 Column           3    2   37               00 r[37]=
 138 Compare         32   37    1 k(1,B)        00 r[32] <-> r[37]
 139 Jump           140  126  140               00 
 140 Copy            37   32    0               00 r[32]=r[37]
 141 Goto             0  113    0               00 
 142 ResetSorter      1    0    0               00 
 143 Return          35    0    0               00 
 144 Goto             0  152    0               00 
 145 Noop             0    0    0               00 inner-loop subroutine
 146 Copy             4   39    0               00 r[39]=r[4]
 147 Copy             2   40    0               00 r[40]=r[2]
 148 Column           1    0   38               00 r[38]=
 149 MakeRecord      38    3   41               00 r[41]=mkrec(r[38..40])
 150 SorterInsert     8   41   38 3             00 key=r[41]
 151 Return          23    0    0               00 end inner-loop subroutine
 152 Explain        152    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 153 OpenPseudo      11   42    4               00 4 columns in r[42]
 154 SorterSort       8  160    0               00 
 155 SorterData       8   42   11               00 r[42]=data
 156 Column          11    2   40               00 r[40]=min(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN CURRENT ROW AND UNBOU
 157 Column          11    1   39               00 r[39]=max(over) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN CURRENT ROW AND UNBOU
 158 ResultRow       39    2    0               00 output=r[39..40]
 159 SorterNext       8  155    0               00 
 160 Halt             0    0    0               00 
 161 Transaction      0    0    5 0             01 usesStmtJournal=0
 162 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  139    0               00 Start at 139
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,B)        00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=t0.c0
  14 Column           7    0    9               00 r[9]=t0.c0
  15 Column           7    0   10               00 r[10]=t0.c0
  16 Column           7    0   11               00 r[11]=t0.c0
  17 Column           7    0    6               00 r[6]=t0.c0
  18 Column           7    0    7               00 r[7]=t0.c0
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    0   12               00 r[12]=
  36 Column           8    4   11               00 r[11]=
  37 Column           8    3   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 Explain         47    0    0 SCAN SUBQUERY 2 00 
  48 InitCoroutine    5    0    8               00 
  49 Yield            5   87    0               00 next row of subquery_2
  50 Copy             8   20    0               00 r[20]=r[8]
  51 Copy             9   21    0               00 r[21]=r[9]
  52 Copy            10   22    0               00 r[22]=r[10]
  53 Copy            11   23    0               00 r[23]=r[11]
  54 Copy            12   24    0               00 r[24]=r[12]
  55 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  56 Compare         21   17    1 k(1,B)        00 r[21] <-> r[17]
  57 Jump            58   60   58               00 
  58 Gosub           31   88    0               00 call flush_partition
  59 Copy            21   17    0               00 r[17]=r[21]
  60 NewRowid         2   26    0               00 r[26]=rowid
  61 Insert           2   25   26               00 intkey=r[26] data=r[25]
  62 Ne              18   73   26               00 if r[26]!=r[18] goto 73
  63 Null             0    1    0               00 r[1]=NULL
  64 Null             0    3    0               00 r[3]=NULL
  65 Rewind           3    1    0               00 
  66 Rewind           1    1    0               00 
  67 Rewind           4    1    0               00 
  68 Copy            22   27    0               00 r[27]=r[22]
  69 Copy            27   28    0               00 r[28]=r[27]
  70 Copy            27   29    0               00 r[29]=r[27]
  71 Copy            27   30    0               00 r[30]=r[27]
  72 Goto             0   86    0               00 
  73 Compare         27   22    1 k(1,B)        00 r[27] <-> r[22]
  74 Jump            75   86   75               00 
  75 Copy            22   27    0               00 r[27]=r[22]
  76 Column           4    3   32               00 r[32]=
  77 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
  78 Column           4    4   32               00 r[32]=
  79 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
  80 Next             4   82    0               00 
  81 Goto             0   86    0               00 
  82 Column           4    2   33               00 r[33]=
  83 Compare         30   33    1 k(1,B)        00 r[30] <-> r[33]
  84 Jump            85   76   85               00 
  85 Copy            33   30    0               00 r[30]=r[33]
  86 Goto             0   49    0               00 
  87 Integer        121   31    0               00 r[31]=121
  88 Rewind           2  120    0               00 
  89 Column           4    3   32               00 r[32]=
  90 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
  91 Column           4    4   32               00 r[32]=
  92 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
  93 Next             4   95    0               00 
  94 Goto             0   99    0               00 
  95 Column           4    2   33               00 r[33]=
  96 Compare         30   33    1 k(1,B)        00 r[30] <-> r[33]
  97 Jump            98   89   98               00 
  98 Copy            33   30    0               00 r[30]=r[33]
  99 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 100 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
 101 Gosub           19  123    0               00 
 102 Next             1  104    0               00 
 103 Goto             0  120    0               00 
 104 Column           1    2   33               00 r[33]=
 105 Compare         29   33    1 k(1,B)        00 r[29] <-> r[33]
 106 Jump           107  101  107               00 
 107 Copy            33   29    0               00 r[29]=r[33]
 108 Column           3    3   32               00 r[32]=
 109 AggInverse       1   32    1 sum(1)        01 accum=r[1] inverse(r[32])
 110 Column           3    4   32               00 r[32]=
 111 AggInverse       1   32    3 sum(1)        01 accum=r[3] inverse(r[32])
 112 Delete           3    0    0               02 
 113 Next             3  115    0               00 
 114 Goto             0  119    0               00 
 115 Column           3    2   33               00 r[33]=
 116 Compare         28   33    1 k(1,B)        00 r[28] <-> r[33]
 117 Jump           118  108  118               00 
 118 Copy            33   28    0               00 r[28]=r[33]
 119 Goto             0   99    0               00 
 120 ResetSorter      1    0    0               00 
 121 Return          31    0    0               00 
 122 Goto             0  130    0               00 
 123 Noop             0    0    0               00 inner-loop subroutine
 124 Copy             4   35    0               00 r[35]=r[4]
 125 Copy             2   36    0               00 r[36]=r[2]
 126 Column           1    0   34               00 r[34]=
 127 MakeRecord      34    3   37               00 r[37]=mkrec(r[34..36])
 128 SorterInsert     9   37   34 3             00 key=r[37]
 129 Return          19    0    0               00 end inner-loop subroutine
 130 Explain        130    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 131 OpenPseudo      10   38    4               00 4 columns in r[38]
 132 SorterSort       9  138    0               00 
 133 SorterData       9   38   10               00 r[38]=data
 134 Column          10    2   36               00 r[36]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
 135 Column          10    1   35               00 r[35]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
 136 ResultRow       35    2    0               00 output=r[35..36]
 137 SorterNext       9  133    0               00 
 138 Halt             0    0    0               00 
 139 Transaction      0    0    5 0             01 usesStmtJournal=0
 140 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING), 
  min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  176    0               00 Start at 176
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,B)        00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=t0.c0
  14 Column           7    0    9               00 r[9]=t0.c0
  15 Column           7    0   10               00 r[10]=t0.c0
  16 Column           7    0   11               00 r[11]=t0.c0
  17 Column           7    0    6               00 r[6]=t0.c0
  18 Column           7    0    7               00 r[7]=t0.c0
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    0   12               00 r[12]=
  36 Column           8    4   11               00 r[11]=
  37 Column           8    3   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 OpenEphemeral   10    2    0 k(1,-B)       00 nColumn=2
  48 Integer          0   20    0               00 r[20]=0
  49 OpenEphemeral   11    2    0 k(1,B)        00 nColumn=2
  50 Integer          0   23    0               00 r[23]=0
  51 Explain         51    0    0 SCAN SUBQUERY 2 00 
  52 InitCoroutine    5    0    8               00 
  53 Yield            5  121    0               00 next row of subquery_2
  54 Copy             8   26    0               00 r[26]=r[8]
  55 Copy             9   27    0               00 r[27]=r[9]
  56 Copy            10   28    0               00 r[28]=r[10]
  57 Copy            11   29    0               00 r[29]=r[11]
  58 Copy            12   30    0               00 r[30]=r[12]
  59 MakeRecord      26    5   31               00 r[31]=mkrec(r[26..30])
  60 Compare         27   17    1 k(1,B)        00 r[27] <-> r[17]
  61 Jump            62   64   62               00 
  62 Gosub           35  122    0               00 call flush_partition
  63 Copy            27   17    0               00 r[17]=r[27]
  64 NewRowid         2   32    0               00 r[32]=rowid
  65 Insert           2   31   32               00 intkey=r[32] data=r[31]
  66 Ne              18   87   32               00 if r[32]!=r[18] goto 87
  67 Null             0    1    0               00 r[1]=NULL
  68 ResetSorter     10    0    0               00 
  69 Integer          0   20    0               00 r[20]=0
  70 Null             0    3    0               00 r[3]=NULL
  71 ResetSorter     11    0    0               00 
  72 Integer          0   23    0               00 r[23]=0
  73 Integer          3   33    0               00 r[33]=3
  74 Integer          0   37    0               00 r[37]=0
  75 MustBeInt       33   77    0               00 
  76 Ge              37   78   33               00 if r[33]>=r[37] goto 78
  77 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  78 Integer          1   34    0               00 r[34]=1
  79 Integer          0   37    0               00 r[37]=0
  80 MustBeInt       34   82    0               00 
  81 Ge              37   83   34               00 if r[34]>=r[37] goto 83
  82 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  83 Rewind           3    1    0               00 
  84 Rewind           1    1    0               00 
  85 Rewind           4    1    0               00 
  86 Goto             0  120    0               00 
  87 Column           4    3   36               00 r[36]=
  88 IsNull          36   93    0               00 if r[36]==NULL goto 93
  89 AddImm          20    1    0               00 r[20]=r[20]+1
  90 SCopy           36   19    0               00 r[19]=r[36]
  91 MakeRecord      19    2   21               00 r[21]=mkrec(r[19..20])
  92 IdxInsert       10   21    0               00 key=r[21]
  93 Column           4    4   36               00 r[36]=
  94 IsNull          36   99    0               00 if r[36]==NULL goto 99
  95 AddImm          23    1    0               00 r[23]=r[23]+1
  96 SCopy           36   22    0               00 r[22]=r[36]
  97 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
  98 IdxInsert       11   24    0               00 key=r[24]
  99 Next             4  100    0               00 
 100 IfPos           34  120    1               00 if r[34]>0 then r[34]-=1, goto 120
 101 Null             0    2    0               00 r[2]=NULL
 102 Last            10  104    0               00 
 103 Column          10    0    2               00 r[2]=
 104 Null             0    4    0               00 r[4]=NULL
 105 Last            11  107    0               00 
 106 Column          11    0    4               00 r[4]=
 107 Gosub           25  160    0               00 
 108 Next             1  109    0               00 
 109 IfPos           33  120    1               00 if r[33]>0 then r[33]-=1, goto 120
 110 Column           3    3   36               00 r[36]=
 111 IsNull          36  114    0               00 if r[36]==NULL goto 114
 112 SeekGE          10  114   36 1             00 key=r[36]
 113 Delete          10    0    0               00 
 114 Column           3    4   36               00 r[36]=
 115 IsNull          36  118    0               00 if r[36]==NULL goto 118
 116 SeekGE          11  118   36 1             00 key=r[36]
 117 Delete          11    0    0               00 
 118 Delete           3    0    0               02 
 119 Next             3  120    0               00 
 120 Goto             0   53    0               00 
 121 Integer        158   35    0               00 r[35]=158
 122 Rewind           2  157    0               00 
 123 Column           4    3   36               00 r[36]=
 124 IsNull          36  129    0               00 if r[36]==NULL goto 129
 125 AddImm          20    1    0               00 r[20]=r[20]+1
 126 SCopy           36   19    0               00 r[19]=r[36]
 127 MakeRecord      19    2   21               00 r[21]=mkrec(r[19..20])
 128 IdxInsert       10   21    0               00 key=r[21]
 129 Column           4    4   36               00 r[36]=
 130 IsNull          36  135    0               00 if r[36]==NULL goto 135
 131 AddImm          23    1    0               00 r[23]=r[23]+1
 132 SCopy           36   22    0               00 r[22]=r[36]
 133 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 134 IdxInsert       11   24    0               00 key=r[24]
 135 Next             4  136    0               00 
 136 Null             0    2    0               00 r[2]=NULL
 137 Last            10  139    0               00 
 138 Column          10    0    2               00 r[2]=
 139 Null             0    4    0               00 r[4]=NULL
 140 Last            11  142    0               00 
 141 Column          11    0    4               00 r[4]=
 142 Gosub           25  160    0               00 
 143 Next             1  145    0               00 
 144 Goto             0  157    0               00 
 145 IfPos           33  156    1               00 if r[33]>0 then r[33]-=1, goto 156
 146 Column           3    3   36               00 r[36]=
 147 IsNull          36  150    0               00 if r[36]==NULL goto 150
 148 SeekGE          10  150   36 1             00 key=r[36]
 149 Delete          10    0    0               00 
 150 Column           3    4   36               00 r[36]=
 151 IsNull          36  154    0               00 if r[36]==NULL goto 154
 152 SeekGE          11  154   36 1             00 key=r[36]
 153 Delete          11    0    0               00 
 154 Delete           3    0    0               02 
 155 Next             3  156    0               00 
 156 Goto             0  136    0               00 
 157 ResetSorter      1    0    0               00 
 158 Return          35    0    0               00 
 159 Goto             0  167    0               00 
 160 Noop             0    0    0               00 inner-loop subroutine
 161 Copy             4   39    0               00 r[39]=r[4]
 162 Copy             2   40    0               00 r[40]=r[2]
 163 Column           1    0   38               00 r[38]=
 164 MakeRecord      38    3   41               00 r[41]=mkrec(r[38..40])
 165 SorterInsert     9   41   38 3             00 key=r[41]
 166 Return          25    0    0               00 end inner-loop subroutine
 167 Explain        167    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 168 OpenPseudo      12   42    4               00 4 columns in r[42]
 169 SorterSort       9  175    0               00 
 170 SorterData       9   42   12               00 r[42]=data
 171 Column          12    2   40               00 r[40]=min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
 172 Column          12    1   39               00 r[39]=max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
 173 ResultRow       39    2    0               00 output=r[39..40]
 174 SorterNext       9  170    0               00 
 175 Halt             0    0    0               00 
 176 Transaction      0    0    5 0             01 usesStmtJournal=0
 177 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING), 
         sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
  FROM v0 ORDER BY over

;]
VDBE Program Listing:
   0 Init             0  125    0               00 Start at 125
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   33    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    8    0 k(2,B,B)      00 
  10 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  11 Explain         11    8    0 SCAN TABLE v0 00 
  12 Rewind           0   21    0               00 
  13 Column           0    0    8               00 r[8]=v0.over
  14 Column           0    1    9               00 r[9]=v0.following
  15 Column           0    1   10               00 r[10]=v0.following
  16 Column           0    1    6               00 r[6]=v0.following
  17 Column           0    0    7               00 r[7]=v0.over
  18 MakeRecord       6    5   13               00 r[13]=mkrec(r[6..10])
  19 SorterInsert     6   13    6 5             00 key=r[13]
  20 Next             0   13    0               01 
  21 Explain         21    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  22 OpenPseudo       7   14    8               00 8 columns in r[14]
  23 SorterSort       6   32    0               00 
  24 SorterData       6   14    7               00 r[14]=data
  25 Column           7    0   12               00 r[12]=
  26 Column           7    4   11               00 r[11]=
  27 Column           7    1   10               00 r[10]=
  28 Column           7    3    9               00 r[9]=
  29 Column           7    2    8               00 r[8]=
  30 Yield            5    0    0               00 
  31 SorterNext       6   24    0               00 
  32 EndCoroutine     5    0    0               00 
  33 SorterOpen       8    4    0 k(1,B)        00 
  34 Null             0   15   15               00 r[15..15]=NULL
  35 Integer          1   16    0               00 r[16]=1
  36 Explain         36    0    0 SCAN SUBQUERY 2 00 
  37 InitCoroutine    5    0    8               00 
  38 Yield            5   86    0               00 next row of subquery_2
  39 Copy             8   18    0               00 r[18]=r[8]
  40 Copy             9   19    0               00 r[19]=r[9]
  41 Copy            10   20    0               00 r[20]=r[10]
  42 Copy            11   21    0               00 r[21]=r[11]
  43 Copy            12   22    0               00 r[22]=r[12]
  44 MakeRecord      18    5   23               00 r[23]=mkrec(r[18..22])
  45 Compare         19   15    1 k(1,B)        00 r[19] <-> r[15]
  46 Jump            47   49   47               00 
  47 Gosub           27   87    0               00 call flush_partition
  48 Copy            19   15    0               00 r[15]=r[19]
  49 NewRowid         2   24    0               00 r[24]=rowid
  50 Insert           2   23   24               00 intkey=r[24] data=r[23]
  51 Ne              16   68   24               00 if r[24]!=r[16] goto 68
  52 Null             0    1    0               00 r[1]=NULL
  53 Null             0    3    0               00 r[3]=NULL
  54 Integer          3   25    0               00 r[25]=3
  55 Integer          0   29    0               00 r[29]=0
  56 MustBeInt       25   58    0               00 
  57 Ge              29   59   25               00 if r[25]>=r[29] goto 59
  58 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  59 Integer          1   26    0               00 r[26]=1
  60 Integer          0   29    0               00 r[29]=0
  61 MustBeInt       26   63    0               00 
  62 Ge              29   64   26               00 if r[26]>=r[29] goto 64
  63 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  64 Rewind           3    1    0               00 
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Goto             0   85    0               00 
  68 Column           4    3   28               00 r[28]=
  69 AggStep          0   28    1 sum(1)        01 accum=r[1] step(r[28])
  70 Column           4    4   28               00 r[28]=
  71 AggStep          0   28    3 sum(1)        01 accum=r[3] step(r[28])
  72 Next             4   73    0               00 
  73 IfPos           26   85    1               00 if r[26]>0 then r[26]-=1, goto 85
  74 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  75 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  76 Gosub           17  109    0               00 
  77 Next             1   78    0               00 
  78 IfPos           25   85    1               00 if r[25]>0 then r[25]-=1, goto 85
  79 Column           3    3   28               00 r[28]=
  80 AggInverse       1   28    1 sum(1)        01 accum=r[1] inverse(r[28])
  81 Column           3    4   28               00 r[28]=
  82 AggInverse       1   28    3 sum(1)        01 accum=r[3] inverse(r[28])
  83 Delete           3    0    0               02 
  84 Next             3   85    0               00 
  85 Goto             0   38    0               00 
  86 Integer        107   27    0               00 r[27]=107
  87 Rewind           2  106    0               00 
  88 Column           4    3   28               00 r[28]=
  89 AggStep          0   28    1 sum(1)        01 accum=r[1] step(r[28])
  90 Column           4    4   28               00 r[28]=
  91 AggStep          0   28    3 sum(1)        01 accum=r[3] step(r[28])
  92 Next             4   93    0               00 
  93 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  94 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  95 Gosub           17  109    0               00 
  96 Next             1   98    0               00 
  97 Goto             0  106    0               00 
  98 IfPos           25  105    1               00 if r[25]>0 then r[25]-=1, goto 105
  99 Column           3    3   28               00 r[28]=
 100 AggInverse       1   28    1 sum(1)        01 accum=r[1] inverse(r[28])
 101 Column           3    4   28               00 r[28]=
 102 AggInverse       1   28    3 sum(1)        01 accum=r[3] inverse(r[28])
 103 Delete           3    0    0               02 
 104 Next             3  105    0               00 
 105 Goto             0   93    0               00 
 106 ResetSorter      1    0    0               00 
 107 Return          27    0    0               00 
 108 Goto             0  116    0               00 
 109 Noop             0    0    0               00 inner-loop subroutine
 110 Copy             4   31    0               00 r[31]=r[4]
 111 Copy             2   32    0               00 r[32]=r[2]
 112 Column           1    0   30               00 r[30]=
 113 MakeRecord      30    3   33               00 r[33]=mkrec(r[30..32])
 114 SorterInsert     8   33   30 3             00 key=r[33]
 115 Return          17    0    0               00 end inner-loop subroutine
 116 Explain        116    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 117 OpenPseudo       9   34    4               00 4 columns in r[34]
 118 SorterSort       8  124    0               00 
 119 SorterData       8   34    9               00 r[34]=data
 120 Column           9    2   32               00 r[32]=sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLL
 121 Column           9    1   31               00 r[31]=sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLL
 122 ResultRow       31    2    0               00 output=r[31..32]
 123 SorterNext       8  119    0               00 
 124 Halt             0    0    0               00 
 125 Transaction      0    0    5 0             01 usesStmtJournal=0
 126 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING), 
  min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  250    0               00 Start at 250
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  149    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  122    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           37  123    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21  101   34               00 if r[34]!=r[21] goto 101
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Integer          1   35    0               00 r[35]=1
  80 Integer          0   39    0               00 r[39]=0
  81 MustBeInt       35   83    0               00 
  82 Ge              39   84   35               00 if r[35]>=r[39] goto 84
  83 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  84 Integer          1   36    0               00 r[36]=1
  85 Integer          0   39    0               00 r[39]=0
  86 MustBeInt       36   88    0               00 
  87 Ge              39   89   36               00 if r[36]>=r[39] goto 89
  88 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  89 Le              35   97   36               00 if r[36]<=r[35] goto 97
  90 Null             0    5    0               00 r[5]=NULL
  91 Last            14   93    0               00 
  92 Column          14    0    5               00 r[5]=
  93 Rewind           6    1    0               00 
  94 Gosub           25  140    0               00 
  95 ResetSorter      6    0    0               00 
  96 Goto             0  121    0               00 
  97 Rewind           8    1    0               00 
  98 Rewind           6    1    0               00 
  99 Rewind           9    1    0               00 
 100 Goto             0  121    0               00 
 101 IfPos           36  109    1               00 if r[36]>0 then r[36]-=1, goto 109
 102 Column           9    6   38               00 r[38]=
 103 IsNull          38  108    0               00 if r[38]==NULL goto 108
 104 AddImm          23    1    0               00 r[23]=r[23]+1
 105 SCopy           38   22    0               00 r[22]=r[38]
 106 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 107 IdxInsert       14   24    0               00 key=r[24]
 108 Next             9  109    0               00 
 109 Null             0    5    0               00 r[5]=NULL
 110 Last            14  112    0               00 
 111 Column          14    0    5               00 r[5]=
 112 Gosub           25  140    0               00 
 113 Next             6  114    0               00 
 114 IfPos           35  121    1               00 if r[35]>0 then r[35]-=1, goto 121
 115 Column           8    6   38               00 r[38]=
 116 IsNull          38  119    0               00 if r[38]==NULL goto 119
 117 SeekGE          14  119   38 1             00 key=r[38]
 118 Delete          14    0    0               00 
 119 Delete           8    0    0               02 
 120 Next             8  121    0               00 
 121 Goto             0   60    0               00 
 122 Integer        138   37    0               00 r[37]=138
 123 Rewind           7  137    0               00 
 124 IfPos           36  132    1               00 if r[36]>0 then r[36]-=1, goto 132
 125 Column           9    6   38               00 r[38]=
 126 IsNull          38  131    0               00 if r[38]==NULL goto 131
 127 AddImm          23    1    0               00 r[23]=r[23]+1
 128 SCopy           38   22    0               00 r[22]=r[38]
 129 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 130 IdxInsert       14   24    0               00 key=r[24]
 131 Next             9  132    0               00 
 132 Null             0    5    0               00 r[5]=NULL
 133 Last            14  135    0               00 
 134 Column          14    0    5               00 r[5]=
 135 Gosub           25  140    0               00 
 136 Next             6  137    0               00 
 137 ResetSorter      6    0    0               00 
 138 Return          37    0    0               00 
 139 Goto             0  148    0               00 
 140 Noop             0    0    0               00 inner-loop subroutine
 141 Copy             5   40    0               00 r[40]=r[5]
 142 Column           6    0   41               00 r[41]=
 143 Column           6    1   42               00 r[42]=
 144 Column           6    2   43               00 r[43]=
 145 Column           6    3   44               00 r[44]=
 146 Yield            3    0    0               00 
 147 Return          25    0    0               00 end inner-loop subroutine
 148 EndCoroutine     3    0    0               00 
 149 SorterOpen      15    4    0 k(1,B)        00 
 150 Null             0   45   45               00 r[45..45]=NULL
 151 Integer          1   46    0               00 r[46]=1
 152 OpenEphemeral   16    2    0 k(1,B)        00 nColumn=2
 153 Integer          0   48    0               00 r[48]=0
 154 Explain        154    0    0 SCAN SUBQUERY 2 00 
 155 InitCoroutine    3    0    7               00 
 156 Yield            3  208    0               00 next row of subquery_2
 157 Copy            40   51    0               00 r[51]=r[40]
 158 Copy            41   52    0               00 r[52]=r[41]
 159 Copy            42   53    0               00 r[53]=r[42]
 160 Copy            43   54    0               00 r[54]=r[43]
 161 Copy            44   55    0               00 r[55]=r[44]
 162 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 163 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 164 Jump           165  167  165               00 
 165 Gosub           60  209    0               00 call flush_partition
 166 Copy            53   45    0               00 r[45]=r[53]
 167 NewRowid         2   57    0               00 r[57]=rowid
 168 Insert           2   56   57               00 intkey=r[57] data=r[56]
 169 Ne              46  187   57               00 if r[57]!=r[46] goto 187
 170 Null             0    1    0               00 r[1]=NULL
 171 ResetSorter     16    0    0               00 
 172 Integer          0   48    0               00 r[48]=0
 173 Integer          3   58    0               00 r[58]=3
 174 Integer          0   62    0               00 r[62]=0
 175 MustBeInt       58  177    0               00 
 176 Ge              62  178   58               00 if r[58]>=r[62] goto 178
 177 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 178 Integer          1   59    0               00 r[59]=1
 179 Integer          0   62    0               00 r[62]=0
 180 MustBeInt       59  182    0               00 
 181 Ge              62  183   59               00 if r[59]>=r[62] goto 183
 182 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 183 Rewind           3    1    0               00 
 184 Rewind           1    1    0               00 
 185 Rewind           4    1    0               00 
 186 Goto             0  207    0               00 
 187 Column           4    4   61               00 r[61]=
 188 IsNull          61  193    0               00 if r[61]==NULL goto 193
 189 AddImm          48    1    0               00 r[48]=r[48]+1
 190 SCopy           61   47    0               00 r[47]=r[61]
 191 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 192 IdxInsert       16   49    0               00 key=r[49]
 193 Next             4  194    0               00 
 194 IfPos           59  207    1               00 if r[59]>0 then r[59]-=1, goto 207
 195 Null             0    2    0               00 r[2]=NULL
 196 Last            16  198    0               00 
 197 Column          16    0    2               00 r[2]=
 198 Gosub           50  234    0               00 
 199 Next             1  200    0               00 
 200 IfPos           58  207    1               00 if r[58]>0 then r[58]-=1, goto 207
 201 Column           3    4   61               00 r[61]=
 202 IsNull          61  205    0               00 if r[61]==NULL goto 205
 203 SeekGE          16  205   61 1             00 key=r[61]
 204 Delete          16    0    0               00 
 205 Delete           3    0    0               02 
 206 Next             3  207    0               00 
 207 Goto             0  156    0               00 
 208 Integer        232   60    0               00 r[60]=232
 209 Rewind           2  231    0               00 
 210 Column           4    4   61               00 r[61]=
 211 IsNull          61  216    0               00 if r[61]==NULL goto 216
 212 AddImm          48    1    0               00 r[48]=r[48]+1
 213 SCopy           61   47    0               00 r[47]=r[61]
 214 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 215 IdxInsert       16   49    0               00 key=r[49]
 216 Next             4  217    0               00 
 217 Null             0    2    0               00 r[2]=NULL
 218 Last            16  220    0               00 
 219 Column          16    0    2               00 r[2]=
 220 Gosub           50  234    0               00 
 221 Next             1  223    0               00 
 222 Goto             0  231    0               00 
 223 IfPos           58  230    1               00 if r[58]>0 then r[58]-=1, goto 230
 224 Column           3    4   61               00 r[61]=
 225 IsNull          61  228    0               00 if r[61]==NULL goto 228
 226 SeekGE          16  228   61 1             00 key=r[61]
 227 Delete          16    0    0               00 
 228 Delete           3    0    0               02 
 229 Next             3  230    0               00 
 230 Goto             0  217    0               00 
 231 ResetSorter      1    0    0               00 
 232 Return          60    0    0               00 
 233 Goto             0  241    0               00 
 234 Noop             0    0    0               00 inner-loop subroutine
 235 Copy             2   64    0               00 r[64]=r[2]
 236 Column           1    0   65               00 r[65]=
 237 Column           1    1   63               00 r[63]=
 238 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 239 SorterInsert    15   66   63 3             00 key=r[66]
 240 Return          50    0    0               00 end inner-loop subroutine
 241 Explain        241    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 242 OpenPseudo      17   67    4               00 4 columns in r[67]
 243 SorterSort      15  249    0               00 
 244 SorterData      15   67   17               00 r[67]=data
 245 Column          17    2   65               00 r[65]=min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 246 Column          17    1   64               00 r[64]=max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
 247 ResultRow       64    2    0               00 output=r[64..65]
 248 SorterNext      15  244    0               00 
 249 Halt             0    0    0               00 
 250 Transaction      0    0    5 0             01 usesStmtJournal=0
 251 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING), 
         sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM v0 ORDER BY over

;]
VDBE Program Listing:
   0 Init             0  199    0               00 Start at 199
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  118    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   43   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   29    0               00 
  19 Column           0    0    9               00 r[9]=v0.over
  20 Column           0    1   10               00 r[10]=v0.following
  21 Column           0    0   11               00 r[11]=v0.over
  22 Column           0    1   12               00 r[12]=v0.following
  23 Column           0    1   13               00 r[13]=v0.following
  24 Column           0    1    7               00 r[7]=v0.following
  25 Column           0    0    8               00 r[8]=v0.over
  26 MakeRecord       7    7   16               00 r[16]=mkrec(r[7..13])
  27 SorterInsert    11   16    7 7             00 key=r[16]
  28 Next             0   19    0               01 
  29 Explain         29   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  30 OpenPseudo      12   17   10               00 10 columns in r[17]
  31 SorterSort      11   42    0               00 
  32 SorterData      11   17   12               00 r[17]=data
  33 Column          12    0   15               00 r[15]=
  34 Column          12    1   14               00 r[14]=
  35 Column          12    6   13               00 r[13]=
  36 Column          12    5   12               00 r[12]=
  37 Column          12    4   11               00 r[11]=
  38 Column          12    3   10               00 r[10]=
  39 Column          12    2    9               00 r[9]=
  40 Yield            6    0    0               00 
  41 SorterNext      11   32    0               00 
  42 EndCoroutine     6    0    0               00 
  43 Null             0   18   18               00 r[18..18]=NULL
  44 Integer          1   19    0               00 r[19]=1
  45 Explain         45    7    0 SCAN SUBQUERY 3 00 
  46 InitCoroutine    6    0   14               00 
  47 Yield            6   97    0               00 next row of subquery_3
  48 Copy             9   21    0               00 r[21]=r[9]
  49 Copy            10   22    0               00 r[22]=r[10]
  50 Copy            11   23    0               00 r[23]=r[11]
  51 Copy            12   24    0               00 r[24]=r[12]
  52 Copy            13   25    0               00 r[25]=r[13]
  53 Copy            14   26    0               00 r[26]=r[14]
  54 Copy            15   27    0               00 r[27]=r[15]
  55 MakeRecord      21    7   28               00 r[28]=mkrec(r[21..27])
  56 Compare         25   18    1 k(1,B)        00 r[25] <-> r[18]
  57 Jump            58   60   58               00 
  58 Gosub           32   98    0               00 call flush_partition
  59 Copy            25   18    0               00 r[18]=r[25]
  60 NewRowid         7   29    0               00 r[29]=rowid
  61 Insert           7   28   29               00 intkey=r[29] data=r[28]
  62 Ne              19   84   29               00 if r[29]!=r[19] goto 84
  63 Null             0    4    0               00 r[4]=NULL
  64 Integer          1   30    0               00 r[30]=1
  65 Integer          0   34    0               00 r[34]=0
  66 MustBeInt       30   68    0               00 
  67 Ge              34   69   30               00 if r[30]>=r[34] goto 69
  68 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  69 Integer          1   31    0               00 r[31]=1
  70 Integer          0   34    0               00 r[34]=0
  71 MustBeInt       31   73    0               00 
  72 Ge              34   74   31               00 if r[31]>=r[34] goto 74
  73 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  74 Le              30   80   31               00 if r[31]<=r[30] goto 80
  75 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  76 Rewind           6    1    0               00 
  77 Gosub           20  109    0               00 
  78 ResetSorter      6    0    0               00 
  79 Goto             0   96    0               00 
  80 Rewind           8    1    0               00 
  81 Rewind           6    1    0               00 
  82 Rewind           9    1    0               00 
  83 Goto             0   96    0               00 
  84 IfPos           31   88    1               00 if r[31]>0 then r[31]-=1, goto 88
  85 Column           9    6   33               00 r[33]=
  86 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
  87 Next             9   88    0               00 
  88 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  89 Gosub           20  109    0               00 
  90 Next             6   91    0               00 
  91 IfPos           30   96    1               00 if r[30]>0 then r[30]-=1, goto 96
  92 Column           8    6   33               00 r[33]=
  93 AggInverse       1   33    4 sum(1)        01 accum=r[4] inverse(r[33])
  94 Delete           8    0    0               02 
  95 Next             8   96    0               00 
  96 Goto             0   47    0               00 
  97 Integer        107   32    0               00 r[32]=107
  98 Rewind           7  106    0               00 
  99 IfPos           31  103    1               00 if r[31]>0 then r[31]-=1, goto 103
 100 Column           9    6   33               00 r[33]=
 101 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
 102 Next             9  103    0               00 
 103 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 104 Gosub           20  109    0               00 
 105 Next             6  106    0               00 
 106 ResetSorter      6    0    0               00 
 107 Return          32    0    0               00 
 108 Goto             0  117    0               00 
 109 Noop             0    0    0               00 inner-loop subroutine
 110 Copy             5   35    0               00 r[35]=r[5]
 111 Column           6    0   36               00 r[36]=
 112 Column           6    1   37               00 r[37]=
 113 Column           6    2   38               00 r[38]=
 114 Column           6    3   39               00 r[39]=
 115 Yield            3    0    0               00 
 116 Return          20    0    0               00 end inner-loop subroutine
 117 EndCoroutine     3    0    0               00 
 118 SorterOpen      13    4    0 k(1,B)        00 
 119 Null             0   40   40               00 r[40..40]=NULL
 120 Integer          1   41    0               00 r[41]=1
 121 Explain        121    0    0 SCAN SUBQUERY 2 00 
 122 InitCoroutine    3    0    7               00 
 123 Yield            3  165    0               00 next row of subquery_2
 124 Copy            35   43    0               00 r[43]=r[35]
 125 Copy            36   44    0               00 r[44]=r[36]
 126 Copy            37   45    0               00 r[45]=r[37]
 127 Copy            38   46    0               00 r[46]=r[38]
 128 Copy            39   47    0               00 r[47]=r[39]
 129 MakeRecord      43    5   48               00 r[48]=mkrec(r[43..47])
 130 Compare         45   40    1 k(1,B)        00 r[45] <-> r[40]
 131 Jump           132  134  132               00 
 132 Gosub           52  166    0               00 call flush_partition
 133 Copy            45   40    0               00 r[40]=r[45]
 134 NewRowid         2   49    0               00 r[49]=rowid
 135 Insert           2   48   49               00 intkey=r[49] data=r[48]
 136 Ne              41  152   49               00 if r[49]!=r[41] goto 152
 137 Null             0    1    0               00 r[1]=NULL
 138 Integer          3   50    0               00 r[50]=3
 139 Integer          0   54    0               00 r[54]=0
 140 MustBeInt       50  142    0               00 
 141 Ge              54  143   50               00 if r[50]>=r[54] goto 143
 142 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 143 Integer          1   51    0               00 r[51]=1
 144 Integer          0   54    0               00 r[54]=0
 145 MustBeInt       51  147    0               00 
 146 Ge              54  148   51               00 if r[51]>=r[54] goto 148
 147 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 148 Rewind           3    1    0               00 
 149 Rewind           1    1    0               00 
 150 Rewind           4    1    0               00 
 151 Goto             0  164    0               00 
 152 Column           4    4   53               00 r[53]=
 153 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 154 Next             4  155    0               00 
 155 IfPos           51  164    1               00 if r[51]>0 then r[51]-=1, goto 164
 156 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 157 Gosub           42  183    0               00 
 158 Next             1  159    0               00 
 159 IfPos           50  164    1               00 if r[50]>0 then r[50]-=1, goto 164
 160 Column           3    4   53               00 r[53]=
 161 AggInverse       1   53    1 sum(1)        01 accum=r[1] inverse(r[53])
 162 Delete           3    0    0               02 
 163 Next             3  164    0               00 
 164 Goto             0  123    0               00 
 165 Integer        181   52    0               00 r[52]=181
 166 Rewind           2  180    0               00 
 167 Column           4    4   53               00 r[53]=
 168 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 169 Next             4  170    0               00 
 170 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 171 Gosub           42  183    0               00 
 172 Next             1  174    0               00 
 173 Goto             0  180    0               00 
 174 IfPos           50  179    1               00 if r[50]>0 then r[50]-=1, goto 179
 175 Column           3    4   53               00 r[53]=
 176 AggInverse       1   53    1 sum(1)        01 accum=r[1] inverse(r[53])
 177 Delete           3    0    0               02 
 178 Next             3  179    0               00 
 179 Goto             0  170    0               00 
 180 ResetSorter      1    0    0               00 
 181 Return          52    0    0               00 
 182 Goto             0  190    0               00 
 183 Noop             0    0    0               00 inner-loop subroutine
 184 Copy             2   56    0               00 r[56]=r[2]
 185 Column           1    0   57               00 r[57]=
 186 Column           1    1   55               00 r[55]=
 187 MakeRecord      55    3   58               00 r[58]=mkrec(r[55..57])
 188 SorterInsert    13   58   55 3             00 key=r[58]
 189 Return          42    0    0               00 end inner-loop subroutine
 190 Explain        190    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 191 OpenPseudo      14   59    4               00 4 columns in r[59]
 192 SorterSort      13  198    0               00 
 193 SorterData      13   59   14               00 r[59]=data
 194 Column          14    2   57               00 r[57]=sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 1 PRECEDING AND 1 PREC
 195 Column          14    1   56               00 r[56]=sum(following) OVER (PARTITION BY following ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLL
 196 ResultRow       56    2    0               00 output=r[56..57]
 197 SorterNext      13  193    0               00 
 198 Halt             0    0    0               00 
 199 Transaction      0    0    5 0             01 usesStmtJournal=0
 200 Goto             0    1    0               00 
SQL: [SELECT max(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING), 
  min(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  250    0               00 Start at 250
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  149    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=preceding.t1
  20 Column          12    0   10               00 r[10]=preceding.t1
  21 Column          12    0   11               00 r[11]=preceding.t1
  22 Column          12    0   12               00 r[12]=preceding.t1
  23 Column          12    0   13               00 r[13]=preceding.t1
  24 Column          12    0   14               00 r[14]=preceding.t1
  25 Column          12    0    7               00 r[7]=preceding.t1
  26 Column          12    0    8               00 r[8]=preceding.t1
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  122    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           37  123    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21  101   34               00 if r[34]!=r[21] goto 101
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Integer          0   35    0               00 r[35]=0
  80 Integer          0   39    0               00 r[39]=0
  81 MustBeInt       35   83    0               00 
  82 Ge              39   84   35               00 if r[35]>=r[39] goto 84
  83 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  84 Integer          1   36    0               00 r[36]=1
  85 Integer          0   39    0               00 r[39]=0
  86 MustBeInt       36   88    0               00 
  87 Ge              39   89   36               00 if r[36]>=r[39] goto 89
  88 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  89 Le              35   97   36               00 if r[36]<=r[35] goto 97
  90 Null             0    5    0               00 r[5]=NULL
  91 Last            14   93    0               00 
  92 Column          14    0    5               00 r[5]=
  93 Rewind           6    1    0               00 
  94 Gosub           25  140    0               00 
  95 ResetSorter      6    0    0               00 
  96 Goto             0  121    0               00 
  97 Rewind           8    1    0               00 
  98 Rewind           6    1    0               00 
  99 Rewind           9    1    0               00 
 100 Goto             0  121    0               00 
 101 IfPos           36  109    1               00 if r[36]>0 then r[36]-=1, goto 109
 102 Column           9    6   38               00 r[38]=
 103 IsNull          38  108    0               00 if r[38]==NULL goto 108
 104 AddImm          23    1    0               00 r[23]=r[23]+1
 105 SCopy           38   22    0               00 r[22]=r[38]
 106 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 107 IdxInsert       14   24    0               00 key=r[24]
 108 Next             9  109    0               00 
 109 Null             0    5    0               00 r[5]=NULL
 110 Last            14  112    0               00 
 111 Column          14    0    5               00 r[5]=
 112 Gosub           25  140    0               00 
 113 Next             6  114    0               00 
 114 IfPos           35  121    1               00 if r[35]>0 then r[35]-=1, goto 121
 115 Column           8    6   38               00 r[38]=
 116 IsNull          38  119    0               00 if r[38]==NULL goto 119
 117 SeekGE          14  119   38 1             00 key=r[38]
 118 Delete          14    0    0               00 
 119 Delete           8    0    0               02 
 120 Next             8  121    0               00 
 121 Goto             0   60    0               00 
 122 Integer        138   37    0               00 r[37]=138
 123 Rewind           7  137    0               00 
 124 IfPos           36  132    1               00 if r[36]>0 then r[36]-=1, goto 132
 125 Column           9    6   38               00 r[38]=
 126 IsNull          38  131    0               00 if r[38]==NULL goto 131
 127 AddImm          23    1    0               00 r[23]=r[23]+1
 128 SCopy           38   22    0               00 r[22]=r[38]
 129 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 130 IdxInsert       14   24    0               00 key=r[24]
 131 Next             9  132    0               00 
 132 Null             0    5    0               00 r[5]=NULL
 133 Last            14  135    0               00 
 134 Column          14    0    5               00 r[5]=
 135 Gosub           25  140    0               00 
 136 Next             6  137    0               00 
 137 ResetSorter      6    0    0               00 
 138 Return          37    0    0               00 
 139 Goto             0  148    0               00 
 140 Noop             0    0    0               00 inner-loop subroutine
 141 Copy             5   40    0               00 r[40]=r[5]
 142 Column           6    0   41               00 r[41]=
 143 Column           6    1   42               00 r[42]=
 144 Column           6    2   43               00 r[43]=
 145 Column           6    3   44               00 r[44]=
 146 Yield            3    0    0               00 
 147 Return          25    0    0               00 end inner-loop subroutine
 148 EndCoroutine     3    0    0               00 
 149 SorterOpen      15    4    0 k(1,B)        00 
 150 Null             0   45   45               00 r[45..45]=NULL
 151 Integer          1   46    0               00 r[46]=1
 152 OpenEphemeral   16    2    0 k(1,B)        00 nColumn=2
 153 Integer          0   48    0               00 r[48]=0
 154 Explain        154    0    0 SCAN SUBQUERY 2 00 
 155 InitCoroutine    3    0    7               00 
 156 Yield            3  208    0               00 next row of subquery_2
 157 Copy            40   51    0               00 r[51]=r[40]
 158 Copy            41   52    0               00 r[52]=r[41]
 159 Copy            42   53    0               00 r[53]=r[42]
 160 Copy            43   54    0               00 r[54]=r[43]
 161 Copy            44   55    0               00 r[55]=r[44]
 162 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 163 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 164 Jump           165  167  165               00 
 165 Gosub           60  209    0               00 call flush_partition
 166 Copy            53   45    0               00 r[45]=r[53]
 167 NewRowid         2   57    0               00 r[57]=rowid
 168 Insert           2   56   57               00 intkey=r[57] data=r[56]
 169 Ne              46  187   57               00 if r[57]!=r[46] goto 187
 170 Null             0    1    0               00 r[1]=NULL
 171 ResetSorter     16    0    0               00 
 172 Integer          0   48    0               00 r[48]=0
 173 Integer          3   58    0               00 r[58]=3
 174 Integer          0   62    0               00 r[62]=0
 175 MustBeInt       58  177    0               00 
 176 Ge              62  178   58               00 if r[58]>=r[62] goto 178
 177 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 178 Integer          1   59    0               00 r[59]=1
 179 Integer          0   62    0               00 r[62]=0
 180 MustBeInt       59  182    0               00 
 181 Ge              62  183   59               00 if r[59]>=r[62] goto 183
 182 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 183 Rewind           3    1    0               00 
 184 Rewind           1    1    0               00 
 185 Rewind           4    1    0               00 
 186 Goto             0  207    0               00 
 187 Column           4    4   61               00 r[61]=
 188 IsNull          61  193    0               00 if r[61]==NULL goto 193
 189 AddImm          48    1    0               00 r[48]=r[48]+1
 190 SCopy           61   47    0               00 r[47]=r[61]
 191 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 192 IdxInsert       16   49    0               00 key=r[49]
 193 Next             4  194    0               00 
 194 IfPos           59  207    1               00 if r[59]>0 then r[59]-=1, goto 207
 195 Null             0    2    0               00 r[2]=NULL
 196 Last            16  198    0               00 
 197 Column          16    0    2               00 r[2]=
 198 Gosub           50  234    0               00 
 199 Next             1  200    0               00 
 200 IfPos           58  207    1               00 if r[58]>0 then r[58]-=1, goto 207
 201 Column           3    4   61               00 r[61]=
 202 IsNull          61  205    0               00 if r[61]==NULL goto 205
 203 SeekGE          16  205   61 1             00 key=r[61]
 204 Delete          16    0    0               00 
 205 Delete           3    0    0               02 
 206 Next             3  207    0               00 
 207 Goto             0  156    0               00 
 208 Integer        232   60    0               00 r[60]=232
 209 Rewind           2  231    0               00 
 210 Column           4    4   61               00 r[61]=
 211 IsNull          61  216    0               00 if r[61]==NULL goto 216
 212 AddImm          48    1    0               00 r[48]=r[48]+1
 213 SCopy           61   47    0               00 r[47]=r[61]
 214 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 215 IdxInsert       16   49    0               00 key=r[49]
 216 Next             4  217    0               00 
 217 Null             0    2    0               00 r[2]=NULL
 218 Last            16  220    0               00 
 219 Column          16    0    2               00 r[2]=
 220 Gosub           50  234    0               00 
 221 Next             1  223    0               00 
 222 Goto             0  231    0               00 
 223 IfPos           58  230    1               00 if r[58]>0 then r[58]-=1, goto 230
 224 Column           3    4   61               00 r[61]=
 225 IsNull          61  228    0               00 if r[61]==NULL goto 228
 226 SeekGE          16  228   61 1             00 key=r[61]
 227 Delete          16    0    0               00 
 228 Delete           3    0    0               02 
 229 Next             3  230    0               00 
 230 Goto             0  217    0               00 
 231 ResetSorter      1    0    0               00 
 232 Return          60    0    0               00 
 233 Goto             0  241    0               00 
 234 Noop             0    0    0               00 inner-loop subroutine
 235 Copy             2   64    0               00 r[64]=r[2]
 236 Column           1    0   65               00 r[65]=
 237 Column           1    1   63               00 r[63]=
 238 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 239 SorterInsert    15   66   63 3             00 key=r[66]
 240 Return          50    0    0               00 end inner-loop subroutine
 241 Explain        241    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 242 OpenPseudo      17   67    4               00 4 columns in r[67]
 243 SorterSort      15  249    0               00 
 244 SorterData      15   67   17               00 r[67]=data
 245 Column          17    2   65               00 r[65]=min(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 246 Column          17    1   64               00 r[64]=max(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
 247 ResultRow       64    2    0               00 output=r[64..65]
 248 SorterNext      15  244    0               00 
 249 Halt             0    0    0               00 
 250 Transaction      0    0    5 0             01 usesStmtJournal=0
 251 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING), 
         sum(following) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  185    0               00 Start at 185
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  104    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   29   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  17 Explain         17   14    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  18 Rewind          12   28    7 0             00 
  19 Column          12    1    7               00 r[7]=v0.following
  20 Column          12    0    8               00 r[8]=v0.over
  21 Column          12    1    9               00 r[9]=v0.following
  22 Column          12    1   10               00 r[10]=v0.following
  23 Column          12    0   11               00 r[11]=v0.over
  24 Column          12    1   12               00 r[12]=v0.following
  25 Column          12    1   13               00 r[13]=v0.following
  26 Yield            6    0    0               00 
  27 Next            12   19    0               01 
  28 EndCoroutine     6    0    0               00 
  29 Null             0   14   14               00 r[14..14]=NULL
  30 Integer          1   15    0               00 r[15]=1
  31 Explain         31    7    0 SCAN SUBQUERY 3 00 
  32 InitCoroutine    6    0   14               00 
  33 Yield            6   83    0               00 next row of subquery_3
  34 Copy             7   17    0               00 r[17]=r[7]
  35 Copy             8   18    0               00 r[18]=r[8]
  36 Copy             9   19    0               00 r[19]=r[9]
  37 Copy            10   20    0               00 r[20]=r[10]
  38 Copy            11   21    0               00 r[21]=r[11]
  39 Copy            12   22    0               00 r[22]=r[12]
  40 Copy            13   23    0               00 r[23]=r[13]
  41 MakeRecord      17    7   24               00 r[24]=mkrec(r[17..23])
  42 Compare         21   14    1 k(1,B)        00 r[21] <-> r[14]
  43 Jump            44   46   44               00 
  44 Gosub           28   84    0               00 call flush_partition
  45 Copy            21   14    0               00 r[14]=r[21]
  46 NewRowid         7   25    0               00 r[25]=rowid
  47 Insert           7   24   25               00 intkey=r[25] data=r[24]
  48 Ne              15   70   25               00 if r[25]!=r[15] goto 70
  49 Null             0    4    0               00 r[4]=NULL
  50 Integer          0   26    0               00 r[26]=0
  51 Integer          0   30    0               00 r[30]=0
  52 MustBeInt       26   54    0               00 
  53 Ge              30   55   26               00 if r[26]>=r[30] goto 55
  54 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  55 Integer          1   27    0               00 r[27]=1
  56 Integer          0   30    0               00 r[30]=0
  57 MustBeInt       27   59    0               00 
  58 Ge              30   60   27               00 if r[27]>=r[30] goto 60
  59 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  60 Le              26   66   27               00 if r[27]<=r[26] goto 66
  61 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  62 Rewind           6    1    0               00 
  63 Gosub           16   95    0               00 
  64 ResetSorter      6    0    0               00 
  65 Goto             0   82    0               00 
  66 Rewind           8    1    0               00 
  67 Rewind           6    1    0               00 
  68 Rewind           9    1    0               00 
  69 Goto             0   82    0               00 
  70 IfPos           27   74    1               00 if r[27]>0 then r[27]-=1, goto 74
  71 Column           9    6   29               00 r[29]=
  72 AggStep          0   29    4 sum(1)        01 accum=r[4] step(r[29])
  73 Next             9   74    0               00 
  74 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  75 Gosub           16   95    0               00 
  76 Next             6   77    0               00 
  77 IfPos           26   82    1               00 if r[26]>0 then r[26]-=1, goto 82
  78 Column           8    6   29               00 r[29]=
  79 AggInverse       1   29    4 sum(1)        01 accum=r[4] inverse(r[29])
  80 Delete           8    0    0               02 
  81 Next             8   82    0               00 
  82 Goto             0   33    0               00 
  83 Integer         93   28    0               00 r[28]=93
  84 Rewind           7   92    0               00 
  85 IfPos           27   89    1               00 if r[27]>0 then r[27]-=1, goto 89
  86 Column           9    6   29               00 r[29]=
  87 AggStep          0   29    4 sum(1)        01 accum=r[4] step(r[29])
  88 Next             9   89    0               00 
  89 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  90 Gosub           16   95    0               00 
  91 Next             6   92    0               00 
  92 ResetSorter      6    0    0               00 
  93 Return          28    0    0               00 
  94 Goto             0  103    0               00 
  95 Noop             0    0    0               00 inner-loop subroutine
  96 Copy             5   31    0               00 r[31]=r[5]
  97 Column           6    0   32               00 r[32]=
  98 Column           6    1   33               00 r[33]=
  99 Column           6    2   34               00 r[34]=
 100 Column           6    3   35               00 r[35]=
 101 Yield            3    0    0               00 
 102 Return          16    0    0               00 end inner-loop subroutine
 103 EndCoroutine     3    0    0               00 
 104 SorterOpen      13    4    0 k(1,B)        00 
 105 Null             0   36   36               00 r[36..36]=NULL
 106 Integer          1   37    0               00 r[37]=1
 107 Explain        107    0    0 SCAN SUBQUERY 2 00 
 108 InitCoroutine    3    0    7               00 
 109 Yield            3  151    0               00 next row of subquery_2
 110 Copy            31   39    0               00 r[39]=r[31]
 111 Copy            32   40    0               00 r[40]=r[32]
 112 Copy            33   41    0               00 r[41]=r[33]
 113 Copy            34   42    0               00 r[42]=r[34]
 114 Copy            35   43    0               00 r[43]=r[35]
 115 MakeRecord      39    5   44               00 r[44]=mkrec(r[39..43])
 116 Compare         41   36    1 k(1,B)        00 r[41] <-> r[36]
 117 Jump           118  120  118               00 
 118 Gosub           48  152    0               00 call flush_partition
 119 Copy            41   36    0               00 r[36]=r[41]
 120 NewRowid         2   45    0               00 r[45]=rowid
 121 Insert           2   44   45               00 intkey=r[45] data=r[44]
 122 Ne              37  138   45               00 if r[45]!=r[37] goto 138
 123 Null             0    1    0               00 r[1]=NULL
 124 Integer          3   46    0               00 r[46]=3
 125 Integer          0   50    0               00 r[50]=0
 126 MustBeInt       46  128    0               00 
 127 Ge              50  129   46               00 if r[46]>=r[50] goto 129
 128 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 129 Integer          1   47    0               00 r[47]=1
 130 Integer          0   50    0               00 r[50]=0
 131 MustBeInt       47  133    0               00 
 132 Ge              50  134   47               00 if r[47]>=r[50] goto 134
 133 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 134 Rewind           3    1    0               00 
 135 Rewind           1    1    0               00 
 136 Rewind           4    1    0               00 
 137 Goto             0  150    0               00 
 138 Column           4    4   49               00 r[49]=
 139 AggStep          0   49    1 sum(1)        01 accum=r[1] step(r[49])
 140 Next             4  141    0               00 
 141 IfPos           47  150    1               00 if r[47]>0 then r[47]-=1, goto 150
 142 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 143 Gosub           38  169    0               00 
 144 Next             1  145    0               00 
 145 IfPos           46  150    1               00 if r[46]>0 then r[46]-=1, goto 150
 146 Column           3    4   49               00 r[49]=
 147 AggInverse       1   49    1 sum(1)        01 accum=r[1] inverse(r[49])
 148 Delete           3    0    0               02 
 149 Next             3  150    0               00 
 150 Goto             0  109    0               00 
 151 Integer        167   48    0               00 r[48]=167
 152 Rewind           2  166    0               00 
 153 Column           4    4   49               00 r[49]=
 154 AggStep          0   49    1 sum(1)        01 accum=r[1] step(r[49])
 155 Next             4  156    0               00 
 156 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 157 Gosub           38  169    0               00 
 158 Next             1  160    0               00 
 159 Goto             0  166    0               00 
 160 IfPos           46  165    1               00 if r[46]>0 then r[46]-=1, goto 165
 161 Column           3    4   49               00 r[49]=
 162 AggInverse       1   49    1 sum(1)        01 accum=r[1] inverse(r[49])
 163 Delete           3    0    0               02 
 164 Next             3  165    0               00 
 165 Goto             0  156    0               00 
 166 ResetSorter      1    0    0               00 
 167 Return          48    0    0               00 
 168 Goto             0  176    0               00 
 169 Noop             0    0    0               00 inner-loop subroutine
 170 Copy             2   52    0               00 r[52]=r[2]
 171 Column           1    0   53               00 r[53]=
 172 Column           1    1   51               00 r[51]=
 173 MakeRecord      51    3   54               00 r[54]=mkrec(r[51..53])
 174 SorterInsert    13   54   51 3             00 key=r[54]
 175 Return          38    0    0               00 end inner-loop subroutine
 176 Explain        176    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 177 OpenPseudo      14   55    4               00 4 columns in r[55]
 178 SorterSort      13  184    0               00 
 179 SorterData      13   55   14               00 r[55]=data
 180 Column          14    2   53               00 r[53]=sum(following) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 0 PRECEDING AND 1 PREC
 181 Column          14    1   52               00 r[52]=sum(following) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 3 PRECEDING AND 1 FOLL
 182 ResultRow       52    2    0               00 output=r[52..53]
 183 SorterNext      13  179    0               00 
 184 Halt             0    0    0               00 
 185 Transaction      0    0    5 0             01 usesStmtJournal=0
 186 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING), 
  min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  269    0               00 Start at 269
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  168    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  123    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           37  124    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21  102   34               00 if r[34]!=r[21] goto 102
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Integer          1   35    0               00 r[35]=1
  80 Integer          0   39    0               00 r[39]=0
  81 MustBeInt       35   83    0               00 
  82 Ge              39   84   35               00 if r[35]>=r[39] goto 84
  83 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  84 Integer        500   36    0               00 r[36]=500
  85 Integer          0   39    0               00 r[39]=0
  86 MustBeInt       36   88    0               00 
  87 Ge              39   89   36               00 if r[36]>=r[39] goto 89
  88 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  89 Ge              35   97   36               00 if r[36]>=r[35] goto 97
  90 Null             0    5    0               00 r[5]=NULL
  91 Last            14   93    0               00 
  92 Column          14    0    5               00 r[5]=
  93 Rewind           6    1    0               00 
  94 Gosub           25  159    0               00 
  95 ResetSorter      6    0    0               00 
  96 Goto             0  122    0               00 
  97 Subtract        35   36   35               00 r[35]=r[36]-r[35]
  98 Rewind           8    1    0               00 
  99 Rewind           6    1    0               00 
 100 Rewind           9    1    0               00 
 101 Goto             0  122    0               00 
 102 Column           9    6   38               00 r[38]=
 103 IsNull          38  108    0               00 if r[38]==NULL goto 108
 104 AddImm          23    1    0               00 r[23]=r[23]+1
 105 SCopy           38   22    0               00 r[22]=r[38]
 106 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 107 IdxInsert       14   24    0               00 key=r[24]
 108 Next             9  109    0               00 
 109 IfPos           36  116    1               00 if r[36]>0 then r[36]-=1, goto 116
 110 Null             0    5    0               00 r[5]=NULL
 111 Last            14  113    0               00 
 112 Column          14    0    5               00 r[5]=
 113 Gosub           25  159    0               00 
 114 Delete           6    0    0               02 
 115 Next             6  116    0               00 
 116 IfPos           35  122    1               00 if r[35]>0 then r[35]-=1, goto 122
 117 Column           8    6   38               00 r[38]=
 118 IsNull          38  121    0               00 if r[38]==NULL goto 121
 119 SeekGE          14  121   38 1             00 key=r[38]
 120 Delete          14    0    0               00 
 121 Next             8  122    0               00 
 122 Goto             0   60    0               00 
 123 Integer        157   37    0               00 r[37]=157
 124 Rewind           7  156    0               00 
 125 Column           9    6   38               00 r[38]=
 126 IsNull          38  131    0               00 if r[38]==NULL goto 131
 127 AddImm          23    1    0               00 r[23]=r[23]+1
 128 SCopy           38   22    0               00 r[22]=r[38]
 129 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 130 IdxInsert       14   24    0               00 key=r[24]
 131 Next             9  132    0               00 
 132 IfPos           36  140    1               00 if r[36]>0 then r[36]-=1, goto 140
 133 Null             0    5    0               00 r[5]=NULL
 134 Last            14  136    0               00 
 135 Column          14    0    5               00 r[5]=
 136 Gosub           25  159    0               00 
 137 Delete           6    0    0               02 
 138 Next             6  140    0               00 
 139 Goto             0  156    0               00 
 140 IfPos           35  147    1               00 if r[35]>0 then r[35]-=1, goto 147
 141 Column           8    6   38               00 r[38]=
 142 IsNull          38  145    0               00 if r[38]==NULL goto 145
 143 SeekGE          14  145   38 1             00 key=r[38]
 144 Delete          14    0    0               00 
 145 Next             8  147    0               00 
 146 Goto             0  148    0               00 
 147 Goto             0  132    0               00 
 148 Null             0    5    0               00 r[5]=NULL
 149 Last            14  151    0               00 
 150 Column          14    0    5               00 r[5]=
 151 Gosub           25  159    0               00 
 152 Delete           6    0    0               02 
 153 Next             6  155    0               00 
 154 Goto             0  156    0               00 
 155 Goto             0  148    0               00 
 156 ResetSorter      6    0    0               00 
 157 Return          37    0    0               00 
 158 Goto             0  167    0               00 
 159 Noop             0    0    0               00 inner-loop subroutine
 160 Copy             5   40    0               00 r[40]=r[5]
 161 Column           6    0   41               00 r[41]=
 162 Column           6    1   42               00 r[42]=
 163 Column           6    2   43               00 r[43]=
 164 Column           6    3   44               00 r[44]=
 165 Yield            3    0    0               00 
 166 Return          25    0    0               00 end inner-loop subroutine
 167 EndCoroutine     3    0    0               00 
 168 SorterOpen      15    4    0 k(1,B)        00 
 169 Null             0   45   45               00 r[45..45]=NULL
 170 Integer          1   46    0               00 r[46]=1
 171 OpenEphemeral   16    2    0 k(1,B)        00 nColumn=2
 172 Integer          0   48    0               00 r[48]=0
 173 Explain        173    0    0 SCAN SUBQUERY 2 00 
 174 InitCoroutine    3    0    7               00 
 175 Yield            3  227    0               00 next row of subquery_2
 176 Copy            40   51    0               00 r[51]=r[40]
 177 Copy            41   52    0               00 r[52]=r[41]
 178 Copy            42   53    0               00 r[53]=r[42]
 179 Copy            43   54    0               00 r[54]=r[43]
 180 Copy            44   55    0               00 r[55]=r[44]
 181 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 182 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 183 Jump           184  186  184               00 
 184 Gosub           60  228    0               00 call flush_partition
 185 Copy            53   45    0               00 r[45]=r[53]
 186 NewRowid         2   57    0               00 r[57]=rowid
 187 Insert           2   56   57               00 intkey=r[57] data=r[56]
 188 Ne              46  206   57               00 if r[57]!=r[46] goto 206
 189 Null             0    1    0               00 r[1]=NULL
 190 ResetSorter     16    0    0               00 
 191 Integer          0   48    0               00 r[48]=0
 192 Integer          3   58    0               00 r[58]=3
 193 Integer          0   62    0               00 r[62]=0
 194 MustBeInt       58  196    0               00 
 195 Ge              62  197   58               00 if r[58]>=r[62] goto 197
 196 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 197 Integer          1   59    0               00 r[59]=1
 198 Integer          0   62    0               00 r[62]=0
 199 MustBeInt       59  201    0               00 
 200 Ge              62  202   59               00 if r[59]>=r[62] goto 202
 201 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 202 Rewind           3    1    0               00 
 203 Rewind           1    1    0               00 
 204 Rewind           4    1    0               00 
 205 Goto             0  226    0               00 
 206 Column           4    4   61               00 r[61]=
 207 IsNull          61  212    0               00 if r[61]==NULL goto 212
 208 AddImm          48    1    0               00 r[48]=r[48]+1
 209 SCopy           61   47    0               00 r[47]=r[61]
 210 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 211 IdxInsert       16   49    0               00 key=r[49]
 212 Next             4  213    0               00 
 213 IfPos           59  226    1               00 if r[59]>0 then r[59]-=1, goto 226
 214 Null             0    2    0               00 r[2]=NULL
 215 Last            16  217    0               00 
 216 Column          16    0    2               00 r[2]=
 217 Gosub           50  253    0               00 
 218 Next             1  219    0               00 
 219 IfPos           58  226    1               00 if r[58]>0 then r[58]-=1, goto 226
 220 Column           3    4   61               00 r[61]=
 221 IsNull          61  224    0               00 if r[61]==NULL goto 224
 222 SeekGE          16  224   61 1             00 key=r[61]
 223 Delete          16    0    0               00 
 224 Delete           3    0    0               02 
 225 Next             3  226    0               00 
 226 Goto             0  175    0               00 
 227 Integer        251   60    0               00 r[60]=251
 228 Rewind           2  250    0               00 
 229 Column           4    4   61               00 r[61]=
 230 IsNull          61  235    0               00 if r[61]==NULL goto 235
 231 AddImm          48    1    0               00 r[48]=r[48]+1
 232 SCopy           61   47    0               00 r[47]=r[61]
 233 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 234 IdxInsert       16   49    0               00 key=r[49]
 235 Next             4  236    0               00 
 236 Null             0    2    0               00 r[2]=NULL
 237 Last            16  239    0               00 
 238 Column          16    0    2               00 r[2]=
 239 Gosub           50  253    0               00 
 240 Next             1  242    0               00 
 241 Goto             0  250    0               00 
 242 IfPos           58  249    1               00 if r[58]>0 then r[58]-=1, goto 249
 243 Column           3    4   61               00 r[61]=
 244 IsNull          61  247    0               00 if r[61]==NULL goto 247
 245 SeekGE          16  247   61 1             00 key=r[61]
 246 Delete          16    0    0               00 
 247 Delete           3    0    0               02 
 248 Next             3  249    0               00 
 249 Goto             0  236    0               00 
 250 ResetSorter      1    0    0               00 
 251 Return          60    0    0               00 
 252 Goto             0  260    0               00 
 253 Noop             0    0    0               00 inner-loop subroutine
 254 Copy             2   64    0               00 r[64]=r[2]
 255 Column           1    0   65               00 r[65]=
 256 Column           1    1   63               00 r[63]=
 257 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 258 SorterInsert    15   66   63 3             00 key=r[66]
 259 Return          50    0    0               00 end inner-loop subroutine
 260 Explain        260    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 261 OpenPseudo      17   67    4               00 4 columns in r[67]
 262 SorterSort      15  268    0               00 
 263 SorterData      15   67   17               00 r[67]=data
 264 Column          17    2   65               00 r[65]=min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
 265 Column          17    1   64               00 r[64]=max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
 266 ResultRow       64    2    0               00 output=r[64..65]
 267 SorterNext      15  263    0               00 
 268 Halt             0    0    0               00 
 269 Transaction      0    0    5 0             01 usesStmtJournal=0
 270 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  210    0               00 Start at 210
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  129    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  108    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           34  109    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   95   31               00 if r[31]!=r[21] goto 95
  74 Null             0    4    0               00 r[4]=NULL
  75 Integer          1   32    0               00 r[32]=1
  76 Integer          0   36    0               00 r[36]=0
  77 MustBeInt       32   79    0               00 
  78 Ge              36   80   32               00 if r[32]>=r[36] goto 80
  79 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  80 Integer          1   33    0               00 r[33]=1
  81 Integer          0   36    0               00 r[36]=0
  82 MustBeInt       33   84    0               00 
  83 Ge              36   85   33               00 if r[33]>=r[36] goto 85
  84 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  85 Le              32   91   33               00 if r[33]<=r[32] goto 91
  86 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  87 Rewind           6    1    0               00 
  88 Gosub           22  120    0               00 
  89 ResetSorter      6    0    0               00 
  90 Goto             0  107    0               00 
  91 Rewind           8    1    0               00 
  92 Rewind           6    1    0               00 
  93 Rewind           9    1    0               00 
  94 Goto             0  107    0               00 
  95 IfPos           33   99    1               00 if r[33]>0 then r[33]-=1, goto 99
  96 Column           9    6   35               00 r[35]=
  97 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  98 Next             9   99    0               00 
  99 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 100 Gosub           22  120    0               00 
 101 Next             6  102    0               00 
 102 IfPos           32  107    1               00 if r[32]>0 then r[32]-=1, goto 107
 103 Column           8    6   35               00 r[35]=
 104 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 105 Delete           8    0    0               02 
 106 Next             8  107    0               00 
 107 Goto             0   58    0               00 
 108 Integer        118   34    0               00 r[34]=118
 109 Rewind           7  117    0               00 
 110 IfPos           33  114    1               00 if r[33]>0 then r[33]-=1, goto 114
 111 Column           9    6   35               00 r[35]=
 112 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
 113 Next             9  114    0               00 
 114 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 115 Gosub           22  120    0               00 
 116 Next             6  117    0               00 
 117 ResetSorter      6    0    0               00 
 118 Return          34    0    0               00 
 119 Goto             0  128    0               00 
 120 Noop             0    0    0               00 inner-loop subroutine
 121 Copy             5   37    0               00 r[37]=r[5]
 122 Column           6    0   38               00 r[38]=
 123 Column           6    1   39               00 r[39]=
 124 Column           6    2   40               00 r[40]=
 125 Column           6    3   41               00 r[41]=
 126 Yield            3    0    0               00 
 127 Return          22    0    0               00 end inner-loop subroutine
 128 EndCoroutine     3    0    0               00 
 129 SorterOpen      14    4    0 k(1,B)        00 
 130 Null             0   42   42               00 r[42..42]=NULL
 131 Integer          1   43    0               00 r[43]=1
 132 Explain        132    0    0 SCAN SUBQUERY 2 00 
 133 InitCoroutine    3    0    7               00 
 134 Yield            3  176    0               00 next row of subquery_2
 135 Copy            37   45    0               00 r[45]=r[37]
 136 Copy            38   46    0               00 r[46]=r[38]
 137 Copy            39   47    0               00 r[47]=r[39]
 138 Copy            40   48    0               00 r[48]=r[40]
 139 Copy            41   49    0               00 r[49]=r[41]
 140 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 141 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 142 Jump           143  145  143               00 
 143 Gosub           54  177    0               00 call flush_partition
 144 Copy            47   42    0               00 r[42]=r[47]
 145 NewRowid         2   51    0               00 r[51]=rowid
 146 Insert           2   50   51               00 intkey=r[51] data=r[50]
 147 Ne              43  163   51               00 if r[51]!=r[43] goto 163
 148 Null             0    1    0               00 r[1]=NULL
 149 Integer          3   52    0               00 r[52]=3
 150 Integer          0   56    0               00 r[56]=0
 151 MustBeInt       52  153    0               00 
 152 Ge              56  154   52               00 if r[52]>=r[56] goto 154
 153 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 154 Integer          2   53    0               00 r[53]=2
 155 Integer          0   56    0               00 r[56]=0
 156 MustBeInt       53  158    0               00 
 157 Ge              56  159   53               00 if r[53]>=r[56] goto 159
 158 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 159 Rewind           3    1    0               00 
 160 Rewind           1    1    0               00 
 161 Rewind           4    1    0               00 
 162 Goto             0  175    0               00 
 163 Column           4    4   55               00 r[55]=
 164 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 165 Next             4  166    0               00 
 166 IfPos           53  175    1               00 if r[53]>0 then r[53]-=1, goto 175
 167 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 168 Gosub           44  194    0               00 
 169 Next             1  170    0               00 
 170 IfPos           52  175    1               00 if r[52]>0 then r[52]-=1, goto 175
 171 Column           3    4   55               00 r[55]=
 172 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 173 Delete           3    0    0               02 
 174 Next             3  175    0               00 
 175 Goto             0  134    0               00 
 176 Integer        192   54    0               00 r[54]=192
 177 Rewind           2  191    0               00 
 178 Column           4    4   55               00 r[55]=
 179 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 180 Next             4  181    0               00 
 181 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 182 Gosub           44  194    0               00 
 183 Next             1  185    0               00 
 184 Goto             0  191    0               00 
 185 IfPos           52  190    1               00 if r[52]>0 then r[52]-=1, goto 190
 186 Column           3    4   55               00 r[55]=
 187 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 188 Delete           3    0    0               02 
 189 Next             3  190    0               00 
 190 Goto             0  181    0               00 
 191 ResetSorter      1    0    0               00 
 192 Return          54    0    0               00 
 193 Goto             0  201    0               00 
 194 Noop             0    0    0               00 inner-loop subroutine
 195 Copy             2   58    0               00 r[58]=r[2]
 196 Column           1    0   59               00 r[59]=
 197 Column           1    1   57               00 r[57]=
 198 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 199 SorterInsert    14   60   57 3             00 key=r[60]
 200 Return          44    0    0               00 end inner-loop subroutine
 201 Explain        201    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 202 OpenPseudo      15   61    4               00 4 columns in r[61]
 203 SorterSort      14  209    0               00 
 204 SorterData      14   61   15               00 r[61]=data
 205 Column          15    2   59               00 r[59]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 206 Column          15    1   58               00 r[58]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
 207 ResultRow       58    2    0               00 output=r[58..59]
 208 SorterNext      14  204    0               00 
 209 Halt             0    0    0               00 
 210 Transaction      0    0    5 0             01 usesStmtJournal=0
 211 Goto             0    1    0               00 
SQL: [SELECT sum(over) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING), 
         sum(over) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  185    0               00 Start at 185
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  104    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   29   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  17 Explain         17   14    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  18 Rewind          12   28    7 0             00 
  19 Column          12    1    7               00 r[7]=v0.following
  20 Column          12    0    8               00 r[8]=v0.over
  21 Column          12    1    9               00 r[9]=v0.following
  22 Column          12    0   10               00 r[10]=v0.over
  23 Column          12    0   11               00 r[11]=v0.over
  24 Column          12    1   12               00 r[12]=v0.following
  25 Column          12    0   13               00 r[13]=v0.over
  26 Yield            6    0    0               00 
  27 Next            12   19    0               01 
  28 EndCoroutine     6    0    0               00 
  29 Null             0   14   14               00 r[14..14]=NULL
  30 Integer          1   15    0               00 r[15]=1
  31 Explain         31    7    0 SCAN SUBQUERY 3 00 
  32 InitCoroutine    6    0   14               00 
  33 Yield            6   83    0               00 next row of subquery_3
  34 Copy             7   17    0               00 r[17]=r[7]
  35 Copy             8   18    0               00 r[18]=r[8]
  36 Copy             9   19    0               00 r[19]=r[9]
  37 Copy            10   20    0               00 r[20]=r[10]
  38 Copy            11   21    0               00 r[21]=r[11]
  39 Copy            12   22    0               00 r[22]=r[12]
  40 Copy            13   23    0               00 r[23]=r[13]
  41 MakeRecord      17    7   24               00 r[24]=mkrec(r[17..23])
  42 Compare         21   14    1 k(1,B)        00 r[21] <-> r[14]
  43 Jump            44   46   44               00 
  44 Gosub           28   84    0               00 call flush_partition
  45 Copy            21   14    0               00 r[14]=r[21]
  46 NewRowid         7   25    0               00 r[25]=rowid
  47 Insert           7   24   25               00 intkey=r[25] data=r[24]
  48 Ne              15   70   25               00 if r[25]!=r[15] goto 70
  49 Null             0    4    0               00 r[4]=NULL
  50 Integer          0   26    0               00 r[26]=0
  51 Integer          0   30    0               00 r[30]=0
  52 MustBeInt       26   54    0               00 
  53 Ge              30   55   26               00 if r[26]>=r[30] goto 55
  54 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  55 Integer          1   27    0               00 r[27]=1
  56 Integer          0   30    0               00 r[30]=0
  57 MustBeInt       27   59    0               00 
  58 Ge              30   60   27               00 if r[27]>=r[30] goto 60
  59 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  60 Le              26   66   27               00 if r[27]<=r[26] goto 66
  61 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  62 Rewind           6    1    0               00 
  63 Gosub           16   95    0               00 
  64 ResetSorter      6    0    0               00 
  65 Goto             0   82    0               00 
  66 Rewind           8    1    0               00 
  67 Rewind           6    1    0               00 
  68 Rewind           9    1    0               00 
  69 Goto             0   82    0               00 
  70 IfPos           27   74    1               00 if r[27]>0 then r[27]-=1, goto 74
  71 Column           9    6   29               00 r[29]=
  72 AggStep          0   29    4 sum(1)        01 accum=r[4] step(r[29])
  73 Next             9   74    0               00 
  74 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  75 Gosub           16   95    0               00 
  76 Next             6   77    0               00 
  77 IfPos           26   82    1               00 if r[26]>0 then r[26]-=1, goto 82
  78 Column           8    6   29               00 r[29]=
  79 AggInverse       1   29    4 sum(1)        01 accum=r[4] inverse(r[29])
  80 Delete           8    0    0               02 
  81 Next             8   82    0               00 
  82 Goto             0   33    0               00 
  83 Integer         93   28    0               00 r[28]=93
  84 Rewind           7   92    0               00 
  85 IfPos           27   89    1               00 if r[27]>0 then r[27]-=1, goto 89
  86 Column           9    6   29               00 r[29]=
  87 AggStep          0   29    4 sum(1)        01 accum=r[4] step(r[29])
  88 Next             9   89    0               00 
  89 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  90 Gosub           16   95    0               00 
  91 Next             6   92    0               00 
  92 ResetSorter      6    0    0               00 
  93 Return          28    0    0               00 
  94 Goto             0  103    0               00 
  95 Noop             0    0    0               00 inner-loop subroutine
  96 Copy             5   31    0               00 r[31]=r[5]
  97 Column           6    0   32               00 r[32]=
  98 Column           6    1   33               00 r[33]=
  99 Column           6    2   34               00 r[34]=
 100 Column           6    3   35               00 r[35]=
 101 Yield            3    0    0               00 
 102 Return          16    0    0               00 end inner-loop subroutine
 103 EndCoroutine     3    0    0               00 
 104 SorterOpen      13    4    0 k(1,B)        00 
 105 Null             0   36   36               00 r[36..36]=NULL
 106 Integer          1   37    0               00 r[37]=1
 107 Explain        107    0    0 SCAN SUBQUERY 2 00 
 108 InitCoroutine    3    0    7               00 
 109 Yield            3  151    0               00 next row of subquery_2
 110 Copy            31   39    0               00 r[39]=r[31]
 111 Copy            32   40    0               00 r[40]=r[32]
 112 Copy            33   41    0               00 r[41]=r[33]
 113 Copy            34   42    0               00 r[42]=r[34]
 114 Copy            35   43    0               00 r[43]=r[35]
 115 MakeRecord      39    5   44               00 r[44]=mkrec(r[39..43])
 116 Compare         41   36    1 k(1,B)        00 r[41] <-> r[36]
 117 Jump           118  120  118               00 
 118 Gosub           48  152    0               00 call flush_partition
 119 Copy            41   36    0               00 r[36]=r[41]
 120 NewRowid         2   45    0               00 r[45]=rowid
 121 Insert           2   44   45               00 intkey=r[45] data=r[44]
 122 Ne              37  138   45               00 if r[45]!=r[37] goto 138
 123 Null             0    1    0               00 r[1]=NULL
 124 Integer          3   46    0               00 r[46]=3
 125 Integer          0   50    0               00 r[50]=0
 126 MustBeInt       46  128    0               00 
 127 Ge              50  129   46               00 if r[46]>=r[50] goto 129
 128 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 129 Integer          2   47    0               00 r[47]=2
 130 Integer          0   50    0               00 r[50]=0
 131 MustBeInt       47  133    0               00 
 132 Ge              50  134   47               00 if r[47]>=r[50] goto 134
 133 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 134 Rewind           3    1    0               00 
 135 Rewind           1    1    0               00 
 136 Rewind           4    1    0               00 
 137 Goto             0  150    0               00 
 138 Column           4    4   49               00 r[49]=
 139 AggStep          0   49    1 sum(1)        01 accum=r[1] step(r[49])
 140 Next             4  141    0               00 
 141 IfPos           47  150    1               00 if r[47]>0 then r[47]-=1, goto 150
 142 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 143 Gosub           38  169    0               00 
 144 Next             1  145    0               00 
 145 IfPos           46  150    1               00 if r[46]>0 then r[46]-=1, goto 150
 146 Column           3    4   49               00 r[49]=
 147 AggInverse       1   49    1 sum(1)        01 accum=r[1] inverse(r[49])
 148 Delete           3    0    0               02 
 149 Next             3  150    0               00 
 150 Goto             0  109    0               00 
 151 Integer        167   48    0               00 r[48]=167
 152 Rewind           2  166    0               00 
 153 Column           4    4   49               00 r[49]=
 154 AggStep          0   49    1 sum(1)        01 accum=r[1] step(r[49])
 155 Next             4  156    0               00 
 156 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 157 Gosub           38  169    0               00 
 158 Next             1  160    0               00 
 159 Goto             0  166    0               00 
 160 IfPos           46  165    1               00 if r[46]>0 then r[46]-=1, goto 165
 161 Column           3    4   49               00 r[49]=
 162 AggInverse       1   49    1 sum(1)        01 accum=r[1] inverse(r[49])
 163 Delete           3    0    0               02 
 164 Next             3  165    0               00 
 165 Goto             0  156    0               00 
 166 ResetSorter      1    0    0               00 
 167 Return          48    0    0               00 
 168 Goto             0  176    0               00 
 169 Noop             0    0    0               00 inner-loop subroutine
 170 Copy             2   52    0               00 r[52]=r[2]
 171 Column           1    0   53               00 r[53]=
 172 Column           1    1   51               00 r[51]=
 173 MakeRecord      51    3   54               00 r[54]=mkrec(r[51..53])
 174 SorterInsert    13   54   51 3             00 key=r[54]
 175 Return          38    0    0               00 end inner-loop subroutine
 176 Explain        176    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 177 OpenPseudo      14   55    4               00 4 columns in r[55]
 178 SorterSort      13  184    0               00 
 179 SorterData      13   55   14               00 r[55]=data
 180 Column          14    2   53               00 r[53]=sum(over) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING
 181 Column          14    1   52               00 r[52]=sum(over) OVER (PARTITION BY over ORDER BY following ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING
 182 ResultRow       52    2    0               00 output=r[52..53]
 183 SorterNext      13  179    0               00 
 184 Halt             0    0    0               00 
 185 Transaction      0    0    5 0             01 usesStmtJournal=0
 186 Goto             0    1    0               00 
SQL: [SELECT max(t1) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING), 
  min(t1) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  259    0               00 Start at 259
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  158    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   44   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  17 Explain         17   14    0 SCAN TABLE preceding 00 
  18 Rewind           0   30    0               00 
  19 Column           0    1    9               00 r[9]=preceding.x
  20 Column           0    1   10               00 r[10]=preceding.x
  21 Column           0    1   11               00 r[11]=preceding.x
  22 Column           0    0   12               00 r[12]=preceding.t1
  23 Column           0    1   13               00 r[13]=preceding.x
  24 Column           0    0   14               00 r[14]=preceding.t1
  25 Column           0    1    7               00 r[7]=preceding.x
  26 Column           0    1    8               00 r[8]=preceding.x
  27 MakeRecord       7    8   16               00 r[16]=mkrec(r[7..14])
  28 SorterInsert    11   16    7 8             00 key=r[16]
  29 Next             0   19    0               01 
  30 Explain         30   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  31 OpenPseudo      12   17   10               00 10 columns in r[17]
  32 SorterSort      11   43    0               00 
  33 SorterData      11   17   12               00 r[17]=data
  34 Column          12    7   15               00 r[15]=
  35 Column          12    1   14               00 r[14]=
  36 Column          12    6   13               00 r[13]=
  37 Column          12    5   12               00 r[12]=
  38 Column          12    4   11               00 r[11]=
  39 Column          12    3   10               00 r[10]=
  40 Column          12    2    9               00 r[9]=
  41 Yield            6    0    0               00 
  42 SorterNext      11   33    0               00 
  43 EndCoroutine     6    0    0               00 
  44 Null             0   18   18               00 r[18..18]=NULL
  45 Integer          1   19    0               00 r[19]=1
  46 OpenEphemeral   13    2    0 k(1,-B)       00 nColumn=2
  47 Integer          0   21    0               00 r[21]=0
  48 Explain         48    7    0 SCAN SUBQUERY 3 00 
  49 InitCoroutine    6    0   14               00 
  50 Yield            6  113    0               00 next row of subquery_3
  51 Copy             9   24    0               00 r[24]=r[9]
  52 Copy            10   25    0               00 r[25]=r[10]
  53 Copy            11   26    0               00 r[26]=r[11]
  54 Copy            12   27    0               00 r[27]=r[12]
  55 Copy            13   28    0               00 r[28]=r[13]
  56 Copy            14   29    0               00 r[29]=r[14]
  57 Copy            15   30    0               00 r[30]=r[15]
  58 MakeRecord      24    7   31               00 r[31]=mkrec(r[24..30])
  59 Compare         28   18    1 k(1,B)        00 r[28] <-> r[18]
  60 Jump            61   63   61               00 
  61 Gosub           35  114    0               00 call flush_partition
  62 Copy            28   18    0               00 r[18]=r[28]
  63 NewRowid         7   32    0               00 r[32]=rowid
  64 Insert           7   31   32               00 intkey=r[32] data=r[31]
  65 Ne              19   92   32               00 if r[32]!=r[19] goto 92
  66 Null             0    4    0               00 r[4]=NULL
  67 ResetSorter     13    0    0               00 
  68 Integer          0   21    0               00 r[21]=0
  69 Integer          1   33    0               00 r[33]=1
  70 Integer          0   37    0               00 r[37]=0
  71 MustBeInt       33   73    0               00 
  72 Ge              37   74   33               00 if r[33]>=r[37] goto 74
  73 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  74 Integer        500   34    0               00 r[34]=500
  75 Integer          0   37    0               00 r[37]=0
  76 MustBeInt       34   78    0               00 
  77 Ge              37   79   34               00 if r[34]>=r[37] goto 79
  78 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  79 Ge              33   87   34               00 if r[34]>=r[33] goto 87
  80 Null             0    5    0               00 r[5]=NULL
  81 Last            13   83    0               00 
  82 Column          13    0    5               00 r[5]=
  83 Rewind           6    1    0               00 
  84 Gosub           23  149    0               00 
  85 ResetSorter      6    0    0               00 
  86 Goto             0  112    0               00 
  87 Subtract        33   34   33               00 r[33]=r[34]-r[33]
  88 Rewind           8    1    0               00 
  89 Rewind           6    1    0               00 
  90 Rewind           9    1    0               00 
  91 Goto             0  112    0               00 
  92 Column           9    6   36               00 r[36]=
  93 IsNull          36   98    0               00 if r[36]==NULL goto 98
  94 AddImm          21    1    0               00 r[21]=r[21]+1
  95 SCopy           36   20    0               00 r[20]=r[36]
  96 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
  97 IdxInsert       13   22    0               00 key=r[22]
  98 Next             9   99    0               00 
  99 IfPos           34  106    1               00 if r[34]>0 then r[34]-=1, goto 106
 100 Null             0    5    0               00 r[5]=NULL
 101 Last            13  103    0               00 
 102 Column          13    0    5               00 r[5]=
 103 Gosub           23  149    0               00 
 104 Delete           6    0    0               02 
 105 Next             6  106    0               00 
 106 IfPos           33  112    1               00 if r[33]>0 then r[33]-=1, goto 112
 107 Column           8    6   36               00 r[36]=
 108 IsNull          36  111    0               00 if r[36]==NULL goto 111
 109 SeekGE          13  111   36 1             00 key=r[36]
 110 Delete          13    0    0               00 
 111 Next             8  112    0               00 
 112 Goto             0   50    0               00 
 113 Integer        147   35    0               00 r[35]=147
 114 Rewind           7  146    0               00 
 115 Column           9    6   36               00 r[36]=
 116 IsNull          36  121    0               00 if r[36]==NULL goto 121
 117 AddImm          21    1    0               00 r[21]=r[21]+1
 118 SCopy           36   20    0               00 r[20]=r[36]
 119 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
 120 IdxInsert       13   22    0               00 key=r[22]
 121 Next             9  122    0               00 
 122 IfPos           34  130    1               00 if r[34]>0 then r[34]-=1, goto 130
 123 Null             0    5    0               00 r[5]=NULL
 124 Last            13  126    0               00 
 125 Column          13    0    5               00 r[5]=
 126 Gosub           23  149    0               00 
 127 Delete           6    0    0               02 
 128 Next             6  130    0               00 
 129 Goto             0  146    0               00 
 130 IfPos           33  137    1               00 if r[33]>0 then r[33]-=1, goto 137
 131 Column           8    6   36               00 r[36]=
 132 IsNull          36  135    0               00 if r[36]==NULL goto 135
 133 SeekGE          13  135   36 1             00 key=r[36]
 134 Delete          13    0    0               00 
 135 Next             8  137    0               00 
 136 Goto             0  138    0               00 
 137 Goto             0  122    0               00 
 138 Null             0    5    0               00 r[5]=NULL
 139 Last            13  141    0               00 
 140 Column          13    0    5               00 r[5]=
 141 Gosub           23  149    0               00 
 142 Delete           6    0    0               02 
 143 Next             6  145    0               00 
 144 Goto             0  146    0               00 
 145 Goto             0  138    0               00 
 146 ResetSorter      6    0    0               00 
 147 Return          35    0    0               00 
 148 Goto             0  157    0               00 
 149 Noop             0    0    0               00 inner-loop subroutine
 150 Copy             5   38    0               00 r[38]=r[5]
 151 Column           6    0   39               00 r[39]=
 152 Column           6    1   40               00 r[40]=
 153 Column           6    2   41               00 r[41]=
 154 Column           6    3   42               00 r[42]=
 155 Yield            3    0    0               00 
 156 Return          23    0    0               00 end inner-loop subroutine
 157 EndCoroutine     3    0    0               00 
 158 SorterOpen      14    4    0 k(1,B)        00 
 159 Null             0   43   43               00 r[43..43]=NULL
 160 Integer          1   44    0               00 r[44]=1
 161 OpenEphemeral   15    2    0 k(1,B)        00 nColumn=2
 162 Integer          0   46    0               00 r[46]=0
 163 Explain        163    0    0 SCAN SUBQUERY 2 00 
 164 InitCoroutine    3    0    7               00 
 165 Yield            3  217    0               00 next row of subquery_2
 166 Copy            38   49    0               00 r[49]=r[38]
 167 Copy            39   50    0               00 r[50]=r[39]
 168 Copy            40   51    0               00 r[51]=r[40]
 169 Copy            41   52    0               00 r[52]=r[41]
 170 Copy            42   53    0               00 r[53]=r[42]
 171 MakeRecord      49    5   54               00 r[54]=mkrec(r[49..53])
 172 Compare         51   43    1 k(1,B)        00 r[51] <-> r[43]
 173 Jump           174  176  174               00 
 174 Gosub           58  218    0               00 call flush_partition
 175 Copy            51   43    0               00 r[43]=r[51]
 176 NewRowid         2   55    0               00 r[55]=rowid
 177 Insert           2   54   55               00 intkey=r[55] data=r[54]
 178 Ne              44  196   55               00 if r[55]!=r[44] goto 196
 179 Null             0    1    0               00 r[1]=NULL
 180 ResetSorter     15    0    0               00 
 181 Integer          0   46    0               00 r[46]=0
 182 Integer          3   56    0               00 r[56]=3
 183 Integer          0   60    0               00 r[60]=0
 184 MustBeInt       56  186    0               00 
 185 Ge              60  187   56               00 if r[56]>=r[60] goto 187
 186 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 187 Integer          2   57    0               00 r[57]=2
 188 Integer          0   60    0               00 r[60]=0
 189 MustBeInt       57  191    0               00 
 190 Ge              60  192   57               00 if r[57]>=r[60] goto 192
 191 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 192 Rewind           3    1    0               00 
 193 Rewind           1    1    0               00 
 194 Rewind           4    1    0               00 
 195 Goto             0  216    0               00 
 196 Column           4    4   59               00 r[59]=
 197 IsNull          59  202    0               00 if r[59]==NULL goto 202
 198 AddImm          46    1    0               00 r[46]=r[46]+1
 199 SCopy           59   45    0               00 r[45]=r[59]
 200 MakeRecord      45    2   47               00 r[47]=mkrec(r[45..46])
 201 IdxInsert       15   47    0               00 key=r[47]
 202 Next             4  203    0               00 
 203 IfPos           57  216    1               00 if r[57]>0 then r[57]-=1, goto 216
 204 Null             0    2    0               00 r[2]=NULL
 205 Last            15  207    0               00 
 206 Column          15    0    2               00 r[2]=
 207 Gosub           48  243    0               00 
 208 Next             1  209    0               00 
 209 IfPos           56  216    1               00 if r[56]>0 then r[56]-=1, goto 216
 210 Column           3    4   59               00 r[59]=
 211 IsNull          59  214    0               00 if r[59]==NULL goto 214
 212 SeekGE          15  214   59 1             00 key=r[59]
 213 Delete          15    0    0               00 
 214 Delete           3    0    0               02 
 215 Next             3  216    0               00 
 216 Goto             0  165    0               00 
 217 Integer        241   58    0               00 r[58]=241
 218 Rewind           2  240    0               00 
 219 Column           4    4   59               00 r[59]=
 220 IsNull          59  225    0               00 if r[59]==NULL goto 225
 221 AddImm          46    1    0               00 r[46]=r[46]+1
 222 SCopy           59   45    0               00 r[45]=r[59]
 223 MakeRecord      45    2   47               00 r[47]=mkrec(r[45..46])
 224 IdxInsert       15   47    0               00 key=r[47]
 225 Next             4  226    0               00 
 226 Null             0    2    0               00 r[2]=NULL
 227 Last            15  229    0               00 
 228 Column          15    0    2               00 r[2]=
 229 Gosub           48  243    0               00 
 230 Next             1  232    0               00 
 231 Goto             0  240    0               00 
 232 IfPos           56  239    1               00 if r[56]>0 then r[56]-=1, goto 239
 233 Column           3    4   59               00 r[59]=
 234 IsNull          59  237    0               00 if r[59]==NULL goto 237
 235 SeekGE          15  237   59 1             00 key=r[59]
 236 Delete          15    0    0               00 
 237 Delete           3    0    0               02 
 238 Next             3  239    0               00 
 239 Goto             0  226    0               00 
 240 ResetSorter      1    0    0               00 
 241 Return          58    0    0               00 
 242 Goto             0  250    0               00 
 243 Noop             0    0    0               00 inner-loop subroutine
 244 Copy             2   62    0               00 r[62]=r[2]
 245 Column           1    0   63               00 r[63]=
 246 Column           1    1   61               00 r[61]=
 247 MakeRecord      61    3   64               00 r[64]=mkrec(r[61..63])
 248 SorterInsert    14   64   61 3             00 key=r[64]
 249 Return          48    0    0               00 end inner-loop subroutine
 250 Explain        250    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 251 OpenPseudo      16   65    4               00 4 columns in r[65]
 252 SorterSort      14  258    0               00 
 253 SorterData      14   65   16               00 r[65]=data
 254 Column          16    2   63               00 r[63]=min(t1) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
 255 Column          16    1   62               00 r[62]=max(t1) OVER (PARTITION BY x ORDER BY x ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
 256 ResultRow       62    2    0               00 output=r[62..63]
 257 SorterNext      14  253    0               00 
 258 Halt             0    0    0               00 
 259 Transaction      0    0    5 0             01 usesStmtJournal=0
 260 Goto             0    1    0               00 
SQL: [SELECT max(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
  min(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  240    0               00 Start at 240
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  139    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   44   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   30    0               00 
  19 Column           0    1    9               00 r[9]=v0.following
  20 Column           0    1   10               00 r[10]=v0.following
  21 Column           0    1   11               00 r[11]=v0.following
  22 Column           0    0   12               00 r[12]=v0.over
  23 Column           0    1   13               00 r[13]=v0.following
  24 Column           0    0   14               00 r[14]=v0.over
  25 Column           0    1    7               00 r[7]=v0.following
  26 Column           0    1    8               00 r[8]=v0.following
  27 MakeRecord       7    8   16               00 r[16]=mkrec(r[7..14])
  28 SorterInsert    11   16    7 8             00 key=r[16]
  29 Next             0   19    0               01 
  30 Explain         30   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  31 OpenPseudo      12   17   10               00 10 columns in r[17]
  32 SorterSort      11   43    0               00 
  33 SorterData      11   17   12               00 r[17]=data
  34 Column          12    7   15               00 r[15]=
  35 Column          12    1   14               00 r[14]=
  36 Column          12    6   13               00 r[13]=
  37 Column          12    5   12               00 r[12]=
  38 Column          12    4   11               00 r[11]=
  39 Column          12    3   10               00 r[10]=
  40 Column          12    2    9               00 r[9]=
  41 Yield            6    0    0               00 
  42 SorterNext      11   33    0               00 
  43 EndCoroutine     6    0    0               00 
  44 Null             0   18   18               00 r[18..18]=NULL
  45 Integer          1   19    0               00 r[19]=1
  46 OpenEphemeral   13    2    0 k(1,-B)       00 nColumn=2
  47 Integer          0   21    0               00 r[21]=0
  48 Explain         48    7    0 SCAN SUBQUERY 3 00 
  49 InitCoroutine    6    0   14               00 
  50 Yield            6  104    0               00 next row of subquery_3
  51 Copy             9   24    0               00 r[24]=r[9]
  52 Copy            10   25    0               00 r[25]=r[10]
  53 Copy            11   26    0               00 r[26]=r[11]
  54 Copy            12   27    0               00 r[27]=r[12]
  55 Copy            13   28    0               00 r[28]=r[13]
  56 Copy            14   29    0               00 r[29]=r[14]
  57 Copy            15   30    0               00 r[30]=r[15]
  58 MakeRecord      24    7   31               00 r[31]=mkrec(r[24..30])
  59 Compare         28   18    1 k(1,B)        00 r[28] <-> r[18]
  60 Jump            61   63   61               00 
  61 Gosub           35  105    0               00 call flush_partition
  62 Copy            28   18    0               00 r[18]=r[28]
  63 NewRowid         7   32    0               00 r[32]=rowid
  64 Insert           7   31   32               00 intkey=r[32] data=r[31]
  65 Ne              19   83   32               00 if r[32]!=r[19] goto 83
  66 Null             0    4    0               00 r[4]=NULL
  67 ResetSorter     13    0    0               00 
  68 Integer          0   21    0               00 r[21]=0
  69 Integer          3   33    0               00 r[33]=3
  70 Integer          0   37    0               00 r[37]=0
  71 MustBeInt       33   73    0               00 
  72 Ge              37   74   33               00 if r[33]>=r[37] goto 74
  73 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  74 Integer          1   34    0               00 r[34]=1
  75 Integer          0   37    0               00 r[37]=0
  76 MustBeInt       34   78    0               00 
  77 Ge              37   79   34               00 if r[34]>=r[37] goto 79
  78 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  79 Rewind           8    1    0               00 
  80 Rewind           6    1    0               00 
  81 Rewind           9    1    0               00 
  82 Goto             0  103    0               00 
  83 Column           9    6   36               00 r[36]=
  84 IsNull          36   89    0               00 if r[36]==NULL goto 89
  85 AddImm          21    1    0               00 r[21]=r[21]+1
  86 SCopy           36   20    0               00 r[20]=r[36]
  87 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
  88 IdxInsert       13   22    0               00 key=r[22]
  89 Next             9   90    0               00 
  90 IfPos           34  103    1               00 if r[34]>0 then r[34]-=1, goto 103
  91 Null             0    5    0               00 r[5]=NULL
  92 Last            13   94    0               00 
  93 Column          13    0    5               00 r[5]=
  94 Gosub           23  130    0               00 
  95 Next             6   96    0               00 
  96 IfPos           33  103    1               00 if r[33]>0 then r[33]-=1, goto 103
  97 Column           8    6   36               00 r[36]=
  98 IsNull          36  101    0               00 if r[36]==NULL goto 101
  99 SeekGE          13  101   36 1             00 key=r[36]
 100 Delete          13    0    0               00 
 101 Delete           8    0    0               02 
 102 Next             8  103    0               00 
 103 Goto             0   50    0               00 
 104 Integer        128   35    0               00 r[35]=128
 105 Rewind           7  127    0               00 
 106 Column           9    6   36               00 r[36]=
 107 IsNull          36  112    0               00 if r[36]==NULL goto 112
 108 AddImm          21    1    0               00 r[21]=r[21]+1
 109 SCopy           36   20    0               00 r[20]=r[36]
 110 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
 111 IdxInsert       13   22    0               00 key=r[22]
 112 Next             9  113    0               00 
 113 Null             0    5    0               00 r[5]=NULL
 114 Last            13  116    0               00 
 115 Column          13    0    5               00 r[5]=
 116 Gosub           23  130    0               00 
 117 Next             6  119    0               00 
 118 Goto             0  127    0               00 
 119 IfPos           33  126    1               00 if r[33]>0 then r[33]-=1, goto 126
 120 Column           8    6   36               00 r[36]=
 121 IsNull          36  124    0               00 if r[36]==NULL goto 124
 122 SeekGE          13  124   36 1             00 key=r[36]
 123 Delete          13    0    0               00 
 124 Delete           8    0    0               02 
 125 Next             8  126    0               00 
 126 Goto             0  113    0               00 
 127 ResetSorter      6    0    0               00 
 128 Return          35    0    0               00 
 129 Goto             0  138    0               00 
 130 Noop             0    0    0               00 inner-loop subroutine
 131 Copy             5   38    0               00 r[38]=r[5]
 132 Column           6    0   39               00 r[39]=
 133 Column           6    1   40               00 r[40]=
 134 Column           6    2   41               00 r[41]=
 135 Column           6    3   42               00 r[42]=
 136 Yield            3    0    0               00 
 137 Return          23    0    0               00 end inner-loop subroutine
 138 EndCoroutine     3    0    0               00 
 139 SorterOpen      14    4    0 k(1,B)        00 
 140 Null             0   43   43               00 r[43..43]=NULL
 141 Integer          1   44    0               00 r[44]=1
 142 OpenEphemeral   15    2    0 k(1,B)        00 nColumn=2
 143 Integer          0   46    0               00 r[46]=0
 144 Explain        144    0    0 SCAN SUBQUERY 2 00 
 145 InitCoroutine    3    0    7               00 
 146 Yield            3  206    0               00 next row of subquery_2
 147 Copy            38   49    0               00 r[49]=r[38]
 148 Copy            39   50    0               00 r[50]=r[39]
 149 Copy            40   51    0               00 r[51]=r[40]
 150 Copy            41   52    0               00 r[52]=r[41]
 151 Copy            42   53    0               00 r[53]=r[42]
 152 MakeRecord      49    5   54               00 r[54]=mkrec(r[49..53])
 153 Compare         51   43    1 k(1,B)        00 r[51] <-> r[43]
 154 Jump           155  157  155               00 
 155 Gosub           58  207    0               00 call flush_partition
 156 Copy            51   43    0               00 r[43]=r[51]
 157 NewRowid         2   55    0               00 r[55]=rowid
 158 Insert           2   54   55               00 intkey=r[55] data=r[54]
 159 Ne              44  185   55               00 if r[55]!=r[44] goto 185
 160 Null             0    1    0               00 r[1]=NULL
 161 ResetSorter     15    0    0               00 
 162 Integer          0   46    0               00 r[46]=0
 163 Integer          1   56    0               00 r[56]=1
 164 Integer          0   60    0               00 r[60]=0
 165 MustBeInt       56  167    0               00 
 166 Ge              60  168   56               00 if r[56]>=r[60] goto 168
 167 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 168 Integer          1   57    0               00 r[57]=1
 169 Integer          0   60    0               00 r[60]=0
 170 MustBeInt       57  172    0               00 
 171 Ge              60  173   57               00 if r[57]>=r[60] goto 173
 172 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 173 Le              56  181   57               00 if r[57]<=r[56] goto 181
 174 Null             0    2    0               00 r[2]=NULL
 175 Last            15  177    0               00 
 176 Column          15    0    2               00 r[2]=
 177 Rewind           1    1    0               00 
 178 Gosub           48  224    0               00 
 179 ResetSorter      1    0    0               00 
 180 Goto             0  205    0               00 
 181 Rewind           3    1    0               00 
 182 Rewind           1    1    0               00 
 183 Rewind           4    1    0               00 
 184 Goto             0  205    0               00 
 185 IfPos           57  193    1               00 if r[57]>0 then r[57]-=1, goto 193
 186 Column           4    4   59               00 r[59]=
 187 IsNull          59  192    0               00 if r[59]==NULL goto 192
 188 AddImm          46    1    0               00 r[46]=r[46]+1
 189 SCopy           59   45    0               00 r[45]=r[59]
 190 MakeRecord      45    2   47               00 r[47]=mkrec(r[45..46])
 191 IdxInsert       15   47    0               00 key=r[47]
 192 Next             4  193    0               00 
 193 Null             0    2    0               00 r[2]=NULL
 194 Last            15  196    0               00 
 195 Column          15    0    2               00 r[2]=
 196 Gosub           48  224    0               00 
 197 Next             1  198    0               00 
 198 IfPos           56  205    1               00 if r[56]>0 then r[56]-=1, goto 205
 199 Column           3    4   59               00 r[59]=
 200 IsNull          59  203    0               00 if r[59]==NULL goto 203
 201 SeekGE          15  203   59 1             00 key=r[59]
 202 Delete          15    0    0               00 
 203 Delete           3    0    0               02 
 204 Next             3  205    0               00 
 205 Goto             0  146    0               00 
 206 Integer        222   58    0               00 r[58]=222
 207 Rewind           2  221    0               00 
 208 IfPos           57  216    1               00 if r[57]>0 then r[57]-=1, goto 216
 209 Column           4    4   59               00 r[59]=
 210 IsNull          59  215    0               00 if r[59]==NULL goto 215
 211 AddImm          46    1    0               00 r[46]=r[46]+1
 212 SCopy           59   45    0               00 r[45]=r[59]
 213 MakeRecord      45    2   47               00 r[47]=mkrec(r[45..46])
 214 IdxInsert       15   47    0               00 key=r[47]
 215 Next             4  216    0               00 
 216 Null             0    2    0               00 r[2]=NULL
 217 Last            15  219    0               00 
 218 Column          15    0    2               00 r[2]=
 219 Gosub           48  224    0               00 
 220 Next             1  221    0               00 
 221 ResetSorter      1    0    0               00 
 222 Return          58    0    0               00 
 223 Goto             0  231    0               00 
 224 Noop             0    0    0               00 inner-loop subroutine
 225 Copy             2   62    0               00 r[62]=r[2]
 226 Column           1    0   63               00 r[63]=
 227 Column           1    1   61               00 r[61]=
 228 MakeRecord      61    3   64               00 r[64]=mkrec(r[61..63])
 229 SorterInsert    14   64   61 3             00 key=r[64]
 230 Return          48    0    0               00 end inner-loop subroutine
 231 Explain        231    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 232 OpenPseudo      16   65    4               00 4 columns in r[65]
 233 SorterSort      14  239    0               00 
 234 SorterData      14   65   16               00 r[65]=data
 235 Column          16    2   63               00 r[63]=min(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 3 PRECEDING AND 1 FOLL
 236 Column          16    1   62               00 r[62]=max(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 PRECEDING AND 1 PREC
 237 ResultRow       62    2    0               00 output=r[62..63]
 238 SorterNext      14  234    0               00 
 239 Halt             0    0    0               00 
 240 Transaction      0    0    5 0             01 usesStmtJournal=0
 241 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  210    0               00 Start at 210
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  129    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  102    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           34  103    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   89   31               00 if r[31]!=r[21] goto 89
  74 Null             0    4    0               00 r[4]=NULL
  75 Integer          3   32    0               00 r[32]=3
  76 Integer          0   36    0               00 r[36]=0
  77 MustBeInt       32   79    0               00 
  78 Ge              36   80   32               00 if r[32]>=r[36] goto 80
  79 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  80 Integer          2   33    0               00 r[33]=2
  81 Integer          0   36    0               00 r[36]=0
  82 MustBeInt       33   84    0               00 
  83 Ge              36   85   33               00 if r[33]>=r[36] goto 85
  84 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  85 Rewind           8    1    0               00 
  86 Rewind           6    1    0               00 
  87 Rewind           9    1    0               00 
  88 Goto             0  101    0               00 
  89 Column           9    6   35               00 r[35]=
  90 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  91 Next             9   92    0               00 
  92 IfPos           33  101    1               00 if r[33]>0 then r[33]-=1, goto 101
  93 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  94 Gosub           22  120    0               00 
  95 Next             6   96    0               00 
  96 IfPos           32  101    1               00 if r[32]>0 then r[32]-=1, goto 101
  97 Column           8    6   35               00 r[35]=
  98 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
  99 Delete           8    0    0               02 
 100 Next             8  101    0               00 
 101 Goto             0   58    0               00 
 102 Integer        118   34    0               00 r[34]=118
 103 Rewind           7  117    0               00 
 104 Column           9    6   35               00 r[35]=
 105 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
 106 Next             9  107    0               00 
 107 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 108 Gosub           22  120    0               00 
 109 Next             6  111    0               00 
 110 Goto             0  117    0               00 
 111 IfPos           32  116    1               00 if r[32]>0 then r[32]-=1, goto 116
 112 Column           8    6   35               00 r[35]=
 113 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 114 Delete           8    0    0               02 
 115 Next             8  116    0               00 
 116 Goto             0  107    0               00 
 117 ResetSorter      6    0    0               00 
 118 Return          34    0    0               00 
 119 Goto             0  128    0               00 
 120 Noop             0    0    0               00 inner-loop subroutine
 121 Copy             5   37    0               00 r[37]=r[5]
 122 Column           6    0   38               00 r[38]=
 123 Column           6    1   39               00 r[39]=
 124 Column           6    2   40               00 r[40]=
 125 Column           6    3   41               00 r[41]=
 126 Yield            3    0    0               00 
 127 Return          22    0    0               00 end inner-loop subroutine
 128 EndCoroutine     3    0    0               00 
 129 SorterOpen      14    4    0 k(1,B)        00 
 130 Null             0   42   42               00 r[42..42]=NULL
 131 Integer          1   43    0               00 r[43]=1
 132 Explain        132    0    0 SCAN SUBQUERY 2 00 
 133 InitCoroutine    3    0    7               00 
 134 Yield            3  182    0               00 next row of subquery_2
 135 Copy            37   45    0               00 r[45]=r[37]
 136 Copy            38   46    0               00 r[46]=r[38]
 137 Copy            39   47    0               00 r[47]=r[39]
 138 Copy            40   48    0               00 r[48]=r[40]
 139 Copy            41   49    0               00 r[49]=r[41]
 140 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 141 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 142 Jump           143  145  143               00 
 143 Gosub           54  183    0               00 call flush_partition
 144 Copy            47   42    0               00 r[42]=r[47]
 145 NewRowid         2   51    0               00 r[51]=rowid
 146 Insert           2   50   51               00 intkey=r[51] data=r[50]
 147 Ne              43  169   51               00 if r[51]!=r[43] goto 169
 148 Null             0    1    0               00 r[1]=NULL
 149 Integer          1   52    0               00 r[52]=1
 150 Integer          0   56    0               00 r[56]=0
 151 MustBeInt       52  153    0               00 
 152 Ge              56  154   52               00 if r[52]>=r[56] goto 154
 153 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 154 Integer          1   53    0               00 r[53]=1
 155 Integer          0   56    0               00 r[56]=0
 156 MustBeInt       53  158    0               00 
 157 Ge              56  159   53               00 if r[53]>=r[56] goto 159
 158 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 159 Le              52  165   53               00 if r[53]<=r[52] goto 165
 160 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 161 Rewind           1    1    0               00 
 162 Gosub           44  194    0               00 
 163 ResetSorter      1    0    0               00 
 164 Goto             0  181    0               00 
 165 Rewind           3    1    0               00 
 166 Rewind           1    1    0               00 
 167 Rewind           4    1    0               00 
 168 Goto             0  181    0               00 
 169 IfPos           53  173    1               00 if r[53]>0 then r[53]-=1, goto 173
 170 Column           4    4   55               00 r[55]=
 171 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 172 Next             4  173    0               00 
 173 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 174 Gosub           44  194    0               00 
 175 Next             1  176    0               00 
 176 IfPos           52  181    1               00 if r[52]>0 then r[52]-=1, goto 181
 177 Column           3    4   55               00 r[55]=
 178 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 179 Delete           3    0    0               02 
 180 Next             3  181    0               00 
 181 Goto             0  134    0               00 
 182 Integer        192   54    0               00 r[54]=192
 183 Rewind           2  191    0               00 
 184 IfPos           53  188    1               00 if r[53]>0 then r[53]-=1, goto 188
 185 Column           4    4   55               00 r[55]=
 186 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 187 Next             4  188    0               00 
 188 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 189 Gosub           44  194    0               00 
 190 Next             1  191    0               00 
 191 ResetSorter      1    0    0               00 
 192 Return          54    0    0               00 
 193 Goto             0  201    0               00 
 194 Noop             0    0    0               00 inner-loop subroutine
 195 Copy             2   58    0               00 r[58]=r[2]
 196 Column           1    0   59               00 r[59]=
 197 Column           1    1   57               00 r[57]=
 198 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 199 SorterInsert    14   60   57 3             00 key=r[60]
 200 Return          44    0    0               00 end inner-loop subroutine
 201 Explain        201    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 202 OpenPseudo      15   61    4               00 4 columns in r[61]
 203 SorterSort      14  209    0               00 
 204 SorterData      14   61   15               00 r[61]=data
 205 Column          15    2   59               00 r[59]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
 206 Column          15    1   58               00 r[58]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 207 ResultRow       58    2    0               00 output=r[58..59]
 208 SorterNext      14  204    0               00 
 209 Halt             0    0    0               00 
 210 Transaction      0    0    5 0             01 usesStmtJournal=0
 211 Goto             0    1    0               00 
SQL: [SELECT max(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
  min(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  175    0               00 Start at 175
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,B)        00 
  10 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  11 Explain         11    8    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=preceding.t1
  14 Column           7    0    9               00 r[9]=preceding.t1
  15 Column           7    0   10               00 r[10]=preceding.t1
  16 Column           7    0   11               00 r[11]=preceding.t1
  17 Column           7    0    6               00 r[6]=preceding.t1
  18 Column           7    0    7               00 r[7]=preceding.t1
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    0   12               00 r[12]=
  36 Column           8    4   11               00 r[11]=
  37 Column           8    3   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 OpenEphemeral   10    2    0 k(1,-B)       00 nColumn=2
  48 Integer          0   20    0               00 r[20]=0
  49 OpenEphemeral   11    2    0 k(1,B)        00 nColumn=2
  50 Integer          0   23    0               00 r[23]=0
  51 Explain         51    0    0 SCAN SUBQUERY 2 00 
  52 InitCoroutine    5    0    8               00 
  53 Yield            5  132    0               00 next row of subquery_2
  54 Copy             8   26    0               00 r[26]=r[8]
  55 Copy             9   27    0               00 r[27]=r[9]
  56 Copy            10   28    0               00 r[28]=r[10]
  57 Copy            11   29    0               00 r[29]=r[11]
  58 Copy            12   30    0               00 r[30]=r[12]
  59 MakeRecord      26    5   31               00 r[31]=mkrec(r[26..30])
  60 Compare         27   17    1 k(1,B)        00 r[27] <-> r[17]
  61 Jump            62   64   62               00 
  62 Gosub           35  133    0               00 call flush_partition
  63 Copy            27   17    0               00 r[17]=r[27]
  64 NewRowid         2   32    0               00 r[32]=rowid
  65 Insert           2   31   32               00 intkey=r[32] data=r[31]
  66 Ne              18   98   32               00 if r[32]!=r[18] goto 98
  67 Null             0    1    0               00 r[1]=NULL
  68 ResetSorter     10    0    0               00 
  69 Integer          0   20    0               00 r[20]=0
  70 Null             0    3    0               00 r[3]=NULL
  71 ResetSorter     11    0    0               00 
  72 Integer          0   23    0               00 r[23]=0
  73 Integer          1   33    0               00 r[33]=1
  74 Integer          0   37    0               00 r[37]=0
  75 MustBeInt       33   77    0               00 
  76 Ge              37   78   33               00 if r[33]>=r[37] goto 78
  77 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  78 Integer          1   34    0               00 r[34]=1
  79 Integer          0   37    0               00 r[37]=0
  80 MustBeInt       34   82    0               00 
  81 Ge              37   83   34               00 if r[34]>=r[37] goto 83
  82 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  83 Le              33   94   34               00 if r[34]<=r[33] goto 94
  84 Null             0    2    0               00 r[2]=NULL
  85 Last            10   87    0               00 
  86 Column          10    0    2               00 r[2]=
  87 Null             0    4    0               00 r[4]=NULL
  88 Last            11   90    0               00 
  89 Column          11    0    4               00 r[4]=
  90 Rewind           1    1    0               00 
  91 Gosub           25  159    0               00 
  92 ResetSorter      1    0    0               00 
  93 Goto             0  131    0               00 
  94 Rewind           3    1    0               00 
  95 Rewind           1    1    0               00 
  96 Rewind           4    1    0               00 
  97 Goto             0  131    0               00 
  98 IfPos           34  112    1               00 if r[34]>0 then r[34]-=1, goto 112
  99 Column           4    3   36               00 r[36]=
 100 IsNull          36  105    0               00 if r[36]==NULL goto 105
 101 AddImm          20    1    0               00 r[20]=r[20]+1
 102 SCopy           36   19    0               00 r[19]=r[36]
 103 MakeRecord      19    2   21               00 r[21]=mkrec(r[19..20])
 104 IdxInsert       10   21    0               00 key=r[21]
 105 Column           4    4   36               00 r[36]=
 106 IsNull          36  111    0               00 if r[36]==NULL goto 111
 107 AddImm          23    1    0               00 r[23]=r[23]+1
 108 SCopy           36   22    0               00 r[22]=r[36]
 109 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 110 IdxInsert       11   24    0               00 key=r[24]
 111 Next             4  112    0               00 
 112 Null             0    2    0               00 r[2]=NULL
 113 Last            10  115    0               00 
 114 Column          10    0    2               00 r[2]=
 115 Null             0    4    0               00 r[4]=NULL
 116 Last            11  118    0               00 
 117 Column          11    0    4               00 r[4]=
 118 Gosub           25  159    0               00 
 119 Next             1  120    0               00 
 120 IfPos           33  131    1               00 if r[33]>0 then r[33]-=1, goto 131
 121 Column           3    3   36               00 r[36]=
 122 IsNull          36  125    0               00 if r[36]==NULL goto 125
 123 SeekGE          10  125   36 1             00 key=r[36]
 124 Delete          10    0    0               00 
 125 Column           3    4   36               00 r[36]=
 126 IsNull          36  129    0               00 if r[36]==NULL goto 129
 127 SeekGE          11  129   36 1             00 key=r[36]
 128 Delete          11    0    0               00 
 129 Delete           3    0    0               02 
 130 Next             3  131    0               00 
 131 Goto             0   53    0               00 
 132 Integer        157   35    0               00 r[35]=157
 133 Rewind           2  156    0               00 
 134 IfPos           34  148    1               00 if r[34]>0 then r[34]-=1, goto 148
 135 Column           4    3   36               00 r[36]=
 136 IsNull          36  141    0               00 if r[36]==NULL goto 141
 137 AddImm          20    1    0               00 r[20]=r[20]+1
 138 SCopy           36   19    0               00 r[19]=r[36]
 139 MakeRecord      19    2   21               00 r[21]=mkrec(r[19..20])
 140 IdxInsert       10   21    0               00 key=r[21]
 141 Column           4    4   36               00 r[36]=
 142 IsNull          36  147    0               00 if r[36]==NULL goto 147
 143 AddImm          23    1    0               00 r[23]=r[23]+1
 144 SCopy           36   22    0               00 r[22]=r[36]
 145 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 146 IdxInsert       11   24    0               00 key=r[24]
 147 Next             4  148    0               00 
 148 Null             0    2    0               00 r[2]=NULL
 149 Last            10  151    0               00 
 150 Column          10    0    2               00 r[2]=
 151 Null             0    4    0               00 r[4]=NULL
 152 Last            11  154    0               00 
 153 Column          11    0    4               00 r[4]=
 154 Gosub           25  159    0               00 
 155 Next             1  156    0               00 
 156 ResetSorter      1    0    0               00 
 157 Return          35    0    0               00 
 158 Goto             0  166    0               00 
 159 Noop             0    0    0               00 inner-loop subroutine
 160 Copy             4   39    0               00 r[39]=r[4]
 161 Copy             2   40    0               00 r[40]=r[2]
 162 Column           1    0   38               00 r[38]=
 163 MakeRecord      38    3   41               00 r[41]=mkrec(r[38..40])
 164 SorterInsert     9   41   38 3             00 key=r[41]
 165 Return          25    0    0               00 end inner-loop subroutine
 166 Explain        166    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 167 OpenPseudo      12   42    4               00 4 columns in r[42]
 168 SorterSort       9  174    0               00 
 169 SorterData       9   42   12               00 r[42]=data
 170 Column          12    2   40               00 r[40]=min(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 171 Column          12    1   39               00 r[39]=max(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 172 ResultRow       39    2    0               00 output=r[39..40]
 173 SorterNext       9  169    0               00 
 174 Halt             0    0    0               00 
 175 Transaction      0    0    5 0             01 usesStmtJournal=0
 176 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
  min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  250    0               00 Start at 250
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  149    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  122    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           37  123    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21  101   34               00 if r[34]!=r[21] goto 101
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Integer          0   35    0               00 r[35]=0
  80 Integer          0   39    0               00 r[39]=0
  81 MustBeInt       35   83    0               00 
  82 Ge              39   84   35               00 if r[35]>=r[39] goto 84
  83 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  84 Integer          1   36    0               00 r[36]=1
  85 Integer          0   39    0               00 r[39]=0
  86 MustBeInt       36   88    0               00 
  87 Ge              39   89   36               00 if r[36]>=r[39] goto 89
  88 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  89 Le              35   97   36               00 if r[36]<=r[35] goto 97
  90 Null             0    5    0               00 r[5]=NULL
  91 Last            14   93    0               00 
  92 Column          14    0    5               00 r[5]=
  93 Rewind           6    1    0               00 
  94 Gosub           25  140    0               00 
  95 ResetSorter      6    0    0               00 
  96 Goto             0  121    0               00 
  97 Rewind           8    1    0               00 
  98 Rewind           6    1    0               00 
  99 Rewind           9    1    0               00 
 100 Goto             0  121    0               00 
 101 IfPos           36  109    1               00 if r[36]>0 then r[36]-=1, goto 109
 102 Column           9    6   38               00 r[38]=
 103 IsNull          38  108    0               00 if r[38]==NULL goto 108
 104 AddImm          23    1    0               00 r[23]=r[23]+1
 105 SCopy           38   22    0               00 r[22]=r[38]
 106 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 107 IdxInsert       14   24    0               00 key=r[24]
 108 Next             9  109    0               00 
 109 Null             0    5    0               00 r[5]=NULL
 110 Last            14  112    0               00 
 111 Column          14    0    5               00 r[5]=
 112 Gosub           25  140    0               00 
 113 Next             6  114    0               00 
 114 IfPos           35  121    1               00 if r[35]>0 then r[35]-=1, goto 121
 115 Column           8    6   38               00 r[38]=
 116 IsNull          38  119    0               00 if r[38]==NULL goto 119
 117 SeekGE          14  119   38 1             00 key=r[38]
 118 Delete          14    0    0               00 
 119 Delete           8    0    0               02 
 120 Next             8  121    0               00 
 121 Goto             0   60    0               00 
 122 Integer        138   37    0               00 r[37]=138
 123 Rewind           7  137    0               00 
 124 IfPos           36  132    1               00 if r[36]>0 then r[36]-=1, goto 132
 125 Column           9    6   38               00 r[38]=
 126 IsNull          38  131    0               00 if r[38]==NULL goto 131
 127 AddImm          23    1    0               00 r[23]=r[23]+1
 128 SCopy           38   22    0               00 r[22]=r[38]
 129 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 130 IdxInsert       14   24    0               00 key=r[24]
 131 Next             9  132    0               00 
 132 Null             0    5    0               00 r[5]=NULL
 133 Last            14  135    0               00 
 134 Column          14    0    5               00 r[5]=
 135 Gosub           25  140    0               00 
 136 Next             6  137    0               00 
 137 ResetSorter      6    0    0               00 
 138 Return          37    0    0               00 
 139 Goto             0  148    0               00 
 140 Noop             0    0    0               00 inner-loop subroutine
 141 Copy             5   40    0               00 r[40]=r[5]
 142 Column           6    0   41               00 r[41]=
 143 Column           6    1   42               00 r[42]=
 144 Column           6    2   43               00 r[43]=
 145 Column           6    3   44               00 r[44]=
 146 Yield            3    0    0               00 
 147 Return          25    0    0               00 end inner-loop subroutine
 148 EndCoroutine     3    0    0               00 
 149 SorterOpen      15    4    0 k(1,B)        00 
 150 Null             0   45   45               00 r[45..45]=NULL
 151 Integer          1   46    0               00 r[46]=1
 152 OpenEphemeral   16    2    0 k(1,B)        00 nColumn=2
 153 Integer          0   48    0               00 r[48]=0
 154 Explain        154    0    0 SCAN SUBQUERY 2 00 
 155 InitCoroutine    3    0    7               00 
 156 Yield            3  216    0               00 next row of subquery_2
 157 Copy            40   51    0               00 r[51]=r[40]
 158 Copy            41   52    0               00 r[52]=r[41]
 159 Copy            42   53    0               00 r[53]=r[42]
 160 Copy            43   54    0               00 r[54]=r[43]
 161 Copy            44   55    0               00 r[55]=r[44]
 162 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 163 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 164 Jump           165  167  165               00 
 165 Gosub           60  217    0               00 call flush_partition
 166 Copy            53   45    0               00 r[45]=r[53]
 167 NewRowid         2   57    0               00 r[57]=rowid
 168 Insert           2   56   57               00 intkey=r[57] data=r[56]
 169 Ne              46  195   57               00 if r[57]!=r[46] goto 195
 170 Null             0    1    0               00 r[1]=NULL
 171 ResetSorter     16    0    0               00 
 172 Integer          0   48    0               00 r[48]=0
 173 Integer          1   58    0               00 r[58]=1
 174 Integer          0   62    0               00 r[62]=0
 175 MustBeInt       58  177    0               00 
 176 Ge              62  178   58               00 if r[58]>=r[62] goto 178
 177 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 178 Integer          1   59    0               00 r[59]=1
 179 Integer          0   62    0               00 r[62]=0
 180 MustBeInt       59  182    0               00 
 181 Ge              62  183   59               00 if r[59]>=r[62] goto 183
 182 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 183 Le              58  191   59               00 if r[59]<=r[58] goto 191
 184 Null             0    2    0               00 r[2]=NULL
 185 Last            16  187    0               00 
 186 Column          16    0    2               00 r[2]=
 187 Rewind           1    1    0               00 
 188 Gosub           50  234    0               00 
 189 ResetSorter      1    0    0               00 
 190 Goto             0  215    0               00 
 191 Rewind           3    1    0               00 
 192 Rewind           1    1    0               00 
 193 Rewind           4    1    0               00 
 194 Goto             0  215    0               00 
 195 IfPos           59  203    1               00 if r[59]>0 then r[59]-=1, goto 203
 196 Column           4    4   61               00 r[61]=
 197 IsNull          61  202    0               00 if r[61]==NULL goto 202
 198 AddImm          48    1    0               00 r[48]=r[48]+1
 199 SCopy           61   47    0               00 r[47]=r[61]
 200 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 201 IdxInsert       16   49    0               00 key=r[49]
 202 Next             4  203    0               00 
 203 Null             0    2    0               00 r[2]=NULL
 204 Last            16  206    0               00 
 205 Column          16    0    2               00 r[2]=
 206 Gosub           50  234    0               00 
 207 Next             1  208    0               00 
 208 IfPos           58  215    1               00 if r[58]>0 then r[58]-=1, goto 215
 209 Column           3    4   61               00 r[61]=
 210 IsNull          61  213    0               00 if r[61]==NULL goto 213
 211 SeekGE          16  213   61 1             00 key=r[61]
 212 Delete          16    0    0               00 
 213 Delete           3    0    0               02 
 214 Next             3  215    0               00 
 215 Goto             0  156    0               00 
 216 Integer        232   60    0               00 r[60]=232
 217 Rewind           2  231    0               00 
 218 IfPos           59  226    1               00 if r[59]>0 then r[59]-=1, goto 226
 219 Column           4    4   61               00 r[61]=
 220 IsNull          61  225    0               00 if r[61]==NULL goto 225
 221 AddImm          48    1    0               00 r[48]=r[48]+1
 222 SCopy           61   47    0               00 r[47]=r[61]
 223 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 224 IdxInsert       16   49    0               00 key=r[49]
 225 Next             4  226    0               00 
 226 Null             0    2    0               00 r[2]=NULL
 227 Last            16  229    0               00 
 228 Column          16    0    2               00 r[2]=
 229 Gosub           50  234    0               00 
 230 Next             1  231    0               00 
 231 ResetSorter      1    0    0               00 
 232 Return          60    0    0               00 
 233 Goto             0  241    0               00 
 234 Noop             0    0    0               00 inner-loop subroutine
 235 Copy             2   64    0               00 r[64]=r[2]
 236 Column           1    0   65               00 r[65]=
 237 Column           1    1   63               00 r[63]=
 238 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 239 SorterInsert    15   66   63 3             00 key=r[66]
 240 Return          50    0    0               00 end inner-loop subroutine
 241 Explain        241    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 242 OpenPseudo      17   67    4               00 4 columns in r[67]
 243 SorterSort      15  249    0               00 
 244 SorterData      15   67   17               00 r[67]=data
 245 Column          17    2   65               00 r[65]=min(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 246 Column          17    1   64               00 r[64]=max(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 247 ResultRow       64    2    0               00 output=r[64..65]
 248 SorterNext      15  244    0               00 
 249 Halt             0    0    0               00 
 250 Transaction      0    0    5 0             01 usesStmtJournal=0
 251 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  210    0               00 Start at 210
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  129    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  108    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           34  109    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   95   31               00 if r[31]!=r[21] goto 95
  74 Null             0    4    0               00 r[4]=NULL
  75 Integer          0   32    0               00 r[32]=0
  76 Integer          0   36    0               00 r[36]=0
  77 MustBeInt       32   79    0               00 
  78 Ge              36   80   32               00 if r[32]>=r[36] goto 80
  79 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  80 Integer          1   33    0               00 r[33]=1
  81 Integer          0   36    0               00 r[36]=0
  82 MustBeInt       33   84    0               00 
  83 Ge              36   85   33               00 if r[33]>=r[36] goto 85
  84 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  85 Le              32   91   33               00 if r[33]<=r[32] goto 91
  86 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  87 Rewind           6    1    0               00 
  88 Gosub           22  120    0               00 
  89 ResetSorter      6    0    0               00 
  90 Goto             0  107    0               00 
  91 Rewind           8    1    0               00 
  92 Rewind           6    1    0               00 
  93 Rewind           9    1    0               00 
  94 Goto             0  107    0               00 
  95 IfPos           33   99    1               00 if r[33]>0 then r[33]-=1, goto 99
  96 Column           9    6   35               00 r[35]=
  97 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  98 Next             9   99    0               00 
  99 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 100 Gosub           22  120    0               00 
 101 Next             6  102    0               00 
 102 IfPos           32  107    1               00 if r[32]>0 then r[32]-=1, goto 107
 103 Column           8    6   35               00 r[35]=
 104 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 105 Delete           8    0    0               02 
 106 Next             8  107    0               00 
 107 Goto             0   58    0               00 
 108 Integer        118   34    0               00 r[34]=118
 109 Rewind           7  117    0               00 
 110 IfPos           33  114    1               00 if r[33]>0 then r[33]-=1, goto 114
 111 Column           9    6   35               00 r[35]=
 112 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
 113 Next             9  114    0               00 
 114 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 115 Gosub           22  120    0               00 
 116 Next             6  117    0               00 
 117 ResetSorter      6    0    0               00 
 118 Return          34    0    0               00 
 119 Goto             0  128    0               00 
 120 Noop             0    0    0               00 inner-loop subroutine
 121 Copy             5   37    0               00 r[37]=r[5]
 122 Column           6    0   38               00 r[38]=
 123 Column           6    1   39               00 r[39]=
 124 Column           6    2   40               00 r[40]=
 125 Column           6    3   41               00 r[41]=
 126 Yield            3    0    0               00 
 127 Return          22    0    0               00 end inner-loop subroutine
 128 EndCoroutine     3    0    0               00 
 129 SorterOpen      14    4    0 k(1,B)        00 
 130 Null             0   42   42               00 r[42..42]=NULL
 131 Integer          1   43    0               00 r[43]=1
 132 Explain        132    0    0 SCAN SUBQUERY 2 00 
 133 InitCoroutine    3    0    7               00 
 134 Yield            3  182    0               00 next row of subquery_2
 135 Copy            37   45    0               00 r[45]=r[37]
 136 Copy            38   46    0               00 r[46]=r[38]
 137 Copy            39   47    0               00 r[47]=r[39]
 138 Copy            40   48    0               00 r[48]=r[40]
 139 Copy            41   49    0               00 r[49]=r[41]
 140 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 141 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 142 Jump           143  145  143               00 
 143 Gosub           54  183    0               00 call flush_partition
 144 Copy            47   42    0               00 r[42]=r[47]
 145 NewRowid         2   51    0               00 r[51]=rowid
 146 Insert           2   50   51               00 intkey=r[51] data=r[50]
 147 Ne              43  169   51               00 if r[51]!=r[43] goto 169
 148 Null             0    1    0               00 r[1]=NULL
 149 Integer          1   52    0               00 r[52]=1
 150 Integer          0   56    0               00 r[56]=0
 151 MustBeInt       52  153    0               00 
 152 Ge              56  154   52               00 if r[52]>=r[56] goto 154
 153 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 154 Integer          1   53    0               00 r[53]=1
 155 Integer          0   56    0               00 r[56]=0
 156 MustBeInt       53  158    0               00 
 157 Ge              56  159   53               00 if r[53]>=r[56] goto 159
 158 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 159 Le              52  165   53               00 if r[53]<=r[52] goto 165
 160 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 161 Rewind           1    1    0               00 
 162 Gosub           44  194    0               00 
 163 ResetSorter      1    0    0               00 
 164 Goto             0  181    0               00 
 165 Rewind           3    1    0               00 
 166 Rewind           1    1    0               00 
 167 Rewind           4    1    0               00 
 168 Goto             0  181    0               00 
 169 IfPos           53  173    1               00 if r[53]>0 then r[53]-=1, goto 173
 170 Column           4    4   55               00 r[55]=
 171 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 172 Next             4  173    0               00 
 173 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 174 Gosub           44  194    0               00 
 175 Next             1  176    0               00 
 176 IfPos           52  181    1               00 if r[52]>0 then r[52]-=1, goto 181
 177 Column           3    4   55               00 r[55]=
 178 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 179 Delete           3    0    0               02 
 180 Next             3  181    0               00 
 181 Goto             0  134    0               00 
 182 Integer        192   54    0               00 r[54]=192
 183 Rewind           2  191    0               00 
 184 IfPos           53  188    1               00 if r[53]>0 then r[53]-=1, goto 188
 185 Column           4    4   55               00 r[55]=
 186 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 187 Next             4  188    0               00 
 188 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 189 Gosub           44  194    0               00 
 190 Next             1  191    0               00 
 191 ResetSorter      1    0    0               00 
 192 Return          54    0    0               00 
 193 Goto             0  201    0               00 
 194 Noop             0    0    0               00 inner-loop subroutine
 195 Copy             2   58    0               00 r[58]=r[2]
 196 Column           1    0   59               00 r[59]=
 197 Column           1    1   57               00 r[57]=
 198 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 199 SorterInsert    14   60   57 3             00 key=r[60]
 200 Return          44    0    0               00 end inner-loop subroutine
 201 Explain        201    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 202 OpenPseudo      15   61    4               00 4 columns in r[61]
 203 SorterSort      14  209    0               00 
 204 SorterData      14   61   15               00 r[61]=data
 205 Column          15    2   59               00 r[59]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 206 Column          15    1   58               00 r[58]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 207 ResultRow       58    2    0               00 output=r[58..59]
 208 SorterNext      14  204    0               00 
 209 Halt             0    0    0               00 
 210 Transaction      0    0    5 0             01 usesStmtJournal=0
 211 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING), 
         sum(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  215    0               00 Start at 215
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  134    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   44   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   30    0               00 
  19 Column           0    1    9               00 r[9]=v0.following
  20 Column           0    1   10               00 r[10]=v0.following
  21 Column           0    1   11               00 r[11]=v0.following
  22 Column           0    1   12               00 r[12]=v0.following
  23 Column           0    1   13               00 r[13]=v0.following
  24 Column           0    1   14               00 r[14]=v0.following
  25 Column           0    1    7               00 r[7]=v0.following
  26 Column           0    1    8               00 r[8]=v0.following
  27 MakeRecord       7    8   16               00 r[16]=mkrec(r[7..14])
  28 SorterInsert    11   16    7 8             00 key=r[16]
  29 Next             0   19    0               01 
  30 Explain         30   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  31 OpenPseudo      12   17   10               00 10 columns in r[17]
  32 SorterSort      11   43    0               00 
  33 SorterData      11   17   12               00 r[17]=data
  34 Column          12    1   15               00 r[15]=
  35 Column          12    7   14               00 r[14]=
  36 Column          12    6   13               00 r[13]=
  37 Column          12    5   12               00 r[12]=
  38 Column          12    4   11               00 r[11]=
  39 Column          12    3   10               00 r[10]=
  40 Column          12    2    9               00 r[9]=
  41 Yield            6    0    0               00 
  42 SorterNext      11   33    0               00 
  43 EndCoroutine     6    0    0               00 
  44 Null             0   18   18               00 r[18..18]=NULL
  45 Integer          1   19    0               00 r[19]=1
  46 Explain         46    7    0 SCAN SUBQUERY 3 00 
  47 InitCoroutine    6    0   14               00 
  48 Yield            6   99    0               00 next row of subquery_3
  49 Copy             9   21    0               00 r[21]=r[9]
  50 Copy            10   22    0               00 r[22]=r[10]
  51 Copy            11   23    0               00 r[23]=r[11]
  52 Copy            12   24    0               00 r[24]=r[12]
  53 Copy            13   25    0               00 r[25]=r[13]
  54 Copy            14   26    0               00 r[26]=r[14]
  55 Copy            15   27    0               00 r[27]=r[15]
  56 MakeRecord      21    7   28               00 r[28]=mkrec(r[21..27])
  57 Compare         25   18    1 k(1,B)        00 r[25] <-> r[18]
  58 Jump            59   61   59               00 
  59 Gosub           32  100    0               00 call flush_partition
  60 Copy            25   18    0               00 r[18]=r[25]
  61 NewRowid         7   29    0               00 r[29]=rowid
  62 Insert           7   28   29               00 intkey=r[29] data=r[28]
  63 Ne              19   86   29               00 if r[29]!=r[19] goto 86
  64 Null             0    4    0               00 r[4]=NULL
  65 Integer          1   30    0               00 r[30]=1
  66 Integer          0   34    0               00 r[34]=0
  67 MustBeInt       30   69    0               00 
  68 Ge              34   70   30               00 if r[30]>=r[34] goto 70
  69 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  70 Integer        500   31    0               00 r[31]=500
  71 Integer          0   34    0               00 r[34]=0
  72 MustBeInt       31   74    0               00 
  73 Ge              34   75   31               00 if r[31]>=r[34] goto 75
  74 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  75 Ge              30   81   31               00 if r[31]>=r[30] goto 81
  76 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  77 Rewind           6    1    0               00 
  78 Gosub           20  125    0               00 
  79 ResetSorter      6    0    0               00 
  80 Goto             0   98    0               00 
  81 Subtract        30   31   30               00 r[30]=r[31]-r[30]
  82 Rewind           8    1    0               00 
  83 Rewind           6    1    0               00 
  84 Rewind           9    1    0               00 
  85 Goto             0   98    0               00 
  86 Column           9    6   33               00 r[33]=
  87 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
  88 Next             9   89    0               00 
  89 IfPos           31   94    1               00 if r[31]>0 then r[31]-=1, goto 94
  90 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  91 Gosub           20  125    0               00 
  92 Delete           6    0    0               02 
  93 Next             6   94    0               00 
  94 IfPos           30   98    1               00 if r[30]>0 then r[30]-=1, goto 98
  95 Column           8    6   33               00 r[33]=
  96 AggInverse       1   33    4 sum(1)        01 accum=r[4] inverse(r[33])
  97 Next             8   98    0               00 
  98 Goto             0   48    0               00 
  99 Integer        123   32    0               00 r[32]=123
 100 Rewind           7  122    0               00 
 101 Column           9    6   33               00 r[33]=
 102 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
 103 Next             9  104    0               00 
 104 IfPos           31  110    1               00 if r[31]>0 then r[31]-=1, goto 110
 105 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 106 Gosub           20  125    0               00 
 107 Delete           6    0    0               02 
 108 Next             6  110    0               00 
 109 Goto             0  122    0               00 
 110 IfPos           30  115    1               00 if r[30]>0 then r[30]-=1, goto 115
 111 Column           8    6   33               00 r[33]=
 112 AggInverse       1   33    4 sum(1)        01 accum=r[4] inverse(r[33])
 113 Next             8  115    0               00 
 114 Goto             0  116    0               00 
 115 Goto             0  104    0               00 
 116 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 117 Gosub           20  125    0               00 
 118 Delete           6    0    0               02 
 119 Next             6  121    0               00 
 120 Goto             0  122    0               00 
 121 Goto             0  116    0               00 
 122 ResetSorter      6    0    0               00 
 123 Return          32    0    0               00 
 124 Goto             0  133    0               00 
 125 Noop             0    0    0               00 inner-loop subroutine
 126 Copy             5   35    0               00 r[35]=r[5]
 127 Column           6    0   36               00 r[36]=
 128 Column           6    1   37               00 r[37]=
 129 Column           6    2   38               00 r[38]=
 130 Column           6    3   39               00 r[39]=
 131 Yield            3    0    0               00 
 132 Return          20    0    0               00 end inner-loop subroutine
 133 EndCoroutine     3    0    0               00 
 134 SorterOpen      13    4    0 k(1,B)        00 
 135 Null             0   40   40               00 r[40..40]=NULL
 136 Integer          1   41    0               00 r[41]=1
 137 Explain        137    0    0 SCAN SUBQUERY 2 00 
 138 InitCoroutine    3    0    7               00 
 139 Yield            3  187    0               00 next row of subquery_2
 140 Copy            35   43    0               00 r[43]=r[35]
 141 Copy            36   44    0               00 r[44]=r[36]
 142 Copy            37   45    0               00 r[45]=r[37]
 143 Copy            38   46    0               00 r[46]=r[38]
 144 Copy            39   47    0               00 r[47]=r[39]
 145 MakeRecord      43    5   48               00 r[48]=mkrec(r[43..47])
 146 Compare         45   40    1 k(1,B)        00 r[45] <-> r[40]
 147 Jump           148  150  148               00 
 148 Gosub           52  188    0               00 call flush_partition
 149 Copy            45   40    0               00 r[40]=r[45]
 150 NewRowid         2   49    0               00 r[49]=rowid
 151 Insert           2   48   49               00 intkey=r[49] data=r[48]
 152 Ne              41  174   49               00 if r[49]!=r[41] goto 174
 153 Null             0    1    0               00 r[1]=NULL
 154 Integer          1   50    0               00 r[50]=1
 155 Integer          0   54    0               00 r[54]=0
 156 MustBeInt       50  158    0               00 
 157 Ge              54  159   50               00 if r[50]>=r[54] goto 159
 158 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 159 Integer          1   51    0               00 r[51]=1
 160 Integer          0   54    0               00 r[54]=0
 161 MustBeInt       51  163    0               00 
 162 Ge              54  164   51               00 if r[51]>=r[54] goto 164
 163 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 164 Le              50  170   51               00 if r[51]<=r[50] goto 170
 165 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 166 Rewind           1    1    0               00 
 167 Gosub           42  199    0               00 
 168 ResetSorter      1    0    0               00 
 169 Goto             0  186    0               00 
 170 Rewind           3    1    0               00 
 171 Rewind           1    1    0               00 
 172 Rewind           4    1    0               00 
 173 Goto             0  186    0               00 
 174 IfPos           51  178    1               00 if r[51]>0 then r[51]-=1, goto 178
 175 Column           4    4   53               00 r[53]=
 176 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 177 Next             4  178    0               00 
 178 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 179 Gosub           42  199    0               00 
 180 Next             1  181    0               00 
 181 IfPos           50  186    1               00 if r[50]>0 then r[50]-=1, goto 186
 182 Column           3    4   53               00 r[53]=
 183 AggInverse       1   53    1 sum(1)        01 accum=r[1] inverse(r[53])
 184 Delete           3    0    0               02 
 185 Next             3  186    0               00 
 186 Goto             0  139    0               00 
 187 Integer        197   52    0               00 r[52]=197
 188 Rewind           2  196    0               00 
 189 IfPos           51  193    1               00 if r[51]>0 then r[51]-=1, goto 193
 190 Column           4    4   53               00 r[53]=
 191 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 192 Next             4  193    0               00 
 193 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 194 Gosub           42  199    0               00 
 195 Next             1  196    0               00 
 196 ResetSorter      1    0    0               00 
 197 Return          52    0    0               00 
 198 Goto             0  206    0               00 
 199 Noop             0    0    0               00 inner-loop subroutine
 200 Copy             2   56    0               00 r[56]=r[2]
 201 Column           1    0   57               00 r[57]=
 202 Column           1    1   55               00 r[55]=
 203 MakeRecord      55    3   58               00 r[58]=mkrec(r[55..57])
 204 SorterInsert    13   58   55 3             00 key=r[58]
 205 Return          42    0    0               00 end inner-loop subroutine
 206 Explain        206    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 207 OpenPseudo      14   59    4               00 4 columns in r[59]
 208 SorterSort      13  214    0               00 
 209 SorterData      13   59   14               00 r[59]=data
 210 Column          14    2   57               00 r[57]=sum(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 FOLLOWING AND 5
 211 Column          14    1   56               00 r[56]=sum(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 PRECEDING AND 1
 212 ResultRow       56    2    0               00 output=r[56..57]
 213 SorterNext      13  209    0               00 
 214 Halt             0    0    0               00 
 215 Transaction      0    0    5 0             01 usesStmtJournal=0
 216 Goto             0    1    0               00 
SQL: [SELECT max(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
  min(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  240    0               00 Start at 240
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  139    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   44   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   30    0               00 
  19 Column           0    1    9               00 r[9]=v0.following
  20 Column           0    1   10               00 r[10]=v0.following
  21 Column           0    1   11               00 r[11]=v0.following
  22 Column           0    1   12               00 r[12]=v0.following
  23 Column           0    1   13               00 r[13]=v0.following
  24 Column           0    1   14               00 r[14]=v0.following
  25 Column           0    1    7               00 r[7]=v0.following
  26 Column           0    1    8               00 r[8]=v0.following
  27 MakeRecord       7    8   16               00 r[16]=mkrec(r[7..14])
  28 SorterInsert    11   16    7 8             00 key=r[16]
  29 Next             0   19    0               01 
  30 Explain         30   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  31 OpenPseudo      12   17   10               00 10 columns in r[17]
  32 SorterSort      11   43    0               00 
  33 SorterData      11   17   12               00 r[17]=data
  34 Column          12    1   15               00 r[15]=
  35 Column          12    7   14               00 r[14]=
  36 Column          12    6   13               00 r[13]=
  37 Column          12    5   12               00 r[12]=
  38 Column          12    4   11               00 r[11]=
  39 Column          12    3   10               00 r[10]=
  40 Column          12    2    9               00 r[9]=
  41 Yield            6    0    0               00 
  42 SorterNext      11   33    0               00 
  43 EndCoroutine     6    0    0               00 
  44 Null             0   18   18               00 r[18..18]=NULL
  45 Integer          1   19    0               00 r[19]=1
  46 OpenEphemeral   13    2    0 k(1,-B)       00 nColumn=2
  47 Integer          0   21    0               00 r[21]=0
  48 Explain         48    7    0 SCAN SUBQUERY 3 00 
  49 InitCoroutine    6    0   14               00 
  50 Yield            6  104    0               00 next row of subquery_3
  51 Copy             9   24    0               00 r[24]=r[9]
  52 Copy            10   25    0               00 r[25]=r[10]
  53 Copy            11   26    0               00 r[26]=r[11]
  54 Copy            12   27    0               00 r[27]=r[12]
  55 Copy            13   28    0               00 r[28]=r[13]
  56 Copy            14   29    0               00 r[29]=r[14]
  57 Copy            15   30    0               00 r[30]=r[15]
  58 MakeRecord      24    7   31               00 r[31]=mkrec(r[24..30])
  59 Compare         28   18    1 k(1,B)        00 r[28] <-> r[18]
  60 Jump            61   63   61               00 
  61 Gosub           35  105    0               00 call flush_partition
  62 Copy            28   18    0               00 r[18]=r[28]
  63 NewRowid         7   32    0               00 r[32]=rowid
  64 Insert           7   31   32               00 intkey=r[32] data=r[31]
  65 Ne              19   83   32               00 if r[32]!=r[19] goto 83
  66 Null             0    4    0               00 r[4]=NULL
  67 ResetSorter     13    0    0               00 
  68 Integer          0   21    0               00 r[21]=0
  69 Integer          3   33    0               00 r[33]=3
  70 Integer          0   37    0               00 r[37]=0
  71 MustBeInt       33   73    0               00 
  72 Ge              37   74   33               00 if r[33]>=r[37] goto 74
  73 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  74 Integer          1   34    0               00 r[34]=1
  75 Integer          0   37    0               00 r[37]=0
  76 MustBeInt       34   78    0               00 
  77 Ge              37   79   34               00 if r[34]>=r[37] goto 79
  78 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  79 Rewind           8    1    0               00 
  80 Rewind           6    1    0               00 
  81 Rewind           9    1    0               00 
  82 Goto             0  103    0               00 
  83 Column           9    6   36               00 r[36]=
  84 IsNull          36   89    0               00 if r[36]==NULL goto 89
  85 AddImm          21    1    0               00 r[21]=r[21]+1
  86 SCopy           36   20    0               00 r[20]=r[36]
  87 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
  88 IdxInsert       13   22    0               00 key=r[22]
  89 Next             9   90    0               00 
  90 IfPos           34  103    1               00 if r[34]>0 then r[34]-=1, goto 103
  91 Null             0    5    0               00 r[5]=NULL
  92 Last            13   94    0               00 
  93 Column          13    0    5               00 r[5]=
  94 Gosub           23  130    0               00 
  95 Next             6   96    0               00 
  96 IfPos           33  103    1               00 if r[33]>0 then r[33]-=1, goto 103
  97 Column           8    6   36               00 r[36]=
  98 IsNull          36  101    0               00 if r[36]==NULL goto 101
  99 SeekGE          13  101   36 1             00 key=r[36]
 100 Delete          13    0    0               00 
 101 Delete           8    0    0               02 
 102 Next             8  103    0               00 
 103 Goto             0   50    0               00 
 104 Integer        128   35    0               00 r[35]=128
 105 Rewind           7  127    0               00 
 106 Column           9    6   36               00 r[36]=
 107 IsNull          36  112    0               00 if r[36]==NULL goto 112
 108 AddImm          21    1    0               00 r[21]=r[21]+1
 109 SCopy           36   20    0               00 r[20]=r[36]
 110 MakeRecord      20    2   22               00 r[22]=mkrec(r[20..21])
 111 IdxInsert       13   22    0               00 key=r[22]
 112 Next             9  113    0               00 
 113 Null             0    5    0               00 r[5]=NULL
 114 Last            13  116    0               00 
 115 Column          13    0    5               00 r[5]=
 116 Gosub           23  130    0               00 
 117 Next             6  119    0               00 
 118 Goto             0  127    0               00 
 119 IfPos           33  126    1               00 if r[33]>0 then r[33]-=1, goto 126
 120 Column           8    6   36               00 r[36]=
 121 IsNull          36  124    0               00 if r[36]==NULL goto 124
 122 SeekGE          13  124   36 1             00 key=r[36]
 123 Delete          13    0    0               00 
 124 Delete           8    0    0               02 
 125 Next             8  126    0               00 
 126 Goto             0  113    0               00 
 127 ResetSorter      6    0    0               00 
 128 Return          35    0    0               00 
 129 Goto             0  138    0               00 
 130 Noop             0    0    0               00 inner-loop subroutine
 131 Copy             5   38    0               00 r[38]=r[5]
 132 Column           6    0   39               00 r[39]=
 133 Column           6    1   40               00 r[40]=
 134 Column           6    2   41               00 r[41]=
 135 Column           6    3   42               00 r[42]=
 136 Yield            3    0    0               00 
 137 Return          23    0    0               00 end inner-loop subroutine
 138 EndCoroutine     3    0    0               00 
 139 SorterOpen      14    4    0 k(1,B)        00 
 140 Null             0   43   43               00 r[43..43]=NULL
 141 Integer          1   44    0               00 r[44]=1
 142 OpenEphemeral   15    2    0 k(1,B)        00 nColumn=2
 143 Integer          0   46    0               00 r[46]=0
 144 Explain        144    0    0 SCAN SUBQUERY 2 00 
 145 InitCoroutine    3    0    7               00 
 146 Yield            3  206    0               00 next row of subquery_2
 147 Copy            38   49    0               00 r[49]=r[38]
 148 Copy            39   50    0               00 r[50]=r[39]
 149 Copy            40   51    0               00 r[51]=r[40]
 150 Copy            41   52    0               00 r[52]=r[41]
 151 Copy            42   53    0               00 r[53]=r[42]
 152 MakeRecord      49    5   54               00 r[54]=mkrec(r[49..53])
 153 Compare         51   43    1 k(1,B)        00 r[51] <-> r[43]
 154 Jump           155  157  155               00 
 155 Gosub           58  207    0               00 call flush_partition
 156 Copy            51   43    0               00 r[43]=r[51]
 157 NewRowid         2   55    0               00 r[55]=rowid
 158 Insert           2   54   55               00 intkey=r[55] data=r[54]
 159 Ne              44  185   55               00 if r[55]!=r[44] goto 185
 160 Null             0    1    0               00 r[1]=NULL
 161 ResetSorter     15    0    0               00 
 162 Integer          0   46    0               00 r[46]=0
 163 Integer          0   56    0               00 r[56]=0
 164 Integer          0   60    0               00 r[60]=0
 165 MustBeInt       56  167    0               00 
 166 Ge              60  168   56               00 if r[56]>=r[60] goto 168
 167 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 168 Integer          1   57    0               00 r[57]=1
 169 Integer          0   60    0               00 r[60]=0
 170 MustBeInt       57  172    0               00 
 171 Ge              60  173   57               00 if r[57]>=r[60] goto 173
 172 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 173 Le              56  181   57               00 if r[57]<=r[56] goto 181
 174 Null             0    2    0               00 r[2]=NULL
 175 Last            15  177    0               00 
 176 Column          15    0    2               00 r[2]=
 177 Rewind           1    1    0               00 
 178 Gosub           48  224    0               00 
 179 ResetSorter      1    0    0               00 
 180 Goto             0  205    0               00 
 181 Rewind           3    1    0               00 
 182 Rewind           1    1    0               00 
 183 Rewind           4    1    0               00 
 184 Goto             0  205    0               00 
 185 IfPos           57  193    1               00 if r[57]>0 then r[57]-=1, goto 193
 186 Column           4    4   59               00 r[59]=
 187 IsNull          59  192    0               00 if r[59]==NULL goto 192
 188 AddImm          46    1    0               00 r[46]=r[46]+1
 189 SCopy           59   45    0               00 r[45]=r[59]
 190 MakeRecord      45    2   47               00 r[47]=mkrec(r[45..46])
 191 IdxInsert       15   47    0               00 key=r[47]
 192 Next             4  193    0               00 
 193 Null             0    2    0               00 r[2]=NULL
 194 Last            15  196    0               00 
 195 Column          15    0    2               00 r[2]=
 196 Gosub           48  224    0               00 
 197 Next             1  198    0               00 
 198 IfPos           56  205    1               00 if r[56]>0 then r[56]-=1, goto 205
 199 Column           3    4   59               00 r[59]=
 200 IsNull          59  203    0               00 if r[59]==NULL goto 203
 201 SeekGE          15  203   59 1             00 key=r[59]
 202 Delete          15    0    0               00 
 203 Delete           3    0    0               02 
 204 Next             3  205    0               00 
 205 Goto             0  146    0               00 
 206 Integer        222   58    0               00 r[58]=222
 207 Rewind           2  221    0               00 
 208 IfPos           57  216    1               00 if r[57]>0 then r[57]-=1, goto 216
 209 Column           4    4   59               00 r[59]=
 210 IsNull          59  215    0               00 if r[59]==NULL goto 215
 211 AddImm          46    1    0               00 r[46]=r[46]+1
 212 SCopy           59   45    0               00 r[45]=r[59]
 213 MakeRecord      45    2   47               00 r[47]=mkrec(r[45..46])
 214 IdxInsert       15   47    0               00 key=r[47]
 215 Next             4  216    0               00 
 216 Null             0    2    0               00 r[2]=NULL
 217 Last            15  219    0               00 
 218 Column          15    0    2               00 r[2]=
 219 Gosub           48  224    0               00 
 220 Next             1  221    0               00 
 221 ResetSorter      1    0    0               00 
 222 Return          58    0    0               00 
 223 Goto             0  231    0               00 
 224 Noop             0    0    0               00 inner-loop subroutine
 225 Copy             2   62    0               00 r[62]=r[2]
 226 Column           1    0   63               00 r[63]=
 227 Column           1    1   61               00 r[61]=
 228 MakeRecord      61    3   64               00 r[64]=mkrec(r[61..63])
 229 SorterInsert    14   64   61 3             00 key=r[64]
 230 Return          48    0    0               00 end inner-loop subroutine
 231 Explain        231    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 232 OpenPseudo      16   65    4               00 4 columns in r[65]
 233 SorterSort      14  239    0               00 
 234 SorterData      14   65   16               00 r[65]=data
 235 Column          16    2   63               00 r[63]=min(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 3 PRECEDING AND 1
 236 Column          16    1   62               00 r[62]=max(following) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 0 PRECEDING AND 1
 237 ResultRow       62    2    0               00 output=r[62..63]
 238 SorterNext      14  234    0               00 
 239 Halt             0    0    0               00 
 240 Transaction      0    0    5 0             01 usesStmtJournal=0
 241 Goto             0    1    0               00 
SQL: [SELECT max(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
  min(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  250    0               00 Start at 250
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  149    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=preceding.t1
  20 Column          12    0   10               00 r[10]=preceding.t1
  21 Column          12    0   11               00 r[11]=preceding.t1
  22 Column          12    1   12               00 r[12]=preceding.x
  23 Column          12    0   13               00 r[13]=preceding.t1
  24 Column          12    1   14               00 r[14]=preceding.x
  25 Column          12    0    7               00 r[7]=preceding.t1
  26 Column          12    0    8               00 r[8]=preceding.t1
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    6   15               00 r[15]=
  44 Column          13    0   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  114    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           37  115    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21   93   34               00 if r[34]!=r[21] goto 93
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Integer          3   35    0               00 r[35]=3
  80 Integer          0   39    0               00 r[39]=0
  81 MustBeInt       35   83    0               00 
  82 Ge              39   84   35               00 if r[35]>=r[39] goto 84
  83 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  84 Integer          2   36    0               00 r[36]=2
  85 Integer          0   39    0               00 r[39]=0
  86 MustBeInt       36   88    0               00 
  87 Ge              39   89   36               00 if r[36]>=r[39] goto 89
  88 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  89 Rewind           8    1    0               00 
  90 Rewind           6    1    0               00 
  91 Rewind           9    1    0               00 
  92 Goto             0  113    0               00 
  93 Column           9    6   38               00 r[38]=
  94 IsNull          38   99    0               00 if r[38]==NULL goto 99
  95 AddImm          23    1    0               00 r[23]=r[23]+1
  96 SCopy           38   22    0               00 r[22]=r[38]
  97 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
  98 IdxInsert       14   24    0               00 key=r[24]
  99 Next             9  100    0               00 
 100 IfPos           36  113    1               00 if r[36]>0 then r[36]-=1, goto 113
 101 Null             0    5    0               00 r[5]=NULL
 102 Last            14  104    0               00 
 103 Column          14    0    5               00 r[5]=
 104 Gosub           25  140    0               00 
 105 Next             6  106    0               00 
 106 IfPos           35  113    1               00 if r[35]>0 then r[35]-=1, goto 113
 107 Column           8    6   38               00 r[38]=
 108 IsNull          38  111    0               00 if r[38]==NULL goto 111
 109 SeekGE          14  111   38 1             00 key=r[38]
 110 Delete          14    0    0               00 
 111 Delete           8    0    0               02 
 112 Next             8  113    0               00 
 113 Goto             0   60    0               00 
 114 Integer        138   37    0               00 r[37]=138
 115 Rewind           7  137    0               00 
 116 Column           9    6   38               00 r[38]=
 117 IsNull          38  122    0               00 if r[38]==NULL goto 122
 118 AddImm          23    1    0               00 r[23]=r[23]+1
 119 SCopy           38   22    0               00 r[22]=r[38]
 120 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 121 IdxInsert       14   24    0               00 key=r[24]
 122 Next             9  123    0               00 
 123 Null             0    5    0               00 r[5]=NULL
 124 Last            14  126    0               00 
 125 Column          14    0    5               00 r[5]=
 126 Gosub           25  140    0               00 
 127 Next             6  129    0               00 
 128 Goto             0  137    0               00 
 129 IfPos           35  136    1               00 if r[35]>0 then r[35]-=1, goto 136
 130 Column           8    6   38               00 r[38]=
 131 IsNull          38  134    0               00 if r[38]==NULL goto 134
 132 SeekGE          14  134   38 1             00 key=r[38]
 133 Delete          14    0    0               00 
 134 Delete           8    0    0               02 
 135 Next             8  136    0               00 
 136 Goto             0  123    0               00 
 137 ResetSorter      6    0    0               00 
 138 Return          37    0    0               00 
 139 Goto             0  148    0               00 
 140 Noop             0    0    0               00 inner-loop subroutine
 141 Copy             5   40    0               00 r[40]=r[5]
 142 Column           6    0   41               00 r[41]=
 143 Column           6    1   42               00 r[42]=
 144 Column           6    2   43               00 r[43]=
 145 Column           6    3   44               00 r[44]=
 146 Yield            3    0    0               00 
 147 Return          25    0    0               00 end inner-loop subroutine
 148 EndCoroutine     3    0    0               00 
 149 SorterOpen      15    4    0 k(1,B)        00 
 150 Null             0   45   45               00 r[45..45]=NULL
 151 Integer          1   46    0               00 r[46]=1
 152 OpenEphemeral   16    2    0 k(1,B)        00 nColumn=2
 153 Integer          0   48    0               00 r[48]=0
 154 Explain        154    0    0 SCAN SUBQUERY 2 00 
 155 InitCoroutine    3    0    7               00 
 156 Yield            3  216    0               00 next row of subquery_2
 157 Copy            40   51    0               00 r[51]=r[40]
 158 Copy            41   52    0               00 r[52]=r[41]
 159 Copy            42   53    0               00 r[53]=r[42]
 160 Copy            43   54    0               00 r[54]=r[43]
 161 Copy            44   55    0               00 r[55]=r[44]
 162 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 163 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 164 Jump           165  167  165               00 
 165 Gosub           60  217    0               00 call flush_partition
 166 Copy            53   45    0               00 r[45]=r[53]
 167 NewRowid         2   57    0               00 r[57]=rowid
 168 Insert           2   56   57               00 intkey=r[57] data=r[56]
 169 Ne              46  195   57               00 if r[57]!=r[46] goto 195
 170 Null             0    1    0               00 r[1]=NULL
 171 ResetSorter     16    0    0               00 
 172 Integer          0   48    0               00 r[48]=0
 173 Integer          0   58    0               00 r[58]=0
 174 Integer          0   62    0               00 r[62]=0
 175 MustBeInt       58  177    0               00 
 176 Ge              62  178   58               00 if r[58]>=r[62] goto 178
 177 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 178 Integer          1   59    0               00 r[59]=1
 179 Integer          0   62    0               00 r[62]=0
 180 MustBeInt       59  182    0               00 
 181 Ge              62  183   59               00 if r[59]>=r[62] goto 183
 182 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 183 Le              58  191   59               00 if r[59]<=r[58] goto 191
 184 Null             0    2    0               00 r[2]=NULL
 185 Last            16  187    0               00 
 186 Column          16    0    2               00 r[2]=
 187 Rewind           1    1    0               00 
 188 Gosub           50  234    0               00 
 189 ResetSorter      1    0    0               00 
 190 Goto             0  215    0               00 
 191 Rewind           3    1    0               00 
 192 Rewind           1    1    0               00 
 193 Rewind           4    1    0               00 
 194 Goto             0  215    0               00 
 195 IfPos           59  203    1               00 if r[59]>0 then r[59]-=1, goto 203
 196 Column           4    4   61               00 r[61]=
 197 IsNull          61  202    0               00 if r[61]==NULL goto 202
 198 AddImm          48    1    0               00 r[48]=r[48]+1
 199 SCopy           61   47    0               00 r[47]=r[61]
 200 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 201 IdxInsert       16   49    0               00 key=r[49]
 202 Next             4  203    0               00 
 203 Null             0    2    0               00 r[2]=NULL
 204 Last            16  206    0               00 
 205 Column          16    0    2               00 r[2]=
 206 Gosub           50  234    0               00 
 207 Next             1  208    0               00 
 208 IfPos           58  215    1               00 if r[58]>0 then r[58]-=1, goto 215
 209 Column           3    4   61               00 r[61]=
 210 IsNull          61  213    0               00 if r[61]==NULL goto 213
 211 SeekGE          16  213   61 1             00 key=r[61]
 212 Delete          16    0    0               00 
 213 Delete           3    0    0               02 
 214 Next             3  215    0               00 
 215 Goto             0  156    0               00 
 216 Integer        232   60    0               00 r[60]=232
 217 Rewind           2  231    0               00 
 218 IfPos           59  226    1               00 if r[59]>0 then r[59]-=1, goto 226
 219 Column           4    4   61               00 r[61]=
 220 IsNull          61  225    0               00 if r[61]==NULL goto 225
 221 AddImm          48    1    0               00 r[48]=r[48]+1
 222 SCopy           61   47    0               00 r[47]=r[61]
 223 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 224 IdxInsert       16   49    0               00 key=r[49]
 225 Next             4  226    0               00 
 226 Null             0    2    0               00 r[2]=NULL
 227 Last            16  229    0               00 
 228 Column          16    0    2               00 r[2]=
 229 Gosub           50  234    0               00 
 230 Next             1  231    0               00 
 231 ResetSorter      1    0    0               00 
 232 Return          60    0    0               00 
 233 Goto             0  241    0               00 
 234 Noop             0    0    0               00 inner-loop subroutine
 235 Copy             2   64    0               00 r[64]=r[2]
 236 Column           1    0   65               00 r[65]=
 237 Column           1    1   63               00 r[63]=
 238 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 239 SorterInsert    15   66   63 3             00 key=r[66]
 240 Return          50    0    0               00 end inner-loop subroutine
 241 Explain        241    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 242 OpenPseudo      17   67    4               00 4 columns in r[67]
 243 SorterSort      15  249    0               00 
 244 SorterData      15   67   17               00 r[67]=data
 245 Column          17    2   65               00 r[65]=min(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
 246 Column          17    1   64               00 r[64]=max(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 247 ResultRow       64    2    0               00 output=r[64..65]
 248 SorterNext      15  244    0               00 
 249 Halt             0    0    0               00 
 250 Transaction      0    0    5 0             01 usesStmtJournal=0
 251 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  210    0               00 Start at 210
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  129    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  102    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           34  103    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   89   31               00 if r[31]!=r[21] goto 89
  74 Null             0    4    0               00 r[4]=NULL
  75 Integer          3   32    0               00 r[32]=3
  76 Integer          0   36    0               00 r[36]=0
  77 MustBeInt       32   79    0               00 
  78 Ge              36   80   32               00 if r[32]>=r[36] goto 80
  79 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  80 Integer          2   33    0               00 r[33]=2
  81 Integer          0   36    0               00 r[36]=0
  82 MustBeInt       33   84    0               00 
  83 Ge              36   85   33               00 if r[33]>=r[36] goto 85
  84 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  85 Rewind           8    1    0               00 
  86 Rewind           6    1    0               00 
  87 Rewind           9    1    0               00 
  88 Goto             0  101    0               00 
  89 Column           9    6   35               00 r[35]=
  90 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  91 Next             9   92    0               00 
  92 IfPos           33  101    1               00 if r[33]>0 then r[33]-=1, goto 101
  93 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  94 Gosub           22  120    0               00 
  95 Next             6   96    0               00 
  96 IfPos           32  101    1               00 if r[32]>0 then r[32]-=1, goto 101
  97 Column           8    6   35               00 r[35]=
  98 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
  99 Delete           8    0    0               02 
 100 Next             8  101    0               00 
 101 Goto             0   58    0               00 
 102 Integer        118   34    0               00 r[34]=118
 103 Rewind           7  117    0               00 
 104 Column           9    6   35               00 r[35]=
 105 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
 106 Next             9  107    0               00 
 107 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 108 Gosub           22  120    0               00 
 109 Next             6  111    0               00 
 110 Goto             0  117    0               00 
 111 IfPos           32  116    1               00 if r[32]>0 then r[32]-=1, goto 116
 112 Column           8    6   35               00 r[35]=
 113 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 114 Delete           8    0    0               02 
 115 Next             8  116    0               00 
 116 Goto             0  107    0               00 
 117 ResetSorter      6    0    0               00 
 118 Return          34    0    0               00 
 119 Goto             0  128    0               00 
 120 Noop             0    0    0               00 inner-loop subroutine
 121 Copy             5   37    0               00 r[37]=r[5]
 122 Column           6    0   38               00 r[38]=
 123 Column           6    1   39               00 r[39]=
 124 Column           6    2   40               00 r[40]=
 125 Column           6    3   41               00 r[41]=
 126 Yield            3    0    0               00 
 127 Return          22    0    0               00 end inner-loop subroutine
 128 EndCoroutine     3    0    0               00 
 129 SorterOpen      14    4    0 k(1,B)        00 
 130 Null             0   42   42               00 r[42..42]=NULL
 131 Integer          1   43    0               00 r[43]=1
 132 Explain        132    0    0 SCAN SUBQUERY 2 00 
 133 InitCoroutine    3    0    7               00 
 134 Yield            3  182    0               00 next row of subquery_2
 135 Copy            37   45    0               00 r[45]=r[37]
 136 Copy            38   46    0               00 r[46]=r[38]
 137 Copy            39   47    0               00 r[47]=r[39]
 138 Copy            40   48    0               00 r[48]=r[40]
 139 Copy            41   49    0               00 r[49]=r[41]
 140 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 141 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 142 Jump           143  145  143               00 
 143 Gosub           54  183    0               00 call flush_partition
 144 Copy            47   42    0               00 r[42]=r[47]
 145 NewRowid         2   51    0               00 r[51]=rowid
 146 Insert           2   50   51               00 intkey=r[51] data=r[50]
 147 Ne              43  169   51               00 if r[51]!=r[43] goto 169
 148 Null             0    1    0               00 r[1]=NULL
 149 Integer          0   52    0               00 r[52]=0
 150 Integer          0   56    0               00 r[56]=0
 151 MustBeInt       52  153    0               00 
 152 Ge              56  154   52               00 if r[52]>=r[56] goto 154
 153 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 154 Integer          1   53    0               00 r[53]=1
 155 Integer          0   56    0               00 r[56]=0
 156 MustBeInt       53  158    0               00 
 157 Ge              56  159   53               00 if r[53]>=r[56] goto 159
 158 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 159 Le              52  165   53               00 if r[53]<=r[52] goto 165
 160 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 161 Rewind           1    1    0               00 
 162 Gosub           44  194    0               00 
 163 ResetSorter      1    0    0               00 
 164 Goto             0  181    0               00 
 165 Rewind           3    1    0               00 
 166 Rewind           1    1    0               00 
 167 Rewind           4    1    0               00 
 168 Goto             0  181    0               00 
 169 IfPos           53  173    1               00 if r[53]>0 then r[53]-=1, goto 173
 170 Column           4    4   55               00 r[55]=
 171 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 172 Next             4  173    0               00 
 173 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 174 Gosub           44  194    0               00 
 175 Next             1  176    0               00 
 176 IfPos           52  181    1               00 if r[52]>0 then r[52]-=1, goto 181
 177 Column           3    4   55               00 r[55]=
 178 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 179 Delete           3    0    0               02 
 180 Next             3  181    0               00 
 181 Goto             0  134    0               00 
 182 Integer        192   54    0               00 r[54]=192
 183 Rewind           2  191    0               00 
 184 IfPos           53  188    1               00 if r[53]>0 then r[53]-=1, goto 188
 185 Column           4    4   55               00 r[55]=
 186 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 187 Next             4  188    0               00 
 188 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 189 Gosub           44  194    0               00 
 190 Next             1  191    0               00 
 191 ResetSorter      1    0    0               00 
 192 Return          54    0    0               00 
 193 Goto             0  201    0               00 
 194 Noop             0    0    0               00 inner-loop subroutine
 195 Copy             2   58    0               00 r[58]=r[2]
 196 Column           1    0   59               00 r[59]=
 197 Column           1    1   57               00 r[57]=
 198 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 199 SorterInsert    14   60   57 3             00 key=r[60]
 200 Return          44    0    0               00 end inner-loop subroutine
 201 Explain        201    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 202 OpenPseudo      15   61    4               00 4 columns in r[61]
 203 SorterSort      14  209    0               00 
 204 SorterData      14   61   15               00 r[61]=data
 205 Column          15    2   59               00 r[59]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
 206 Column          15    1   58               00 r[58]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 207 ResultRow       58    2    0               00 output=r[58..59]
 208 SorterNext      14  204    0               00 
 209 Halt             0    0    0               00 
 210 Transaction      0    0    5 0             01 usesStmtJournal=0
 211 Goto             0    1    0               00 
SQL: [SELECT max(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
  min(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  225    0               00 Start at 225
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  124    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   29   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   28    7 0             00 
  19 Column          12    1    7               00 r[7]=preceding.x
  20 Column          12    0    8               00 r[8]=preceding.t1
  21 Column          12    1    9               00 r[9]=preceding.x
  22 Column          12    1   10               00 r[10]=preceding.x
  23 Column          12    0   11               00 r[11]=preceding.t1
  24 Column          12    1   12               00 r[12]=preceding.x
  25 Column          12    1   13               00 r[13]=preceding.x
  26 Yield            6    0    0               00 
  27 Next            12   19    0               01 
  28 EndCoroutine     6    0    0               00 
  29 Null             0   14   14               00 r[14..14]=NULL
  30 Integer          1   15    0               00 r[15]=1
  31 OpenEphemeral   13    2    0 k(1,-B)       00 nColumn=2
  32 Integer          0   17    0               00 r[17]=0
  33 Explain         33    7    0 SCAN SUBQUERY 3 00 
  34 InitCoroutine    6    0   14               00 
  35 Yield            6   97    0               00 next row of subquery_3
  36 Copy             7   20    0               00 r[20]=r[7]
  37 Copy             8   21    0               00 r[21]=r[8]
  38 Copy             9   22    0               00 r[22]=r[9]
  39 Copy            10   23    0               00 r[23]=r[10]
  40 Copy            11   24    0               00 r[24]=r[11]
  41 Copy            12   25    0               00 r[25]=r[12]
  42 Copy            13   26    0               00 r[26]=r[13]
  43 MakeRecord      20    7   27               00 r[27]=mkrec(r[20..26])
  44 Compare         24   14    1 k(1,B)        00 r[24] <-> r[14]
  45 Jump            46   48   46               00 
  46 Gosub           31   98    0               00 call flush_partition
  47 Copy            24   14    0               00 r[14]=r[24]
  48 NewRowid         7   28    0               00 r[28]=rowid
  49 Insert           7   27   28               00 intkey=r[28] data=r[27]
  50 Ne              15   76   28               00 if r[28]!=r[15] goto 76
  51 Null             0    4    0               00 r[4]=NULL
  52 ResetSorter     13    0    0               00 
  53 Integer          0   17    0               00 r[17]=0
  54 Integer          1   29    0               00 r[29]=1
  55 Integer          0   33    0               00 r[33]=0
  56 MustBeInt       29   58    0               00 
  57 Ge              33   59   29               00 if r[29]>=r[33] goto 59
  58 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  59 Integer          1   30    0               00 r[30]=1
  60 Integer          0   33    0               00 r[33]=0
  61 MustBeInt       30   63    0               00 
  62 Ge              33   64   30               00 if r[30]>=r[33] goto 64
  63 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  64 Le              29   72   30               00 if r[30]<=r[29] goto 72
  65 Null             0    5    0               00 r[5]=NULL
  66 Last            13   68    0               00 
  67 Column          13    0    5               00 r[5]=
  68 Rewind           6    1    0               00 
  69 Gosub           19  115    0               00 
  70 ResetSorter      6    0    0               00 
  71 Goto             0   96    0               00 
  72 Rewind           8    1    0               00 
  73 Rewind           6    1    0               00 
  74 Rewind           9    1    0               00 
  75 Goto             0   96    0               00 
  76 IfPos           30   84    1               00 if r[30]>0 then r[30]-=1, goto 84
  77 Column           9    6   32               00 r[32]=
  78 IsNull          32   83    0               00 if r[32]==NULL goto 83
  79 AddImm          17    1    0               00 r[17]=r[17]+1
  80 SCopy           32   16    0               00 r[16]=r[32]
  81 MakeRecord      16    2   18               00 r[18]=mkrec(r[16..17])
  82 IdxInsert       13   18    0               00 key=r[18]
  83 Next             9   84    0               00 
  84 Null             0    5    0               00 r[5]=NULL
  85 Last            13   87    0               00 
  86 Column          13    0    5               00 r[5]=
  87 Gosub           19  115    0               00 
  88 Next             6   89    0               00 
  89 IfPos           29   96    1               00 if r[29]>0 then r[29]-=1, goto 96
  90 Column           8    6   32               00 r[32]=
  91 IsNull          32   94    0               00 if r[32]==NULL goto 94
  92 SeekGE          13   94   32 1             00 key=r[32]
  93 Delete          13    0    0               00 
  94 Delete           8    0    0               02 
  95 Next             8   96    0               00 
  96 Goto             0   35    0               00 
  97 Integer        113   31    0               00 r[31]=113
  98 Rewind           7  112    0               00 
  99 IfPos           30  107    1               00 if r[30]>0 then r[30]-=1, goto 107
 100 Column           9    6   32               00 r[32]=
 101 IsNull          32  106    0               00 if r[32]==NULL goto 106
 102 AddImm          17    1    0               00 r[17]=r[17]+1
 103 SCopy           32   16    0               00 r[16]=r[32]
 104 MakeRecord      16    2   18               00 r[18]=mkrec(r[16..17])
 105 IdxInsert       13   18    0               00 key=r[18]
 106 Next             9  107    0               00 
 107 Null             0    5    0               00 r[5]=NULL
 108 Last            13  110    0               00 
 109 Column          13    0    5               00 r[5]=
 110 Gosub           19  115    0               00 
 111 Next             6  112    0               00 
 112 ResetSorter      6    0    0               00 
 113 Return          31    0    0               00 
 114 Goto             0  123    0               00 
 115 Noop             0    0    0               00 inner-loop subroutine
 116 Copy             5   34    0               00 r[34]=r[5]
 117 Column           6    0   35               00 r[35]=
 118 Column           6    1   36               00 r[36]=
 119 Column           6    2   37               00 r[37]=
 120 Column           6    3   38               00 r[38]=
 121 Yield            3    0    0               00 
 122 Return          19    0    0               00 end inner-loop subroutine
 123 EndCoroutine     3    0    0               00 
 124 SorterOpen      14    4    0 k(1,B)        00 
 125 Null             0   39   39               00 r[39..39]=NULL
 126 Integer          1   40    0               00 r[40]=1
 127 OpenEphemeral   15    2    0 k(1,B)        00 nColumn=2
 128 Integer          0   42    0               00 r[42]=0
 129 Explain        129    0    0 SCAN SUBQUERY 2 00 
 130 InitCoroutine    3    0    7               00 
 131 Yield            3  191    0               00 next row of subquery_2
 132 Copy            34   45    0               00 r[45]=r[34]
 133 Copy            35   46    0               00 r[46]=r[35]
 134 Copy            36   47    0               00 r[47]=r[36]
 135 Copy            37   48    0               00 r[48]=r[37]
 136 Copy            38   49    0               00 r[49]=r[38]
 137 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 138 Compare         47   39    1 k(1,B)        00 r[47] <-> r[39]
 139 Jump           140  142  140               00 
 140 Gosub           54  192    0               00 call flush_partition
 141 Copy            47   39    0               00 r[39]=r[47]
 142 NewRowid         2   51    0               00 r[51]=rowid
 143 Insert           2   50   51               00 intkey=r[51] data=r[50]
 144 Ne              40  170   51               00 if r[51]!=r[40] goto 170
 145 Null             0    1    0               00 r[1]=NULL
 146 ResetSorter     15    0    0               00 
 147 Integer          0   42    0               00 r[42]=0
 148 Integer          0   52    0               00 r[52]=0
 149 Integer          0   56    0               00 r[56]=0
 150 MustBeInt       52  152    0               00 
 151 Ge              56  153   52               00 if r[52]>=r[56] goto 153
 152 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 153 Integer          1   53    0               00 r[53]=1
 154 Integer          0   56    0               00 r[56]=0
 155 MustBeInt       53  157    0               00 
 156 Ge              56  158   53               00 if r[53]>=r[56] goto 158
 157 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 158 Le              52  166   53               00 if r[53]<=r[52] goto 166
 159 Null             0    2    0               00 r[2]=NULL
 160 Last            15  162    0               00 
 161 Column          15    0    2               00 r[2]=
 162 Rewind           1    1    0               00 
 163 Gosub           44  209    0               00 
 164 ResetSorter      1    0    0               00 
 165 Goto             0  190    0               00 
 166 Rewind           3    1    0               00 
 167 Rewind           1    1    0               00 
 168 Rewind           4    1    0               00 
 169 Goto             0  190    0               00 
 170 IfPos           53  178    1               00 if r[53]>0 then r[53]-=1, goto 178
 171 Column           4    4   55               00 r[55]=
 172 IsNull          55  177    0               00 if r[55]==NULL goto 177
 173 AddImm          42    1    0               00 r[42]=r[42]+1
 174 SCopy           55   41    0               00 r[41]=r[55]
 175 MakeRecord      41    2   43               00 r[43]=mkrec(r[41..42])
 176 IdxInsert       15   43    0               00 key=r[43]
 177 Next             4  178    0               00 
 178 Null             0    2    0               00 r[2]=NULL
 179 Last            15  181    0               00 
 180 Column          15    0    2               00 r[2]=
 181 Gosub           44  209    0               00 
 182 Next             1  183    0               00 
 183 IfPos           52  190    1               00 if r[52]>0 then r[52]-=1, goto 190
 184 Column           3    4   55               00 r[55]=
 185 IsNull          55  188    0               00 if r[55]==NULL goto 188
 186 SeekGE          15  188   55 1             00 key=r[55]
 187 Delete          15    0    0               00 
 188 Delete           3    0    0               02 
 189 Next             3  190    0               00 
 190 Goto             0  131    0               00 
 191 Integer        207   54    0               00 r[54]=207
 192 Rewind           2  206    0               00 
 193 IfPos           53  201    1               00 if r[53]>0 then r[53]-=1, goto 201
 194 Column           4    4   55               00 r[55]=
 195 IsNull          55  200    0               00 if r[55]==NULL goto 200
 196 AddImm          42    1    0               00 r[42]=r[42]+1
 197 SCopy           55   41    0               00 r[41]=r[55]
 198 MakeRecord      41    2   43               00 r[43]=mkrec(r[41..42])
 199 IdxInsert       15   43    0               00 key=r[43]
 200 Next             4  201    0               00 
 201 Null             0    2    0               00 r[2]=NULL
 202 Last            15  204    0               00 
 203 Column          15    0    2               00 r[2]=
 204 Gosub           44  209    0               00 
 205 Next             1  206    0               00 
 206 ResetSorter      1    0    0               00 
 207 Return          54    0    0               00 
 208 Goto             0  216    0               00 
 209 Noop             0    0    0               00 inner-loop subroutine
 210 Copy             2   58    0               00 r[58]=r[2]
 211 Column           1    0   59               00 r[59]=
 212 Column           1    1   57               00 r[57]=
 213 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 214 SorterInsert    14   60   57 3             00 key=r[60]
 215 Return          44    0    0               00 end inner-loop subroutine
 216 Explain        216    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 217 OpenPseudo      16   61    4               00 4 columns in r[61]
 218 SorterSort      14  224    0               00 
 219 SorterData      14   61   16               00 r[61]=data
 220 Column          16    2   59               00 r[59]=min(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 221 Column          16    1   58               00 r[58]=max(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 222 ResultRow       58    2    0               00 output=r[58..59]
 223 SorterNext      14  219    0               00 
 224 Halt             0    0    0               00 
 225 Transaction      0    0    5 0             01 usesStmtJournal=0
 226 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  210    0               00 Start at 210
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  129    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  108    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           34  109    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   95   31               00 if r[31]!=r[21] goto 95
  74 Null             0    4    0               00 r[4]=NULL
  75 Integer          1   32    0               00 r[32]=1
  76 Integer          0   36    0               00 r[36]=0
  77 MustBeInt       32   79    0               00 
  78 Ge              36   80   32               00 if r[32]>=r[36] goto 80
  79 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  80 Integer          1   33    0               00 r[33]=1
  81 Integer          0   36    0               00 r[36]=0
  82 MustBeInt       33   84    0               00 
  83 Ge              36   85   33               00 if r[33]>=r[36] goto 85
  84 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  85 Le              32   91   33               00 if r[33]<=r[32] goto 91
  86 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  87 Rewind           6    1    0               00 
  88 Gosub           22  120    0               00 
  89 ResetSorter      6    0    0               00 
  90 Goto             0  107    0               00 
  91 Rewind           8    1    0               00 
  92 Rewind           6    1    0               00 
  93 Rewind           9    1    0               00 
  94 Goto             0  107    0               00 
  95 IfPos           33   99    1               00 if r[33]>0 then r[33]-=1, goto 99
  96 Column           9    6   35               00 r[35]=
  97 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  98 Next             9   99    0               00 
  99 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 100 Gosub           22  120    0               00 
 101 Next             6  102    0               00 
 102 IfPos           32  107    1               00 if r[32]>0 then r[32]-=1, goto 107
 103 Column           8    6   35               00 r[35]=
 104 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 105 Delete           8    0    0               02 
 106 Next             8  107    0               00 
 107 Goto             0   58    0               00 
 108 Integer        118   34    0               00 r[34]=118
 109 Rewind           7  117    0               00 
 110 IfPos           33  114    1               00 if r[33]>0 then r[33]-=1, goto 114
 111 Column           9    6   35               00 r[35]=
 112 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
 113 Next             9  114    0               00 
 114 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 115 Gosub           22  120    0               00 
 116 Next             6  117    0               00 
 117 ResetSorter      6    0    0               00 
 118 Return          34    0    0               00 
 119 Goto             0  128    0               00 
 120 Noop             0    0    0               00 inner-loop subroutine
 121 Copy             5   37    0               00 r[37]=r[5]
 122 Column           6    0   38               00 r[38]=
 123 Column           6    1   39               00 r[39]=
 124 Column           6    2   40               00 r[40]=
 125 Column           6    3   41               00 r[41]=
 126 Yield            3    0    0               00 
 127 Return          22    0    0               00 end inner-loop subroutine
 128 EndCoroutine     3    0    0               00 
 129 SorterOpen      14    4    0 k(1,B)        00 
 130 Null             0   42   42               00 r[42..42]=NULL
 131 Integer          1   43    0               00 r[43]=1
 132 Explain        132    0    0 SCAN SUBQUERY 2 00 
 133 InitCoroutine    3    0    7               00 
 134 Yield            3  182    0               00 next row of subquery_2
 135 Copy            37   45    0               00 r[45]=r[37]
 136 Copy            38   46    0               00 r[46]=r[38]
 137 Copy            39   47    0               00 r[47]=r[39]
 138 Copy            40   48    0               00 r[48]=r[40]
 139 Copy            41   49    0               00 r[49]=r[41]
 140 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 141 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 142 Jump           143  145  143               00 
 143 Gosub           54  183    0               00 call flush_partition
 144 Copy            47   42    0               00 r[42]=r[47]
 145 NewRowid         2   51    0               00 r[51]=rowid
 146 Insert           2   50   51               00 intkey=r[51] data=r[50]
 147 Ne              43  169   51               00 if r[51]!=r[43] goto 169
 148 Null             0    1    0               00 r[1]=NULL
 149 Integer          0   52    0               00 r[52]=0
 150 Integer          0   56    0               00 r[56]=0
 151 MustBeInt       52  153    0               00 
 152 Ge              56  154   52               00 if r[52]>=r[56] goto 154
 153 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 154 Integer          1   53    0               00 r[53]=1
 155 Integer          0   56    0               00 r[56]=0
 156 MustBeInt       53  158    0               00 
 157 Ge              56  159   53               00 if r[53]>=r[56] goto 159
 158 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 159 Le              52  165   53               00 if r[53]<=r[52] goto 165
 160 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 161 Rewind           1    1    0               00 
 162 Gosub           44  194    0               00 
 163 ResetSorter      1    0    0               00 
 164 Goto             0  181    0               00 
 165 Rewind           3    1    0               00 
 166 Rewind           1    1    0               00 
 167 Rewind           4    1    0               00 
 168 Goto             0  181    0               00 
 169 IfPos           53  173    1               00 if r[53]>0 then r[53]-=1, goto 173
 170 Column           4    4   55               00 r[55]=
 171 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 172 Next             4  173    0               00 
 173 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 174 Gosub           44  194    0               00 
 175 Next             1  176    0               00 
 176 IfPos           52  181    1               00 if r[52]>0 then r[52]-=1, goto 181
 177 Column           3    4   55               00 r[55]=
 178 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 179 Delete           3    0    0               02 
 180 Next             3  181    0               00 
 181 Goto             0  134    0               00 
 182 Integer        192   54    0               00 r[54]=192
 183 Rewind           2  191    0               00 
 184 IfPos           53  188    1               00 if r[53]>0 then r[53]-=1, goto 188
 185 Column           4    4   55               00 r[55]=
 186 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 187 Next             4  188    0               00 
 188 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 189 Gosub           44  194    0               00 
 190 Next             1  191    0               00 
 191 ResetSorter      1    0    0               00 
 192 Return          54    0    0               00 
 193 Goto             0  201    0               00 
 194 Noop             0    0    0               00 inner-loop subroutine
 195 Copy             2   58    0               00 r[58]=r[2]
 196 Column           1    0   59               00 r[59]=
 197 Column           1    1   57               00 r[57]=
 198 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 199 SorterInsert    14   60   57 3             00 key=r[60]
 200 Return          44    0    0               00 end inner-loop subroutine
 201 Explain        201    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 202 OpenPseudo      15   61    4               00 4 columns in r[61]
 203 SorterSort      14  209    0               00 
 204 SorterData      14   61   15               00 r[61]=data
 205 Column          15    2   59               00 r[59]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
 206 Column          15    1   58               00 r[58]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 207 ResultRow       58    2    0               00 output=r[58..59]
 208 SorterNext      14  204    0               00 
 209 Halt             0    0    0               00 
 210 Transaction      0    0    5 0             01 usesStmtJournal=0
 211 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  135    0               00 Start at 135
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,B)        00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=t0.c0
  14 Column           7    0    9               00 r[9]=t0.c0
  15 Column           7    0   10               00 r[10]=t0.c0
  16 Column           7    0   11               00 r[11]=t0.c0
  17 Column           7    0    6               00 r[6]=t0.c0
  18 Column           7    0    7               00 r[7]=t0.c0
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    0   12               00 r[12]=
  36 Column           8    4   11               00 r[11]=
  37 Column           8    3   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 Explain         47    0    0 SCAN SUBQUERY 2 00 
  48 InitCoroutine    5    0    8               00 
  49 Yield            5  104    0               00 next row of subquery_2
  50 Copy             8   20    0               00 r[20]=r[8]
  51 Copy             9   21    0               00 r[21]=r[9]
  52 Copy            10   22    0               00 r[22]=r[10]
  53 Copy            11   23    0               00 r[23]=r[11]
  54 Copy            12   24    0               00 r[24]=r[12]
  55 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  56 Compare         21   17    1 k(1,B)        00 r[21] <-> r[17]
  57 Jump            58   60   58               00 
  58 Gosub           29  105    0               00 call flush_partition
  59 Copy            21   17    0               00 r[17]=r[21]
  60 NewRowid         2   26    0               00 r[26]=rowid
  61 Insert           2   25   26               00 intkey=r[26] data=r[25]
  62 Ne              18   86   26               00 if r[26]!=r[18] goto 86
  63 Null             0    1    0               00 r[1]=NULL
  64 Null             0    3    0               00 r[3]=NULL
  65 Integer          0   27    0               00 r[27]=0
  66 Integer          0   31    0               00 r[31]=0
  67 MustBeInt       27   69    0               00 
  68 Ge              31   70   27               00 if r[27]>=r[31] goto 70
  69 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  70 Integer          1   28    0               00 r[28]=1
  71 Integer          0   31    0               00 r[31]=0
  72 MustBeInt       28   74    0               00 
  73 Ge              31   75   28               00 if r[28]>=r[31] goto 75
  74 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  75 Le              27   82   28               00 if r[28]<=r[27] goto 82
  76 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  77 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  78 Rewind           1    1    0               00 
  79 Gosub           19  119    0               00 
  80 ResetSorter      1    0    0               00 
  81 Goto             0  103    0               00 
  82 Rewind           3    1    0               00 
  83 Rewind           1    1    0               00 
  84 Rewind           4    1    0               00 
  85 Goto             0  103    0               00 
  86 IfPos           28   92    1               00 if r[28]>0 then r[28]-=1, goto 92
  87 Column           4    3   30               00 r[30]=
  88 AggStep          0   30    1 sum(1)        01 accum=r[1] step(r[30])
  89 Column           4    4   30               00 r[30]=
  90 AggStep          0   30    3 sum(1)        01 accum=r[3] step(r[30])
  91 Next             4   92    0               00 
  92 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  93 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  94 Gosub           19  119    0               00 
  95 Next             1   96    0               00 
  96 IfPos           27  103    1               00 if r[27]>0 then r[27]-=1, goto 103
  97 Column           3    3   30               00 r[30]=
  98 AggInverse       1   30    1 sum(1)        01 accum=r[1] inverse(r[30])
  99 Column           3    4   30               00 r[30]=
 100 AggInverse       1   30    3 sum(1)        01 accum=r[3] inverse(r[30])
 101 Delete           3    0    0               02 
 102 Next             3  103    0               00 
 103 Goto             0   49    0               00 
 104 Integer        117   29    0               00 r[29]=117
 105 Rewind           2  116    0               00 
 106 IfPos           28  112    1               00 if r[28]>0 then r[28]-=1, goto 112
 107 Column           4    3   30               00 r[30]=
 108 AggStep          0   30    1 sum(1)        01 accum=r[1] step(r[30])
 109 Column           4    4   30               00 r[30]=
 110 AggStep          0   30    3 sum(1)        01 accum=r[3] step(r[30])
 111 Next             4  112    0               00 
 112 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 113 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
 114 Gosub           19  119    0               00 
 115 Next             1  116    0               00 
 116 ResetSorter      1    0    0               00 
 117 Return          29    0    0               00 
 118 Goto             0  126    0               00 
 119 Noop             0    0    0               00 inner-loop subroutine
 120 Copy             4   33    0               00 r[33]=r[4]
 121 Copy             2   34    0               00 r[34]=r[2]
 122 Column           1    0   32               00 r[32]=
 123 MakeRecord      32    3   35               00 r[35]=mkrec(r[32..34])
 124 SorterInsert     9   35   32 3             00 key=r[35]
 125 Return          19    0    0               00 end inner-loop subroutine
 126 Explain        126    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 127 OpenPseudo      10   36    4               00 4 columns in r[36]
 128 SorterSort       9  134    0               00 
 129 SorterData       9   36   10               00 r[36]=data
 130 Column          10    2   34               00 r[34]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 131 Column          10    1   33               00 r[33]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 132 ResultRow       33    2    0               00 output=r[33..34]
 133 SorterNext       9  129    0               00 
 134 Halt             0    0    0               00 
 135 Transaction      0    0    5 0             01 usesStmtJournal=0
 136 Goto             0    1    0               00 
SQL: [SELECT max(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
  min(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  269    0               00 Start at 269
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  168    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=preceding.t1
  20 Column          12    0   10               00 r[10]=preceding.t1
  21 Column          12    0   11               00 r[11]=preceding.t1
  22 Column          12    1   12               00 r[12]=preceding.x
  23 Column          12    0   13               00 r[13]=preceding.t1
  24 Column          12    1   14               00 r[14]=preceding.x
  25 Column          12    0    7               00 r[7]=preceding.t1
  26 Column          12    0    8               00 r[8]=preceding.t1
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    6   15               00 r[15]=
  44 Column          13    0   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  123    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           37  124    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21  102   34               00 if r[34]!=r[21] goto 102
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Integer          1   35    0               00 r[35]=1
  80 Integer          0   39    0               00 r[39]=0
  81 MustBeInt       35   83    0               00 
  82 Ge              39   84   35               00 if r[35]>=r[39] goto 84
  83 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  84 Integer        500   36    0               00 r[36]=500
  85 Integer          0   39    0               00 r[39]=0
  86 MustBeInt       36   88    0               00 
  87 Ge              39   89   36               00 if r[36]>=r[39] goto 89
  88 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  89 Ge              35   97   36               00 if r[36]>=r[35] goto 97
  90 Null             0    5    0               00 r[5]=NULL
  91 Last            14   93    0               00 
  92 Column          14    0    5               00 r[5]=
  93 Rewind           6    1    0               00 
  94 Gosub           25  159    0               00 
  95 ResetSorter      6    0    0               00 
  96 Goto             0  122    0               00 
  97 Subtract        35   36   35               00 r[35]=r[36]-r[35]
  98 Rewind           8    1    0               00 
  99 Rewind           6    1    0               00 
 100 Rewind           9    1    0               00 
 101 Goto             0  122    0               00 
 102 Column           9    6   38               00 r[38]=
 103 IsNull          38  108    0               00 if r[38]==NULL goto 108
 104 AddImm          23    1    0               00 r[23]=r[23]+1
 105 SCopy           38   22    0               00 r[22]=r[38]
 106 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 107 IdxInsert       14   24    0               00 key=r[24]
 108 Next             9  109    0               00 
 109 IfPos           36  116    1               00 if r[36]>0 then r[36]-=1, goto 116
 110 Null             0    5    0               00 r[5]=NULL
 111 Last            14  113    0               00 
 112 Column          14    0    5               00 r[5]=
 113 Gosub           25  159    0               00 
 114 Delete           6    0    0               02 
 115 Next             6  116    0               00 
 116 IfPos           35  122    1               00 if r[35]>0 then r[35]-=1, goto 122
 117 Column           8    6   38               00 r[38]=
 118 IsNull          38  121    0               00 if r[38]==NULL goto 121
 119 SeekGE          14  121   38 1             00 key=r[38]
 120 Delete          14    0    0               00 
 121 Next             8  122    0               00 
 122 Goto             0   60    0               00 
 123 Integer        157   37    0               00 r[37]=157
 124 Rewind           7  156    0               00 
 125 Column           9    6   38               00 r[38]=
 126 IsNull          38  131    0               00 if r[38]==NULL goto 131
 127 AddImm          23    1    0               00 r[23]=r[23]+1
 128 SCopy           38   22    0               00 r[22]=r[38]
 129 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 130 IdxInsert       14   24    0               00 key=r[24]
 131 Next             9  132    0               00 
 132 IfPos           36  140    1               00 if r[36]>0 then r[36]-=1, goto 140
 133 Null             0    5    0               00 r[5]=NULL
 134 Last            14  136    0               00 
 135 Column          14    0    5               00 r[5]=
 136 Gosub           25  159    0               00 
 137 Delete           6    0    0               02 
 138 Next             6  140    0               00 
 139 Goto             0  156    0               00 
 140 IfPos           35  147    1               00 if r[35]>0 then r[35]-=1, goto 147
 141 Column           8    6   38               00 r[38]=
 142 IsNull          38  145    0               00 if r[38]==NULL goto 145
 143 SeekGE          14  145   38 1             00 key=r[38]
 144 Delete          14    0    0               00 
 145 Next             8  147    0               00 
 146 Goto             0  148    0               00 
 147 Goto             0  132    0               00 
 148 Null             0    5    0               00 r[5]=NULL
 149 Last            14  151    0               00 
 150 Column          14    0    5               00 r[5]=
 151 Gosub           25  159    0               00 
 152 Delete           6    0    0               02 
 153 Next             6  155    0               00 
 154 Goto             0  156    0               00 
 155 Goto             0  148    0               00 
 156 ResetSorter      6    0    0               00 
 157 Return          37    0    0               00 
 158 Goto             0  167    0               00 
 159 Noop             0    0    0               00 inner-loop subroutine
 160 Copy             5   40    0               00 r[40]=r[5]
 161 Column           6    0   41               00 r[41]=
 162 Column           6    1   42               00 r[42]=
 163 Column           6    2   43               00 r[43]=
 164 Column           6    3   44               00 r[44]=
 165 Yield            3    0    0               00 
 166 Return          25    0    0               00 end inner-loop subroutine
 167 EndCoroutine     3    0    0               00 
 168 SorterOpen      15    4    0 k(1,B)        00 
 169 Null             0   45   45               00 r[45..45]=NULL
 170 Integer          1   46    0               00 r[46]=1
 171 OpenEphemeral   16    2    0 k(1,B)        00 nColumn=2
 172 Integer          0   48    0               00 r[48]=0
 173 Explain        173    0    0 SCAN SUBQUERY 2 00 
 174 InitCoroutine    3    0    7               00 
 175 Yield            3  235    0               00 next row of subquery_2
 176 Copy            40   51    0               00 r[51]=r[40]
 177 Copy            41   52    0               00 r[52]=r[41]
 178 Copy            42   53    0               00 r[53]=r[42]
 179 Copy            43   54    0               00 r[54]=r[43]
 180 Copy            44   55    0               00 r[55]=r[44]
 181 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 182 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 183 Jump           184  186  184               00 
 184 Gosub           60  236    0               00 call flush_partition
 185 Copy            53   45    0               00 r[45]=r[53]
 186 NewRowid         2   57    0               00 r[57]=rowid
 187 Insert           2   56   57               00 intkey=r[57] data=r[56]
 188 Ne              46  214   57               00 if r[57]!=r[46] goto 214
 189 Null             0    1    0               00 r[1]=NULL
 190 ResetSorter     16    0    0               00 
 191 Integer          0   48    0               00 r[48]=0
 192 Integer          0   58    0               00 r[58]=0
 193 Integer          0   62    0               00 r[62]=0
 194 MustBeInt       58  196    0               00 
 195 Ge              62  197   58               00 if r[58]>=r[62] goto 197
 196 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 197 Integer          1   59    0               00 r[59]=1
 198 Integer          0   62    0               00 r[62]=0
 199 MustBeInt       59  201    0               00 
 200 Ge              62  202   59               00 if r[59]>=r[62] goto 202
 201 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 202 Le              58  210   59               00 if r[59]<=r[58] goto 210
 203 Null             0    2    0               00 r[2]=NULL
 204 Last            16  206    0               00 
 205 Column          16    0    2               00 r[2]=
 206 Rewind           1    1    0               00 
 207 Gosub           50  253    0               00 
 208 ResetSorter      1    0    0               00 
 209 Goto             0  234    0               00 
 210 Rewind           3    1    0               00 
 211 Rewind           1    1    0               00 
 212 Rewind           4    1    0               00 
 213 Goto             0  234    0               00 
 214 IfPos           59  222    1               00 if r[59]>0 then r[59]-=1, goto 222
 215 Column           4    4   61               00 r[61]=
 216 IsNull          61  221    0               00 if r[61]==NULL goto 221
 217 AddImm          48    1    0               00 r[48]=r[48]+1
 218 SCopy           61   47    0               00 r[47]=r[61]
 219 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 220 IdxInsert       16   49    0               00 key=r[49]
 221 Next             4  222    0               00 
 222 Null             0    2    0               00 r[2]=NULL
 223 Last            16  225    0               00 
 224 Column          16    0    2               00 r[2]=
 225 Gosub           50  253    0               00 
 226 Next             1  227    0               00 
 227 IfPos           58  234    1               00 if r[58]>0 then r[58]-=1, goto 234
 228 Column           3    4   61               00 r[61]=
 229 IsNull          61  232    0               00 if r[61]==NULL goto 232
 230 SeekGE          16  232   61 1             00 key=r[61]
 231 Delete          16    0    0               00 
 232 Delete           3    0    0               02 
 233 Next             3  234    0               00 
 234 Goto             0  175    0               00 
 235 Integer        251   60    0               00 r[60]=251
 236 Rewind           2  250    0               00 
 237 IfPos           59  245    1               00 if r[59]>0 then r[59]-=1, goto 245
 238 Column           4    4   61               00 r[61]=
 239 IsNull          61  244    0               00 if r[61]==NULL goto 244
 240 AddImm          48    1    0               00 r[48]=r[48]+1
 241 SCopy           61   47    0               00 r[47]=r[61]
 242 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 243 IdxInsert       16   49    0               00 key=r[49]
 244 Next             4  245    0               00 
 245 Null             0    2    0               00 r[2]=NULL
 246 Last            16  248    0               00 
 247 Column          16    0    2               00 r[2]=
 248 Gosub           50  253    0               00 
 249 Next             1  250    0               00 
 250 ResetSorter      1    0    0               00 
 251 Return          60    0    0               00 
 252 Goto             0  260    0               00 
 253 Noop             0    0    0               00 inner-loop subroutine
 254 Copy             2   64    0               00 r[64]=r[2]
 255 Column           1    0   65               00 r[65]=
 256 Column           1    1   63               00 r[63]=
 257 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 258 SorterInsert    15   66   63 3             00 key=r[66]
 259 Return          50    0    0               00 end inner-loop subroutine
 260 Explain        260    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 261 OpenPseudo      17   67    4               00 4 columns in r[67]
 262 SorterSort      15  268    0               00 
 263 SorterData      15   67   17               00 r[67]=data
 264 Column          17    2   65               00 r[65]=min(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
 265 Column          17    1   64               00 r[64]=max(x) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 266 ResultRow       64    2    0               00 output=r[64..65]
 267 SorterNext      15  263    0               00 
 268 Halt             0    0    0               00 
 269 Transaction      0    0    5 0             01 usesStmtJournal=0
 270 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  225    0               00 Start at 225
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  144    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0    7               00 r[7]=t0.c0
  26 Column          12    0    8               00 r[8]=t0.c0
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  109    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           34  110    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   96   31               00 if r[31]!=r[21] goto 96
  74 Null             0    4    0               00 r[4]=NULL
  75 Integer          1   32    0               00 r[32]=1
  76 Integer          0   36    0               00 r[36]=0
  77 MustBeInt       32   79    0               00 
  78 Ge              36   80   32               00 if r[32]>=r[36] goto 80
  79 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  80 Integer        500   33    0               00 r[33]=500
  81 Integer          0   36    0               00 r[36]=0
  82 MustBeInt       33   84    0               00 
  83 Ge              36   85   33               00 if r[33]>=r[36] goto 85
  84 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  85 Ge              32   91   33               00 if r[33]>=r[32] goto 91
  86 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  87 Rewind           6    1    0               00 
  88 Gosub           22  135    0               00 
  89 ResetSorter      6    0    0               00 
  90 Goto             0  108    0               00 
  91 Subtract        32   33   32               00 r[32]=r[33]-r[32]
  92 Rewind           8    1    0               00 
  93 Rewind           6    1    0               00 
  94 Rewind           9    1    0               00 
  95 Goto             0  108    0               00 
  96 Column           9    6   35               00 r[35]=
  97 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  98 Next             9   99    0               00 
  99 IfPos           33  104    1               00 if r[33]>0 then r[33]-=1, goto 104
 100 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 101 Gosub           22  135    0               00 
 102 Delete           6    0    0               02 
 103 Next             6  104    0               00 
 104 IfPos           32  108    1               00 if r[32]>0 then r[32]-=1, goto 108
 105 Column           8    6   35               00 r[35]=
 106 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 107 Next             8  108    0               00 
 108 Goto             0   58    0               00 
 109 Integer        133   34    0               00 r[34]=133
 110 Rewind           7  132    0               00 
 111 Column           9    6   35               00 r[35]=
 112 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
 113 Next             9  114    0               00 
 114 IfPos           33  120    1               00 if r[33]>0 then r[33]-=1, goto 120
 115 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 116 Gosub           22  135    0               00 
 117 Delete           6    0    0               02 
 118 Next             6  120    0               00 
 119 Goto             0  132    0               00 
 120 IfPos           32  125    1               00 if r[32]>0 then r[32]-=1, goto 125
 121 Column           8    6   35               00 r[35]=
 122 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 123 Next             8  125    0               00 
 124 Goto             0  126    0               00 
 125 Goto             0  114    0               00 
 126 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 127 Gosub           22  135    0               00 
 128 Delete           6    0    0               02 
 129 Next             6  131    0               00 
 130 Goto             0  132    0               00 
 131 Goto             0  126    0               00 
 132 ResetSorter      6    0    0               00 
 133 Return          34    0    0               00 
 134 Goto             0  143    0               00 
 135 Noop             0    0    0               00 inner-loop subroutine
 136 Copy             5   37    0               00 r[37]=r[5]
 137 Column           6    0   38               00 r[38]=
 138 Column           6    1   39               00 r[39]=
 139 Column           6    2   40               00 r[40]=
 140 Column           6    3   41               00 r[41]=
 141 Yield            3    0    0               00 
 142 Return          22    0    0               00 end inner-loop subroutine
 143 EndCoroutine     3    0    0               00 
 144 SorterOpen      14    4    0 k(1,B)        00 
 145 Null             0   42   42               00 r[42..42]=NULL
 146 Integer          1   43    0               00 r[43]=1
 147 Explain        147    0    0 SCAN SUBQUERY 2 00 
 148 InitCoroutine    3    0    7               00 
 149 Yield            3  197    0               00 next row of subquery_2
 150 Copy            37   45    0               00 r[45]=r[37]
 151 Copy            38   46    0               00 r[46]=r[38]
 152 Copy            39   47    0               00 r[47]=r[39]
 153 Copy            40   48    0               00 r[48]=r[40]
 154 Copy            41   49    0               00 r[49]=r[41]
 155 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 156 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 157 Jump           158  160  158               00 
 158 Gosub           54  198    0               00 call flush_partition
 159 Copy            47   42    0               00 r[42]=r[47]
 160 NewRowid         2   51    0               00 r[51]=rowid
 161 Insert           2   50   51               00 intkey=r[51] data=r[50]
 162 Ne              43  184   51               00 if r[51]!=r[43] goto 184
 163 Null             0    1    0               00 r[1]=NULL
 164 Integer          0   52    0               00 r[52]=0
 165 Integer          0   56    0               00 r[56]=0
 166 MustBeInt       52  168    0               00 
 167 Ge              56  169   52               00 if r[52]>=r[56] goto 169
 168 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 169 Integer          1   53    0               00 r[53]=1
 170 Integer          0   56    0               00 r[56]=0
 171 MustBeInt       53  173    0               00 
 172 Ge              56  174   53               00 if r[53]>=r[56] goto 174
 173 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 174 Le              52  180   53               00 if r[53]<=r[52] goto 180
 175 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 176 Rewind           1    1    0               00 
 177 Gosub           44  209    0               00 
 178 ResetSorter      1    0    0               00 
 179 Goto             0  196    0               00 
 180 Rewind           3    1    0               00 
 181 Rewind           1    1    0               00 
 182 Rewind           4    1    0               00 
 183 Goto             0  196    0               00 
 184 IfPos           53  188    1               00 if r[53]>0 then r[53]-=1, goto 188
 185 Column           4    4   55               00 r[55]=
 186 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 187 Next             4  188    0               00 
 188 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 189 Gosub           44  209    0               00 
 190 Next             1  191    0               00 
 191 IfPos           52  196    1               00 if r[52]>0 then r[52]-=1, goto 196
 192 Column           3    4   55               00 r[55]=
 193 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 194 Delete           3    0    0               02 
 195 Next             3  196    0               00 
 196 Goto             0  149    0               00 
 197 Integer        207   54    0               00 r[54]=207
 198 Rewind           2  206    0               00 
 199 IfPos           53  203    1               00 if r[53]>0 then r[53]-=1, goto 203
 200 Column           4    4   55               00 r[55]=
 201 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 202 Next             4  203    0               00 
 203 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 204 Gosub           44  209    0               00 
 205 Next             1  206    0               00 
 206 ResetSorter      1    0    0               00 
 207 Return          54    0    0               00 
 208 Goto             0  216    0               00 
 209 Noop             0    0    0               00 inner-loop subroutine
 210 Copy             2   58    0               00 r[58]=r[2]
 211 Column           1    0   59               00 r[59]=
 212 Column           1    1   57               00 r[57]=
 213 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 214 SorterInsert    14   60   57 3             00 key=r[60]
 215 Return          44    0    0               00 end inner-loop subroutine
 216 Explain        216    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 217 OpenPseudo      15   61    4               00 4 columns in r[61]
 218 SorterSort      14  224    0               00 
 219 SorterData      14   61   15               00 r[61]=data
 220 Column          15    2   59               00 r[59]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
 221 Column          15    1   58               00 r[58]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 ROWS BETWEEN 0 PRECEDING AND 1 PRECEDING)
 222 ResultRow       58    2    0               00 output=r[58..59]
 223 SorterNext      14  219    0               00 
 224 Halt             0    0    0               00 
 225 Transaction      0    0    5 0             01 usesStmtJournal=0
 226 Goto             0    1    0               00 
SQL: [SELECT max(over) OVER (PARTITION BY over ORDER BY over ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING), 
  min(over) OVER (PARTITION BY over ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
  FROM v0 ORDER BY over

;]
VDBE Program Listing:
   0 Init             0  269    0               00 Start at 269
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  149    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  17 Explain         17   14    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=v0.over
  20 Column          12    0   10               00 r[10]=v0.over
  21 Column          12    0   11               00 r[11]=v0.over
  22 Column          12    0   12               00 r[12]=v0.over
  23 Column          12    0   13               00 r[13]=v0.over
  24 Column          12    0   14               00 r[14]=v0.over
  25 Column          12    0    7               00 r[7]=v0.over
  26 Column          12    0    8               00 r[8]=v0.over
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 OpenEphemeral   14    2    0 k(1,-B)       00 nColumn=2
  57 Integer          0   23    0               00 r[23]=0
  58 Explain         58    7    0 SCAN SUBQUERY 3 00 
  59 InitCoroutine    6    0   14               00 
  60 Yield            6  114    0               00 next row of subquery_3
  61 Copy             9   26    0               00 r[26]=r[9]
  62 Copy            10   27    0               00 r[27]=r[10]
  63 Copy            11   28    0               00 r[28]=r[11]
  64 Copy            12   29    0               00 r[29]=r[12]
  65 Copy            13   30    0               00 r[30]=r[13]
  66 Copy            14   31    0               00 r[31]=r[14]
  67 Copy            15   32    0               00 r[32]=r[15]
  68 MakeRecord      26    7   33               00 r[33]=mkrec(r[26..32])
  69 Compare         30   20    1 k(1,B)        00 r[30] <-> r[20]
  70 Jump            71   73   71               00 
  71 Gosub           37  115    0               00 call flush_partition
  72 Copy            30   20    0               00 r[20]=r[30]
  73 NewRowid         7   34    0               00 r[34]=rowid
  74 Insert           7   33   34               00 intkey=r[34] data=r[33]
  75 Ne              21   93   34               00 if r[34]!=r[21] goto 93
  76 Null             0    4    0               00 r[4]=NULL
  77 ResetSorter     14    0    0               00 
  78 Integer          0   23    0               00 r[23]=0
  79 Integer          3   35    0               00 r[35]=3
  80 Integer          0   39    0               00 r[39]=0
  81 MustBeInt       35   83    0               00 
  82 Ge              39   84   35               00 if r[35]>=r[39] goto 84
  83 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  84 Integer          1   36    0               00 r[36]=1
  85 Integer          0   39    0               00 r[39]=0
  86 MustBeInt       36   88    0               00 
  87 Ge              39   89   36               00 if r[36]>=r[39] goto 89
  88 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  89 Rewind           8    1    0               00 
  90 Rewind           6    1    0               00 
  91 Rewind           9    1    0               00 
  92 Goto             0  113    0               00 
  93 Column           9    6   38               00 r[38]=
  94 IsNull          38   99    0               00 if r[38]==NULL goto 99
  95 AddImm          23    1    0               00 r[23]=r[23]+1
  96 SCopy           38   22    0               00 r[22]=r[38]
  97 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
  98 IdxInsert       14   24    0               00 key=r[24]
  99 Next             9  100    0               00 
 100 IfPos           36  113    1               00 if r[36]>0 then r[36]-=1, goto 113
 101 Null             0    5    0               00 r[5]=NULL
 102 Last            14  104    0               00 
 103 Column          14    0    5               00 r[5]=
 104 Gosub           25  140    0               00 
 105 Next             6  106    0               00 
 106 IfPos           35  113    1               00 if r[35]>0 then r[35]-=1, goto 113
 107 Column           8    6   38               00 r[38]=
 108 IsNull          38  111    0               00 if r[38]==NULL goto 111
 109 SeekGE          14  111   38 1             00 key=r[38]
 110 Delete          14    0    0               00 
 111 Delete           8    0    0               02 
 112 Next             8  113    0               00 
 113 Goto             0   60    0               00 
 114 Integer        138   37    0               00 r[37]=138
 115 Rewind           7  137    0               00 
 116 Column           9    6   38               00 r[38]=
 117 IsNull          38  122    0               00 if r[38]==NULL goto 122
 118 AddImm          23    1    0               00 r[23]=r[23]+1
 119 SCopy           38   22    0               00 r[22]=r[38]
 120 MakeRecord      22    2   24               00 r[24]=mkrec(r[22..23])
 121 IdxInsert       14   24    0               00 key=r[24]
 122 Next             9  123    0               00 
 123 Null             0    5    0               00 r[5]=NULL
 124 Last            14  126    0               00 
 125 Column          14    0    5               00 r[5]=
 126 Gosub           25  140    0               00 
 127 Next             6  129    0               00 
 128 Goto             0  137    0               00 
 129 IfPos           35  136    1               00 if r[35]>0 then r[35]-=1, goto 136
 130 Column           8    6   38               00 r[38]=
 131 IsNull          38  134    0               00 if r[38]==NULL goto 134
 132 SeekGE          14  134   38 1             00 key=r[38]
 133 Delete          14    0    0               00 
 134 Delete           8    0    0               02 
 135 Next             8  136    0               00 
 136 Goto             0  123    0               00 
 137 ResetSorter      6    0    0               00 
 138 Return          37    0    0               00 
 139 Goto             0  148    0               00 
 140 Noop             0    0    0               00 inner-loop subroutine
 141 Copy             5   40    0               00 r[40]=r[5]
 142 Column           6    0   41               00 r[41]=
 143 Column           6    1   42               00 r[42]=
 144 Column           6    2   43               00 r[43]=
 145 Column           6    3   44               00 r[44]=
 146 Yield            3    0    0               00 
 147 Return          25    0    0               00 end inner-loop subroutine
 148 EndCoroutine     3    0    0               00 
 149 SorterOpen      15    4    0 k(1,B)        00 
 150 Null             0   45   45               00 r[45..45]=NULL
 151 Integer          1   46    0               00 r[46]=1
 152 OpenEphemeral   16    2    0 k(1,B)        00 nColumn=2
 153 Integer          0   48    0               00 r[48]=0
 154 Explain        154    0    0 SCAN SUBQUERY 2 00 
 155 InitCoroutine    3    0    7               00 
 156 Yield            3  217    0               00 next row of subquery_2
 157 Copy            40   51    0               00 r[51]=r[40]
 158 Copy            41   52    0               00 r[52]=r[41]
 159 Copy            42   53    0               00 r[53]=r[42]
 160 Copy            43   54    0               00 r[54]=r[43]
 161 Copy            44   55    0               00 r[55]=r[44]
 162 MakeRecord      51    5   56               00 r[56]=mkrec(r[51..55])
 163 Compare         53   45    1 k(1,B)        00 r[53] <-> r[45]
 164 Jump           165  167  165               00 
 165 Gosub           60  218    0               00 call flush_partition
 166 Copy            53   45    0               00 r[45]=r[53]
 167 NewRowid         2   57    0               00 r[57]=rowid
 168 Insert           2   56   57               00 intkey=r[57] data=r[56]
 169 Ne              46  196   57               00 if r[57]!=r[46] goto 196
 170 Null             0    1    0               00 r[1]=NULL
 171 ResetSorter     16    0    0               00 
 172 Integer          0   48    0               00 r[48]=0
 173 Integer          1   58    0               00 r[58]=1
 174 Integer          0   62    0               00 r[62]=0
 175 MustBeInt       58  177    0               00 
 176 Ge              62  178   58               00 if r[58]>=r[62] goto 178
 177 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 178 Integer        500   59    0               00 r[59]=500
 179 Integer          0   62    0               00 r[62]=0
 180 MustBeInt       59  182    0               00 
 181 Ge              62  183   59               00 if r[59]>=r[62] goto 183
 182 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 183 Ge              58  191   59               00 if r[59]>=r[58] goto 191
 184 Null             0    2    0               00 r[2]=NULL
 185 Last            16  187    0               00 
 186 Column          16    0    2               00 r[2]=
 187 Rewind           1    1    0               00 
 188 Gosub           50  253    0               00 
 189 ResetSorter      1    0    0               00 
 190 Goto             0  216    0               00 
 191 Subtract        58   59   58               00 r[58]=r[59]-r[58]
 192 Rewind           3    1    0               00 
 193 Rewind           1    1    0               00 
 194 Rewind           4    1    0               00 
 195 Goto             0  216    0               00 
 196 Column           4    4   61               00 r[61]=
 197 IsNull          61  202    0               00 if r[61]==NULL goto 202
 198 AddImm          48    1    0               00 r[48]=r[48]+1
 199 SCopy           61   47    0               00 r[47]=r[61]
 200 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 201 IdxInsert       16   49    0               00 key=r[49]
 202 Next             4  203    0               00 
 203 IfPos           59  210    1               00 if r[59]>0 then r[59]-=1, goto 210
 204 Null             0    2    0               00 r[2]=NULL
 205 Last            16  207    0               00 
 206 Column          16    0    2               00 r[2]=
 207 Gosub           50  253    0               00 
 208 Delete           1    0    0               02 
 209 Next             1  210    0               00 
 210 IfPos           58  216    1               00 if r[58]>0 then r[58]-=1, goto 216
 211 Column           3    4   61               00 r[61]=
 212 IsNull          61  215    0               00 if r[61]==NULL goto 215
 213 SeekGE          16  215   61 1             00 key=r[61]
 214 Delete          16    0    0               00 
 215 Next             3  216    0               00 
 216 Goto             0  156    0               00 
 217 Integer        251   60    0               00 r[60]=251
 218 Rewind           2  250    0               00 
 219 Column           4    4   61               00 r[61]=
 220 IsNull          61  225    0               00 if r[61]==NULL goto 225
 221 AddImm          48    1    0               00 r[48]=r[48]+1
 222 SCopy           61   47    0               00 r[47]=r[61]
 223 MakeRecord      47    2   49               00 r[49]=mkrec(r[47..48])
 224 IdxInsert       16   49    0               00 key=r[49]
 225 Next             4  226    0               00 
 226 IfPos           59  234    1               00 if r[59]>0 then r[59]-=1, goto 234
 227 Null             0    2    0               00 r[2]=NULL
 228 Last            16  230    0               00 
 229 Column          16    0    2               00 r[2]=
 230 Gosub           50  253    0               00 
 231 Delete           1    0    0               02 
 232 Next             1  234    0               00 
 233 Goto             0  250    0               00 
 234 IfPos           58  241    1               00 if r[58]>0 then r[58]-=1, goto 241
 235 Column           3    4   61               00 r[61]=
 236 IsNull          61  239    0               00 if r[61]==NULL goto 239
 237 SeekGE          16  239   61 1             00 key=r[61]
 238 Delete          16    0    0               00 
 239 Next             3  241    0               00 
 240 Goto             0  242    0               00 
 241 Goto             0  226    0               00 
 242 Null             0    2    0               00 r[2]=NULL
 243 Last            16  245    0               00 
 244 Column          16    0    2               00 r[2]=
 245 Gosub           50  253    0               00 
 246 Delete           1    0    0               02 
 247 Next             1  249    0               00 
 248 Goto             0  250    0               00 
 249 Goto             0  242    0               00 
 250 ResetSorter      1    0    0               00 
 251 Return          60    0    0               00 
 252 Goto             0  260    0               00 
 253 Noop             0    0    0               00 inner-loop subroutine
 254 Copy             2   64    0               00 r[64]=r[2]
 255 Column           1    0   65               00 r[65]=
 256 Column           1    1   63               00 r[63]=
 257 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 258 SorterInsert    15   66   63 3             00 key=r[66]
 259 Return          50    0    0               00 end inner-loop subroutine
 260 Explain        260    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 261 OpenPseudo      17   67    4               00 4 columns in r[67]
 262 SorterSort      15  268    0               00 
 263 SorterData      15   67   17               00 r[67]=data
 264 Column          17    2   65               00 r[65]=min(over) OVER (PARTITION BY over ORDER BY over ROWS BETWEEN 3 PRECEDING AND 1 FOLLOWING)
 265 Column          17    1   64               00 r[64]=max(over) OVER (PARTITION BY over ORDER BY over ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
 266 ResultRow       64    2    0               00 output=r[64..65]
 267 SorterNext      15  263    0               00 
 268 Halt             0    0    0               00 
 269 Transaction      0    0    5 0             01 usesStmtJournal=0
 270 Goto             0    1    0               00 
SQL: [SELECT max(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING), 
  min(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  244    0               00 Start at 244
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  124    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   29   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   28    7 0             00 
  19 Column          12    1    7               00 r[7]=preceding.x
  20 Column          12    0    8               00 r[8]=preceding.t1
  21 Column          12    1    9               00 r[9]=preceding.x
  22 Column          12    1   10               00 r[10]=preceding.x
  23 Column          12    0   11               00 r[11]=preceding.t1
  24 Column          12    1   12               00 r[12]=preceding.x
  25 Column          12    1   13               00 r[13]=preceding.x
  26 Yield            6    0    0               00 
  27 Next            12   19    0               01 
  28 EndCoroutine     6    0    0               00 
  29 Null             0   14   14               00 r[14..14]=NULL
  30 Integer          1   15    0               00 r[15]=1
  31 OpenEphemeral   13    2    0 k(1,-B)       00 nColumn=2
  32 Integer          0   17    0               00 r[17]=0
  33 Explain         33    7    0 SCAN SUBQUERY 3 00 
  34 InitCoroutine    6    0   14               00 
  35 Yield            6   89    0               00 next row of subquery_3
  36 Copy             7   20    0               00 r[20]=r[7]
  37 Copy             8   21    0               00 r[21]=r[8]
  38 Copy             9   22    0               00 r[22]=r[9]
  39 Copy            10   23    0               00 r[23]=r[10]
  40 Copy            11   24    0               00 r[24]=r[11]
  41 Copy            12   25    0               00 r[25]=r[12]
  42 Copy            13   26    0               00 r[26]=r[13]
  43 MakeRecord      20    7   27               00 r[27]=mkrec(r[20..26])
  44 Compare         24   14    1 k(1,B)        00 r[24] <-> r[14]
  45 Jump            46   48   46               00 
  46 Gosub           31   90    0               00 call flush_partition
  47 Copy            24   14    0               00 r[14]=r[24]
  48 NewRowid         7   28    0               00 r[28]=rowid
  49 Insert           7   27   28               00 intkey=r[28] data=r[27]
  50 Ne              15   68   28               00 if r[28]!=r[15] goto 68
  51 Null             0    4    0               00 r[4]=NULL
  52 ResetSorter     13    0    0               00 
  53 Integer          0   17    0               00 r[17]=0
  54 Integer          3   29    0               00 r[29]=3
  55 Integer          0   33    0               00 r[33]=0
  56 MustBeInt       29   58    0               00 
  57 Ge              33   59   29               00 if r[29]>=r[33] goto 59
  58 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  59 Integer          2   30    0               00 r[30]=2
  60 Integer          0   33    0               00 r[33]=0
  61 MustBeInt       30   63    0               00 
  62 Ge              33   64   30               00 if r[30]>=r[33] goto 64
  63 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  64 Rewind           8    1    0               00 
  65 Rewind           6    1    0               00 
  66 Rewind           9    1    0               00 
  67 Goto             0   88    0               00 
  68 Column           9    6   32               00 r[32]=
  69 IsNull          32   74    0               00 if r[32]==NULL goto 74
  70 AddImm          17    1    0               00 r[17]=r[17]+1
  71 SCopy           32   16    0               00 r[16]=r[32]
  72 MakeRecord      16    2   18               00 r[18]=mkrec(r[16..17])
  73 IdxInsert       13   18    0               00 key=r[18]
  74 Next             9   75    0               00 
  75 IfPos           30   88    1               00 if r[30]>0 then r[30]-=1, goto 88
  76 Null             0    5    0               00 r[5]=NULL
  77 Last            13   79    0               00 
  78 Column          13    0    5               00 r[5]=
  79 Gosub           19  115    0               00 
  80 Next             6   81    0               00 
  81 IfPos           29   88    1               00 if r[29]>0 then r[29]-=1, goto 88
  82 Column           8    6   32               00 r[32]=
  83 IsNull          32   86    0               00 if r[32]==NULL goto 86
  84 SeekGE          13   86   32 1             00 key=r[32]
  85 Delete          13    0    0               00 
  86 Delete           8    0    0               02 
  87 Next             8   88    0               00 
  88 Goto             0   35    0               00 
  89 Integer        113   31    0               00 r[31]=113
  90 Rewind           7  112    0               00 
  91 Column           9    6   32               00 r[32]=
  92 IsNull          32   97    0               00 if r[32]==NULL goto 97
  93 AddImm          17    1    0               00 r[17]=r[17]+1
  94 SCopy           32   16    0               00 r[16]=r[32]
  95 MakeRecord      16    2   18               00 r[18]=mkrec(r[16..17])
  96 IdxInsert       13   18    0               00 key=r[18]
  97 Next             9   98    0               00 
  98 Null             0    5    0               00 r[5]=NULL
  99 Last            13  101    0               00 
 100 Column          13    0    5               00 r[5]=
 101 Gosub           19  115    0               00 
 102 Next             6  104    0               00 
 103 Goto             0  112    0               00 
 104 IfPos           29  111    1               00 if r[29]>0 then r[29]-=1, goto 111
 105 Column           8    6   32               00 r[32]=
 106 IsNull          32  109    0               00 if r[32]==NULL goto 109
 107 SeekGE          13  109   32 1             00 key=r[32]
 108 Delete          13    0    0               00 
 109 Delete           8    0    0               02 
 110 Next             8  111    0               00 
 111 Goto             0   98    0               00 
 112 ResetSorter      6    0    0               00 
 113 Return          31    0    0               00 
 114 Goto             0  123    0               00 
 115 Noop             0    0    0               00 inner-loop subroutine
 116 Copy             5   34    0               00 r[34]=r[5]
 117 Column           6    0   35               00 r[35]=
 118 Column           6    1   36               00 r[36]=
 119 Column           6    2   37               00 r[37]=
 120 Column           6    3   38               00 r[38]=
 121 Yield            3    0    0               00 
 122 Return          19    0    0               00 end inner-loop subroutine
 123 EndCoroutine     3    0    0               00 
 124 SorterOpen      14    4    0 k(1,B)        00 
 125 Null             0   39   39               00 r[39..39]=NULL
 126 Integer          1   40    0               00 r[40]=1
 127 OpenEphemeral   15    2    0 k(1,B)        00 nColumn=2
 128 Integer          0   42    0               00 r[42]=0
 129 Explain        129    0    0 SCAN SUBQUERY 2 00 
 130 InitCoroutine    3    0    7               00 
 131 Yield            3  192    0               00 next row of subquery_2
 132 Copy            34   45    0               00 r[45]=r[34]
 133 Copy            35   46    0               00 r[46]=r[35]
 134 Copy            36   47    0               00 r[47]=r[36]
 135 Copy            37   48    0               00 r[48]=r[37]
 136 Copy            38   49    0               00 r[49]=r[38]
 137 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 138 Compare         47   39    1 k(1,B)        00 r[47] <-> r[39]
 139 Jump           140  142  140               00 
 140 Gosub           54  193    0               00 call flush_partition
 141 Copy            47   39    0               00 r[39]=r[47]
 142 NewRowid         2   51    0               00 r[51]=rowid
 143 Insert           2   50   51               00 intkey=r[51] data=r[50]
 144 Ne              40  171   51               00 if r[51]!=r[40] goto 171
 145 Null             0    1    0               00 r[1]=NULL
 146 ResetSorter     15    0    0               00 
 147 Integer          0   42    0               00 r[42]=0
 148 Integer          1   52    0               00 r[52]=1
 149 Integer          0   56    0               00 r[56]=0
 150 MustBeInt       52  152    0               00 
 151 Ge              56  153   52               00 if r[52]>=r[56] goto 153
 152 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 153 Integer        500   53    0               00 r[53]=500
 154 Integer          0   56    0               00 r[56]=0
 155 MustBeInt       53  157    0               00 
 156 Ge              56  158   53               00 if r[53]>=r[56] goto 158
 157 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 158 Ge              52  166   53               00 if r[53]>=r[52] goto 166
 159 Null             0    2    0               00 r[2]=NULL
 160 Last            15  162    0               00 
 161 Column          15    0    2               00 r[2]=
 162 Rewind           1    1    0               00 
 163 Gosub           44  228    0               00 
 164 ResetSorter      1    0    0               00 
 165 Goto             0  191    0               00 
 166 Subtract        52   53   52               00 r[52]=r[53]-r[52]
 167 Rewind           3    1    0               00 
 168 Rewind           1    1    0               00 
 169 Rewind           4    1    0               00 
 170 Goto             0  191    0               00 
 171 Column           4    4   55               00 r[55]=
 172 IsNull          55  177    0               00 if r[55]==NULL goto 177
 173 AddImm          42    1    0               00 r[42]=r[42]+1
 174 SCopy           55   41    0               00 r[41]=r[55]
 175 MakeRecord      41    2   43               00 r[43]=mkrec(r[41..42])
 176 IdxInsert       15   43    0               00 key=r[43]
 177 Next             4  178    0               00 
 178 IfPos           53  185    1               00 if r[53]>0 then r[53]-=1, goto 185
 179 Null             0    2    0               00 r[2]=NULL
 180 Last            15  182    0               00 
 181 Column          15    0    2               00 r[2]=
 182 Gosub           44  228    0               00 
 183 Delete           1    0    0               02 
 184 Next             1  185    0               00 
 185 IfPos           52  191    1               00 if r[52]>0 then r[52]-=1, goto 191
 186 Column           3    4   55               00 r[55]=
 187 IsNull          55  190    0               00 if r[55]==NULL goto 190
 188 SeekGE          15  190   55 1             00 key=r[55]
 189 Delete          15    0    0               00 
 190 Next             3  191    0               00 
 191 Goto             0  131    0               00 
 192 Integer        226   54    0               00 r[54]=226
 193 Rewind           2  225    0               00 
 194 Column           4    4   55               00 r[55]=
 195 IsNull          55  200    0               00 if r[55]==NULL goto 200
 196 AddImm          42    1    0               00 r[42]=r[42]+1
 197 SCopy           55   41    0               00 r[41]=r[55]
 198 MakeRecord      41    2   43               00 r[43]=mkrec(r[41..42])
 199 IdxInsert       15   43    0               00 key=r[43]
 200 Next             4  201    0               00 
 201 IfPos           53  209    1               00 if r[53]>0 then r[53]-=1, goto 209
 202 Null             0    2    0               00 r[2]=NULL
 203 Last            15  205    0               00 
 204 Column          15    0    2               00 r[2]=
 205 Gosub           44  228    0               00 
 206 Delete           1    0    0               02 
 207 Next             1  209    0               00 
 208 Goto             0  225    0               00 
 209 IfPos           52  216    1               00 if r[52]>0 then r[52]-=1, goto 216
 210 Column           3    4   55               00 r[55]=
 211 IsNull          55  214    0               00 if r[55]==NULL goto 214
 212 SeekGE          15  214   55 1             00 key=r[55]
 213 Delete          15    0    0               00 
 214 Next             3  216    0               00 
 215 Goto             0  217    0               00 
 216 Goto             0  201    0               00 
 217 Null             0    2    0               00 r[2]=NULL
 218 Last            15  220    0               00 
 219 Column          15    0    2               00 r[2]=
 220 Gosub           44  228    0               00 
 221 Delete           1    0    0               02 
 222 Next             1  224    0               00 
 223 Goto             0  225    0               00 
 224 Goto             0  217    0               00 
 225 ResetSorter      1    0    0               00 
 226 Return          54    0    0               00 
 227 Goto             0  235    0               00 
 228 Noop             0    0    0               00 inner-loop subroutine
 229 Copy             2   58    0               00 r[58]=r[2]
 230 Column           1    0   59               00 r[59]=
 231 Column           1    1   57               00 r[57]=
 232 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 233 SorterInsert    14   60   57 3             00 key=r[60]
 234 Return          44    0    0               00 end inner-loop subroutine
 235 Explain        235    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 236 OpenPseudo      16   61    4               00 4 columns in r[61]
 237 SorterSort      14  243    0               00 
 238 SorterData      14   61   16               00 r[61]=data
 239 Column          16    2   59               00 r[59]=min(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
 240 Column          16    1   58               00 r[58]=max(x) OVER (PARTITION BY t1 ORDER BY x ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
 241 ResultRow       58    2    0               00 output=r[58..59]
 242 SorterNext      14  238    0               00 
 243 Halt             0    0    0               00 
 244 Transaction      0    0    5 0             01 usesStmtJournal=0
 245 Goto             0    1    0               00 
SQL: [SELECT sum(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING), 
         sum(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  225    0               00 Start at 225
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  129    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   54   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    7    0 k(1,B)        00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   36    7 0             00 
  19 Column          12    0    9               00 r[9]=preceding.t1
  20 Column          12    0   10               00 r[10]=preceding.t1
  21 Column          12    0   11               00 r[11]=preceding.t1
  22 Column          12    0   12               00 r[12]=preceding.t1
  23 Column          12    0   13               00 r[13]=preceding.t1
  24 Column          12    0   14               00 r[14]=preceding.t1
  25 Column          12    0    7               00 r[7]=preceding.t1
  26 Column          12    0    8               00 r[8]=preceding.t1
  27 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  28 SequenceTest    11   33    0               00 if( cursor[11].ctr++ ) pc = 33
  29 Compare         17    7    1 k(2,B,B)      00 r[17] <-> r[7]
  30 Jump            31   34   31               00 
  31 Gosub           18   39    0               00 
  32 ResetSorter     11    0    0               00 
  33 Move             7   17    1               00 r[17]=r[7]
  34 SorterInsert    11   16    8 7             00 key=r[16]
  35 Next            12   19    0               01 
  36 Explain         36   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  37 Gosub           18   39    0               00 
  38 Goto             0   53    0               00 
  39 Once             0   41    0               00 
  40 OpenPseudo      13   19    9               00 9 columns in r[19]
  41 SorterSort      11   53    0               00 
  42 SorterData      11   19   13               00 r[19]=data
  43 Column          13    0   15               00 r[15]=
  44 Column          13    6   14               00 r[14]=
  45 Column          13    5   13               00 r[13]=
  46 Column          13    4   12               00 r[12]=
  47 Column          13    3   11               00 r[11]=
  48 Column          13    2   10               00 r[10]=
  49 Column          13    1    9               00 r[9]=
  50 Yield            6    0    0               00 
  51 SorterNext      11   42    0               00 
  52 Return          18    0    0               00 
  53 EndCoroutine     6    0    0               00 
  54 Null             0   20   20               00 r[20..20]=NULL
  55 Integer          1   21    0               00 r[21]=1
  56 Explain         56    7    0 SCAN SUBQUERY 3 00 
  57 InitCoroutine    6    0   14               00 
  58 Yield            6  102    0               00 next row of subquery_3
  59 Copy             9   23    0               00 r[23]=r[9]
  60 Copy            10   24    0               00 r[24]=r[10]
  61 Copy            11   25    0               00 r[25]=r[11]
  62 Copy            12   26    0               00 r[26]=r[12]
  63 Copy            13   27    0               00 r[27]=r[13]
  64 Copy            14   28    0               00 r[28]=r[14]
  65 Copy            15   29    0               00 r[29]=r[15]
  66 MakeRecord      23    7   30               00 r[30]=mkrec(r[23..29])
  67 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  68 Jump            69   71   69               00 
  69 Gosub           34  103    0               00 call flush_partition
  70 Copy            27   20    0               00 r[20]=r[27]
  71 NewRowid         7   31    0               00 r[31]=rowid
  72 Insert           7   30   31               00 intkey=r[31] data=r[30]
  73 Ne              21   89   31               00 if r[31]!=r[21] goto 89
  74 Null             0    4    0               00 r[4]=NULL
  75 Integer          3   32    0               00 r[32]=3
  76 Integer          0   36    0               00 r[36]=0
  77 MustBeInt       32   79    0               00 
  78 Ge              36   80   32               00 if r[32]>=r[36] goto 80
  79 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  80 Integer          2   33    0               00 r[33]=2
  81 Integer          0   36    0               00 r[36]=0
  82 MustBeInt       33   84    0               00 
  83 Ge              36   85   33               00 if r[33]>=r[36] goto 85
  84 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  85 Rewind           8    1    0               00 
  86 Rewind           6    1    0               00 
  87 Rewind           9    1    0               00 
  88 Goto             0  101    0               00 
  89 Column           9    6   35               00 r[35]=
  90 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  91 Next             9   92    0               00 
  92 IfPos           33  101    1               00 if r[33]>0 then r[33]-=1, goto 101
  93 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  94 Gosub           22  120    0               00 
  95 Next             6   96    0               00 
  96 IfPos           32  101    1               00 if r[32]>0 then r[32]-=1, goto 101
  97 Column           8    6   35               00 r[35]=
  98 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
  99 Delete           8    0    0               02 
 100 Next             8  101    0               00 
 101 Goto             0   58    0               00 
 102 Integer        118   34    0               00 r[34]=118
 103 Rewind           7  117    0               00 
 104 Column           9    6   35               00 r[35]=
 105 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
 106 Next             9  107    0               00 
 107 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 108 Gosub           22  120    0               00 
 109 Next             6  111    0               00 
 110 Goto             0  117    0               00 
 111 IfPos           32  116    1               00 if r[32]>0 then r[32]-=1, goto 116
 112 Column           8    6   35               00 r[35]=
 113 AggInverse       1   35    4 sum(1)        01 accum=r[4] inverse(r[35])
 114 Delete           8    0    0               02 
 115 Next             8  116    0               00 
 116 Goto             0  107    0               00 
 117 ResetSorter      6    0    0               00 
 118 Return          34    0    0               00 
 119 Goto             0  128    0               00 
 120 Noop             0    0    0               00 inner-loop subroutine
 121 Copy             5   37    0               00 r[37]=r[5]
 122 Column           6    0   38               00 r[38]=
 123 Column           6    1   39               00 r[39]=
 124 Column           6    2   40               00 r[40]=
 125 Column           6    3   41               00 r[41]=
 126 Yield            3    0    0               00 
 127 Return          22    0    0               00 end inner-loop subroutine
 128 EndCoroutine     3    0    0               00 
 129 SorterOpen      14    4    0 k(1,B)        00 
 130 Null             0   42   42               00 r[42..42]=NULL
 131 Integer          1   43    0               00 r[43]=1
 132 Explain        132    0    0 SCAN SUBQUERY 2 00 
 133 InitCoroutine    3    0    7               00 
 134 Yield            3  183    0               00 next row of subquery_2
 135 Copy            37   45    0               00 r[45]=r[37]
 136 Copy            38   46    0               00 r[46]=r[38]
 137 Copy            39   47    0               00 r[47]=r[39]
 138 Copy            40   48    0               00 r[48]=r[40]
 139 Copy            41   49    0               00 r[49]=r[41]
 140 MakeRecord      45    5   50               00 r[50]=mkrec(r[45..49])
 141 Compare         47   42    1 k(1,B)        00 r[47] <-> r[42]
 142 Jump           143  145  143               00 
 143 Gosub           54  184    0               00 call flush_partition
 144 Copy            47   42    0               00 r[42]=r[47]
 145 NewRowid         2   51    0               00 r[51]=rowid
 146 Insert           2   50   51               00 intkey=r[51] data=r[50]
 147 Ne              43  170   51               00 if r[51]!=r[43] goto 170
 148 Null             0    1    0               00 r[1]=NULL
 149 Integer          1   52    0               00 r[52]=1
 150 Integer          0   56    0               00 r[56]=0
 151 MustBeInt       52  153    0               00 
 152 Ge              56  154   52               00 if r[52]>=r[56] goto 154
 153 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 154 Integer        500   53    0               00 r[53]=500
 155 Integer          0   56    0               00 r[56]=0
 156 MustBeInt       53  158    0               00 
 157 Ge              56  159   53               00 if r[53]>=r[56] goto 159
 158 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 159 Ge              52  165   53               00 if r[53]>=r[52] goto 165
 160 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 161 Rewind           1    1    0               00 
 162 Gosub           44  209    0               00 
 163 ResetSorter      1    0    0               00 
 164 Goto             0  182    0               00 
 165 Subtract        52   53   52               00 r[52]=r[53]-r[52]
 166 Rewind           3    1    0               00 
 167 Rewind           1    1    0               00 
 168 Rewind           4    1    0               00 
 169 Goto             0  182    0               00 
 170 Column           4    4   55               00 r[55]=
 171 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 172 Next             4  173    0               00 
 173 IfPos           53  178    1               00 if r[53]>0 then r[53]-=1, goto 178
 174 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 175 Gosub           44  209    0               00 
 176 Delete           1    0    0               02 
 177 Next             1  178    0               00 
 178 IfPos           52  182    1               00 if r[52]>0 then r[52]-=1, goto 182
 179 Column           3    4   55               00 r[55]=
 180 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 181 Next             3  182    0               00 
 182 Goto             0  134    0               00 
 183 Integer        207   54    0               00 r[54]=207
 184 Rewind           2  206    0               00 
 185 Column           4    4   55               00 r[55]=
 186 AggStep          0   55    1 sum(1)        01 accum=r[1] step(r[55])
 187 Next             4  188    0               00 
 188 IfPos           53  194    1               00 if r[53]>0 then r[53]-=1, goto 194
 189 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 190 Gosub           44  209    0               00 
 191 Delete           1    0    0               02 
 192 Next             1  194    0               00 
 193 Goto             0  206    0               00 
 194 IfPos           52  199    1               00 if r[52]>0 then r[52]-=1, goto 199
 195 Column           3    4   55               00 r[55]=
 196 AggInverse       1   55    1 sum(1)        01 accum=r[1] inverse(r[55])
 197 Next             3  199    0               00 
 198 Goto             0  200    0               00 
 199 Goto             0  188    0               00 
 200 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 201 Gosub           44  209    0               00 
 202 Delete           1    0    0               02 
 203 Next             1  205    0               00 
 204 Goto             0  206    0               00 
 205 Goto             0  200    0               00 
 206 ResetSorter      1    0    0               00 
 207 Return          54    0    0               00 
 208 Goto             0  216    0               00 
 209 Noop             0    0    0               00 inner-loop subroutine
 210 Copy             2   58    0               00 r[58]=r[2]
 211 Column           1    0   59               00 r[59]=
 212 Column           1    1   57               00 r[57]=
 213 MakeRecord      57    3   60               00 r[60]=mkrec(r[57..59])
 214 SorterInsert    14   60   57 3             00 key=r[60]
 215 Return          44    0    0               00 end inner-loop subroutine
 216 Explain        216    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 217 OpenPseudo      15   61    4               00 4 columns in r[61]
 218 SorterSort      14  224    0               00 
 219 SorterData      14   61   15               00 r[61]=data
 220 Column          15    2   59               00 r[59]=sum(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING)
 221 Column          15    1   58               00 r[58]=sum(t1) OVER (PARTITION BY t1 ORDER BY t1 ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING)
 222 ResultRow       58    2    0               00 output=r[58..59]
 223 SorterNext      14  219    0               00 
 224 Halt             0    0    0               00 
 225 Transaction      0    0    5 0             01 usesStmtJournal=0
 226 Goto             0    1    0               00 
SQL: [SELECT sum(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 FOLLOWING AND 500 FOLLOWING), 
         sum(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  215    0               00 Start at 215
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  119    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   44   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   30    0               00 
  19 Column           0    1    9               00 r[9]=v0.following
  20 Column           0    1   10               00 r[10]=v0.following
  21 Column           0    1   11               00 r[11]=v0.following
  22 Column           0    0   12               00 r[12]=v0.over
  23 Column           0    1   13               00 r[13]=v0.following
  24 Column           0    0   14               00 r[14]=v0.over
  25 Column           0    1    7               00 r[7]=v0.following
  26 Column           0    1    8               00 r[8]=v0.following
  27 MakeRecord       7    8   16               00 r[16]=mkrec(r[7..14])
  28 SorterInsert    11   16    7 8             00 key=r[16]
  29 Next             0   19    0               01 
  30 Explain         30   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  31 OpenPseudo      12   17   10               00 10 columns in r[17]
  32 SorterSort      11   43    0               00 
  33 SorterData      11   17   12               00 r[17]=data
  34 Column          12    7   15               00 r[15]=
  35 Column          12    1   14               00 r[14]=
  36 Column          12    6   13               00 r[13]=
  37 Column          12    5   12               00 r[12]=
  38 Column          12    4   11               00 r[11]=
  39 Column          12    3   10               00 r[10]=
  40 Column          12    2    9               00 r[9]=
  41 Yield            6    0    0               00 
  42 SorterNext      11   33    0               00 
  43 EndCoroutine     6    0    0               00 
  44 Null             0   18   18               00 r[18..18]=NULL
  45 Integer          1   19    0               00 r[19]=1
  46 Explain         46    7    0 SCAN SUBQUERY 3 00 
  47 InitCoroutine    6    0   14               00 
  48 Yield            6   98    0               00 next row of subquery_3
  49 Copy             9   21    0               00 r[21]=r[9]
  50 Copy            10   22    0               00 r[22]=r[10]
  51 Copy            11   23    0               00 r[23]=r[11]
  52 Copy            12   24    0               00 r[24]=r[12]
  53 Copy            13   25    0               00 r[25]=r[13]
  54 Copy            14   26    0               00 r[26]=r[14]
  55 Copy            15   27    0               00 r[27]=r[15]
  56 MakeRecord      21    7   28               00 r[28]=mkrec(r[21..27])
  57 Compare         25   18    1 k(1,B)        00 r[25] <-> r[18]
  58 Jump            59   61   59               00 
  59 Gosub           32   99    0               00 call flush_partition
  60 Copy            25   18    0               00 r[18]=r[25]
  61 NewRowid         7   29    0               00 r[29]=rowid
  62 Insert           7   28   29               00 intkey=r[29] data=r[28]
  63 Ne              19   85   29               00 if r[29]!=r[19] goto 85
  64 Null             0    4    0               00 r[4]=NULL
  65 Integer          1   30    0               00 r[30]=1
  66 Integer          0   34    0               00 r[34]=0
  67 MustBeInt       30   69    0               00 
  68 Ge              34   70   30               00 if r[30]>=r[34] goto 70
  69 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
  70 Integer          1   31    0               00 r[31]=1
  71 Integer          0   34    0               00 r[34]=0
  72 MustBeInt       31   74    0               00 
  73 Ge              34   75   31               00 if r[31]>=r[34] goto 75
  74 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
  75 Le              30   81   31               00 if r[31]<=r[30] goto 81
  76 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  77 Rewind           6    1    0               00 
  78 Gosub           20  110    0               00 
  79 ResetSorter      6    0    0               00 
  80 Goto             0   97    0               00 
  81 Rewind           8    1    0               00 
  82 Rewind           6    1    0               00 
  83 Rewind           9    1    0               00 
  84 Goto             0   97    0               00 
  85 IfPos           31   89    1               00 if r[31]>0 then r[31]-=1, goto 89
  86 Column           9    6   33               00 r[33]=
  87 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
  88 Next             9   89    0               00 
  89 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  90 Gosub           20  110    0               00 
  91 Next             6   92    0               00 
  92 IfPos           30   97    1               00 if r[30]>0 then r[30]-=1, goto 97
  93 Column           8    6   33               00 r[33]=
  94 AggInverse       1   33    4 sum(1)        01 accum=r[4] inverse(r[33])
  95 Delete           8    0    0               02 
  96 Next             8   97    0               00 
  97 Goto             0   48    0               00 
  98 Integer        108   32    0               00 r[32]=108
  99 Rewind           7  107    0               00 
 100 IfPos           31  104    1               00 if r[31]>0 then r[31]-=1, goto 104
 101 Column           9    6   33               00 r[33]=
 102 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
 103 Next             9  104    0               00 
 104 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 105 Gosub           20  110    0               00 
 106 Next             6  107    0               00 
 107 ResetSorter      6    0    0               00 
 108 Return          32    0    0               00 
 109 Goto             0  118    0               00 
 110 Noop             0    0    0               00 inner-loop subroutine
 111 Copy             5   35    0               00 r[35]=r[5]
 112 Column           6    0   36               00 r[36]=
 113 Column           6    1   37               00 r[37]=
 114 Column           6    2   38               00 r[38]=
 115 Column           6    3   39               00 r[39]=
 116 Yield            3    0    0               00 
 117 Return          20    0    0               00 end inner-loop subroutine
 118 EndCoroutine     3    0    0               00 
 119 SorterOpen      13    4    0 k(1,B)        00 
 120 Null             0   40   40               00 r[40..40]=NULL
 121 Integer          1   41    0               00 r[41]=1
 122 Explain        122    0    0 SCAN SUBQUERY 2 00 
 123 InitCoroutine    3    0    7               00 
 124 Yield            3  173    0               00 next row of subquery_2
 125 Copy            35   43    0               00 r[43]=r[35]
 126 Copy            36   44    0               00 r[44]=r[36]
 127 Copy            37   45    0               00 r[45]=r[37]
 128 Copy            38   46    0               00 r[46]=r[38]
 129 Copy            39   47    0               00 r[47]=r[39]
 130 MakeRecord      43    5   48               00 r[48]=mkrec(r[43..47])
 131 Compare         45   40    1 k(1,B)        00 r[45] <-> r[40]
 132 Jump           133  135  133               00 
 133 Gosub           52  174    0               00 call flush_partition
 134 Copy            45   40    0               00 r[40]=r[45]
 135 NewRowid         2   49    0               00 r[49]=rowid
 136 Insert           2   48   49               00 intkey=r[49] data=r[48]
 137 Ne              41  160   49               00 if r[49]!=r[41] goto 160
 138 Null             0    1    0               00 r[1]=NULL
 139 Integer          1   50    0               00 r[50]=1
 140 Integer          0   54    0               00 r[54]=0
 141 MustBeInt       50  143    0               00 
 142 Ge              54  144   50               00 if r[50]>=r[54] goto 144
 143 Halt             1    2    0 frame starting offset must be a non-negative integer 00 
 144 Integer        500   51    0               00 r[51]=500
 145 Integer          0   54    0               00 r[54]=0
 146 MustBeInt       51  148    0               00 
 147 Ge              54  149   51               00 if r[51]>=r[54] goto 149
 148 Halt             1    2    0 frame ending offset must be a non-negative integer 00 
 149 Ge              50  155   51               00 if r[51]>=r[50] goto 155
 150 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 151 Rewind           1    1    0               00 
 152 Gosub           42  199    0               00 
 153 ResetSorter      1    0    0               00 
 154 Goto             0  172    0               00 
 155 Subtract        50   51   50               00 r[50]=r[51]-r[50]
 156 Rewind           3    1    0               00 
 157 Rewind           1    1    0               00 
 158 Rewind           4    1    0               00 
 159 Goto             0  172    0               00 
 160 Column           4    4   53               00 r[53]=
 161 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 162 Next             4  163    0               00 
 163 IfPos           51  168    1               00 if r[51]>0 then r[51]-=1, goto 168
 164 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 165 Gosub           42  199    0               00 
 166 Delete           1    0    0               02 
 167 Next             1  168    0               00 
 168 IfPos           50  172    1               00 if r[50]>0 then r[50]-=1, goto 172
 169 Column           3    4   53               00 r[53]=
 170 AggInverse       1   53    1 sum(1)        01 accum=r[1] inverse(r[53])
 171 Next             3  172    0               00 
 172 Goto             0  124    0               00 
 173 Integer        197   52    0               00 r[52]=197
 174 Rewind           2  196    0               00 
 175 Column           4    4   53               00 r[53]=
 176 AggStep          0   53    1 sum(1)        01 accum=r[1] step(r[53])
 177 Next             4  178    0               00 
 178 IfPos           51  184    1               00 if r[51]>0 then r[51]-=1, goto 184
 179 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 180 Gosub           42  199    0               00 
 181 Delete           1    0    0               02 
 182 Next             1  184    0               00 
 183 Goto             0  196    0               00 
 184 IfPos           50  189    1               00 if r[50]>0 then r[50]-=1, goto 189
 185 Column           3    4   53               00 r[53]=
 186 AggInverse       1   53    1 sum(1)        01 accum=r[1] inverse(r[53])
 187 Next             3  189    0               00 
 188 Goto             0  190    0               00 
 189 Goto             0  178    0               00 
 190 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 191 Gosub           42  199    0               00 
 192 Delete           1    0    0               02 
 193 Next             1  195    0               00 
 194 Goto             0  196    0               00 
 195 Goto             0  190    0               00 
 196 ResetSorter      1    0    0               00 
 197 Return          52    0    0               00 
 198 Goto             0  206    0               00 
 199 Noop             0    0    0               00 inner-loop subroutine
 200 Copy             2   56    0               00 r[56]=r[2]
 201 Column           1    0   57               00 r[57]=
 202 Column           1    1   55               00 r[55]=
 203 MakeRecord      55    3   58               00 r[58]=mkrec(r[55..57])
 204 SorterInsert    13   58   55 3             00 key=r[58]
 205 Return          42    0    0               00 end inner-loop subroutine
 206 Explain        206    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 207 OpenPseudo      14   59    4               00 4 columns in r[59]
 208 SorterSort      13  214    0               00 
 209 SorterData      13   59   14               00 r[59]=data
 210 Column          14    2   57               00 r[57]=sum(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 PRECEDING AND 1 PREC
 211 Column          14    1   56               00 r[56]=sum(over) OVER (PARTITION BY following ORDER BY following ROWS BETWEEN 1 FOLLOWING AND 500 FO
 212 ResultRow       56    2    0               00 output=r[56..57]
 213 SorterNext      13  209    0               00 
 214 Halt             0    0    0               00 
 215 Transaction      0    0    5 0             01 usesStmtJournal=0
 216 Goto             0    1    0               00 
SQL: [SELECT max(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  132    0               00 Start at 132
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   34    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    8    0 k(2,B,B)      00 
  10 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  11 Explain         11    8    0 SCAN TABLE v0 00 
  12 Rewind           0   22    0               00 
  13 Column           0    1    8               00 r[8]=v0.following
  14 Column           0    1    9               00 r[9]=v0.following
  15 Column           0    1   10               00 r[10]=v0.following
  16 Column           0    1   11               00 r[11]=v0.following
  17 Column           0    1    6               00 r[6]=v0.following
  18 Column           0    1    7               00 r[7]=v0.following
  19 MakeRecord       6    6   13               00 r[13]=mkrec(r[6..11])
  20 SorterInsert     6   13    6 6             00 key=r[13]
  21 Next             0   13    0               01 
  22 Explain         22    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  23 OpenPseudo       7   14    8               00 8 columns in r[14]
  24 SorterSort       6   33    0               00 
  25 SorterData       6   14    7               00 r[14]=data
  26 Column           7    1   12               00 r[12]=
  27 Column           7    5   11               00 r[11]=
  28 Column           7    4   10               00 r[10]=
  29 Column           7    3    9               00 r[9]=
  30 Column           7    2    8               00 r[8]=
  31 Yield            5    0    0               00 
  32 SorterNext       6   25    0               00 
  33 EndCoroutine     5    0    0               00 
  34 SorterOpen       8    4    0 k(1,B)        00 
  35 Null             0   15   15               00 r[15..15]=NULL
  36 Integer          1   16    0               00 r[16]=1
  37 Explain         37    0    0 SCAN SUBQUERY 2 00 
  38 InitCoroutine    5    0    8               00 
  39 Yield            5   88    0               00 next row of subquery_2
  40 Copy             8   18    0               00 r[18]=r[8]
  41 Copy             9   19    0               00 r[19]=r[9]
  42 Copy            10   20    0               00 r[20]=r[10]
  43 Copy            11   21    0               00 r[21]=r[11]
  44 Copy            12   22    0               00 r[22]=r[12]
  45 MakeRecord      18    5   23               00 r[23]=mkrec(r[18..22])
  46 Compare         19   15    1 k(1,B)        00 r[19] <-> r[15]
  47 Jump            48   50   48               00 
  48 Gosub           29   89    0               00 call flush_partition
  49 Copy            19   15    0               00 r[15]=r[19]
  50 NewRowid         2   24    0               00 r[24]=rowid
  51 Insert           2   23   24               00 intkey=r[24] data=r[23]
  52 Ne              16   62   24               00 if r[24]!=r[16] goto 62
  53 Null             0    1    0               00 r[1]=NULL
  54 Null             0    3    0               00 r[3]=NULL
  55 Rewind           1    1    0               00 
  56 Rewind           4    1    0               00 
  57 Copy            20   25    0               00 r[25]=r[20]
  58 Copy            25   26    0               00 r[26]=r[25]
  59 Copy            25   27    0               00 r[27]=r[25]
  60 Copy            25   28    0               00 r[28]=r[25]
  61 Goto             0   87    0               00 
  62 Compare         25   20    1 k(1,B)        00 r[25] <-> r[20]
  63 Jump            64   87   64               00 
  64 Copy            20   25    0               00 r[25]=r[20]
  65 Column           4    3   30               00 r[30]=
  66 CollSeq          0    0    0 (BINARY)      00 
  67 AggStep          0   30    1 min(1)        01 accum=r[1] step(r[30])
  68 Column           4    4   30               00 r[30]=
  69 CollSeq          0    0    0 (BINARY)      00 
  70 AggStep          0   30    3 max(1)        01 accum=r[3] step(r[30])
  71 Next             4   73    0               00 
  72 Goto             0   77    0               00 
  73 Column           4    2   31               00 r[31]=
  74 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
  75 Jump            76   65   76               00 
  76 Copy            31   28    0               00 r[28]=r[31]
  77 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  78 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  79 Gosub           17  116    0               00 
  80 Delete           1    0    0               02 
  81 Next             1   83    0               00 
  82 Goto             0   87    0               00 
  83 Column           1    2   31               00 r[31]=
  84 Compare         27   31    1 k(1,B)        00 r[27] <-> r[31]
  85 Jump            86   79   86               00 
  86 Copy            31   27    0               00 r[27]=r[31]
  87 Goto             0   39    0               00 
  88 Integer        114   29    0               00 r[29]=114
  89 Rewind           2  113    0               00 
  90 Column           4    3   30               00 r[30]=
  91 CollSeq          0    0    0 (BINARY)      00 
  92 AggStep          0   30    1 min(1)        01 accum=r[1] step(r[30])
  93 Column           4    4   30               00 r[30]=
  94 CollSeq          0    0    0 (BINARY)      00 
  95 AggStep          0   30    3 max(1)        01 accum=r[3] step(r[30])
  96 Next             4   98    0               00 
  97 Goto             0  102    0               00 
  98 Column           4    2   31               00 r[31]=
  99 Compare         28   31    1 k(1,B)        00 r[28] <-> r[31]
 100 Jump           101   90  101               00 
 101 Copy            31   28    0               00 r[28]=r[31]
 102 AggValue         1    1    2 min(1)        00 r[2]=value N=1
 103 AggValue         3    1    4 max(1)        00 r[4]=value N=1
 104 Gosub           17  116    0               00 
 105 Delete           1    0    0               02 
 106 Next             1  108    0               00 
 107 Goto             0  113    0               00 
 108 Column           1    2   31               00 r[31]=
 109 Compare         27   31    1 k(1,B)        00 r[27] <-> r[31]
 110 Jump           111  104  111               00 
 111 Copy            31   27    0               00 r[27]=r[31]
 112 Goto             0  102    0               00 
 113 ResetSorter      1    0    0               00 
 114 Return          29    0    0               00 
 115 Goto             0  123    0               00 
 116 Noop             0    0    0               00 inner-loop subroutine
 117 Copy             4   33    0               00 r[33]=r[4]
 118 Copy             2   34    0               00 r[34]=r[2]
 119 Column           1    0   32               00 r[32]=
 120 MakeRecord      32    3   35               00 r[35]=mkrec(r[32..34])
 121 SorterInsert     8   35   32 3             00 key=r[35]
 122 Return          17    0    0               00 end inner-loop subroutine
 123 Explain        123    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 124 OpenPseudo       9   36    4               00 4 columns in r[36]
 125 SorterSort       8  131    0               00 
 126 SorterData       8   36    9               00 r[36]=data
 127 Column           9    2   34               00 r[34]=min(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECED
 128 Column           9    1   33               00 r[33]=max(following) OVER (PARTITION BY following ORDER BY following RANGE BETWEEN UNBOUNDED PRECED
 129 ResultRow       33    2    0               00 output=r[33..34]
 130 SorterNext       8  126    0               00 
 131 Halt             0    0    0               00 
 132 Transaction      0    0    5 0             01 usesStmtJournal=0
 133 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  138    0               00 Start at 138
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,B)        00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=t0.c0
  14 Column           7    0    9               00 r[9]=t0.c0
  15 Column           7    0   10               00 r[10]=t0.c0
  16 Column           7    0   11               00 r[11]=t0.c0
  17 Column           7    0    6               00 r[6]=t0.c0
  18 Column           7    0    7               00 r[7]=t0.c0
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    0   12               00 r[12]=
  36 Column           8    4   11               00 r[11]=
  37 Column           8    3   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 Explain         47    0    0 SCAN SUBQUERY 2 00 
  48 InitCoroutine    5    0    8               00 
  49 Yield            5   96    0               00 next row of subquery_2
  50 Copy             8   20    0               00 r[20]=r[8]
  51 Copy             9   21    0               00 r[21]=r[9]
  52 Copy            10   22    0               00 r[22]=r[10]
  53 Copy            11   23    0               00 r[23]=r[11]
  54 Copy            12   24    0               00 r[24]=r[12]
  55 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  56 Compare         21   17    1 k(1,B)        00 r[21] <-> r[17]
  57 Jump            58   60   58               00 
  58 Gosub           31   97    0               00 call flush_partition
  59 Copy            21   17    0               00 r[17]=r[21]
  60 NewRowid         2   26    0               00 r[26]=rowid
  61 Insert           2   25   26               00 intkey=r[26] data=r[25]
  62 Ne              18   72   26               00 if r[26]!=r[18] goto 72
  63 Null             0    1    0               00 r[1]=NULL
  64 Null             0    3    0               00 r[3]=NULL
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Copy            22   27    0               00 r[27]=r[22]
  68 Copy            27   28    0               00 r[28]=r[27]
  69 Copy            27   29    0               00 r[29]=r[27]
  70 Copy            27   30    0               00 r[30]=r[27]
  71 Goto             0   95    0               00 
  72 Compare         27   22    1 k(1,B)        00 r[27] <-> r[22]
  73 Jump            74   95   74               00 
  74 Copy            22   27    0               00 r[27]=r[22]
  75 Column           4    3   32               00 r[32]=
  76 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
  77 Column           4    4   32               00 r[32]=
  78 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
  79 Next             4   81    0               00 
  80 Goto             0   85    0               00 
  81 Column           4    2   33               00 r[33]=
  82 Compare         30   33    1 k(1,B)        00 r[30] <-> r[33]
  83 Jump            84   75   84               00 
  84 Copy            33   30    0               00 r[30]=r[33]
  85 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  86 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  87 Gosub           19  122    0               00 
  88 Delete           1    0    0               02 
  89 Next             1   91    0               00 
  90 Goto             0   95    0               00 
  91 Column           1    2   33               00 r[33]=
  92 Compare         29   33    1 k(1,B)        00 r[29] <-> r[33]
  93 Jump            94   87   94               00 
  94 Copy            33   29    0               00 r[29]=r[33]
  95 Goto             0   49    0               00 
  96 Integer        120   31    0               00 r[31]=120
  97 Rewind           2  119    0               00 
  98 Column           4    3   32               00 r[32]=
  99 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
 100 Column           4    4   32               00 r[32]=
 101 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
 102 Next             4  104    0               00 
 103 Goto             0  108    0               00 
 104 Column           4    2   33               00 r[33]=
 105 Compare         30   33    1 k(1,B)        00 r[30] <-> r[33]
 106 Jump           107   98  107               00 
 107 Copy            33   30    0               00 r[30]=r[33]
 108 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 109 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
 110 Gosub           19  122    0               00 
 111 Delete           1    0    0               02 
 112 Next             1  114    0               00 
 113 Goto             0  119    0               00 
 114 Column           1    2   33               00 r[33]=
 115 Compare         29   33    1 k(1,B)        00 r[29] <-> r[33]
 116 Jump           117  110  117               00 
 117 Copy            33   29    0               00 r[29]=r[33]
 118 Goto             0  108    0               00 
 119 ResetSorter      1    0    0               00 
 120 Return          31    0    0               00 
 121 Goto             0  129    0               00 
 122 Noop             0    0    0               00 inner-loop subroutine
 123 Copy             4   35    0               00 r[35]=r[4]
 124 Copy             2   36    0               00 r[36]=r[2]
 125 Column           1    0   34               00 r[34]=
 126 MakeRecord      34    3   37               00 r[37]=mkrec(r[34..36])
 127 SorterInsert     9   37   34 3             00 key=r[37]
 128 Return          19    0    0               00 end inner-loop subroutine
 129 Explain        129    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 130 OpenPseudo      10   38    4               00 4 columns in r[38]
 131 SorterSort       9  137    0               00 
 132 SorterData       9   38   10               00 r[38]=data
 133 Column          10    2   36               00 r[36]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 134 Column          10    1   35               00 r[35]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 135 ResultRow       35    2    0               00 output=r[35..36]
 136 SorterNext       9  132    0               00 
 137 Halt             0    0    0               00 
 138 Transaction      0    0    5 0             01 usesStmtJournal=0
 139 Goto             0    1    0               00 
SQL: [SELECT max(x) OVER (PARTITION BY t1 ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(x) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  246    0               00 Start at 246
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  157    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    9    0               00 nColumn=9
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   58   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    9    0 k(1,-B)       00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   38    7 0             00 
  19 Column          12    0    9               00 r[9]=preceding.t1
  20 Column          12    0   10               00 r[10]=preceding.t1
  21 Column          12    0   11               00 r[11]=preceding.t1
  22 Column          12    1   12               00 r[12]=preceding.x
  23 Column          12    0   13               00 r[13]=preceding.t1
  24 Column          12    0   14               00 r[14]=preceding.t1
  25 Column          12    0   15               00 r[15]=preceding.t1
  26 Column          12    1   16               00 r[16]=preceding.x
  27 Column          12    0    7               00 r[7]=preceding.t1
  28 Column          12    0    8               00 r[8]=preceding.t1
  29 MakeRecord       8    9   18               00 r[18]=mkrec(r[8..16])
  30 SequenceTest    11   35    0               00 if( cursor[11].ctr++ ) pc = 35
  31 Compare         19    7    1 k(2,B,B)      00 r[19] <-> r[7]
  32 Jump            33   36   33               00 
  33 Gosub           20   41    0               00 
  34 ResetSorter     11    0    0               00 
  35 Move             7   19    1               00 r[19]=r[7]
  36 SorterInsert    11   18    8 9             00 key=r[18]
  37 Next            12   19    0               01 
  38 Explain         38   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  39 Gosub           20   41    0               00 
  40 Goto             0   57    0               00 
  41 Once             0   43    0               00 
  42 OpenPseudo      13   21   11               00 11 columns in r[21]
  43 SorterSort      11   57    0               00 
  44 SorterData      11   21   13               00 r[21]=data
  45 Column          13    8   17               00 r[17]=
  46 Column          13    0   16               00 r[16]=
  47 Column          13    7   15               00 r[15]=
  48 Column          13    6   14               00 r[14]=
  49 Column          13    5   13               00 r[13]=
  50 Column          13    4   12               00 r[12]=
  51 Column          13    3   11               00 r[11]=
  52 Column          13    2   10               00 r[10]=
  53 Column          13    1    9               00 r[9]=
  54 Yield            6    0    0               00 
  55 SorterNext      11   44    0               00 
  56 Return          20    0    0               00 
  57 EndCoroutine     6    0    0               00 
  58 SorterOpen      14    8    0 k(2,B,B)      00 
  59 Null             0   22   22               00 r[22..22]=NULL
  60 Integer          1   23    0               00 r[23]=1
  61 Explain         61    7    0 SCAN SUBQUERY 3 00 
  62 InitCoroutine    6    0   14               00 
  63 Yield            6  111    0               00 next row of subquery_3
  64 Copy             9   25    0               00 r[25]=r[9]
  65 Copy            10   26    0               00 r[26]=r[10]
  66 Copy            11   27    0               00 r[27]=r[11]
  67 Copy            12   28    0               00 r[28]=r[12]
  68 Copy            13   29    0               00 r[29]=r[13]
  69 Copy            14   30    0               00 r[30]=r[14]
  70 Copy            15   31    0               00 r[31]=r[15]
  71 Copy            16   32    0               00 r[32]=r[16]
  72 Copy            17   33    0               00 r[33]=r[17]
  73 MakeRecord      25    9   34               00 r[34]=mkrec(r[25..33])
  74 Compare         31   22    1 k(1,B)        00 r[31] <-> r[22]
  75 Jump            76   78   76               00 
  76 Gosub           40  112    0               00 call flush_partition
  77 Copy            31   22    0               00 r[22]=r[31]
  78 NewRowid         7   35    0               00 r[35]=rowid
  79 Insert           7   34   35               00 intkey=r[35] data=r[34]
  80 Ne              23   89   35               00 if r[35]!=r[23] goto 89
  81 Null             0    4    0               00 r[4]=NULL
  82 Rewind           6    1    0               00 
  83 Rewind           9    1    0               00 
  84 Copy            32   36    0               00 r[36]=r[32]
  85 Copy            36   37    0               00 r[37]=r[36]
  86 Copy            36   38    0               00 r[38]=r[36]
  87 Copy            36   39    0               00 r[39]=r[36]
  88 Goto             0  110    0               00 
  89 Compare         36   32    1 k(1,-B)       00 r[36] <-> r[32]
  90 Jump            91  110   91               00 
  91 Copy            32   36    0               00 r[36]=r[32]
  92 Column           9    8   41               00 r[41]=
  93 CollSeq          0    0    0 (BINARY)      00 
  94 AggStep          0   41    4 min(1)        01 accum=r[4] step(r[41])
  95 Next             9   97    0               00 
  96 Goto             0  101    0               00 
  97 Column           9    7   42               00 r[42]=
  98 Compare         39   42    1 k(1,-B)       00 r[39] <-> r[42]
  99 Jump           100   92  100               00 
 100 Copy            42   39    0               00 r[39]=r[42]
 101 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 102 Gosub           24  135    0               00 
 103 Delete           6    0    0               02 
 104 Next             6  106    0               00 
 105 Goto             0  110    0               00 
 106 Column           6    7   42               00 r[42]=
 107 Compare         38   42    1 k(1,-B)       00 r[38] <-> r[42]
 108 Jump           109  102  109               00 
 109 Copy            42   38    0               00 r[38]=r[42]
 110 Goto             0   63    0               00 
 111 Integer        133   40    0               00 r[40]=133
 112 Rewind           7  132    0               00 
 113 Column           9    8   41               00 r[41]=
 114 CollSeq          0    0    0 (BINARY)      00 
 115 AggStep          0   41    4 min(1)        01 accum=r[4] step(r[41])
 116 Next             9  118    0               00 
 117 Goto             0  122    0               00 
 118 Column           9    7   42               00 r[42]=
 119 Compare         39   42    1 k(1,-B)       00 r[39] <-> r[42]
 120 Jump           121  113  121               00 
 121 Copy            42   39    0               00 r[39]=r[42]
 122 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 123 Gosub           24  135    0               00 
 124 Delete           6    0    0               02 
 125 Next             6  127    0               00 
 126 Goto             0  132    0               00 
 127 Column           6    7   42               00 r[42]=
 128 Compare         38   42    1 k(1,-B)       00 r[38] <-> r[42]
 129 Jump           130  123  130               00 
 130 Copy            42   38    0               00 r[38]=r[42]
 131 Goto             0  122    0               00 
 132 ResetSorter      6    0    0               00 
 133 Return          40    0    0               00 
 134 Goto             0  145    0               00 
 135 Noop             0    0    0               00 inner-loop subroutine
 136 Copy             5   45    0               00 r[45]=r[5]
 137 Column           6    0   46               00 r[46]=
 138 Column           6    1   47               00 r[47]=
 139 Column           6    3   48               00 r[48]=
 140 Column           6    4   43               00 r[43]=
 141 Column           6    5   44               00 r[44]=
 142 MakeRecord      43    6   50               00 r[50]=mkrec(r[43..48])
 143 SorterInsert    14   50   43 6             00 key=r[50]
 144 Return          24    0    0               00 end inner-loop subroutine
 145 Explain        145    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 146 OpenPseudo      15   51    8               00 8 columns in r[51]
 147 SorterSort      14  156    0               00 
 148 SorterData      14   51   15               00 r[51]=data
 149 Column          15    5   49               00 r[49]=
 150 Column          15    1   48               00 r[48]=
 151 Column          15    4   47               00 r[47]=
 152 Column          15    3   46               00 r[46]=
 153 Column          15    2   45               00 r[45]=
 154 Yield            3    0    0               00 
 155 SorterNext      14  148    0               00 
 156 EndCoroutine     3    0    0               00 
 157 SorterOpen      16    4    0 k(1,B)        00 
 158 Null             0   52   52               00 r[52..52]=NULL
 159 Integer          1   53    0               00 r[53]=1
 160 Explain        160    0    0 SCAN SUBQUERY 2 00 
 161 InitCoroutine    3    0    7               00 
 162 Yield            3  206    0               00 next row of subquery_2
 163 Copy            45   55    0               00 r[55]=r[45]
 164 Copy            46   56    0               00 r[56]=r[46]
 165 Copy            47   57    0               00 r[57]=r[47]
 166 Copy            48   58    0               00 r[58]=r[48]
 167 Copy            49   59    0               00 r[59]=r[49]
 168 MakeRecord      55    5   60               00 r[60]=mkrec(r[55..59])
 169 Compare         57   52    1 k(1,B)        00 r[57] <-> r[52]
 170 Jump           171  173  171               00 
 171 Gosub           66  207    0               00 call flush_partition
 172 Copy            57   52    0               00 r[52]=r[57]
 173 NewRowid         2   61    0               00 r[61]=rowid
 174 Insert           2   60   61               00 intkey=r[61] data=r[60]
 175 Ne              53  184   61               00 if r[61]!=r[53] goto 184
 176 Null             0    1    0               00 r[1]=NULL
 177 Rewind           1    1    0               00 
 178 Rewind           4    1    0               00 
 179 Copy            58   62    0               00 r[62]=r[58]
 180 Copy            62   63    0               00 r[63]=r[62]
 181 Copy            62   64    0               00 r[64]=r[62]
 182 Copy            62   65    0               00 r[65]=r[62]
 183 Goto             0  205    0               00 
 184 Compare         62   58    1 k(1,B)        00 r[62] <-> r[58]
 185 Jump           186  205  186               00 
 186 Copy            58   62    0               00 r[62]=r[58]
 187 Column           4    4   67               00 r[67]=
 188 CollSeq          0    0    0 (BINARY)      00 
 189 AggStep          0   67    1 max(1)        01 accum=r[1] step(r[67])
 190 Next             4  192    0               00 
 191 Goto             0  196    0               00 
 192 Column           4    3   68               00 r[68]=
 193 Compare         65   68    1 k(1,B)        00 r[65] <-> r[68]
 194 Jump           195  187  195               00 
 195 Copy            68   65    0               00 r[65]=r[68]
 196 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 197 Gosub           54  230    0               00 
 198 Delete           1    0    0               02 
 199 Next             1  201    0               00 
 200 Goto             0  205    0               00 
 201 Column           1    3   68               00 r[68]=
 202 Compare         64   68    1 k(1,B)        00 r[64] <-> r[68]
 203 Jump           204  197  204               00 
 204 Copy            68   64    0               00 r[64]=r[68]
 205 Goto             0  162    0               00 
 206 Integer        228   66    0               00 r[66]=228
 207 Rewind           2  227    0               00 
 208 Column           4    4   67               00 r[67]=
 209 CollSeq          0    0    0 (BINARY)      00 
 210 AggStep          0   67    1 max(1)        01 accum=r[1] step(r[67])
 211 Next             4  213    0               00 
 212 Goto             0  217    0               00 
 213 Column           4    3   68               00 r[68]=
 214 Compare         65   68    1 k(1,B)        00 r[65] <-> r[68]
 215 Jump           216  208  216               00 
 216 Copy            68   65    0               00 r[65]=r[68]
 217 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 218 Gosub           54  230    0               00 
 219 Delete           1    0    0               02 
 220 Next             1  222    0               00 
 221 Goto             0  227    0               00 
 222 Column           1    3   68               00 r[68]=
 223 Compare         64   68    1 k(1,B)        00 r[64] <-> r[68]
 224 Jump           225  218  225               00 
 225 Copy            68   64    0               00 r[64]=r[68]
 226 Goto             0  217    0               00 
 227 ResetSorter      1    0    0               00 
 228 Return          66    0    0               00 
 229 Goto             0  237    0               00 
 230 Noop             0    0    0               00 inner-loop subroutine
 231 Copy             2   70    0               00 r[70]=r[2]
 232 Column           1    0   71               00 r[71]=
 233 Column           1    1   69               00 r[69]=
 234 MakeRecord      69    3   72               00 r[72]=mkrec(r[69..71])
 235 SorterInsert    16   72   69 3             00 key=r[72]
 236 Return          54    0    0               00 end inner-loop subroutine
 237 Explain        237    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 238 OpenPseudo      17   73    4               00 4 columns in r[73]
 239 SorterSort      16  245    0               00 
 240 SorterData      16   73   17               00 r[73]=data
 241 Column          17    2   71               00 r[71]=min(x) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 242 Column          17    1   70               00 r[70]=max(x) OVER (PARTITION BY t1 ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 243 ResultRow       70    2    0               00 output=r[70..71]
 244 SorterNext      16  240    0               00 
 245 Halt             0    0    0               00 
 246 Transaction      0    0    5 0             01 usesStmtJournal=0
 247 Goto             0    1    0               00 
SQL: [SELECT max(over) OVER (PARTITION BY over ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(over) OVER (PARTITION BY over ORDER BY over, following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  252    0               00 Start at 252
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  163    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6   10    0               00 nColumn=10
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   60   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead        12    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  17 Explain         17   14    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  18 Rewind          12   39    7 0             00 
  19 Column          12    1   10               00 r[10]=v0.following
  20 Column          12    0   11               00 r[11]=v0.over
  21 Column          12    1   12               00 r[12]=v0.following
  22 Column          12    0   13               00 r[13]=v0.over
  23 Column          12    0   14               00 r[14]=v0.over
  24 Column          12    1   15               00 r[15]=v0.following
  25 Column          12    0   16               00 r[16]=v0.over
  26 Column          12    0   17               00 r[17]=v0.over
  27 Column          12    0    7               00 r[7]=v0.over
  28 Column          12    0    8               00 r[8]=v0.over
  29 Column          12    1    9               00 r[9]=v0.following
  30 MakeRecord       8   10   20               00 r[20]=mkrec(r[8..17])
  31 SequenceTest    11   36    0               00 if( cursor[11].ctr++ ) pc = 36
  32 Compare         21    7    1 k(3,B,B,B)    00 r[21] <-> r[7]
  33 Jump            34   37   34               00 
  34 Gosub           22   42    0               00 
  35 ResetSorter     11    0    0               00 
  36 Move             7   21    1               00 r[21]=r[7]
  37 SorterInsert    11   20    8 10            00 key=r[20]
  38 Next            12   19    0               01 
  39 Explain         39   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  40 Gosub           22   42    0               00 
  41 Goto             0   59    0               00 
  42 Once             0   44    0               00 
  43 OpenPseudo      13   23   13               00 13 columns in r[23]
  44 SorterSort      11   59    0               00 
  45 SorterData      11   23   13               00 r[23]=data
  46 Column          13    0   19               00 r[19]=
  47 Column          13    1   18               00 r[18]=
  48 Column          13    9   17               00 r[17]=
  49 Column          13    8   16               00 r[16]=
  50 Column          13    7   15               00 r[15]=
  51 Column          13    6   14               00 r[14]=
  52 Column          13    5   13               00 r[13]=
  53 Column          13    4   12               00 r[12]=
  54 Column          13    3   11               00 r[11]=
  55 Column          13    2   10               00 r[10]=
  56 Yield            6    0    0               00 
  57 SorterNext      11   45    0               00 
  58 Return          22    0    0               00 
  59 EndCoroutine     6    0    0               00 
  60 SorterOpen      14    8    0 k(2,B,B)      00 
  61 Null             0   24   24               00 r[24..24]=NULL
  62 Integer          1   25    0               00 r[25]=1
  63 Explain         63    7    0 SCAN SUBQUERY 3 00 
  64 InitCoroutine    6    0   14               00 
  65 Yield            6  116    0               00 next row of subquery_3
  66 Copy            10   27    0               00 r[27]=r[10]
  67 Copy            11   28    0               00 r[28]=r[11]
  68 Copy            12   29    0               00 r[29]=r[12]
  69 Copy            13   30    0               00 r[30]=r[13]
  70 Copy            14   31    0               00 r[31]=r[14]
  71 Copy            15   32    0               00 r[32]=r[15]
  72 Copy            16   33    0               00 r[33]=r[16]
  73 Copy            17   34    0               00 r[34]=r[17]
  74 Copy            18   35    0               00 r[35]=r[18]
  75 Copy            19   36    0               00 r[36]=r[19]
  76 MakeRecord      27   10   37               00 r[37]=mkrec(r[27..36])
  77 Compare         33   24    1 k(1,B)        00 r[33] <-> r[24]
  78 Jump            79   81   79               00 
  79 Gosub           47  117    0               00 call flush_partition
  80 Copy            33   24    0               00 r[24]=r[33]
  81 NewRowid         7   38    0               00 r[38]=rowid
  82 Insert           7   37   38               00 intkey=r[38] data=r[37]
  83 Ne              25   92   38               00 if r[38]!=r[25] goto 92
  84 Null             0    4    0               00 r[4]=NULL
  85 Rewind           6    1    0               00 
  86 Rewind           9    1    0               00 
  87 Copy            34   39    1               00 r[39..40]=r[34..35]
  88 Copy            39   41    1               00 r[41..42]=r[39..40]
  89 Copy            39   43    1               00 r[43..44]=r[39..40]
  90 Copy            39   45    1               00 r[45..46]=r[39..40]
  91 Goto             0  115    0               00 
  92 Compare         39   34    2 k(2,B,B)      00 r[39..40] <-> r[34..35]
  93 Jump            94  115   94               00 
  94 Copy            34   39    1               00 r[39..40]=r[34..35]
  95 Column           9    9   48               00 r[48]=
  96 CollSeq          0    0    0 (BINARY)      00 
  97 AggStep          0   48    4 min(1)        01 accum=r[4] step(r[48])
  98 Next             9  100    0               00 
  99 Goto             0  105    0               00 
 100 Column           9    7   49               00 r[49]=
 101 Column           9    8   50               00 r[50]=
 102 Compare         45   49    2 k(2,B,B)      00 r[45..46] <-> r[49..50]
 103 Jump           104   95  104               00 
 104 Copy            49   45    1               00 r[45..46]=r[49..50]
 105 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 106 Gosub           26  142    0               00 
 107 Delete           6    0    0               02 
 108 Next             6  110    0               00 
 109 Goto             0  115    0               00 
 110 Column           6    7   49               00 r[49]=
 111 Column           6    8   50               00 r[50]=
 112 Compare         43   49    2 k(2,B,B)      00 r[43..44] <-> r[49..50]
 113 Jump           114  106  114               00 
 114 Copy            49   43    1               00 r[43..44]=r[49..50]
 115 Goto             0   65    0               00 
 116 Integer        140   47    0               00 r[47]=140
 117 Rewind           7  139    0               00 
 118 Column           9    9   48               00 r[48]=
 119 CollSeq          0    0    0 (BINARY)      00 
 120 AggStep          0   48    4 min(1)        01 accum=r[4] step(r[48])
 121 Next             9  123    0               00 
 122 Goto             0  128    0               00 
 123 Column           9    7   49               00 r[49]=
 124 Column           9    8   50               00 r[50]=
 125 Compare         45   49    2 k(2,B,B)      00 r[45..46] <-> r[49..50]
 126 Jump           127  118  127               00 
 127 Copy            49   45    1               00 r[45..46]=r[49..50]
 128 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 129 Gosub           26  142    0               00 
 130 Delete           6    0    0               02 
 131 Next             6  133    0               00 
 132 Goto             0  139    0               00 
 133 Column           6    7   49               00 r[49]=
 134 Column           6    8   50               00 r[50]=
 135 Compare         43   49    2 k(2,B,B)      00 r[43..44] <-> r[49..50]
 136 Jump           137  129  137               00 
 137 Copy            49   43    1               00 r[43..44]=r[49..50]
 138 Goto             0  128    0               00 
 139 ResetSorter      6    0    0               00 
 140 Return          47    0    0               00 
 141 Goto             0  151    0               00 
 142 Noop             0    0    0               00 inner-loop subroutine
 143 Copy             5   53    0               00 r[53]=r[5]
 144 Column           6    0   54               00 r[54]=
 145 Column           6    1   55               00 r[55]=
 146 Column           6    4   51               00 r[51]=
 147 Column           6    5   52               00 r[52]=
 148 MakeRecord      51    5   58               00 r[58]=mkrec(r[51..55])
 149 SorterInsert    14   58   51 5             00 key=r[58]
 150 Return          26    0    0               00 end inner-loop subroutine
 151 Explain        151    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 152 OpenPseudo      15   59    8               00 8 columns in r[59]
 153 SorterSort      14  162    0               00 
 154 SorterData      14   59   15               00 r[59]=data
 155 Column          15    0   57               00 r[57]=
 156 Column          15    1   56               00 r[56]=
 157 Column          15    4   55               00 r[55]=
 158 Column          15    3   54               00 r[54]=
 159 Column          15    2   53               00 r[53]=
 160 Yield            3    0    0               00 
 161 SorterNext      14  154    0               00 
 162 EndCoroutine     3    0    0               00 
 163 SorterOpen      16    4    0 k(1,B)        00 
 164 Null             0   60   60               00 r[60..60]=NULL
 165 Integer          1   61    0               00 r[61]=1
 166 Explain        166    0    0 SCAN SUBQUERY 2 00 
 167 InitCoroutine    3    0    7               00 
 168 Yield            3  212    0               00 next row of subquery_2
 169 Copy            53   63    0               00 r[63]=r[53]
 170 Copy            54   64    0               00 r[64]=r[54]
 171 Copy            55   65    0               00 r[65]=r[55]
 172 Copy            56   66    0               00 r[66]=r[56]
 173 Copy            57   67    0               00 r[67]=r[57]
 174 MakeRecord      63    5   68               00 r[68]=mkrec(r[63..67])
 175 Compare         65   60    1 k(1,B)        00 r[65] <-> r[60]
 176 Jump           177  179  177               00 
 177 Gosub           74  213    0               00 call flush_partition
 178 Copy            65   60    0               00 r[60]=r[65]
 179 NewRowid         2   69    0               00 r[69]=rowid
 180 Insert           2   68   69               00 intkey=r[69] data=r[68]
 181 Ne              61  190   69               00 if r[69]!=r[61] goto 190
 182 Null             0    1    0               00 r[1]=NULL
 183 Rewind           1    1    0               00 
 184 Rewind           4    1    0               00 
 185 Copy            66   70    0               00 r[70]=r[66]
 186 Copy            70   71    0               00 r[71]=r[70]
 187 Copy            70   72    0               00 r[72]=r[70]
 188 Copy            70   73    0               00 r[73]=r[70]
 189 Goto             0  211    0               00 
 190 Compare         70   66    1 k(1,B)        00 r[70] <-> r[66]
 191 Jump           192  211  192               00 
 192 Copy            66   70    0               00 r[70]=r[66]
 193 Column           4    4   75               00 r[75]=
 194 CollSeq          0    0    0 (BINARY)      00 
 195 AggStep          0   75    1 max(1)        01 accum=r[1] step(r[75])
 196 Next             4  198    0               00 
 197 Goto             0  202    0               00 
 198 Column           4    3   76               00 r[76]=
 199 Compare         73   76    1 k(1,B)        00 r[73] <-> r[76]
 200 Jump           201  193  201               00 
 201 Copy            76   73    0               00 r[73]=r[76]
 202 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 203 Gosub           62  236    0               00 
 204 Delete           1    0    0               02 
 205 Next             1  207    0               00 
 206 Goto             0  211    0               00 
 207 Column           1    3   76               00 r[76]=
 208 Compare         72   76    1 k(1,B)        00 r[72] <-> r[76]
 209 Jump           210  203  210               00 
 210 Copy            76   72    0               00 r[72]=r[76]
 211 Goto             0  168    0               00 
 212 Integer        234   74    0               00 r[74]=234
 213 Rewind           2  233    0               00 
 214 Column           4    4   75               00 r[75]=
 215 CollSeq          0    0    0 (BINARY)      00 
 216 AggStep          0   75    1 max(1)        01 accum=r[1] step(r[75])
 217 Next             4  219    0               00 
 218 Goto             0  223    0               00 
 219 Column           4    3   76               00 r[76]=
 220 Compare         73   76    1 k(1,B)        00 r[73] <-> r[76]
 221 Jump           222  214  222               00 
 222 Copy            76   73    0               00 r[73]=r[76]
 223 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 224 Gosub           62  236    0               00 
 225 Delete           1    0    0               02 
 226 Next             1  228    0               00 
 227 Goto             0  233    0               00 
 228 Column           1    3   76               00 r[76]=
 229 Compare         72   76    1 k(1,B)        00 r[72] <-> r[76]
 230 Jump           231  224  231               00 
 231 Copy            76   72    0               00 r[72]=r[76]
 232 Goto             0  223    0               00 
 233 ResetSorter      1    0    0               00 
 234 Return          74    0    0               00 
 235 Goto             0  243    0               00 
 236 Noop             0    0    0               00 inner-loop subroutine
 237 Copy             2   78    0               00 r[78]=r[2]
 238 Column           1    0   79               00 r[79]=
 239 Column           1    1   77               00 r[77]=
 240 MakeRecord      77    3   80               00 r[80]=mkrec(r[77..79])
 241 SorterInsert    16   80   77 3             00 key=r[80]
 242 Return          62    0    0               00 end inner-loop subroutine
 243 Explain        243    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 244 OpenPseudo      17   81    4               00 4 columns in r[81]
 245 SorterSort      16  251    0               00 
 246 SorterData      16   81   17               00 r[81]=data
 247 Column          17    2   79               00 r[79]=min(over) OVER (PARTITION BY over ORDER BY over, following RANGE BETWEEN UNBOUNDED PRECEDING 
 248 Column          17    1   78               00 r[78]=max(over) OVER (PARTITION BY over ORDER BY following RANGE BETWEEN UNBOUNDED PRECEDING AND CU
 249 ResultRow       78    2    0               00 output=r[78..79]
 250 SorterNext      16  246    0               00 
 251 Halt             0    0    0               00 
 252 Transaction      0    0    5 0             01 usesStmtJournal=0
 253 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  142    0               00 Start at 142
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,-B)       00 
  10 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  11 Explain         11    8    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=t0.c0
  14 Column           7    0    9               00 r[9]=t0.c0
  15 Column           7    0   10               00 r[10]=t0.c0
  16 Column           7    0   11               00 r[11]=t0.c0
  17 Column           7    0    6               00 r[6]=t0.c0
  18 Column           7    0    7               00 r[7]=t0.c0
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    0   12               00 r[12]=
  36 Column           8    4   11               00 r[11]=
  37 Column           8    3   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 Explain         47    0    0 SCAN SUBQUERY 2 00 
  48 InitCoroutine    5    0    8               00 
  49 Yield            5   98    0               00 next row of subquery_2
  50 Copy             8   20    0               00 r[20]=r[8]
  51 Copy             9   21    0               00 r[21]=r[9]
  52 Copy            10   22    0               00 r[22]=r[10]
  53 Copy            11   23    0               00 r[23]=r[11]
  54 Copy            12   24    0               00 r[24]=r[12]
  55 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  56 Compare         21   17    1 k(1,B)        00 r[21] <-> r[17]
  57 Jump            58   60   58               00 
  58 Gosub           31   99    0               00 call flush_partition
  59 Copy            21   17    0               00 r[17]=r[21]
  60 NewRowid         2   26    0               00 r[26]=rowid
  61 Insert           2   25   26               00 intkey=r[26] data=r[25]
  62 Ne              18   72   26               00 if r[26]!=r[18] goto 72
  63 Null             0    1    0               00 r[1]=NULL
  64 Null             0    3    0               00 r[3]=NULL
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Copy            22   27    0               00 r[27]=r[22]
  68 Copy            27   28    0               00 r[28]=r[27]
  69 Copy            27   29    0               00 r[29]=r[27]
  70 Copy            27   30    0               00 r[30]=r[27]
  71 Goto             0   97    0               00 
  72 Compare         27   22    1 k(1,-B)       00 r[27] <-> r[22]
  73 Jump            74   97   74               00 
  74 Copy            22   27    0               00 r[27]=r[22]
  75 Column           4    3   32               00 r[32]=
  76 CollSeq          0    0    0 (BINARY)      00 
  77 AggStep          0   32    1 min(1)        01 accum=r[1] step(r[32])
  78 Column           4    4   32               00 r[32]=
  79 CollSeq          0    0    0 (BINARY)      00 
  80 AggStep          0   32    3 max(1)        01 accum=r[3] step(r[32])
  81 Next             4   83    0               00 
  82 Goto             0   87    0               00 
  83 Column           4    2   33               00 r[33]=
  84 Compare         30   33    1 k(1,-B)       00 r[30] <-> r[33]
  85 Jump            86   75   86               00 
  86 Copy            33   30    0               00 r[30]=r[33]
  87 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  88 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  89 Gosub           19  126    0               00 
  90 Delete           1    0    0               02 
  91 Next             1   93    0               00 
  92 Goto             0   97    0               00 
  93 Column           1    2   33               00 r[33]=
  94 Compare         29   33    1 k(1,-B)       00 r[29] <-> r[33]
  95 Jump            96   89   96               00 
  96 Copy            33   29    0               00 r[29]=r[33]
  97 Goto             0   49    0               00 
  98 Integer        124   31    0               00 r[31]=124
  99 Rewind           2  123    0               00 
 100 Column           4    3   32               00 r[32]=
 101 CollSeq          0    0    0 (BINARY)      00 
 102 AggStep          0   32    1 min(1)        01 accum=r[1] step(r[32])
 103 Column           4    4   32               00 r[32]=
 104 CollSeq          0    0    0 (BINARY)      00 
 105 AggStep          0   32    3 max(1)        01 accum=r[3] step(r[32])
 106 Next             4  108    0               00 
 107 Goto             0  112    0               00 
 108 Column           4    2   33               00 r[33]=
 109 Compare         30   33    1 k(1,-B)       00 r[30] <-> r[33]
 110 Jump           111  100  111               00 
 111 Copy            33   30    0               00 r[30]=r[33]
 112 AggValue         1    1    2 min(1)        00 r[2]=value N=1
 113 AggValue         3    1    4 max(1)        00 r[4]=value N=1
 114 Gosub           19  126    0               00 
 115 Delete           1    0    0               02 
 116 Next             1  118    0               00 
 117 Goto             0  123    0               00 
 118 Column           1    2   33               00 r[33]=
 119 Compare         29   33    1 k(1,-B)       00 r[29] <-> r[33]
 120 Jump           121  114  121               00 
 121 Copy            33   29    0               00 r[29]=r[33]
 122 Goto             0  112    0               00 
 123 ResetSorter      1    0    0               00 
 124 Return          31    0    0               00 
 125 Goto             0  133    0               00 
 126 Noop             0    0    0               00 inner-loop subroutine
 127 Copy             4   35    0               00 r[35]=r[4]
 128 Copy             2   36    0               00 r[36]=r[2]
 129 Column           1    0   34               00 r[34]=
 130 MakeRecord      34    3   37               00 r[37]=mkrec(r[34..36])
 131 SorterInsert     9   37   34 3             00 key=r[37]
 132 Return          19    0    0               00 end inner-loop subroutine
 133 Explain        133    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 134 OpenPseudo      10   38    4               00 4 columns in r[38]
 135 SorterSort       9  141    0               00 
 136 SorterData       9   38   10               00 r[38]=data
 137 Column          10    2   36               00 r[36]=min(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT 
 138 Column          10    1   35               00 r[35]=max(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT 
 139 ResultRow       35    2    0               00 output=r[35..36]
 140 SorterNext       9  136    0               00 
 141 Halt             0    0    0               00 
 142 Transaction      0    0    5 0             01 usesStmtJournal=0
 143 Goto             0    1    0               00 
SQL: [SELECT sum(x) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(x) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  138    0               00 Start at 138
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    5    0               00 nColumn=5
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   44    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6    5    0 k(1,-B)       00 
  10 OpenRead         7    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  11 Explain         11    8    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  12 Rewind           7   28    6 0             00 
  13 Column           7    0    8               00 r[8]=preceding.t1
  14 Column           7    0    9               00 r[9]=preceding.t1
  15 Column           7    1   10               00 r[10]=preceding.x
  16 Column           7    1   11               00 r[11]=preceding.x
  17 Column           7    0    6               00 r[6]=preceding.t1
  18 Column           7    0    7               00 r[7]=preceding.t1
  19 MakeRecord       7    5   13               00 r[13]=mkrec(r[7..11])
  20 SequenceTest     6   25    0               00 if( cursor[6].ctr++ ) pc = 25
  21 Compare         14    6    1 k(2,B,B)      00 r[14] <-> r[6]
  22 Jump            23   26   23               00 
  23 Gosub           15   31    0               00 
  24 ResetSorter      6    0    0               00 
  25 Move             6   14    1               00 r[14]=r[6]
  26 SorterInsert     6   13    7 5             00 key=r[13]
  27 Next             7   13    0               01 
  28 Explain         28    8    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  29 Gosub           15   31    0               00 
  30 Goto             0   43    0               00 
  31 Once             0   33    0               00 
  32 OpenPseudo       8   16    7               00 7 columns in r[16]
  33 SorterSort       6   43    0               00 
  34 SorterData       6   16    8               00 r[16]=data
  35 Column           8    4   12               00 r[12]=
  36 Column           8    3   11               00 r[11]=
  37 Column           8    0   10               00 r[10]=
  38 Column           8    2    9               00 r[9]=
  39 Column           8    1    8               00 r[8]=
  40 Yield            5    0    0               00 
  41 SorterNext       6   34    0               00 
  42 Return          15    0    0               00 
  43 EndCoroutine     5    0    0               00 
  44 SorterOpen       9    4    0 k(1,B)        00 
  45 Null             0   17   17               00 r[17..17]=NULL
  46 Integer          1   18    0               00 r[18]=1
  47 Explain         47    0    0 SCAN SUBQUERY 2 00 
  48 InitCoroutine    5    0    8               00 
  49 Yield            5   96    0               00 next row of subquery_2
  50 Copy             8   20    0               00 r[20]=r[8]
  51 Copy             9   21    0               00 r[21]=r[9]
  52 Copy            10   22    0               00 r[22]=r[10]
  53 Copy            11   23    0               00 r[23]=r[11]
  54 Copy            12   24    0               00 r[24]=r[12]
  55 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  56 Compare         21   17    1 k(1,B)        00 r[21] <-> r[17]
  57 Jump            58   60   58               00 
  58 Gosub           31   97    0               00 call flush_partition
  59 Copy            21   17    0               00 r[17]=r[21]
  60 NewRowid         2   26    0               00 r[26]=rowid
  61 Insert           2   25   26               00 intkey=r[26] data=r[25]
  62 Ne              18   72   26               00 if r[26]!=r[18] goto 72
  63 Null             0    1    0               00 r[1]=NULL
  64 Null             0    3    0               00 r[3]=NULL
  65 Rewind           1    1    0               00 
  66 Rewind           4    1    0               00 
  67 Copy            22   27    0               00 r[27]=r[22]
  68 Copy            27   28    0               00 r[28]=r[27]
  69 Copy            27   29    0               00 r[29]=r[27]
  70 Copy            27   30    0               00 r[30]=r[27]
  71 Goto             0   95    0               00 
  72 Compare         27   22    1 k(1,-B)       00 r[27] <-> r[22]
  73 Jump            74   95   74               00 
  74 Copy            22   27    0               00 r[27]=r[22]
  75 Column           4    3   32               00 r[32]=
  76 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
  77 Column           4    4   32               00 r[32]=
  78 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
  79 Next             4   81    0               00 
  80 Goto             0   85    0               00 
  81 Column           4    2   33               00 r[33]=
  82 Compare         30   33    1 k(1,-B)       00 r[30] <-> r[33]
  83 Jump            84   75   84               00 
  84 Copy            33   30    0               00 r[30]=r[33]
  85 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  86 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
  87 Gosub           19  122    0               00 
  88 Delete           1    0    0               02 
  89 Next             1   91    0               00 
  90 Goto             0   95    0               00 
  91 Column           1    2   33               00 r[33]=
  92 Compare         29   33    1 k(1,-B)       00 r[29] <-> r[33]
  93 Jump            94   87   94               00 
  94 Copy            33   29    0               00 r[29]=r[33]
  95 Goto             0   49    0               00 
  96 Integer        120   31    0               00 r[31]=120
  97 Rewind           2  119    0               00 
  98 Column           4    3   32               00 r[32]=
  99 AggStep          0   32    1 sum(1)        01 accum=r[1] step(r[32])
 100 Column           4    4   32               00 r[32]=
 101 AggStep          0   32    3 sum(1)        01 accum=r[3] step(r[32])
 102 Next             4  104    0               00 
 103 Goto             0  108    0               00 
 104 Column           4    2   33               00 r[33]=
 105 Compare         30   33    1 k(1,-B)       00 r[30] <-> r[33]
 106 Jump           107   98  107               00 
 107 Copy            33   30    0               00 r[30]=r[33]
 108 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 109 AggValue         3    1    4 sum(1)        00 r[4]=value N=1
 110 Gosub           19  122    0               00 
 111 Delete           1    0    0               02 
 112 Next             1  114    0               00 
 113 Goto             0  119    0               00 
 114 Column           1    2   33               00 r[33]=
 115 Compare         29   33    1 k(1,-B)       00 r[29] <-> r[33]
 116 Jump           117  110  117               00 
 117 Copy            33   29    0               00 r[29]=r[33]
 118 Goto             0  108    0               00 
 119 ResetSorter      1    0    0               00 
 120 Return          31    0    0               00 
 121 Goto             0  129    0               00 
 122 Noop             0    0    0               00 inner-loop subroutine
 123 Copy             4   35    0               00 r[35]=r[4]
 124 Copy             2   36    0               00 r[36]=r[2]
 125 Column           1    0   34               00 r[34]=
 126 MakeRecord      34    3   37               00 r[37]=mkrec(r[34..36])
 127 SorterInsert     9   37   34 3             00 key=r[37]
 128 Return          19    0    0               00 end inner-loop subroutine
 129 Explain        129    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 130 OpenPseudo      10   38    4               00 4 columns in r[38]
 131 SorterSort       9  137    0               00 
 132 SorterData       9   38   10               00 r[38]=data
 133 Column          10    2   36               00 r[36]=sum(x) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 134 Column          10    1   35               00 r[35]=sum(x) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 135 ResultRow       35    2    0               00 output=r[35..36]
 136 SorterNext       9  132    0               00 
 137 Halt             0    0    0               00 
 138 Transaction      0    0    5 0             01 usesStmtJournal=0
 139 Goto             0    1    0               00 
SQL: [SELECT sum(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(c0) OVER (PARTITION BY c0  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  195    0               00 Start at 195
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  108    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    8    0               00 nColumn=8
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   30   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   10    0               00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   29    7 0             00 
  19 Column          12    0    7               00 r[7]=t0.c0
  20 Column          12    0    8               00 r[8]=t0.c0
  21 Column          12    0    9               00 r[9]=t0.c0
  22 Column          12    0   10               00 r[10]=t0.c0
  23 Column          12    0   11               00 r[11]=t0.c0
  24 Column          12    0   12               00 r[12]=t0.c0
  25 Column          12    0   13               00 r[13]=t0.c0
  26 Column          12    0   14               00 r[14]=t0.c0
  27 Yield            6    0    0               00 
  28 Next            12   19    0               01 
  29 EndCoroutine     6    0    0               00 
  30 SorterOpen      13    8    0 k(2,B,-B)     00 
  31 Null             0   15   15               00 r[15..15]=NULL
  32 Integer          1   16    0               00 r[16]=1
  33 Explain         33    7    0 SCAN SUBQUERY 3 00 
  34 InitCoroutine    6    0   14               00 
  35 Yield            6   69    0               00 next row of subquery_3
  36 Copy             7   18    0               00 r[18]=r[7]
  37 Copy             8   19    0               00 r[19]=r[8]
  38 Copy             9   20    0               00 r[20]=r[9]
  39 Copy            10   21    0               00 r[21]=r[10]
  40 Copy            11   22    0               00 r[22]=r[11]
  41 Copy            12   23    0               00 r[23]=r[12]
  42 Copy            13   24    0               00 r[24]=r[13]
  43 Copy            14   25    0               00 r[25]=r[14]
  44 MakeRecord      18    8   26               00 r[26]=mkrec(r[18..25])
  45 Compare         24   15    1 k(1,B)        00 r[24] <-> r[15]
  46 Jump            47   49   47               00 
  47 Gosub           28   70    0               00 call flush_partition
  48 Copy            24   15    0               00 r[15]=r[24]
  49 NewRowid         7   27    0               00 r[27]=rowid
  50 Insert           7   26   27               00 intkey=r[27] data=r[26]
  51 Ne              16   56   27               00 if r[27]!=r[16] goto 56
  52 Null             0    4    0               00 r[4]=NULL
  53 Rewind           6    1    0               00 
  54 Rewind           9    1    0               00 
  55 Goto             0   68    0               00 
  56 Goto             0   68    0               00 
  57 Column           9    7   29               00 r[29]=
  58 AggStep          0   29    4 sum(1)        01 accum=r[4] step(r[29])
  59 Next             9   61    0               00 
  60 Goto             0   62    0               00 
  61 Goto             0   57    0               00 
  62 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  63 Gosub           17   86    0               00 
  64 Delete           6    0    0               02 
  65 Next             6   67    0               00 
  66 Goto             0   68    0               00 
  67 Goto             0   63    0               00 
  68 Goto             0   35    0               00 
  69 Integer         84   28    0               00 r[28]=84
  70 Rewind           7   83    0               00 
  71 Column           9    7   29               00 r[29]=
  72 AggStep          0   29    4 sum(1)        01 accum=r[4] step(r[29])
  73 Next             9   75    0               00 
  74 Goto             0   76    0               00 
  75 Goto             0   71    0               00 
  76 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  77 Gosub           17   86    0               00 
  78 Delete           6    0    0               02 
  79 Next             6   81    0               00 
  80 Goto             0   83    0               00 
  81 Goto             0   77    0               00 
  82 Goto             0   76    0               00 
  83 ResetSorter      6    0    0               00 
  84 Return          28    0    0               00 
  85 Goto             0   96    0               00 
  86 Noop             0    0    0               00 inner-loop subroutine
  87 Copy             5   32    0               00 r[32]=r[5]
  88 Column           6    0   33               00 r[33]=
  89 Column           6    1   34               00 r[34]=
  90 Column           6    2   35               00 r[35]=
  91 Column           6    4   30               00 r[30]=
  92 Column           6    5   31               00 r[31]=
  93 MakeRecord      30    6   37               00 r[37]=mkrec(r[30..35])
  94 SorterInsert    13   37   30 6             00 key=r[37]
  95 Return          17    0    0               00 end inner-loop subroutine
  96 Explain         96    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  97 OpenPseudo      14   38    8               00 8 columns in r[38]
  98 SorterSort      13  107    0               00 
  99 SorterData      13   38   14               00 r[38]=data
 100 Column          14    1   36               00 r[36]=
 101 Column          14    5   35               00 r[35]=
 102 Column          14    4   34               00 r[34]=
 103 Column          14    3   33               00 r[33]=
 104 Column          14    2   32               00 r[32]=
 105 Yield            3    0    0               00 
 106 SorterNext      13   99    0               00 
 107 EndCoroutine     3    0    0               00 
 108 SorterOpen      15    4    0 k(1,B)        00 
 109 Null             0   39   39               00 r[39..39]=NULL
 110 Integer          1   40    0               00 r[40]=1
 111 Explain        111    0    0 SCAN SUBQUERY 2 00 
 112 InitCoroutine    3    0    7               00 
 113 Yield            3  156    0               00 next row of subquery_2
 114 Copy            32   42    0               00 r[42]=r[32]
 115 Copy            33   43    0               00 r[43]=r[33]
 116 Copy            34   44    0               00 r[44]=r[34]
 117 Copy            35   45    0               00 r[45]=r[35]
 118 Copy            36   46    0               00 r[46]=r[36]
 119 MakeRecord      42    5   47               00 r[47]=mkrec(r[42..46])
 120 Compare         44   39    1 k(1,B)        00 r[44] <-> r[39]
 121 Jump           122  124  122               00 
 122 Gosub           53  157    0               00 call flush_partition
 123 Copy            44   39    0               00 r[39]=r[44]
 124 NewRowid         2   48    0               00 r[48]=rowid
 125 Insert           2   47   48               00 intkey=r[48] data=r[47]
 126 Ne              40  135   48               00 if r[48]!=r[40] goto 135
 127 Null             0    1    0               00 r[1]=NULL
 128 Rewind           1    1    0               00 
 129 Rewind           4    1    0               00 
 130 Copy            45   49    0               00 r[49]=r[45]
 131 Copy            49   50    0               00 r[50]=r[49]
 132 Copy            49   51    0               00 r[51]=r[49]
 133 Copy            49   52    0               00 r[52]=r[49]
 134 Goto             0  155    0               00 
 135 Compare         49   45    1 k(1,-B)       00 r[49] <-> r[45]
 136 Jump           137  155  137               00 
 137 Copy            45   49    0               00 r[49]=r[45]
 138 Column           4    4   54               00 r[54]=
 139 AggStep          0   54    1 sum(1)        01 accum=r[1] step(r[54])
 140 Next             4  142    0               00 
 141 Goto             0  146    0               00 
 142 Column           4    3   55               00 r[55]=
 143 Compare         52   55    1 k(1,-B)       00 r[52] <-> r[55]
 144 Jump           145  138  145               00 
 145 Copy            55   52    0               00 r[52]=r[55]
 146 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 147 Gosub           41  179    0               00 
 148 Delete           1    0    0               02 
 149 Next             1  151    0               00 
 150 Goto             0  155    0               00 
 151 Column           1    3   55               00 r[55]=
 152 Compare         51   55    1 k(1,-B)       00 r[51] <-> r[55]
 153 Jump           154  147  154               00 
 154 Copy            55   51    0               00 r[51]=r[55]
 155 Goto             0  113    0               00 
 156 Integer        177   53    0               00 r[53]=177
 157 Rewind           2  176    0               00 
 158 Column           4    4   54               00 r[54]=
 159 AggStep          0   54    1 sum(1)        01 accum=r[1] step(r[54])
 160 Next             4  162    0               00 
 161 Goto             0  166    0               00 
 162 Column           4    3   55               00 r[55]=
 163 Compare         52   55    1 k(1,-B)       00 r[52] <-> r[55]
 164 Jump           165  158  165               00 
 165 Copy            55   52    0               00 r[52]=r[55]
 166 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 167 Gosub           41  179    0               00 
 168 Delete           1    0    0               02 
 169 Next             1  171    0               00 
 170 Goto             0  176    0               00 
 171 Column           1    3   55               00 r[55]=
 172 Compare         51   55    1 k(1,-B)       00 r[51] <-> r[55]
 173 Jump           174  167  174               00 
 174 Copy            55   51    0               00 r[51]=r[55]
 175 Goto             0  166    0               00 
 176 ResetSorter      1    0    0               00 
 177 Return          53    0    0               00 
 178 Goto             0  186    0               00 
 179 Noop             0    0    0               00 inner-loop subroutine
 180 Copy             2   57    0               00 r[57]=r[2]
 181 Column           1    0   58               00 r[58]=
 182 Column           1    1   56               00 r[56]=
 183 MakeRecord      56    3   59               00 r[59]=mkrec(r[56..58])
 184 SorterInsert    15   59   56 3             00 key=r[59]
 185 Return          41    0    0               00 end inner-loop subroutine
 186 Explain        186    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 187 OpenPseudo      16   60    4               00 4 columns in r[60]
 188 SorterSort      15  194    0               00 
 189 SorterData      15   60   16               00 r[60]=data
 190 Column          16    2   58               00 r[58]=sum(c0) OVER (PARTITION BY c0  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 191 Column          16    1   57               00 r[57]=sum(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT 
 192 ResultRow       57    2    0               00 output=r[57..58]
 193 SorterNext      15  189    0               00 
 194 Halt             0    0    0               00 
 195 Transaction      0    0    5 0             01 usesStmtJournal=0
 196 Goto             0    1    0               00 
SQL: [SELECT max(t1) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(t1) OVER (PARTITION BY t1 ORDER BY t1, t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  254    0               00 Start at 254
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  165    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6   10    0               00 nColumn=10
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   61   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   11    0 k(2,B,B)      00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   40    7 0             00 
  19 Column          12    0   10               00 r[10]=preceding.t1
  20 Column          12    0   11               00 r[11]=preceding.t1
  21 Column          12    0   12               00 r[12]=preceding.t1
  22 Column          12    0   13               00 r[13]=preceding.t1
  23 Column          12    0   14               00 r[14]=preceding.t1
  24 Column          12    0   15               00 r[15]=preceding.t1
  25 Column          12    0   16               00 r[16]=preceding.t1
  26 Column          12    0   17               00 r[17]=preceding.t1
  27 Column          12    0   18               00 r[18]=preceding.t1
  28 Column          12    0    7               00 r[7]=preceding.t1
  29 Column          12    0    8               00 r[8]=preceding.t1
  30 Column          12    0    9               00 r[9]=preceding.t1
  31 MakeRecord       8   11   20               00 r[20]=mkrec(r[8..18])
  32 SequenceTest    11   37    0               00 if( cursor[11].ctr++ ) pc = 37
  33 Compare         21    7    1 k(3,B,B,B)    00 r[21] <-> r[7]
  34 Jump            35   38   35               00 
  35 Gosub           22   43    0               00 
  36 ResetSorter     11    0    0               00 
  37 Move             7   21    1               00 r[21]=r[7]
  38 SorterInsert    11   20    8 11            00 key=r[20]
  39 Next            12   19    0               01 
  40 Explain         40   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  41 Gosub           22   43    0               00 
  42 Goto             0   60    0               00 
  43 Once             0   45    0               00 
  44 OpenPseudo      13   23   13               00 13 columns in r[23]
  45 SorterSort      11   60    0               00 
  46 SorterData      11   23   13               00 r[23]=data
  47 Column          13    1   19               00 r[19]=
  48 Column          13   10   18               00 r[18]=
  49 Column          13    9   17               00 r[17]=
  50 Column          13    8   16               00 r[16]=
  51 Column          13    7   15               00 r[15]=
  52 Column          13    6   14               00 r[14]=
  53 Column          13    5   13               00 r[13]=
  54 Column          13    4   12               00 r[12]=
  55 Column          13    3   11               00 r[11]=
  56 Column          13    2   10               00 r[10]=
  57 Yield            6    0    0               00 
  58 SorterNext      11   46    0               00 
  59 Return          22    0    0               00 
  60 EndCoroutine     6    0    0               00 
  61 SorterOpen      14    8    0 k(2,B,-B)     00 
  62 Null             0   24   24               00 r[24..24]=NULL
  63 Integer          1   25    0               00 r[25]=1
  64 Explain         64    7    0 SCAN SUBQUERY 3 00 
  65 InitCoroutine    6    0   14               00 
  66 Yield            6  117    0               00 next row of subquery_3
  67 Copy            10   27    0               00 r[27]=r[10]
  68 Copy            11   28    0               00 r[28]=r[11]
  69 Copy            12   29    0               00 r[29]=r[12]
  70 Copy            13   30    0               00 r[30]=r[13]
  71 Copy            14   31    0               00 r[31]=r[14]
  72 Copy            15   32    0               00 r[32]=r[15]
  73 Copy            16   33    0               00 r[33]=r[16]
  74 Copy            17   34    0               00 r[34]=r[17]
  75 Copy            18   35    0               00 r[35]=r[18]
  76 Copy            19   36    0               00 r[36]=r[19]
  77 MakeRecord      27   10   37               00 r[37]=mkrec(r[27..36])
  78 Compare         33   24    1 k(1,B)        00 r[33] <-> r[24]
  79 Jump            80   82   80               00 
  80 Gosub           47  118    0               00 call flush_partition
  81 Copy            33   24    0               00 r[24]=r[33]
  82 NewRowid         7   38    0               00 r[38]=rowid
  83 Insert           7   37   38               00 intkey=r[38] data=r[37]
  84 Ne              25   93   38               00 if r[38]!=r[25] goto 93
  85 Null             0    4    0               00 r[4]=NULL
  86 Rewind           6    1    0               00 
  87 Rewind           9    1    0               00 
  88 Copy            34   39    1               00 r[39..40]=r[34..35]
  89 Copy            39   41    1               00 r[41..42]=r[39..40]
  90 Copy            39   43    1               00 r[43..44]=r[39..40]
  91 Copy            39   45    1               00 r[45..46]=r[39..40]
  92 Goto             0  116    0               00 
  93 Compare         39   34    2 k(2,B,B)      00 r[39..40] <-> r[34..35]
  94 Jump            95  116   95               00 
  95 Copy            34   39    1               00 r[39..40]=r[34..35]
  96 Column           9    9   48               00 r[48]=
  97 CollSeq          0    0    0 (BINARY)      00 
  98 AggStep          0   48    4 min(1)        01 accum=r[4] step(r[48])
  99 Next             9  101    0               00 
 100 Goto             0  106    0               00 
 101 Column           9    7   49               00 r[49]=
 102 Column           9    8   50               00 r[50]=
 103 Compare         45   49    2 k(2,B,B)      00 r[45..46] <-> r[49..50]
 104 Jump           105   96  105               00 
 105 Copy            49   45    1               00 r[45..46]=r[49..50]
 106 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 107 Gosub           26  143    0               00 
 108 Delete           6    0    0               02 
 109 Next             6  111    0               00 
 110 Goto             0  116    0               00 
 111 Column           6    7   49               00 r[49]=
 112 Column           6    8   50               00 r[50]=
 113 Compare         43   49    2 k(2,B,B)      00 r[43..44] <-> r[49..50]
 114 Jump           115  107  115               00 
 115 Copy            49   43    1               00 r[43..44]=r[49..50]
 116 Goto             0   66    0               00 
 117 Integer        141   47    0               00 r[47]=141
 118 Rewind           7  140    0               00 
 119 Column           9    9   48               00 r[48]=
 120 CollSeq          0    0    0 (BINARY)      00 
 121 AggStep          0   48    4 min(1)        01 accum=r[4] step(r[48])
 122 Next             9  124    0               00 
 123 Goto             0  129    0               00 
 124 Column           9    7   49               00 r[49]=
 125 Column           9    8   50               00 r[50]=
 126 Compare         45   49    2 k(2,B,B)      00 r[45..46] <-> r[49..50]
 127 Jump           128  119  128               00 
 128 Copy            49   45    1               00 r[45..46]=r[49..50]
 129 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 130 Gosub           26  143    0               00 
 131 Delete           6    0    0               02 
 132 Next             6  134    0               00 
 133 Goto             0  140    0               00 
 134 Column           6    7   49               00 r[49]=
 135 Column           6    8   50               00 r[50]=
 136 Compare         43   49    2 k(2,B,B)      00 r[43..44] <-> r[49..50]
 137 Jump           138  130  138               00 
 138 Copy            49   43    1               00 r[43..44]=r[49..50]
 139 Goto             0  129    0               00 
 140 ResetSorter      6    0    0               00 
 141 Return          47    0    0               00 
 142 Goto             0  153    0               00 
 143 Noop             0    0    0               00 inner-loop subroutine
 144 Copy             5   53    0               00 r[53]=r[5]
 145 Column           6    0   54               00 r[54]=
 146 Column           6    1   55               00 r[55]=
 147 Column           6    2   56               00 r[56]=
 148 Column           6    4   51               00 r[51]=
 149 Column           6    5   52               00 r[52]=
 150 MakeRecord      51    6   58               00 r[58]=mkrec(r[51..56])
 151 SorterInsert    14   58   51 6             00 key=r[58]
 152 Return          26    0    0               00 end inner-loop subroutine
 153 Explain        153    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 154 OpenPseudo      15   59    8               00 8 columns in r[59]
 155 SorterSort      14  164    0               00 
 156 SorterData      14   59   15               00 r[59]=data
 157 Column          15    1   57               00 r[57]=
 158 Column          15    5   56               00 r[56]=
 159 Column          15    4   55               00 r[55]=
 160 Column          15    3   54               00 r[54]=
 161 Column          15    2   53               00 r[53]=
 162 Yield            3    0    0               00 
 163 SorterNext      14  156    0               00 
 164 EndCoroutine     3    0    0               00 
 165 SorterOpen      16    4    0 k(1,B)        00 
 166 Null             0   60   60               00 r[60..60]=NULL
 167 Integer          1   61    0               00 r[61]=1
 168 Explain        168    0    0 SCAN SUBQUERY 2 00 
 169 InitCoroutine    3    0    7               00 
 170 Yield            3  214    0               00 next row of subquery_2
 171 Copy            53   63    0               00 r[63]=r[53]
 172 Copy            54   64    0               00 r[64]=r[54]
 173 Copy            55   65    0               00 r[65]=r[55]
 174 Copy            56   66    0               00 r[66]=r[56]
 175 Copy            57   67    0               00 r[67]=r[57]
 176 MakeRecord      63    5   68               00 r[68]=mkrec(r[63..67])
 177 Compare         65   60    1 k(1,B)        00 r[65] <-> r[60]
 178 Jump           179  181  179               00 
 179 Gosub           74  215    0               00 call flush_partition
 180 Copy            65   60    0               00 r[60]=r[65]
 181 NewRowid         2   69    0               00 r[69]=rowid
 182 Insert           2   68   69               00 intkey=r[69] data=r[68]
 183 Ne              61  192   69               00 if r[69]!=r[61] goto 192
 184 Null             0    1    0               00 r[1]=NULL
 185 Rewind           1    1    0               00 
 186 Rewind           4    1    0               00 
 187 Copy            66   70    0               00 r[70]=r[66]
 188 Copy            70   71    0               00 r[71]=r[70]
 189 Copy            70   72    0               00 r[72]=r[70]
 190 Copy            70   73    0               00 r[73]=r[70]
 191 Goto             0  213    0               00 
 192 Compare         70   66    1 k(1,-B)       00 r[70] <-> r[66]
 193 Jump           194  213  194               00 
 194 Copy            66   70    0               00 r[70]=r[66]
 195 Column           4    4   75               00 r[75]=
 196 CollSeq          0    0    0 (BINARY)      00 
 197 AggStep          0   75    1 max(1)        01 accum=r[1] step(r[75])
 198 Next             4  200    0               00 
 199 Goto             0  204    0               00 
 200 Column           4    3   76               00 r[76]=
 201 Compare         73   76    1 k(1,-B)       00 r[73] <-> r[76]
 202 Jump           203  195  203               00 
 203 Copy            76   73    0               00 r[73]=r[76]
 204 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 205 Gosub           62  238    0               00 
 206 Delete           1    0    0               02 
 207 Next             1  209    0               00 
 208 Goto             0  213    0               00 
 209 Column           1    3   76               00 r[76]=
 210 Compare         72   76    1 k(1,-B)       00 r[72] <-> r[76]
 211 Jump           212  205  212               00 
 212 Copy            76   72    0               00 r[72]=r[76]
 213 Goto             0  170    0               00 
 214 Integer        236   74    0               00 r[74]=236
 215 Rewind           2  235    0               00 
 216 Column           4    4   75               00 r[75]=
 217 CollSeq          0    0    0 (BINARY)      00 
 218 AggStep          0   75    1 max(1)        01 accum=r[1] step(r[75])
 219 Next             4  221    0               00 
 220 Goto             0  225    0               00 
 221 Column           4    3   76               00 r[76]=
 222 Compare         73   76    1 k(1,-B)       00 r[73] <-> r[76]
 223 Jump           224  216  224               00 
 224 Copy            76   73    0               00 r[73]=r[76]
 225 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 226 Gosub           62  238    0               00 
 227 Delete           1    0    0               02 
 228 Next             1  230    0               00 
 229 Goto             0  235    0               00 
 230 Column           1    3   76               00 r[76]=
 231 Compare         72   76    1 k(1,-B)       00 r[72] <-> r[76]
 232 Jump           233  226  233               00 
 233 Copy            76   72    0               00 r[72]=r[76]
 234 Goto             0  225    0               00 
 235 ResetSorter      1    0    0               00 
 236 Return          74    0    0               00 
 237 Goto             0  245    0               00 
 238 Noop             0    0    0               00 inner-loop subroutine
 239 Copy             2   78    0               00 r[78]=r[2]
 240 Column           1    0   79               00 r[79]=
 241 Column           1    1   77               00 r[77]=
 242 MakeRecord      77    3   80               00 r[80]=mkrec(r[77..79])
 243 SorterInsert    16   80   77 3             00 key=r[80]
 244 Return          62    0    0               00 end inner-loop subroutine
 245 Explain        245    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 246 OpenPseudo      17   81    4               00 4 columns in r[81]
 247 SorterSort      16  253    0               00 
 248 SorterData      16   81   17               00 r[81]=data
 249 Column          17    2   79               00 r[79]=min(t1) OVER (PARTITION BY t1 ORDER BY t1, t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 250 Column          17    1   78               00 r[78]=max(t1) OVER (PARTITION BY t1 ORDER BY t1 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT 
 251 ResultRow       78    2    0               00 output=r[78..79]
 252 SorterNext      16  248    0               00 
 253 Halt             0    0    0               00 
 254 Transaction      0    0    5 0             01 usesStmtJournal=0
 255 Goto             0    1    0               00 
SQL: [SELECT sum(t1) OVER (PARTITION BY x  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY t1

;]
VDBE Program Listing:
   0 Init             0  203    0               00 Start at 203
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  135    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    7    0               00 nColumn=7
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   43   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   10    0 k(2,B,B)      00 
  16 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  17 Explain         17   14    0 SCAN TABLE preceding 00 
  18 Rewind           0   29    0               00 
  19 Column           0    0    9               00 r[9]=preceding.t1
  20 Column           0    1   10               00 r[10]=preceding.x
  21 Column           0    0   11               00 r[11]=preceding.t1
  22 Column           0    1   12               00 r[12]=preceding.x
  23 Column           0    0   13               00 r[13]=preceding.t1
  24 Column           0    1    7               00 r[7]=preceding.x
  25 Column           0    0    8               00 r[8]=preceding.t1
  26 MakeRecord       7    7   16               00 r[16]=mkrec(r[7..13])
  27 SorterInsert    11   16    7 7             00 key=r[16]
  28 Next             0   19    0               01 
  29 Explain         29   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  30 OpenPseudo      12   17   10               00 10 columns in r[17]
  31 SorterSort      11   42    0               00 
  32 SorterData      11   17   12               00 r[17]=data
  33 Column          12    1   15               00 r[15]=
  34 Column          12    6   14               00 r[14]=
  35 Column          12    0   13               00 r[13]=
  36 Column          12    5   12               00 r[12]=
  37 Column          12    4   11               00 r[11]=
  38 Column          12    3   10               00 r[10]=
  39 Column          12    2    9               00 r[9]=
  40 Yield            6    0    0               00 
  41 SorterNext      11   32    0               00 
  42 EndCoroutine     6    0    0               00 
  43 SorterOpen      13    6    0 k(1,B)        00 
  44 Null             0   18   18               00 r[18..18]=NULL
  45 Integer          1   19    0               00 r[19]=1
  46 Explain         46    7    0 SCAN SUBQUERY 3 00 
  47 InitCoroutine    6    0   14               00 
  48 Yield            6   93    0               00 next row of subquery_3
  49 Copy             9   21    0               00 r[21]=r[9]
  50 Copy            10   22    0               00 r[22]=r[10]
  51 Copy            11   23    0               00 r[23]=r[11]
  52 Copy            12   24    0               00 r[24]=r[12]
  53 Copy            13   25    0               00 r[25]=r[13]
  54 Copy            14   26    0               00 r[26]=r[14]
  55 Copy            15   27    0               00 r[27]=r[15]
  56 MakeRecord      21    7   28               00 r[28]=mkrec(r[21..27])
  57 Compare         25   18    1 k(1,B)        00 r[25] <-> r[18]
  58 Jump            59   61   59               00 
  59 Gosub           34   94    0               00 call flush_partition
  60 Copy            25   18    0               00 r[18]=r[25]
  61 NewRowid         7   29    0               00 r[29]=rowid
  62 Insert           7   28   29               00 intkey=r[29] data=r[28]
  63 Ne              19   72   29               00 if r[29]!=r[19] goto 72
  64 Null             0    4    0               00 r[4]=NULL
  65 Rewind           6    1    0               00 
  66 Rewind           9    1    0               00 
  67 Copy            26   30    0               00 r[30]=r[26]
  68 Copy            30   31    0               00 r[31]=r[30]
  69 Copy            30   32    0               00 r[32]=r[30]
  70 Copy            30   33    0               00 r[33]=r[30]
  71 Goto             0   92    0               00 
  72 Compare         30   26    1 k(1,B)        00 r[30] <-> r[26]
  73 Jump            74   92   74               00 
  74 Copy            26   30    0               00 r[30]=r[26]
  75 Column           9    6   35               00 r[35]=
  76 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  77 Next             9   79    0               00 
  78 Goto             0   83    0               00 
  79 Column           9    5   36               00 r[36]=
  80 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
  81 Jump            82   75   82               00 
  82 Copy            36   33    0               00 r[33]=r[36]
  83 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  84 Gosub           20  116    0               00 
  85 Delete           6    0    0               02 
  86 Next             6   88    0               00 
  87 Goto             0   92    0               00 
  88 Column           6    5   36               00 r[36]=
  89 Compare         32   36    1 k(1,B)        00 r[32] <-> r[36]
  90 Jump            91   84   91               00 
  91 Copy            36   32    0               00 r[32]=r[36]
  92 Goto             0   48    0               00 
  93 Integer        114   34    0               00 r[34]=114
  94 Rewind           7  113    0               00 
  95 Column           9    6   35               00 r[35]=
  96 AggStep          0   35    4 sum(1)        01 accum=r[4] step(r[35])
  97 Next             9   99    0               00 
  98 Goto             0  103    0               00 
  99 Column           9    5   36               00 r[36]=
 100 Compare         33   36    1 k(1,B)        00 r[33] <-> r[36]
 101 Jump           102   95  102               00 
 102 Copy            36   33    0               00 r[33]=r[36]
 103 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 104 Gosub           20  116    0               00 
 105 Delete           6    0    0               02 
 106 Next             6  108    0               00 
 107 Goto             0  113    0               00 
 108 Column           6    5   36               00 r[36]=
 109 Compare         32   36    1 k(1,B)        00 r[32] <-> r[36]
 110 Jump           111  104  111               00 
 111 Copy            36   32    0               00 r[32]=r[36]
 112 Goto             0  103    0               00 
 113 ResetSorter      6    0    0               00 
 114 Return          34    0    0               00 
 115 Goto             0  124    0               00 
 116 Noop             0    0    0               00 inner-loop subroutine
 117 Copy             5   38    0               00 r[38]=r[5]
 118 Column           6    0   39               00 r[39]=
 119 Column           6    2   40               00 r[40]=
 120 Column           6    3   37               00 r[37]=
 121 MakeRecord      37    4   42               00 r[42]=mkrec(r[37..40])
 122 SorterInsert    13   42   37 4             00 key=r[42]
 123 Return          20    0    0               00 end inner-loop subroutine
 124 Explain        124    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 125 OpenPseudo      14   43    6               00 6 columns in r[43]
 126 SorterSort      13  134    0               00 
 127 SorterData      13   43   14               00 r[43]=data
 128 Column          14    3   41               00 r[41]=
 129 Column          14    0   40               00 r[40]=
 130 Column          14    2   39               00 r[39]=
 131 Column          14    1   38               00 r[38]=
 132 Yield            3    0    0               00 
 133 SorterNext      13  127    0               00 
 134 EndCoroutine     3    0    0               00 
 135 SorterOpen      15    4    0 k(1,B)        00 
 136 Null             0   44   44               00 r[44..44]=NULL
 137 Integer          1   45    0               00 r[45]=1
 138 Explain        138    0    0 SCAN SUBQUERY 2 00 
 139 InitCoroutine    3    0    7               00 
 140 Yield            3  170    0               00 next row of subquery_2
 141 Copy            38   47    0               00 r[47]=r[38]
 142 Copy            39   48    0               00 r[48]=r[39]
 143 Copy            40   49    0               00 r[49]=r[40]
 144 Copy            41   50    0               00 r[50]=r[41]
 145 MakeRecord      47    4   51               00 r[51]=mkrec(r[47..50])
 146 Compare         49   44    1 k(1,B)        00 r[49] <-> r[44]
 147 Jump           148  150  148               00 
 148 Gosub           53  171    0               00 call flush_partition
 149 Copy            49   44    0               00 r[44]=r[49]
 150 NewRowid         2   52    0               00 r[52]=rowid
 151 Insert           2   51   52               00 intkey=r[52] data=r[51]
 152 Ne              45  157   52               00 if r[52]!=r[45] goto 157
 153 Null             0    1    0               00 r[1]=NULL
 154 Rewind           1    1    0               00 
 155 Rewind           4    1    0               00 
 156 Goto             0  169    0               00 
 157 Goto             0  169    0               00 
 158 Column           4    3   54               00 r[54]=
 159 AggStep          0   54    1 sum(1)        01 accum=r[1] step(r[54])
 160 Next             4  162    0               00 
 161 Goto             0  163    0               00 
 162 Goto             0  158    0               00 
 163 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 164 Gosub           46  187    0               00 
 165 Delete           1    0    0               02 
 166 Next             1  168    0               00 
 167 Goto             0  169    0               00 
 168 Goto             0  164    0               00 
 169 Goto             0  140    0               00 
 170 Integer        185   53    0               00 r[53]=185
 171 Rewind           2  184    0               00 
 172 Column           4    3   54               00 r[54]=
 173 AggStep          0   54    1 sum(1)        01 accum=r[1] step(r[54])
 174 Next             4  176    0               00 
 175 Goto             0  177    0               00 
 176 Goto             0  172    0               00 
 177 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 178 Gosub           46  187    0               00 
 179 Delete           1    0    0               02 
 180 Next             1  182    0               00 
 181 Goto             0  184    0               00 
 182 Goto             0  178    0               00 
 183 Goto             0  177    0               00 
 184 ResetSorter      1    0    0               00 
 185 Return          53    0    0               00 
 186 Goto             0  194    0               00 
 187 Noop             0    0    0               00 inner-loop subroutine
 188 Copy             2   56    0               00 r[56]=r[2]
 189 Column           1    0   57               00 r[57]=
 190 Column           1    1   55               00 r[55]=
 191 MakeRecord      55    3   58               00 r[58]=mkrec(r[55..57])
 192 SorterInsert    15   58   55 3             00 key=r[58]
 193 Return          46    0    0               00 end inner-loop subroutine
 194 Explain        194    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 195 OpenPseudo      16   59    4               00 4 columns in r[59]
 196 SorterSort      15  202    0               00 
 197 SorterData      15   59   16               00 r[59]=data
 198 Column          16    2   57               00 r[57]=sum(t1) OVER (PARTITION BY x ORDER BY t1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 199 Column          16    1   56               00 r[56]=sum(t1) OVER (PARTITION BY x  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 200 ResultRow       56    2    0               00 output=r[56..57]
 201 SorterNext      15  197    0               00 
 202 Halt             0    0    0               00 
 203 Transaction      0    0    5 0             01 usesStmtJournal=0
 204 Goto             0    1    0               00 
SQL: [SELECT max(over) OVER (PARTITION BY over  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(over) OVER (PARTITION BY over  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0   99    0               00 Start at 99
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    4    0               00 nColumn=4
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   20    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 Noop             6    6    0               00 
  10 OpenRead         7    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  11 Explain         11    8    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  12 Rewind           7   19    6 0             00 
  13 Column           7    1    6               00 r[6]=v0.following
  14 Column           7    0    7               00 r[7]=v0.over
  15 Column           7    0    8               00 r[8]=v0.over
  16 Column           7    0    9               00 r[9]=v0.over
  17 Yield            5    0    0               00 
  18 Next             7   13    0               01 
  19 EndCoroutine     5    0    0               00 
  20 SorterOpen       8    4    0 k(1,B)        00 
  21 Null             0   10   10               00 r[10..10]=NULL
  22 Integer          1   11    0               00 r[11]=1
  23 Explain         23    0    0 SCAN SUBQUERY 2 00 
  24 InitCoroutine    5    0    8               00 
  25 Yield            5   61    0               00 next row of subquery_2
  26 Copy             6   13    0               00 r[13]=r[6]
  27 Copy             7   14    0               00 r[14]=r[7]
  28 Copy             8   15    0               00 r[15]=r[8]
  29 Copy             9   16    0               00 r[16]=r[9]
  30 MakeRecord      13    4   17               00 r[17]=mkrec(r[13..16])
  31 Compare         14   10    1 k(1,B)        00 r[14] <-> r[10]
  32 Jump            33   35   33               00 
  33 Gosub           19   62    0               00 call flush_partition
  34 Copy            14   10    0               00 r[10]=r[14]
  35 NewRowid         2   18    0               00 r[18]=rowid
  36 Insert           2   17   18               00 intkey=r[18] data=r[17]
  37 Ne              11   43   18               00 if r[18]!=r[11] goto 43
  38 Null             0    1    0               00 r[1]=NULL
  39 Null             0    3    0               00 r[3]=NULL
  40 Rewind           1    1    0               00 
  41 Rewind           4    1    0               00 
  42 Goto             0   60    0               00 
  43 Goto             0   60    0               00 
  44 Column           4    2   20               00 r[20]=
  45 CollSeq          0    0    0 (BINARY)      00 
  46 AggStep          0   20    1 min(1)        01 accum=r[1] step(r[20])
  47 Column           4    3   20               00 r[20]=
  48 CollSeq          0    0    0 (BINARY)      00 
  49 AggStep          0   20    3 max(1)        01 accum=r[3] step(r[20])
  50 Next             4   52    0               00 
  51 Goto             0   53    0               00 
  52 Goto             0   44    0               00 
  53 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  54 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  55 Gosub           12   83    0               00 
  56 Delete           1    0    0               02 
  57 Next             1   59    0               00 
  58 Goto             0   60    0               00 
  59 Goto             0   55    0               00 
  60 Goto             0   25    0               00 
  61 Integer         81   19    0               00 r[19]=81
  62 Rewind           2   80    0               00 
  63 Column           4    2   20               00 r[20]=
  64 CollSeq          0    0    0 (BINARY)      00 
  65 AggStep          0   20    1 min(1)        01 accum=r[1] step(r[20])
  66 Column           4    3   20               00 r[20]=
  67 CollSeq          0    0    0 (BINARY)      00 
  68 AggStep          0   20    3 max(1)        01 accum=r[3] step(r[20])
  69 Next             4   71    0               00 
  70 Goto             0   72    0               00 
  71 Goto             0   63    0               00 
  72 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  73 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  74 Gosub           12   83    0               00 
  75 Delete           1    0    0               02 
  76 Next             1   78    0               00 
  77 Goto             0   80    0               00 
  78 Goto             0   74    0               00 
  79 Goto             0   72    0               00 
  80 ResetSorter      1    0    0               00 
  81 Return          19    0    0               00 
  82 Goto             0   90    0               00 
  83 Noop             0    0    0               00 inner-loop subroutine
  84 Copy             4   22    0               00 r[22]=r[4]
  85 Copy             2   23    0               00 r[23]=r[2]
  86 Column           1    0   21               00 r[21]=
  87 MakeRecord      21    3   24               00 r[24]=mkrec(r[21..23])
  88 SorterInsert     8   24   21 3             00 key=r[24]
  89 Return          12    0    0               00 end inner-loop subroutine
  90 Explain         90    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  91 OpenPseudo       9   25    4               00 4 columns in r[25]
  92 SorterSort       8   98    0               00 
  93 SorterData       8   25    9               00 r[25]=data
  94 Column           9    2   23               00 r[23]=min(over) OVER (PARTITION BY over  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  95 Column           9    1   22               00 r[22]=max(over) OVER (PARTITION BY over  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  96 ResultRow       22    2    0               00 output=r[22..23]
  97 SorterNext       8   93    0               00 
  98 Halt             0    0    0               00 
  99 Transaction      0    0    5 0             01 usesStmtJournal=0
 100 Goto             0    1    0               00 
SQL: [SELECT max(following) OVER (PARTITION BY following  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(following) OVER (PARTITION BY following ORDER BY following, over RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY over

;]
VDBE Program Listing:
   0 Init             0  215    0               00 Start at 215
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  145    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    8    0               00 nColumn=8
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   46   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   12    0 k(3,B,B,B)    00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   31    0               00 
  19 Column           0    0   10               00 r[10]=v0.over
  20 Column           0    1   11               00 r[11]=v0.following
  21 Column           0    1   12               00 r[12]=v0.following
  22 Column           0    1   13               00 r[13]=v0.following
  23 Column           0    1   14               00 r[14]=v0.following
  24 Column           0    1   15               00 r[15]=v0.following
  25 Column           0    1    7               00 r[7]=v0.following
  26 Column           0    1    8               00 r[8]=v0.following
  27 Column           0    0    9               00 r[9]=v0.over
  28 MakeRecord       7    9   18               00 r[18]=mkrec(r[7..15])
  29 SorterInsert    11   18    7 9             00 key=r[18]
  30 Next             0   19    0               01 
  31 Explain         31   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  32 OpenPseudo      12   19   12               00 12 columns in r[19]
  33 SorterSort      11   45    0               00 
  34 SorterData      11   19   12               00 r[19]=data
  35 Column          12    1   17               00 r[17]=
  36 Column          12    2   16               00 r[16]=
  37 Column          12    8   15               00 r[15]=
  38 Column          12    7   14               00 r[14]=
  39 Column          12    6   13               00 r[13]=
  40 Column          12    5   12               00 r[12]=
  41 Column          12    4   11               00 r[11]=
  42 Column          12    3   10               00 r[10]=
  43 Yield            6    0    0               00 
  44 SorterNext      11   34    0               00 
  45 EndCoroutine     6    0    0               00 
  46 SorterOpen      13    6    0 k(1,B)        00 
  47 Null             0   20   20               00 r[20..20]=NULL
  48 Integer          1   21    0               00 r[21]=1
  49 Explain         49    7    0 SCAN SUBQUERY 3 00 
  50 InitCoroutine    6    0   14               00 
  51 Yield            6  100    0               00 next row of subquery_3
  52 Copy            10   23    0               00 r[23]=r[10]
  53 Copy            11   24    0               00 r[24]=r[11]
  54 Copy            12   25    0               00 r[25]=r[12]
  55 Copy            13   26    0               00 r[26]=r[13]
  56 Copy            14   27    0               00 r[27]=r[14]
  57 Copy            15   28    0               00 r[28]=r[15]
  58 Copy            16   29    0               00 r[29]=r[16]
  59 Copy            17   30    0               00 r[30]=r[17]
  60 MakeRecord      23    8   31               00 r[31]=mkrec(r[23..30])
  61 Compare         27   20    1 k(1,B)        00 r[27] <-> r[20]
  62 Jump            63   65   63               00 
  63 Gosub           41  101    0               00 call flush_partition
  64 Copy            27   20    0               00 r[20]=r[27]
  65 NewRowid         7   32    0               00 r[32]=rowid
  66 Insert           7   31   32               00 intkey=r[32] data=r[31]
  67 Ne              21   76   32               00 if r[32]!=r[21] goto 76
  68 Null             0    4    0               00 r[4]=NULL
  69 Rewind           6    1    0               00 
  70 Rewind           9    1    0               00 
  71 Copy            28   33    1               00 r[33..34]=r[28..29]
  72 Copy            33   35    1               00 r[35..36]=r[33..34]
  73 Copy            33   37    1               00 r[37..38]=r[33..34]
  74 Copy            33   39    1               00 r[39..40]=r[33..34]
  75 Goto             0   99    0               00 
  76 Compare         33   28    2 k(2,B,B)      00 r[33..34] <-> r[28..29]
  77 Jump            78   99   78               00 
  78 Copy            28   33    1               00 r[33..34]=r[28..29]
  79 Column           9    7   42               00 r[42]=
  80 CollSeq          0    0    0 (BINARY)      00 
  81 AggStep          0   42    4 min(1)        01 accum=r[4] step(r[42])
  82 Next             9   84    0               00 
  83 Goto             0   89    0               00 
  84 Column           9    5   43               00 r[43]=
  85 Column           9    6   44               00 r[44]=
  86 Compare         39   43    2 k(2,B,B)      00 r[39..40] <-> r[43..44]
  87 Jump            88   79   88               00 
  88 Copy            43   39    1               00 r[39..40]=r[43..44]
  89 AggValue         4    1    5 min(1)        00 r[5]=value N=1
  90 Gosub           22  126    0               00 
  91 Delete           6    0    0               02 
  92 Next             6   94    0               00 
  93 Goto             0   99    0               00 
  94 Column           6    5   43               00 r[43]=
  95 Column           6    6   44               00 r[44]=
  96 Compare         37   43    2 k(2,B,B)      00 r[37..38] <-> r[43..44]
  97 Jump            98   90   98               00 
  98 Copy            43   37    1               00 r[37..38]=r[43..44]
  99 Goto             0   51    0               00 
 100 Integer        124   41    0               00 r[41]=124
 101 Rewind           7  123    0               00 
 102 Column           9    7   42               00 r[42]=
 103 CollSeq          0    0    0 (BINARY)      00 
 104 AggStep          0   42    4 min(1)        01 accum=r[4] step(r[42])
 105 Next             9  107    0               00 
 106 Goto             0  112    0               00 
 107 Column           9    5   43               00 r[43]=
 108 Column           9    6   44               00 r[44]=
 109 Compare         39   43    2 k(2,B,B)      00 r[39..40] <-> r[43..44]
 110 Jump           111  102  111               00 
 111 Copy            43   39    1               00 r[39..40]=r[43..44]
 112 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 113 Gosub           22  126    0               00 
 114 Delete           6    0    0               02 
 115 Next             6  117    0               00 
 116 Goto             0  123    0               00 
 117 Column           6    5   43               00 r[43]=
 118 Column           6    6   44               00 r[44]=
 119 Compare         37   43    2 k(2,B,B)      00 r[37..38] <-> r[43..44]
 120 Jump           121  113  121               00 
 121 Copy            43   37    1               00 r[37..38]=r[43..44]
 122 Goto             0  112    0               00 
 123 ResetSorter      6    0    0               00 
 124 Return          41    0    0               00 
 125 Goto             0  134    0               00 
 126 Noop             0    0    0               00 inner-loop subroutine
 127 Copy             5   46    0               00 r[46]=r[5]
 128 Column           6    0   47               00 r[47]=
 129 Column           6    1   48               00 r[48]=
 130 Column           6    3   45               00 r[45]=
 131 MakeRecord      45    4   50               00 r[50]=mkrec(r[45..48])
 132 SorterInsert    13   50   45 4             00 key=r[50]
 133 Return          22    0    0               00 end inner-loop subroutine
 134 Explain        134    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 135 OpenPseudo      14   51    6               00 6 columns in r[51]
 136 SorterSort      13  144    0               00 
 137 SorterData      13   51   14               00 r[51]=data
 138 Column          14    0   49               00 r[49]=
 139 Column          14    3   48               00 r[48]=
 140 Column          14    2   47               00 r[47]=
 141 Column          14    1   46               00 r[46]=
 142 Yield            3    0    0               00 
 143 SorterNext      13  137    0               00 
 144 EndCoroutine     3    0    0               00 
 145 SorterOpen      15    4    0 k(1,B)        00 
 146 Null             0   52   52               00 r[52..52]=NULL
 147 Integer          1   53    0               00 r[53]=1
 148 Explain        148    0    0 SCAN SUBQUERY 2 00 
 149 InitCoroutine    3    0    7               00 
 150 Yield            3  181    0               00 next row of subquery_2
 151 Copy            46   55    0               00 r[55]=r[46]
 152 Copy            47   56    0               00 r[56]=r[47]
 153 Copy            48   57    0               00 r[57]=r[48]
 154 Copy            49   58    0               00 r[58]=r[49]
 155 MakeRecord      55    4   59               00 r[59]=mkrec(r[55..58])
 156 Compare         57   52    1 k(1,B)        00 r[57] <-> r[52]
 157 Jump           158  160  158               00 
 158 Gosub           61  182    0               00 call flush_partition
 159 Copy            57   52    0               00 r[52]=r[57]
 160 NewRowid         2   60    0               00 r[60]=rowid
 161 Insert           2   59   60               00 intkey=r[60] data=r[59]
 162 Ne              53  167   60               00 if r[60]!=r[53] goto 167
 163 Null             0    1    0               00 r[1]=NULL
 164 Rewind           1    1    0               00 
 165 Rewind           4    1    0               00 
 166 Goto             0  180    0               00 
 167 Goto             0  180    0               00 
 168 Column           4    3   62               00 r[62]=
 169 CollSeq          0    0    0 (BINARY)      00 
 170 AggStep          0   62    1 max(1)        01 accum=r[1] step(r[62])
 171 Next             4  173    0               00 
 172 Goto             0  174    0               00 
 173 Goto             0  168    0               00 
 174 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 175 Gosub           54  199    0               00 
 176 Delete           1    0    0               02 
 177 Next             1  179    0               00 
 178 Goto             0  180    0               00 
 179 Goto             0  175    0               00 
 180 Goto             0  150    0               00 
 181 Integer        197   61    0               00 r[61]=197
 182 Rewind           2  196    0               00 
 183 Column           4    3   62               00 r[62]=
 184 CollSeq          0    0    0 (BINARY)      00 
 185 AggStep          0   62    1 max(1)        01 accum=r[1] step(r[62])
 186 Next             4  188    0               00 
 187 Goto             0  189    0               00 
 188 Goto             0  183    0               00 
 189 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 190 Gosub           54  199    0               00 
 191 Delete           1    0    0               02 
 192 Next             1  194    0               00 
 193 Goto             0  196    0               00 
 194 Goto             0  190    0               00 
 195 Goto             0  189    0               00 
 196 ResetSorter      1    0    0               00 
 197 Return          61    0    0               00 
 198 Goto             0  206    0               00 
 199 Noop             0    0    0               00 inner-loop subroutine
 200 Copy             2   64    0               00 r[64]=r[2]
 201 Column           1    0   65               00 r[65]=
 202 Column           1    1   63               00 r[63]=
 203 MakeRecord      63    3   66               00 r[66]=mkrec(r[63..65])
 204 SorterInsert    15   66   63 3             00 key=r[66]
 205 Return          54    0    0               00 end inner-loop subroutine
 206 Explain        206    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 207 OpenPseudo      16   67    4               00 4 columns in r[67]
 208 SorterSort      15  214    0               00 
 209 SorterData      15   67   16               00 r[67]=data
 210 Column          16    2   65               00 r[65]=min(following) OVER (PARTITION BY following ORDER BY following, over RANGE BETWEEN UNBOUNDED 
 211 Column          16    1   64               00 r[64]=max(following) OVER (PARTITION BY following  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT RO
 212 ResultRow       64    2    0               00 output=r[64..65]
 213 SorterNext      15  209    0               00 
 214 Halt             0    0    0               00 
 215 Transaction      0    0    5 0             01 usesStmtJournal=0
 216 Goto             0    1    0               00 
SQL: [SELECT sum(following) OVER (PARTITION BY over  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(following) OVER (PARTITION BY over ORDER BY over, following RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM v0 ORDER BY following

;]
VDBE Program Listing:
   0 Init             0  221    0               00 Start at 221
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  153    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    8    0               00 nColumn=8
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   56   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    8    0 k(2,B,B)      00 
  16 OpenRead        12    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  17 Explain         17   14    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  18 Rewind          12   37    7 0             00 
  19 Column          12    1   10               00 r[10]=v0.following
  20 Column          12    0   11               00 r[11]=v0.over
  21 Column          12    1   12               00 r[12]=v0.following
  22 Column          12    0   13               00 r[13]=v0.over
  23 Column          12    0   14               00 r[14]=v0.over
  24 Column          12    1   15               00 r[15]=v0.following
  25 Column          12    0    7               00 r[7]=v0.over
  26 Column          12    0    8               00 r[8]=v0.over
  27 Column          12    1    9               00 r[9]=v0.following
  28 MakeRecord       8    8   18               00 r[18]=mkrec(r[8..15])
  29 SequenceTest    11   34    0               00 if( cursor[11].ctr++ ) pc = 34
  30 Compare         19    7    1 k(3,B,B,B)    00 r[19] <-> r[7]
  31 Jump            32   35   32               00 
  32 Gosub           20   40    0               00 
  33 ResetSorter     11    0    0               00 
  34 Move             7   19    1               00 r[19]=r[7]
  35 SorterInsert    11   18    8 8             00 key=r[18]
  36 Next            12   19    0               01 
  37 Explain         37   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  38 Gosub           20   40    0               00 
  39 Goto             0   55    0               00 
  40 Once             0   42    0               00 
  41 OpenPseudo      13   21   11               00 11 columns in r[21]
  42 SorterSort      11   55    0               00 
  43 SorterData      11   21   13               00 r[21]=data
  44 Column          13    1   17               00 r[17]=
  45 Column          13    7   16               00 r[16]=
  46 Column          13    0   15               00 r[15]=
  47 Column          13    6   14               00 r[14]=
  48 Column          13    5   13               00 r[13]=
  49 Column          13    4   12               00 r[12]=
  50 Column          13    3   11               00 r[11]=
  51 Column          13    2   10               00 r[10]=
  52 Yield            6    0    0               00 
  53 SorterNext      11   43    0               00 
  54 Return          20    0    0               00 
  55 EndCoroutine     6    0    0               00 
  56 SorterOpen      14    6    0 k(1,B)        00 
  57 Null             0   22   22               00 r[22..22]=NULL
  58 Integer          1   23    0               00 r[23]=1
  59 Explain         59    7    0 SCAN SUBQUERY 3 00 
  60 InitCoroutine    6    0   14               00 
  61 Yield            6  109    0               00 next row of subquery_3
  62 Copy            10   25    0               00 r[25]=r[10]
  63 Copy            11   26    0               00 r[26]=r[11]
  64 Copy            12   27    0               00 r[27]=r[12]
  65 Copy            13   28    0               00 r[28]=r[13]
  66 Copy            14   29    0               00 r[29]=r[14]
  67 Copy            15   30    0               00 r[30]=r[15]
  68 Copy            16   31    0               00 r[31]=r[16]
  69 Copy            17   32    0               00 r[32]=r[17]
  70 MakeRecord      25    8   33               00 r[33]=mkrec(r[25..32])
  71 Compare         29   22    1 k(1,B)        00 r[29] <-> r[22]
  72 Jump            73   75   73               00 
  73 Gosub           43  110    0               00 call flush_partition
  74 Copy            29   22    0               00 r[22]=r[29]
  75 NewRowid         7   34    0               00 r[34]=rowid
  76 Insert           7   33   34               00 intkey=r[34] data=r[33]
  77 Ne              23   86   34               00 if r[34]!=r[23] goto 86
  78 Null             0    4    0               00 r[4]=NULL
  79 Rewind           6    1    0               00 
  80 Rewind           9    1    0               00 
  81 Copy            30   35    1               00 r[35..36]=r[30..31]
  82 Copy            35   37    1               00 r[37..38]=r[35..36]
  83 Copy            35   39    1               00 r[39..40]=r[35..36]
  84 Copy            35   41    1               00 r[41..42]=r[35..36]
  85 Goto             0  108    0               00 
  86 Compare         35   30    2 k(2,B,B)      00 r[35..36] <-> r[30..31]
  87 Jump            88  108   88               00 
  88 Copy            30   35    1               00 r[35..36]=r[30..31]
  89 Column           9    7   44               00 r[44]=
  90 AggStep          0   44    4 sum(1)        01 accum=r[4] step(r[44])
  91 Next             9   93    0               00 
  92 Goto             0   98    0               00 
  93 Column           9    5   45               00 r[45]=
  94 Column           9    6   46               00 r[46]=
  95 Compare         41   45    2 k(2,B,B)      00 r[41..42] <-> r[45..46]
  96 Jump            97   89   97               00 
  97 Copy            45   41    1               00 r[41..42]=r[45..46]
  98 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  99 Gosub           24  134    0               00 
 100 Delete           6    0    0               02 
 101 Next             6  103    0               00 
 102 Goto             0  108    0               00 
 103 Column           6    5   45               00 r[45]=
 104 Column           6    6   46               00 r[46]=
 105 Compare         39   45    2 k(2,B,B)      00 r[39..40] <-> r[45..46]
 106 Jump           107   99  107               00 
 107 Copy            45   39    1               00 r[39..40]=r[45..46]
 108 Goto             0   61    0               00 
 109 Integer        132   43    0               00 r[43]=132
 110 Rewind           7  131    0               00 
 111 Column           9    7   44               00 r[44]=
 112 AggStep          0   44    4 sum(1)        01 accum=r[4] step(r[44])
 113 Next             9  115    0               00 
 114 Goto             0  120    0               00 
 115 Column           9    5   45               00 r[45]=
 116 Column           9    6   46               00 r[46]=
 117 Compare         41   45    2 k(2,B,B)      00 r[41..42] <-> r[45..46]
 118 Jump           119  111  119               00 
 119 Copy            45   41    1               00 r[41..42]=r[45..46]
 120 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
 121 Gosub           24  134    0               00 
 122 Delete           6    0    0               02 
 123 Next             6  125    0               00 
 124 Goto             0  131    0               00 
 125 Column           6    5   45               00 r[45]=
 126 Column           6    6   46               00 r[46]=
 127 Compare         39   45    2 k(2,B,B)      00 r[39..40] <-> r[45..46]
 128 Jump           129  121  129               00 
 129 Copy            45   39    1               00 r[39..40]=r[45..46]
 130 Goto             0  120    0               00 
 131 ResetSorter      6    0    0               00 
 132 Return          43    0    0               00 
 133 Goto             0  142    0               00 
 134 Noop             0    0    0               00 inner-loop subroutine
 135 Copy             5   48    0               00 r[48]=r[5]
 136 Column           6    0   49               00 r[49]=
 137 Column           6    2   50               00 r[50]=
 138 Column           6    3   47               00 r[47]=
 139 MakeRecord      47    4   52               00 r[52]=mkrec(r[47..50])
 140 SorterInsert    14   52   47 4             00 key=r[52]
 141 Return          24    0    0               00 end inner-loop subroutine
 142 Explain        142    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 143 OpenPseudo      15   53    6               00 6 columns in r[53]
 144 SorterSort      14  152    0               00 
 145 SorterData      14   53   15               00 r[53]=data
 146 Column          15    3   51               00 r[51]=
 147 Column          15    0   50               00 r[50]=
 148 Column          15    2   49               00 r[49]=
 149 Column          15    1   48               00 r[48]=
 150 Yield            3    0    0               00 
 151 SorterNext      14  145    0               00 
 152 EndCoroutine     3    0    0               00 
 153 SorterOpen      16    4    0 k(1,B)        00 
 154 Null             0   54   54               00 r[54..54]=NULL
 155 Integer          1   55    0               00 r[55]=1
 156 Explain        156    0    0 SCAN SUBQUERY 2 00 
 157 InitCoroutine    3    0    7               00 
 158 Yield            3  188    0               00 next row of subquery_2
 159 Copy            48   57    0               00 r[57]=r[48]
 160 Copy            49   58    0               00 r[58]=r[49]
 161 Copy            50   59    0               00 r[59]=r[50]
 162 Copy            51   60    0               00 r[60]=r[51]
 163 MakeRecord      57    4   61               00 r[61]=mkrec(r[57..60])
 164 Compare         59   54    1 k(1,B)        00 r[59] <-> r[54]
 165 Jump           166  168  166               00 
 166 Gosub           63  189    0               00 call flush_partition
 167 Copy            59   54    0               00 r[54]=r[59]
 168 NewRowid         2   62    0               00 r[62]=rowid
 169 Insert           2   61   62               00 intkey=r[62] data=r[61]
 170 Ne              55  175   62               00 if r[62]!=r[55] goto 175
 171 Null             0    1    0               00 r[1]=NULL
 172 Rewind           1    1    0               00 
 173 Rewind           4    1    0               00 
 174 Goto             0  187    0               00 
 175 Goto             0  187    0               00 
 176 Column           4    3   64               00 r[64]=
 177 AggStep          0   64    1 sum(1)        01 accum=r[1] step(r[64])
 178 Next             4  180    0               00 
 179 Goto             0  181    0               00 
 180 Goto             0  176    0               00 
 181 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 182 Gosub           56  205    0               00 
 183 Delete           1    0    0               02 
 184 Next             1  186    0               00 
 185 Goto             0  187    0               00 
 186 Goto             0  182    0               00 
 187 Goto             0  158    0               00 
 188 Integer        203   63    0               00 r[63]=203
 189 Rewind           2  202    0               00 
 190 Column           4    3   64               00 r[64]=
 191 AggStep          0   64    1 sum(1)        01 accum=r[1] step(r[64])
 192 Next             4  194    0               00 
 193 Goto             0  195    0               00 
 194 Goto             0  190    0               00 
 195 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 196 Gosub           56  205    0               00 
 197 Delete           1    0    0               02 
 198 Next             1  200    0               00 
 199 Goto             0  202    0               00 
 200 Goto             0  196    0               00 
 201 Goto             0  195    0               00 
 202 ResetSorter      1    0    0               00 
 203 Return          63    0    0               00 
 204 Goto             0  212    0               00 
 205 Noop             0    0    0               00 inner-loop subroutine
 206 Copy             2   66    0               00 r[66]=r[2]
 207 Column           1    0   67               00 r[67]=
 208 Column           1    1   65               00 r[65]=
 209 MakeRecord      65    3   68               00 r[68]=mkrec(r[65..67])
 210 SorterInsert    16   68   65 3             00 key=r[68]
 211 Return          56    0    0               00 end inner-loop subroutine
 212 Explain        212    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 213 OpenPseudo      17   69    4               00 4 columns in r[69]
 214 SorterSort      16  220    0               00 
 215 SorterData      16   69   17               00 r[69]=data
 216 Column          17    2   67               00 r[67]=sum(following) OVER (PARTITION BY over ORDER BY over, following RANGE BETWEEN UNBOUNDED PRECE
 217 Column          17    1   66               00 r[66]=sum(following) OVER (PARTITION BY over  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 218 ResultRow       66    2    0               00 output=r[66..67]
 219 SorterNext      16  215    0               00 
 220 Halt             0    0    0               00 
 221 Transaction      0    0    5 0             01 usesStmtJournal=0
 222 Goto             0    1    0               00 
SQL: [SELECT max(c0) OVER (PARTITION BY c0 ORDER BY c0, c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM t0 ORDER BY c0

;]
VDBE Program Listing:
   0 Init             0  260    0               00 Start at 260
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    6    0               00 nColumn=6
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  166    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6   11    0               00 nColumn=11
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   62   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11   11    0 k(1,-B)       00 
  16 OpenRead        12    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  17 Explain         17   14    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  18 Rewind          12   40    7 0             00 
  19 Column          12    0    9               00 r[9]=t0.c0
  20 Column          12    0   10               00 r[10]=t0.c0
  21 Column          12    0   11               00 r[11]=t0.c0
  22 Column          12    0   12               00 r[12]=t0.c0
  23 Column          12    0   13               00 r[13]=t0.c0
  24 Column          12    0   14               00 r[14]=t0.c0
  25 Column          12    0   15               00 r[15]=t0.c0
  26 Column          12    0   16               00 r[16]=t0.c0
  27 Column          12    0   17               00 r[17]=t0.c0
  28 Column          12    0   18               00 r[18]=t0.c0
  29 Column          12    0    7               00 r[7]=t0.c0
  30 Column          12    0    8               00 r[8]=t0.c0
  31 MakeRecord       8   11   20               00 r[20]=mkrec(r[8..18])
  32 SequenceTest    11   37    0               00 if( cursor[11].ctr++ ) pc = 37
  33 Compare         21    7    1 k(2,B,B)      00 r[21] <-> r[7]
  34 Jump            35   38   35               00 
  35 Gosub           22   43    0               00 
  36 ResetSorter     11    0    0               00 
  37 Move             7   21    1               00 r[21]=r[7]
  38 SorterInsert    11   20    8 11            00 key=r[20]
  39 Next            12   19    0               01 
  40 Explain         40   14    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  41 Gosub           22   43    0               00 
  42 Goto             0   61    0               00 
  43 Once             0   45    0               00 
  44 OpenPseudo      13   23   13               00 13 columns in r[23]
  45 SorterSort      11   61    0               00 
  46 SorterData      11   23   13               00 r[23]=data
  47 Column          13    0   19               00 r[19]=
  48 Column          13   10   18               00 r[18]=
  49 Column          13    9   17               00 r[17]=
  50 Column          13    8   16               00 r[16]=
  51 Column          13    7   15               00 r[15]=
  52 Column          13    6   14               00 r[14]=
  53 Column          13    5   13               00 r[13]=
  54 Column          13    4   12               00 r[12]=
  55 Column          13    3   11               00 r[11]=
  56 Column          13    2   10               00 r[10]=
  57 Column          13    1    9               00 r[9]=
  58 Yield            6    0    0               00 
  59 SorterNext      11   46    0               00 
  60 Return          22    0    0               00 
  61 EndCoroutine     6    0    0               00 
  62 SorterOpen      14   10    0 k(3,B,B,B)    00 
  63 Null             0   24   24               00 r[24..24]=NULL
  64 Integer          1   25    0               00 r[25]=1
  65 Explain         65    7    0 SCAN SUBQUERY 3 00 
  66 InitCoroutine    6    0   14               00 
  67 Yield            6  117    0               00 next row of subquery_3
  68 Copy             9   27    0               00 r[27]=r[9]
  69 Copy            10   28    0               00 r[28]=r[10]
  70 Copy            11   29    0               00 r[29]=r[11]
  71 Copy            12   30    0               00 r[30]=r[12]
  72 Copy            13   31    0               00 r[31]=r[13]
  73 Copy            14   32    0               00 r[32]=r[14]
  74 Copy            15   33    0               00 r[33]=r[15]
  75 Copy            16   34    0               00 r[34]=r[16]
  76 Copy            17   35    0               00 r[35]=r[17]
  77 Copy            18   36    0               00 r[36]=r[18]
  78 Copy            19   37    0               00 r[37]=r[19]
  79 MakeRecord      27   11   38               00 r[38]=mkrec(r[27..37])
  80 Compare         35   24    1 k(1,B)        00 r[35] <-> r[24]
  81 Jump            82   84   82               00 
  82 Gosub           44  118    0               00 call flush_partition
  83 Copy            35   24    0               00 r[24]=r[35]
  84 NewRowid         7   39    0               00 r[39]=rowid
  85 Insert           7   38   39               00 intkey=r[39] data=r[38]
  86 Ne              25   95   39               00 if r[39]!=r[25] goto 95
  87 Null             0    4    0               00 r[4]=NULL
  88 Rewind           6    1    0               00 
  89 Rewind           9    1    0               00 
  90 Copy            36   40    0               00 r[40]=r[36]
  91 Copy            40   41    0               00 r[41]=r[40]
  92 Copy            40   42    0               00 r[42]=r[40]
  93 Copy            40   43    0               00 r[43]=r[40]
  94 Goto             0  116    0               00 
  95 Compare         40   36    1 k(1,-B)       00 r[40] <-> r[36]
  96 Jump            97  116   97               00 
  97 Copy            36   40    0               00 r[40]=r[36]
  98 Column           9   10   45               00 r[45]=
  99 CollSeq          0    0    0 (BINARY)      00 
 100 AggStep          0   45    4 min(1)        01 accum=r[4] step(r[45])
 101 Next             9  103    0               00 
 102 Goto             0  107    0               00 
 103 Column           9    9   46               00 r[46]=
 104 Compare         43   46    1 k(1,-B)       00 r[43] <-> r[46]
 105 Jump           106   98  106               00 
 106 Copy            46   43    0               00 r[43]=r[46]
 107 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 108 Gosub           26  141    0               00 
 109 Delete           6    0    0               02 
 110 Next             6  112    0               00 
 111 Goto             0  116    0               00 
 112 Column           6    9   46               00 r[46]=
 113 Compare         42   46    1 k(1,-B)       00 r[42] <-> r[46]
 114 Jump           115  108  115               00 
 115 Copy            46   42    0               00 r[42]=r[46]
 116 Goto             0   67    0               00 
 117 Integer        139   44    0               00 r[44]=139
 118 Rewind           7  138    0               00 
 119 Column           9   10   45               00 r[45]=
 120 CollSeq          0    0    0 (BINARY)      00 
 121 AggStep          0   45    4 min(1)        01 accum=r[4] step(r[45])
 122 Next             9  124    0               00 
 123 Goto             0  128    0               00 
 124 Column           9    9   46               00 r[46]=
 125 Compare         43   46    1 k(1,-B)       00 r[43] <-> r[46]
 126 Jump           127  119  127               00 
 127 Copy            46   43    0               00 r[43]=r[46]
 128 AggValue         4    1    5 min(1)        00 r[5]=value N=1
 129 Gosub           26  141    0               00 
 130 Delete           6    0    0               02 
 131 Next             6  133    0               00 
 132 Goto             0  138    0               00 
 133 Column           6    9   46               00 r[46]=
 134 Compare         42   46    1 k(1,-B)       00 r[42] <-> r[46]
 135 Jump           136  129  136               00 
 136 Copy            46   42    0               00 r[42]=r[46]
 137 Goto             0  128    0               00 
 138 ResetSorter      6    0    0               00 
 139 Return          44    0    0               00 
 140 Goto             0  153    0               00 
 141 Noop             0    0    0               00 inner-loop subroutine
 142 Copy             5   50    0               00 r[50]=r[5]
 143 Column           6    0   51               00 r[51]=
 144 Column           6    1   52               00 r[52]=
 145 Column           6    2   53               00 r[53]=
 146 Column           6    3   54               00 r[54]=
 147 Column           6    5   47               00 r[47]=
 148 Column           6    6   48               00 r[48]=
 149 Column           6    7   49               00 r[49]=
 150 MakeRecord      47    8   56               00 r[56]=mkrec(r[47..54])
 151 SorterInsert    14   56   47 8             00 key=r[56]
 152 Return          26    0    0               00 end inner-loop subroutine
 153 Explain        153    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 154 OpenPseudo      15   57   10               00 10 columns in r[57]
 155 SorterSort      14  165    0               00 
 156 SorterData      14   57   15               00 r[57]=data
 157 Column          15    2   55               00 r[55]=
 158 Column          15    7   54               00 r[54]=
 159 Column          15    6   53               00 r[53]=
 160 Column          15    5   52               00 r[52]=
 161 Column          15    4   51               00 r[51]=
 162 Column          15    3   50               00 r[50]=
 163 Yield            3    0    0               00 
 164 SorterNext      14  156    0               00 
 165 EndCoroutine     3    0    0               00 
 166 SorterOpen      16    4    0 k(1,B)        00 
 167 Null             0   58   58               00 r[58..58]=NULL
 168 Integer          1   59    0               00 r[59]=1
 169 Explain        169    0    0 SCAN SUBQUERY 2 00 
 170 InitCoroutine    3    0    7               00 
 171 Yield            3  218    0               00 next row of subquery_2
 172 Copy            50   61    0               00 r[61]=r[50]
 173 Copy            51   62    0               00 r[62]=r[51]
 174 Copy            52   63    0               00 r[63]=r[52]
 175 Copy            53   64    0               00 r[64]=r[53]
 176 Copy            54   65    0               00 r[65]=r[54]
 177 Copy            55   66    0               00 r[66]=r[55]
 178 MakeRecord      61    6   67               00 r[67]=mkrec(r[61..66])
 179 Compare         63   58    1 k(1,B)        00 r[63] <-> r[58]
 180 Jump           181  183  181               00 
 181 Gosub           77  219    0               00 call flush_partition
 182 Copy            63   58    0               00 r[58]=r[63]
 183 NewRowid         2   68    0               00 r[68]=rowid
 184 Insert           2   67   68               00 intkey=r[68] data=r[67]
 185 Ne              59  194   68               00 if r[68]!=r[59] goto 194
 186 Null             0    1    0               00 r[1]=NULL
 187 Rewind           1    1    0               00 
 188 Rewind           4    1    0               00 
 189 Copy            64   69    1               00 r[69..70]=r[64..65]
 190 Copy            69   71    1               00 r[71..72]=r[69..70]
 191 Copy            69   73    1               00 r[73..74]=r[69..70]
 192 Copy            69   75    1               00 r[75..76]=r[69..70]
 193 Goto             0  217    0               00 
 194 Compare         69   64    2 k(2,B,B)      00 r[69..70] <-> r[64..65]
 195 Jump           196  217  196               00 
 196 Copy            64   69    1               00 r[69..70]=r[64..65]
 197 Column           4    5   78               00 r[78]=
 198 CollSeq          0    0    0 (BINARY)      00 
 199 AggStep          0   78    1 max(1)        01 accum=r[1] step(r[78])
 200 Next             4  202    0               00 
 201 Goto             0  207    0               00 
 202 Column           4    3   79               00 r[79]=
 203 Column           4    4   80               00 r[80]=
 204 Compare         75   79    2 k(2,B,B)      00 r[75..76] <-> r[79..80]
 205 Jump           206  197  206               00 
 206 Copy            79   75    1               00 r[75..76]=r[79..80]
 207 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 208 Gosub           60  244    0               00 
 209 Delete           1    0    0               02 
 210 Next             1  212    0               00 
 211 Goto             0  217    0               00 
 212 Column           1    3   79               00 r[79]=
 213 Column           1    4   80               00 r[80]=
 214 Compare         73   79    2 k(2,B,B)      00 r[73..74] <-> r[79..80]
 215 Jump           216  208  216               00 
 216 Copy            79   73    1               00 r[73..74]=r[79..80]
 217 Goto             0  171    0               00 
 218 Integer        242   77    0               00 r[77]=242
 219 Rewind           2  241    0               00 
 220 Column           4    5   78               00 r[78]=
 221 CollSeq          0    0    0 (BINARY)      00 
 222 AggStep          0   78    1 max(1)        01 accum=r[1] step(r[78])
 223 Next             4  225    0               00 
 224 Goto             0  230    0               00 
 225 Column           4    3   79               00 r[79]=
 226 Column           4    4   80               00 r[80]=
 227 Compare         75   79    2 k(2,B,B)      00 r[75..76] <-> r[79..80]
 228 Jump           229  220  229               00 
 229 Copy            79   75    1               00 r[75..76]=r[79..80]
 230 AggValue         1    1    2 max(1)        00 r[2]=value N=1
 231 Gosub           60  244    0               00 
 232 Delete           1    0    0               02 
 233 Next             1  235    0               00 
 234 Goto             0  241    0               00 
 235 Column           1    3   79               00 r[79]=
 236 Column           1    4   80               00 r[80]=
 237 Compare         73   79    2 k(2,B,B)      00 r[73..74] <-> r[79..80]
 238 Jump           239  231  239               00 
 239 Copy            79   73    1               00 r[73..74]=r[79..80]
 240 Goto             0  230    0               00 
 241 ResetSorter      1    0    0               00 
 242 Return          77    0    0               00 
 243 Goto             0  251    0               00 
 244 Noop             0    0    0               00 inner-loop subroutine
 245 Copy             2   82    0               00 r[82]=r[2]
 246 Column           1    0   83               00 r[83]=
 247 Column           1    1   81               00 r[81]=
 248 MakeRecord      81    3   84               00 r[84]=mkrec(r[81..83])
 249 SorterInsert    16   84   81 3             00 key=r[84]
 250 Return          60    0    0               00 end inner-loop subroutine
 251 Explain        251    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 252 OpenPseudo      17   85    4               00 4 columns in r[85]
 253 SorterSort      16  259    0               00 
 254 SorterData      16   85   17               00 r[85]=data
 255 Column          17    2   83               00 r[83]=min(c0) OVER (PARTITION BY c0 ORDER BY c0 DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT 
 256 Column          17    1   82               00 r[82]=max(c0) OVER (PARTITION BY c0 ORDER BY c0, c0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT R
 257 ResultRow       82    2    0               00 output=r[82..83]
 258 SorterNext      16  254    0               00 
 259 Halt             0    0    0               00 
 260 Transaction      0    0    5 0             01 usesStmtJournal=0
 261 Goto             0    1    0               00 
SQL: [SELECT sum(t1) OVER (PARTITION BY t1 ORDER BY t1, x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
         sum(t1) OVER (PARTITION BY t1  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  206    0               00 Start at 206
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    6    0               00 nColumn=6
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  114    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6   10    0               00 nColumn=10
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   32   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Noop            11   12    0               00 
  16 OpenRead        12    7    0 k(3,,,)       00 root=7 iDb=0; sqlite_autoindex_preceding_1
  17 Explain         17   14    0 SCAN TABLE preceding USING COVERING INDEX sqlite_autoindex_preceding_1 00 
  18 Rewind          12   31    7 0             00 
  19 Column          12    1    7               00 r[7]=preceding.x
  20 Column          12    0    8               00 r[8]=preceding.t1
  21 Column          12    0    9               00 r[9]=preceding.t1
  22 Column          12    1   10               00 r[10]=preceding.x
  23 Column          12    0   11               00 r[11]=preceding.t1
  24 Column          12    0   12               00 r[12]=preceding.t1
  25 Column          12    0   13               00 r[13]=preceding.t1
  26 Column          12    1   14               00 r[14]=preceding.x
  27 Column          12    0   15               00 r[15]=preceding.t1
  28 Column          12    0   16               00 r[16]=preceding.t1
  29 Yield            6    0    0               00 
  30 Next            12   19    0               01 
  31 EndCoroutine     6    0    0               00 
  32 SorterOpen      13   10    0 k(3,B,B,B)    00 
  33 Null             0   17   17               00 r[17..17]=NULL
  34 Integer          1   18    0               00 r[18]=1
  35 Explain         35    7    0 SCAN SUBQUERY 3 00 
  36 InitCoroutine    6    0   14               00 
  37 Yield            6   73    0               00 next row of subquery_3
  38 Copy             7   20    0               00 r[20]=r[7]
  39 Copy             8   21    0               00 r[21]=r[8]
  40 Copy             9   22    0               00 r[22]=r[9]
  41 Copy            10   23    0               00 r[23]=r[10]
  42 Copy            11   24    0               00 r[24]=r[11]
  43 Copy            12   25    0               00 r[25]=r[12]
  44 Copy            13   26    0               00 r[26]=r[13]
  45 Copy            14   27    0               00 r[27]=r[14]
  46 Copy            15   28    0               00 r[28]=r[15]
  47 Copy            16   29    0               00 r[29]=r[16]
  48 MakeRecord      20   10   30               00 r[30]=mkrec(r[20..29])
  49 Compare         28   17    1 k(1,B)        00 r[28] <-> r[17]
  50 Jump            51   53   51               00 
  51 Gosub           32   74    0               00 call flush_partition
  52 Copy            28   17    0               00 r[17]=r[28]
  53 NewRowid         7   31    0               00 r[31]=rowid
  54 Insert           7   30   31               00 intkey=r[31] data=r[30]
  55 Ne              18   60   31               00 if r[31]!=r[18] goto 60
  56 Null             0    4    0               00 r[4]=NULL
  57 Rewind           6    1    0               00 
  58 Rewind           9    1    0               00 
  59 Goto             0   72    0               00 
  60 Goto             0   72    0               00 
  61 Column           9    9   33               00 r[33]=
  62 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
  63 Next             9   65    0               00 
  64 Goto             0   66    0               00 
  65 Goto             0   61    0               00 
  66 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  67 Gosub           19   90    0               00 
  68 Delete           6    0    0               02 
  69 Next             6   71    0               00 
  70 Goto             0   72    0               00 
  71 Goto             0   67    0               00 
  72 Goto             0   37    0               00 
  73 Integer         88   32    0               00 r[32]=88
  74 Rewind           7   87    0               00 
  75 Column           9    9   33               00 r[33]=
  76 AggStep          0   33    4 sum(1)        01 accum=r[4] step(r[33])
  77 Next             9   79    0               00 
  78 Goto             0   80    0               00 
  79 Goto             0   75    0               00 
  80 AggValue         4    1    5 sum(1)        00 r[5]=value N=1
  81 Gosub           19   90    0               00 
  82 Delete           6    0    0               02 
  83 Next             6   85    0               00 
  84 Goto             0   87    0               00 
  85 Goto             0   81    0               00 
  86 Goto             0   80    0               00 
  87 ResetSorter      6    0    0               00 
  88 Return          32    0    0               00 
  89 Goto             0  101    0               00 
  90 Noop             0    0    0               00 inner-loop subroutine
  91 Copy             5   37    0               00 r[37]=r[5]
  92 Column           6    0   38               00 r[38]=
  93 Column           6    1   39               00 r[39]=
  94 Column           6    2   40               00 r[40]=
  95 Column           6    5   34               00 r[34]=
  96 Column           6    6   35               00 r[35]=
  97 Column           6    7   36               00 r[36]=
  98 MakeRecord      34    7   43               00 r[43]=mkrec(r[34..40])
  99 SorterInsert    13   43   34 7             00 key=r[43]
 100 Return          19    0    0               00 end inner-loop subroutine
 101 Explain        101    7    0 USE TEMP B-TREE FOR ORDER BY 00 
 102 OpenPseudo      14   44   10               00 10 columns in r[44]
 103 SorterSort      13  113    0               00 
 104 SorterData      13   44   14               00 r[44]=data
 105 Column          14    1   42               00 r[42]=
 106 Column          14    2   41               00 r[41]=
 107 Column          14    6   40               00 r[40]=
 108 Column          14    5   39               00 r[39]=
 109 Column          14    4   38               00 r[38]=
 110 Column          14    3   37               00 r[37]=
 111 Yield            3    0    0               00 
 112 SorterNext      13  104    0               00 
 113 EndCoroutine     3    0    0               00 
 114 SorterOpen      15    4    0 k(1,B)        00 
 115 Null             0   45   45               00 r[45..45]=NULL
 116 Integer          1   46    0               00 r[46]=1
 117 Explain        117    0    0 SCAN SUBQUERY 2 00 
 118 InitCoroutine    3    0    7               00 
 119 Yield            3  165    0               00 next row of subquery_2
 120 Copy            37   48    0               00 r[48]=r[37]
 121 Copy            38   49    0               00 r[49]=r[38]
 122 Copy            39   50    0               00 r[50]=r[39]
 123 Copy            40   51    0               00 r[51]=r[40]
 124 Copy            41   52    0               00 r[52]=r[41]
 125 Copy            42   53    0               00 r[53]=r[42]
 126 MakeRecord      48    6   54               00 r[54]=mkrec(r[48..53])
 127 Compare         50   45    1 k(1,B)        00 r[50] <-> r[45]
 128 Jump           129  131  129               00 
 129 Gosub           64  166    0               00 call flush_partition
 130 Copy            50   45    0               00 r[45]=r[50]
 131 NewRowid         2   55    0               00 r[55]=rowid
 132 Insert           2   54   55               00 intkey=r[55] data=r[54]
 133 Ne              46  142   55               00 if r[55]!=r[46] goto 142
 134 Null             0    1    0               00 r[1]=NULL
 135 Rewind           1    1    0               00 
 136 Rewind           4    1    0               00 
 137 Copy            51   56    1               00 r[56..57]=r[51..52]
 138 Copy            56   58    1               00 r[58..59]=r[56..57]
 139 Copy            56   60    1               00 r[60..61]=r[56..57]
 140 Copy            56   62    1               00 r[62..63]=r[56..57]
 141 Goto             0  164    0               00 
 142 Compare         56   51    2 k(2,B,B)      00 r[56..57] <-> r[51..52]
 143 Jump           144  164  144               00 
 144 Copy            51   56    1               00 r[56..57]=r[51..52]
 145 Column           4    5   65               00 r[65]=
 146 AggStep          0   65    1 sum(1)        01 accum=r[1] step(r[65])
 147 Next             4  149    0               00 
 148 Goto             0  154    0               00 
 149 Column           4    3   66               00 r[66]=
 150 Column           4    4   67               00 r[67]=
 151 Compare         62   66    2 k(2,B,B)      00 r[62..63] <-> r[66..67]
 152 Jump           153  145  153               00 
 153 Copy            66   62    1               00 r[62..63]=r[66..67]
 154 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 155 Gosub           47  190    0               00 
 156 Delete           1    0    0               02 
 157 Next             1  159    0               00 
 158 Goto             0  164    0               00 
 159 Column           1    3   66               00 r[66]=
 160 Column           1    4   67               00 r[67]=
 161 Compare         60   66    2 k(2,B,B)      00 r[60..61] <-> r[66..67]
 162 Jump           163  155  163               00 
 163 Copy            66   60    1               00 r[60..61]=r[66..67]
 164 Goto             0  119    0               00 
 165 Integer        188   64    0               00 r[64]=188
 166 Rewind           2  187    0               00 
 167 Column           4    5   65               00 r[65]=
 168 AggStep          0   65    1 sum(1)        01 accum=r[1] step(r[65])
 169 Next             4  171    0               00 
 170 Goto             0  176    0               00 
 171 Column           4    3   66               00 r[66]=
 172 Column           4    4   67               00 r[67]=
 173 Compare         62   66    2 k(2,B,B)      00 r[62..63] <-> r[66..67]
 174 Jump           175  167  175               00 
 175 Copy            66   62    1               00 r[62..63]=r[66..67]
 176 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
 177 Gosub           47  190    0               00 
 178 Delete           1    0    0               02 
 179 Next             1  181    0               00 
 180 Goto             0  187    0               00 
 181 Column           1    3   66               00 r[66]=
 182 Column           1    4   67               00 r[67]=
 183 Compare         60   66    2 k(2,B,B)      00 r[60..61] <-> r[66..67]
 184 Jump           185  177  185               00 
 185 Copy            66   60    1               00 r[60..61]=r[66..67]
 186 Goto             0  176    0               00 
 187 ResetSorter      1    0    0               00 
 188 Return          64    0    0               00 
 189 Goto             0  197    0               00 
 190 Noop             0    0    0               00 inner-loop subroutine
 191 Copy             2   69    0               00 r[69]=r[2]
 192 Column           1    0   70               00 r[70]=
 193 Column           1    1   68               00 r[68]=
 194 MakeRecord      68    3   71               00 r[71]=mkrec(r[68..70])
 195 SorterInsert    15   71   68 3             00 key=r[71]
 196 Return          47    0    0               00 end inner-loop subroutine
 197 Explain        197    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 198 OpenPseudo      16   72    4               00 4 columns in r[72]
 199 SorterSort      15  205    0               00 
 200 SorterData      15   72   16               00 r[72]=data
 201 Column          16    2   70               00 r[70]=sum(t1) OVER (PARTITION BY t1  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 202 Column          16    1   69               00 r[69]=sum(t1) OVER (PARTITION BY t1 ORDER BY t1, x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT RO
 203 ResultRow       69    2    0               00 output=r[69..70]
 204 SorterNext      15  200    0               00 
 205 Halt             0    0    0               00 
 206 Transaction      0    0    5 0             01 usesStmtJournal=0
 207 Goto             0    1    0               00 
SQL: [SELECT max(t1) OVER (PARTITION BY x ORDER BY x, x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 
  min(t1) OVER (PARTITION BY x ORDER BY x, x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
  FROM preceding ORDER BY x

;]
VDBE Program Listing:
   0 Init             0  140    0               00 Start at 140
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1    6    0               00 nColumn=6
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5   37    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 SorterOpen       6   10    0 k(3,B,B,B)    00 
  10 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  11 Explain         11    8    0 SCAN TABLE preceding 00 
  12 Rewind           0   24    0               00 
  13 Column           0    1    9               00 r[9]=preceding.x
  14 Column           0    1   10               00 r[10]=preceding.x
  15 Column           0    1   11               00 r[11]=preceding.x
  16 Column           0    0   12               00 r[12]=preceding.t1
  17 Column           0    0   13               00 r[13]=preceding.t1
  18 Column           0    1    6               00 r[6]=preceding.x
  19 Column           0    1    7               00 r[7]=preceding.x
  20 Column           0    1    8               00 r[8]=preceding.x
  21 MakeRecord       6    8   15               00 r[15]=mkrec(r[6..13])
  22 SorterInsert     6   15    6 8             00 key=r[15]
  23 Next             0   13    0               01 
  24 Explain         24    8    0 USE TEMP B-TREE FOR ORDER BY 00 
  25 OpenPseudo       7   16   10               00 10 columns in r[16]
  26 SorterSort       6   36    0               00 
  27 SorterData       6   16    7               00 r[16]=data
  28 Column           7    7   14               00 r[14]=
  29 Column           7    6   13               00 r[13]=
  30 Column           7    2   12               00 r[12]=
  31 Column           7    5   11               00 r[11]=
  32 Column           7    4   10               00 r[10]=
  33 Column           7    3    9               00 r[9]=
  34 Yield            5    0    0               00 
  35 SorterNext       6   27    0               00 
  36 EndCoroutine     5    0    0               00 
  37 SorterOpen       8    4    0 k(1,B)        00 
  38 Null             0   17   17               00 r[17..17]=NULL
  39 Integer          1   18    0               00 r[18]=1
  40 Explain         40    0    0 SCAN SUBQUERY 2 00 
  41 InitCoroutine    5    0    8               00 
  42 Yield            5   94    0               00 next row of subquery_2
  43 Copy             9   20    0               00 r[20]=r[9]
  44 Copy            10   21    0               00 r[21]=r[10]
  45 Copy            11   22    0               00 r[22]=r[11]
  46 Copy            12   23    0               00 r[23]=r[12]
  47 Copy            13   24    0               00 r[24]=r[13]
  48 Copy            14   25    0               00 r[25]=r[14]
  49 MakeRecord      20    6   26               00 r[26]=mkrec(r[20..25])
  50 Compare         21   17    1 k(1,B)        00 r[21] <-> r[17]
  51 Jump            52   54   52               00 
  52 Gosub           36   95    0               00 call flush_partition
  53 Copy            21   17    0               00 r[17]=r[21]
  54 NewRowid         2   27    0               00 r[27]=rowid
  55 Insert           2   26   27               00 intkey=r[27] data=r[26]
  56 Ne              18   66   27               00 if r[27]!=r[18] goto 66
  57 Null             0    1    0               00 r[1]=NULL
  58 Null             0    3    0               00 r[3]=NULL
  59 Rewind           1    1    0               00 
  60 Rewind           4    1    0               00 
  61 Copy            22   28    1               00 r[28..29]=r[22..23]
  62 Copy            28   30    1               00 r[30..31]=r[28..29]
  63 Copy            28   32    1               00 r[32..33]=r[28..29]
  64 Copy            28   34    1               00 r[34..35]=r[28..29]
  65 Goto             0   93    0               00 
  66 Compare         28   22    2 k(2,B,B)      00 r[28..29] <-> r[22..23]
  67 Jump            68   93   68               00 
  68 Copy            22   28    1               00 r[28..29]=r[22..23]
  69 Column           4    4   37               00 r[37]=
  70 CollSeq          0    0    0 (BINARY)      00 
  71 AggStep          0   37    1 min(1)        01 accum=r[1] step(r[37])
  72 Column           4    5   37               00 r[37]=
  73 CollSeq          0    0    0 (BINARY)      00 
  74 AggStep          0   37    3 max(1)        01 accum=r[3] step(r[37])
  75 Next             4   77    0               00 
  76 Goto             0   82    0               00 
  77 Column           4    2   38               00 r[38]=
  78 Column           4    3   39               00 r[39]=
  79 Compare         34   38    2 k(2,B,B)      00 r[34..35] <-> r[38..39]
  80 Jump            81   69   81               00 
  81 Copy            38   34    1               00 r[34..35]=r[38..39]
  82 AggValue         1    1    2 min(1)        00 r[2]=value N=1
  83 AggValue         3    1    4 max(1)        00 r[4]=value N=1
  84 Gosub           19  124    0               00 
  85 Delete           1    0    0               02 
  86 Next             1   88    0               00 
  87 Goto             0   93    0               00 
  88 Column           1    2   38               00 r[38]=
  89 Column           1    3   39               00 r[39]=
  90 Compare         32   38    2 k(2,B,B)      00 r[32..33] <-> r[38..39]
  91 Jump            92   84   92               00 
  92 Copy            38   32    1               00 r[32..33]=r[38..39]
  93 Goto             0   42    0               00 
  94 Integer        122   36    0               00 r[36]=122
  95 Rewind           2  121    0               00 
  96 Column           4    4   37               00 r[37]=
  97 CollSeq          0    0    0 (BINARY)      00 
  98 AggStep          0   37    1 min(1)        01 accum=r[1] step(r[37])
  99 Column           4    5   37               00 r[37]=
 100 CollSeq          0    0    0 (BINARY)      00 
 101 AggStep          0   37    3 max(1)        01 accum=r[3] step(r[37])
 102 Next             4  104    0               00 
 103 Goto             0  109    0               00 
 104 Column           4    2   38               00 r[38]=
 105 Column           4    3   39               00 r[39]=
 106 Compare         34   38    2 k(2,B,B)      00 r[34..35] <-> r[38..39]
 107 Jump           108   96  108               00 
 108 Copy            38   34    1               00 r[34..35]=r[38..39]
 109 AggValue         1    1    2 min(1)        00 r[2]=value N=1
 110 AggValue         3    1    4 max(1)        00 r[4]=value N=1
 111 Gosub           19  124    0               00 
 112 Delete           1    0    0               02 
 113 Next             1  115    0               00 
 114 Goto             0  121    0               00 
 115 Column           1    2   38               00 r[38]=
 116 Column           1    3   39               00 r[39]=
 117 Compare         32   38    2 k(2,B,B)      00 r[32..33] <-> r[38..39]
 118 Jump           119  111  119               00 
 119 Copy            38   32    1               00 r[32..33]=r[38..39]
 120 Goto             0  109    0               00 
 121 ResetSorter      1    0    0               00 
 122 Return          36    0    0               00 
 123 Goto             0  131    0               00 
 124 Noop             0    0    0               00 inner-loop subroutine
 125 Copy             4   41    0               00 r[41]=r[4]
 126 Copy             2   42    0               00 r[42]=r[2]
 127 Column           1    0   40               00 r[40]=
 128 MakeRecord      40    3   43               00 r[43]=mkrec(r[40..42])
 129 SorterInsert     8   43   40 3             00 key=r[43]
 130 Return          19    0    0               00 end inner-loop subroutine
 131 Explain        131    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 132 OpenPseudo       9   44    4               00 4 columns in r[44]
 133 SorterSort       8  139    0               00 
 134 SorterData       8   44    9               00 r[44]=data
 135 Column           9    2   42               00 r[42]=min(t1) OVER (PARTITION BY x ORDER BY x, x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 136 Column           9    1   41               00 r[41]=max(t1) OVER (PARTITION BY x ORDER BY x, x RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
 137 ResultRow       41    2    0               00 output=r[41..42]
 138 SorterNext       8  134    0               00 
 139 Halt             0    0    0               00 
 140 Transaction      0    0    5 0             01 usesStmtJournal=0
 141 Goto             0    1    0               00 
SQL: [DROP TABLE IF EXISTS t1;]
VDBE Program Listing:
   0 Init             0    2    0               00 Start at 2
   1 Halt             0    0    0               00 
   2 Transaction      0    0    5 0             01 usesStmtJournal=0
   3 Transaction      1    0    0 0             01 usesStmtJournal=0
   4 Goto             0    1    0               00 
SQL: [;CREATE TABLE field4(test006 INTEGER, field5 INTEGER);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 field4        00 r[7]='field4'
  20 String8          0    8    0 field4        00 r[8]='field4'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE field4(test006 INTEGER, field5 INTEGER) 00 r[10]='CREATE TABLE field4(test006 INTEGER, field5 INTEGER)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    6               00 
  26 ParseSchema      0    0    0 tbl_name='field4' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    5 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    6 0             00 usesStmtJournal=0
  16 String8          0    2    0 field4        00 r[2]='field4'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;INSERT INTO field4 VALUES(1, 2);]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenWrite        0   10    0 2             00 root=10 iDb=0; field4
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          1    2    0               00 r[2]=1
   4 Integer          2    3    0               00 r[3]=2
   5 MakeRecord       2    2    4 DD            00 r[4]=mkrec(r[2..3])
   6 Insert           0    4    1 field4        39 intkey=r[1] data=r[4]
   7 Halt             0    0    0               00 
   8 Transaction      0    1    6 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [;INSERT INTO field4 VALUES(7, 8);]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenWrite        0   10    0 2             00 root=10 iDb=0; field4
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          7    2    0               00 r[2]=7
   4 Integer          8    3    0               00 r[3]=8
   5 MakeRecord       2    2    4 DD            00 r[4]=mkrec(r[2..3])
   6 Insert           0    4    1 field4        39 intkey=r[1] data=r[4]
   7 Halt             0    0    0               00 
   8 Transaction      0    1    6 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [;INSERT INTO field4 VALUES(9, 10);]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenWrite        0   10    0 2             00 root=10 iDb=0; field4
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer          9    2    0               00 r[2]=9
   4 Integer         10    3    0               00 r[3]=10
   5 MakeRecord       2    2    4 DD            00 r[4]=mkrec(r[2..3])
   6 Insert           0    4    1 field4        39 intkey=r[1] data=r[4]
   7 Halt             0    0    0               00 
   8 Transaction      0    1    6 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [SELECT lead(x, 2) OVER win FROM preceding
  WINDOW win AS (ORDER BY x)

;]
VDBE Program Listing:
   0 Init             0   70    0               00 Start at 70
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   28    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  10 Explain         10    7    0 SCAN TABLE preceding 00 
  11 Rewind           0   18    0               00 
  12 Column           0    1    5               00 r[5]=preceding.x
  13 Integer          2    6    0               00 r[6]=2
  14 Column           0    1    4               00 r[4]=preceding.x
  15 MakeRecord       4    3    8               00 r[8]=mkrec(r[4..6])
  16 SorterInsert     6    8    4 3             00 key=r[8]
  17 Next             0   12    0               01 
  18 Explain         18    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 OpenPseudo       7    9    5               00 5 columns in r[9]
  20 SorterSort       6   27    0               00 
  21 SorterData       6    9    7               00 r[9]=data
  22 Column           7    2    7               00 r[7]=
  23 Column           7    0    6               00 r[6]=
  24 Column           7    1    5               00 r[5]=
  25 Yield            3    0    0               00 
  26 SorterNext       6   21    0               00 
  27 EndCoroutine     3    0    0               00 
  28 Integer          1   10    0               00 r[10]=1
  29 OpenDup          8    1    0               00 
  30 Explain         30    0    0 SCAN SUBQUERY 2 00 
  31 InitCoroutine    3    0    7               00 
  32 Yield            3   48    0               00 next row of subquery_2
  33 Copy             5   12    0               00 r[12]=r[5]
  34 Copy             6   13    0               00 r[13]=r[6]
  35 Copy             7   14    0               00 r[14]=r[7]
  36 MakeRecord      12    3   15               00 r[15]=mkrec(r[12..14])
  37 NewRowid         2   16    0               00 r[16]=rowid
  38 Insert           2   15   16               00 intkey=r[16] data=r[15]
  39 Ne              10   44   16               00 if r[16]!=r[10] goto 44
  40 Null             0    1    0               00 r[1]=NULL
  41 Rewind           1    1    0               00 
  42 Rewind           4    1    0               00 
  43 Goto             0   47    0               00 
  44 Column           4    1   17               00 r[17]=
  45 Column           4    2   18               00 r[18]=
  46 Next             4   47    0               00 
  47 Goto             0   32    0               00 
  48 Rewind           2   63    0               00 
  49 Column           4    1   17               00 r[17]=
  50 Column           4    2   18               00 r[18]=
  51 Next             4   52    0               00 
  52 AggValue         1    2    2 lead(2)       00 r[2]=value N=2
  53 Null             0    2    0               00 r[2]=NULL
  54 Rowid            1   19    0               00 r[19]=rowid
  55 Column           1    2   20               00 r[20]=
  56 Add             20   19   19               00 r[19]=r[20]+r[19]
  57 SeekRowid        8   59   19               00 intkey=r[19]
  58 Column           8    1    2               00 r[2]=
  59 Gosub           11   65    0               00 
  60 Next             1   62    0               00 
  61 Goto             0   63    0               00 
  62 Goto             0   52    0               00 
  63 ResetSorter      1    0    0               00 
  64 Goto             0   69    0               00 
  65 Noop             0    0    0               00 inner-loop subroutine
  66 Copy             2   21    0               00 r[21]=r[2]
  67 ResultRow       21    1    0               00 output=r[21]
  68 Return          11    0    0               00 end inner-loop subroutine
  69 Halt             0    0    0               00 
  70 Transaction      0    0    6 0             01 usesStmtJournal=0
  71 Goto             0    1    0               00 
SQL: [SELECT 
    lead(following) OVER win, 
    lead(following, 2) OVER win, 
    lead(following, 3, -1) OVER win
  FROM v0
  WINDOW win AS (ORDER BY following)

;]
VDBE Program Listing:
   0 Init             0  111    0               00 Start at 111
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 Null             0    5    0               00 r[5]=NULL
   4 OpenEphemeral    1    7    0               00 nColumn=7
   5 OpenDup          2    1    0               00 
   6 OpenDup          3    1    0               00 
   7 OpenDup          4    1    0               00 
   8 InitCoroutine    7   38    9               00 subquery_2
   9 Explain          9    0    0 CO-ROUTINE 2  00 
  10 SorterOpen       6    9    0 k(1,B)        00 
  11 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  12 Explain         12    9    0 SCAN TABLE v0 00 
  13 Rewind           0   24    0               00 
  14 Column           0    1    9               00 r[9]=v0.following
  15 Column           0    1   10               00 r[10]=v0.following
  16 Integer          3   11    0               00 r[11]=3
  17 Integer         -1   12    0               00 r[12]=-1
  18 Column           0    1   13               00 r[13]=v0.following
  19 Integer          2   14    0               00 r[14]=2
  20 Column           0    1    8               00 r[8]=v0.following
  21 MakeRecord       8    7   16               00 r[16]=mkrec(r[8..14])
  22 SorterInsert     6   16    8 7             00 key=r[16]
  23 Next             0   14    0               01 
  24 Explain         24    9    0 USE TEMP B-TREE FOR ORDER BY 00 
  25 OpenPseudo       7   17    9               00 9 columns in r[17]
  26 SorterSort       6   37    0               00 
  27 SorterData       6   17    7               00 r[17]=data
  28 Column           7    0   15               00 r[15]=
  29 Column           7    6   14               00 r[14]=
  30 Column           7    5   13               00 r[13]=
  31 Column           7    4   12               00 r[12]=
  32 Column           7    3   11               00 r[11]=
  33 Column           7    2   10               00 r[10]=
  34 Column           7    1    9               00 r[9]=
  35 Yield            7    0    0               00 
  36 SorterNext       6   27    0               00 
  37 EndCoroutine     7    0    0               00 
  38 Integer          1   18    0               00 r[18]=1
  39 OpenDup          8    1    0               00 
  40 OpenDup          9    1    0               00 
  41 OpenDup         10    1    0               00 
  42 Explain         42    0    0 SCAN SUBQUERY 2 00 
  43 InitCoroutine    7    0    9               00 
  44 Yield            7   70    0               00 next row of subquery_2
  45 Copy             9   20    0               00 r[20]=r[9]
  46 Copy            10   21    0               00 r[21]=r[10]
  47 Copy            11   22    0               00 r[22]=r[11]
  48 Copy            12   23    0               00 r[23]=r[12]
  49 Copy            13   24    0               00 r[24]=r[13]
  50 Copy            14   25    0               00 r[25]=r[14]
  51 Copy            15   26    0               00 r[26]=r[15]
  52 MakeRecord      20    7   27               00 r[27]=mkrec(r[20..26])
  53 NewRowid         2   28    0               00 r[28]=rowid
  54 Insert           2   27   28               00 intkey=r[28] data=r[27]
  55 Ne              18   62   28               00 if r[28]!=r[18] goto 62
  56 Null             0    1    0               00 r[1]=NULL
  57 Null             0    3    0               00 r[3]=NULL
  58 Null             0    5    0               00 r[5]=NULL
  59 Rewind           1    1    0               00 
  60 Rewind           4    1    0               00 
  61 Goto             0   69    0               00 
  62 Column           4    1   29               00 r[29]=
  63 Column           4    2   30               00 r[30]=
  64 Column           4    3   31               00 r[31]=
  65 Column           4    4   29               00 r[29]=
  66 Column           4    5   30               00 r[30]=
  67 Column           4    6   29               00 r[29]=
  68 Next             4   69    0               00 
  69 Goto             0   44    0               00 
  70 Rewind           2  102    0               00 
  71 Column           4    1   29               00 r[29]=
  72 Column           4    2   30               00 r[30]=
  73 Column           4    3   31               00 r[31]=
  74 Column           4    4   29               00 r[29]=
  75 Column           4    5   30               00 r[30]=
  76 Column           4    6   29               00 r[29]=
  77 Next             4   78    0               00 
  78 AggValue         1    3    2 lead(3)       00 r[2]=value N=3
  79 AggValue         3    2    4 lead(2)       00 r[4]=value N=2
  80 AggValue         5    1    6 lead(1)       00 r[6]=value N=1
  81 Column           1    3    2               00 r[2]=
  82 Rowid            1   32    0               00 r[32]=rowid
  83 Column           1    2   33               00 r[33]=
  84 Add             33   32   32               00 r[32]=r[33]+r[32]
  85 SeekRowid        8   87   32               00 intkey=r[32]
  86 Column           8    1    2               00 r[2]=
  87 Null             0    4    0               00 r[4]=NULL
  88 Rowid            1   32    0               00 r[32]=rowid
  89 Column           1    5   33               00 r[33]=
  90 Add             33   32   32               00 r[32]=r[33]+r[32]
  91 SeekRowid        9   93   32               00 intkey=r[32]
  92 Column           9    4    4               00 r[4]=
  93 Null             0    6    0               00 r[6]=NULL
  94 Rowid            1   32    0               00 r[32]=rowid
  95 AddImm          32    1    0               00 r[32]=r[32]+1
  96 SeekRowid       10   98   32               00 intkey=r[32]
  97 Column          10    6    6               00 r[6]=
  98 Gosub           19  104    0               00 
  99 Next             1  101    0               00 
 100 Goto             0  102    0               00 
 101 Goto             0   78    0               00 
 102 ResetSorter      1    0    0               00 
 103 Goto             0  110    0               00 
 104 Noop             0    0    0               00 inner-loop subroutine
 105 Copy             6   34    0               00 r[34]=r[6]
 106 Copy             4   35    0               00 r[35]=r[4]
 107 Copy             2   36    0               00 r[36]=r[2]
 108 ResultRow       34    3    0               00 output=r[34..36]
 109 Return          19    0    0               00 end inner-loop subroutine
 110 Halt             0    0    0               00 
 111 Transaction      0    0    6 0             01 usesStmtJournal=0
 112 Goto             0    1    0               00 
SQL: [DROP TABLE IF EXISTS field4;]
VDBE Program Listing:
   0 Init             0   38    0               00 Start at 38
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenWrite        0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   13    0               00 
   5 Column           0    2    2               00 r[2]=sqlite_master.tbl_name
   6 Ne               3   12    2 (BINARY)      52 if r[2]!=r[3] goto 12
   7 Column           0    0    2               00 r[2]=sqlite_master.type
   8 Eq               4   12    2 (BINARY)      52 if r[2]==r[4] goto 12
   9 Rowid            0    5    0               00 r[5]=rowid
  10 Once             0   11    0               00 
  11 Delete           0    0    0               02 
  12 Next             0    5    0               01 
  13 Destroy         10    2    0               00 
  14 Null             0    6    7               00 r[6..7]=NULL
  15 IfNot            2   24    1               00 
  16 OpenRead         1    1    0 4             00 root=1 iDb=0; sqlite_master
  17 Explain         17    0    0 SCAN TABLE sqlite_master 00 
  18 Rewind           1   24    0               00 
  19 Column           1    3   13               00 r[13]=sqlite_master.rootpage
  20 Ne               2   23   13 (BINARY)      54 if r[13]!=r[2] goto 23
  21 Rowid            1    7    0               00 r[7]=rowid
  22 RowSetAdd        6    7    0               00 rowset(6)=r[7]
  23 Next             1   19    0               01 
  24 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  25 RowSetRead       6   35    7               00 r[7]=rowset(6)
  26 NotExists        1   25    7               00 intkey=r[7]
  27 Column           1    0    8               00 r[8]=sqlite_master.type
  28 Column           1    1    9               00 r[9]=sqlite_master.name
  29 Column           1    2   10               00 r[10]=sqlite_master.tbl_name
  30 Integer         10   11    0               00 r[11]=10
  31 Column           1    4   12               00 r[12]=sqlite_master.sql
  32 MakeRecord       8    5   13 BBBDB         00 r[13]=mkrec(r[8..12])
  33 Insert           1   13    7               00 intkey=r[7] data=r[13]
  34 Goto             0   25    0               00 
  35 DropTable        0    0    0 field4        00 
  36 SetCookie        0    1    7               00 
  37 Halt             0    0    0               00 
  38 Transaction      0    1    6 0             01 usesStmtJournal=1
  39 String8          0    3    0 field4        00 r[3]='field4'
  40 String8          0    4    0 trigger       00 r[4]='trigger'
  41 Goto             0    1    0               00 
SQL: [;CREATE TABLE field4(test006 INTEGER, field5 INTEGER, test007 INTEGER, field6 INTEGER);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 field4        00 r[7]='field4'
  20 String8          0    8    0 field4        00 r[8]='field4'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE field4(test006 INTEGER, field5 INTEGER, test007 INTEGER, field6 INTEGER) 00 r[10]='CREATE TABLE field4(test006 INTEGER, field5 INTEGER, test007 INTEGER, field6 INTEGER)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    8               00 
  26 ParseSchema      0    0    0 tbl_name='field4' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    7 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    8 0             00 usesStmtJournal=0
  16 String8          0    2    0 field4        00 r[2]='field4'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;SELECT row_number() OVER win,
         nth_value(x,2) OVER win,
         lead(x) OVER win
  FROM preceding
  WINDOW win AS (ORDER BY x)

;]
VDBE Program Listing:
   0 Init             0  222    0               00 Start at 222
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  182    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    5    0               00 nColumn=5
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   91   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 Null             0    7    0               00 r[7]=NULL
  16 OpenEphemeral   11    5    0               00 nColumn=5
  17 OpenDup         12   11    0               00 
  18 OpenDup         13   11    0               00 
  19 OpenDup         14   11    0               00 
  20 InitCoroutine    9   46   21               00 subquery_4
  21 Explain         21   14    0 CO-ROUTINE 4  00 
  22 SorterOpen      16    7    0 k(1,B)        00 
  23 OpenRead         0    6    0 2             00 root=6 iDb=0; preceding
  24 Explain         24   21    0 SCAN TABLE preceding 00 
  25 Rewind           0   34    0               00 
  26 Column           0    1   11               00 r[11]=preceding.x
  27 Column           0    1   12               00 r[12]=preceding.x
  28 Column           0    1   13               00 r[13]=preceding.x
  29 Column           0    1   14               00 r[14]=preceding.x
  30 Column           0    1   10               00 r[10]=preceding.x
  31 MakeRecord      10    5   16               00 r[16]=mkrec(r[10..14])
  32 SorterInsert    16   16   10 5             00 key=r[16]
  33 Next             0   26    0               01 
  34 Explain         34   21    0 USE TEMP B-TREE FOR ORDER BY 00 
  35 OpenPseudo      17   17    7               00 7 columns in r[17]
  36 SorterSort      16   45    0               00 
  37 SorterData      16   17   17               00 r[17]=data
  38 Column          17    0   15               00 r[15]=
  39 Column          17    4   14               00 r[14]=
  40 Column          17    3   13               00 r[13]=
  41 Column          17    2   12               00 r[12]=
  42 Column          17    1   11               00 r[11]=
  43 Yield            9    0    0               00 
  44 SorterNext      16   37    0               00 
  45 EndCoroutine     9    0    0               00 
  46 Integer          1   18    0               00 r[18]=1
  47 OpenDup         18   11    0               00 
  48 Explain         48   14    0 SCAN SUBQUERY 4 00 
  49 InitCoroutine    9    0   21               00 
  50 Yield            9   67    0               00 next row of subquery_4
  51 Copy            11   20    0               00 r[20]=r[11]
  52 Copy            12   21    0               00 r[21]=r[12]
  53 Copy            13   22    0               00 r[22]=r[13]
  54 Copy            14   23    0               00 r[23]=r[14]
  55 Copy            15   24    0               00 r[24]=r[15]
  56 MakeRecord      20    5   25               00 r[25]=mkrec(r[20..24])
  57 NewRowid        12   26    0               00 r[26]=rowid
  58 Insert          12   25   26               00 intkey=r[26] data=r[25]
  59 Ne              18   64   26               00 if r[26]!=r[18] goto 64
  60 Null             0    7    0               00 r[7]=NULL
  61 Rewind          11    1    0               00 
  62 Rewind          14    1    0               00 
  63 Goto             0   66    0               00 
  64 Column          14    4   27               00 r[27]=
  65 Next            14   66    0               00 
  66 Goto             0   50    0               00 
  67 Rewind          12   80    0               00 
  68 Column          14    4   27               00 r[27]=
  69 Next            14   70    0               00 
  70 AggValue         7    1    8 lead(1)       00 r[8]=value N=1
  71 Null             0    8    0               00 r[8]=NULL
  72 Rowid           11   28    0               00 r[28]=rowid
  73 AddImm          28    1    0               00 r[28]=r[28]+1
  74 SeekRowid       18   76   28               00 intkey=r[28]
  75 Column          18    4    8               00 r[8]=
  76 Gosub           19   82    0               00 
  77 Next            11   79    0               00 
  78 Goto             0   80    0               00 
  79 Goto             0   70    0               00 
  80 ResetSorter     11    0    0               00 
  81 Goto             0   90    0               00 
  82 Noop             0    0    0               00 inner-loop subroutine
  83 Copy             8   29    0               00 r[29]=r[8]
  84 Column          11    0   30               00 r[30]=
  85 Column          11    1   31               00 r[31]=
  86 Column          11    2   32               00 r[32]=
  87 Integer          2   33    0               00 r[33]=2
  88 Yield            6    0    0               00 
  89 Return          19    0    0               00 end inner-loop subroutine
  90 EndCoroutine     6    0    0               00 
  91 Integer          1   34    0               00 r[34]=1
  92 OpenDup         19    6    0               00 
  93 Explain         93    7    0 SCAN SUBQUERY 3 00 
  94 InitCoroutine    6    0   14               00 
  95 Yield            6  145    0               00 next row of subquery_3
  96 Copy            29   38    0               00 r[38]=r[29]
  97 Copy            30   39    0               00 r[39]=r[30]
  98 Copy            31   40    0               00 r[40]=r[31]
  99 Copy            32   41    0               00 r[41]=r[32]
 100 Copy            33   42    0               00 r[42]=r[33]
 101 MakeRecord      38    5   43               00 r[43]=mkrec(r[38..42])
 102 NewRowid         7   44    0               00 r[44]=rowid
 103 Insert           7   43   44               00 intkey=r[44] data=r[43]
 104 Ne              34  115   44               00 if r[44]!=r[34] goto 115
 105 Null             0    4    0               00 r[4]=NULL
 106 Integer          0   35    0               00 r[35]=0
 107 Integer          0   36    0               00 r[36]=0
 108 Rewind           6    1    0               00 
 109 Rewind           9    1    0               00 
 110 Copy            40   45    0               00 r[45]=r[40]
 111 Copy            45   46    0               00 r[46]=r[45]
 112 Copy            45   47    0               00 r[47]=r[45]
 113 Copy            45   48    0               00 r[48]=r[45]
 114 Goto             0  144    0               00 
 115 Compare         45   40    1 k(1,B)        00 r[45] <-> r[40]
 116 Jump           117  144  117               00 
 117 Copy            40   45    0               00 r[45]=r[40]
 118 Column           9    3   49               00 r[49]=
 119 Column           6    4   50               00 r[50]=
 120 AddImm          36    1    0               00 r[36]=r[36]+1
 121 Next             9  123    0               00 
 122 Goto             0  127    0               00 
 123 Column           9    2   51               00 r[51]=
 124 Compare         48   51    1 k(1,B)        00 r[48] <-> r[51]
 125 Jump           126  118  126               00 
 126 Copy            51   48    0               00 r[48]=r[51]
 127 Null             0    5    0               00 r[5]=NULL
 128 Column           6    4   51               00 r[51]=
 129 Integer          0   52    0               00 r[52]=0
 130 MustBeInt       51  132    0               00 
 131 Gt              52  133   51               00 if r[51]>r[52] goto 133
 132 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
 133 Add             51   35   51               00 r[51]=r[51]+r[35]
 134 Gt              36  137   51               00 if r[51]>r[36] goto 137
 135 SeekRowid       19    0   51               00 intkey=r[51]
 136 Column          19    3    5               00 r[5]=
 137 Gosub           37  175    0               00 
 138 Next             6  140    0               00 
 139 Goto             0  144    0               00 
 140 Column           6    2   51               00 r[51]=
 141 Compare         47   51    1 k(1,B)        00 r[47] <-> r[51]
 142 Jump           143  127  143               00 
 143 Copy            51   47    0               00 r[47]=r[51]
 144 Goto             0   95    0               00 
 145 Rewind           7  173    0               00 
 146 Column           9    3   49               00 r[49]=
 147 Column           6    4   50               00 r[50]=
 148 AddImm          36    1    0               00 r[36]=r[36]+1
 149 Next             9  151    0               00 
 150 Goto             0  155    0               00 
 151 Column           9    2   51               00 r[51]=
 152 Compare         48   51    1 k(1,B)        00 r[48] <-> r[51]
 153 Jump           154  146  154               00 
 154 Copy            51   48    0               00 r[48]=r[51]
 155 Null             0    5    0               00 r[5]=NULL
 156 Column           6    4   51               00 r[51]=
 157 Integer          0   52    0               00 r[52]=0
 158 MustBeInt       51  160    0               00 
 159 Gt              52  161   51               00 if r[51]>r[52] goto 161
 160 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
 161 Add             51   35   51               00 r[51]=r[51]+r[35]
 162 Gt              36  165   51               00 if r[51]>r[36] goto 165
 163 SeekRowid       19    0   51               00 intkey=r[51]
 164 Column          19    3    5               00 r[5]=
 165 Gosub           37  175    0               00 
 166 Next             6  168    0               00 
 167 Goto             0  173    0               00 
 168 Column           6    2   51               00 r[51]=
 169 Compare         47   51    1 k(1,B)        00 r[47] <-> r[51]
 170 Jump           171  155  171               00 
 171 Copy            51   47    0               00 r[47]=r[51]
 172 Goto             0  155    0               00 
 173 ResetSorter      6    0    0               00 
 174 Goto             0  181    0               00 
 175 Noop             0    0    0               00 inner-loop subroutine
 176 Copy             5   53    0               00 r[53]=r[5]
 177 Column           6    0   54               00 r[54]=
 178 Column           6    1   55               00 r[55]=
 179 Yield            3    0    0               00 
 180 Return          37    0    0               00 end inner-loop subroutine
 181 EndCoroutine     3    0    0               00 
 182 Integer          1   56    0               00 r[56]=1
 183 Explain        183    0    0 SCAN SUBQUERY 2 00 
 184 InitCoroutine    3    0    7               00 
 185 Yield            3  204    0               00 next row of subquery_2
 186 Copy            53   58    0               00 r[58]=r[53]
 187 Copy            54   59    0               00 r[59]=r[54]
 188 Copy            55   60    0               00 r[60]=r[55]
 189 MakeRecord      58    3   61               00 r[61]=mkrec(r[58..60])
 190 NewRowid         2   62    0               00 r[62]=rowid
 191 Insert           2   61   62               00 intkey=r[62] data=r[61]
 192 Ne              56  197   62               00 if r[62]!=r[56] goto 197
 193 Null             0    1    0               00 r[1]=NULL
 194 Rewind           1    1    0               00 
 195 Rewind           4    1    0               00 
 196 Goto             0  203    0               00 
 197 AggStep          0   63    1 row_number(0) 00 accum=r[1] step(r[63])
 198 Next             4  199    0               00 
 199 AggValue         1    0    2 row_number(0) 00 r[2]=value N=0
 200 Gosub           57  215    0               00 
 201 Delete           1    0    0               02 
 202 Next             1  203    0               00 
 203 Goto             0  185    0               00 
 204 Rewind           2  213    0               00 
 205 AggStep          0   63    1 row_number(0) 00 accum=r[1] step(r[63])
 206 Next             4  207    0               00 
 207 AggValue         1    0    2 row_number(0) 00 r[2]=value N=0
 208 Gosub           57  215    0               00 
 209 Delete           1    0    0               02 
 210 Next             1  212    0               00 
 211 Goto             0  213    0               00 
 212 Goto             0  207    0               00 
 213 ResetSorter      1    0    0               00 
 214 Goto             0  221    0               00 
 215 Noop             0    0    0               00 inner-loop subroutine
 216 Copy             2   63    0               00 r[63]=r[2]
 217 Column           1    0   64               00 r[64]=
 218 Column           1    1   65               00 r[65]=
 219 ResultRow       63    3    0               00 output=r[63..65]
 220 Return          57    0    0               00 end inner-loop subroutine
 221 Halt             0    0    0               00 
 222 Transaction      0    0    8 0             01 usesStmtJournal=0
 223 Goto             0    1    0               00 
SQL: [SELECT row_number() OVER win,
           rank() OVER win,
           dense_rank() OVER win,
           ntile(2) OVER win,
           first_value(over) OVER win,
           last_value(over) OVER win,
           nth_value(over,2) OVER win,
           lead(over) OVER win,
           lag(over) OVER win,
           max(over) OVER win,
           min(over) OVER win
    FROM v0
    WINDOW win AS (ORDER BY over)

;]
VDBE Program Listing:
   0 Init             0  399    0               00 Start at 399
   1 Null             0    1    0               00 r[1]=NULL
   2 Null             0    3    0               00 r[3]=NULL
   3 OpenEphemeral    1   11    0               00 nColumn=11
   4 OpenDup          2    1    0               00 
   5 OpenDup          3    1    0               00 
   6 OpenDup          4    1    0               00 
   7 InitCoroutine    5  329    8               00 subquery_2
   8 Explain          8    0    0 CO-ROUTINE 2  00 
   9 Null             0    6    0               00 r[6]=NULL
  10 Null             0    8    0               00 r[8]=NULL
  11 Null             0   10    0               00 r[10]=NULL
  12 Null             0   12    0               00 r[12]=NULL
  13 Null             0   14    0               00 r[14]=NULL
  14 Null             0   16    0               00 r[16]=NULL
  15 Null             0   18    0               00 r[18]=NULL
  16 OpenEphemeral    6   11    0               00 nColumn=11
  17 OpenDup          7    6    0               00 
  18 OpenDup          8    6    0               00 
  19 OpenDup          9    6    0               00 
  20 InitCoroutine   20  169   21               00 subquery_3
  21 Explain         21    8    0 CO-ROUTINE 3  00 
  22 Null             0   21    0               00 r[21]=NULL
  23 OpenEphemeral   11   11    0               00 nColumn=11
  24 OpenDup         12   11    0               00 
  25 OpenDup         13   11    0               00 
  26 OpenDup         14   11    0               00 
  27 InitCoroutine   23  111   28               00 subquery_4
  28 Explain         28   21    0 CO-ROUTINE 4  00 
  29 Null             0   24    0               00 r[24]=NULL
  30 OpenEphemeral   16   11    0               00 nColumn=11
  31 OpenDup         17   16    0               00 
  32 OpenDup         18   16    0               00 
  33 OpenDup         19   16    0               00 
  34 InitCoroutine   26   54   35               00 subquery_5
  35 Explain         35   28    0 CO-ROUTINE 5  00 
  36 Noop            21   13    0               00 
  37 OpenRead        22    5    0 k(3,,,)       00 root=5 iDb=0; sqlite_autoindex_v0_1
  38 Explain         38   35    0 SCAN TABLE v0 USING COVERING INDEX sqlite_autoindex_v0_1 00 
  39 Rewind          22   53   27 0             00 
  40 Column          22    0   27               00 r[27]=v0.over
  41 Column          22    0   28               00 r[28]=v0.over
  42 Column          22    0   29               00 r[29]=v0.over
  43 Column          22    0   30               00 r[30]=v0.over
  44 Column          22    0   31               00 r[31]=v0.over
  45 Column          22    0   32               00 r[32]=v0.over
  46 Column          22    0   33               00 r[33]=v0.over
  47 Column          22    0   34               00 r[34]=v0.over
  48 Column          22    0   35               00 r[35]=v0.over
  49 Column          22    0   36               00 r[36]=v0.over
  50 Column          22    0   37               00 r[37]=v0.over
  51 Yield           26    0    0               00 
  52 Next            22   40    0               01 
  53 EndCoroutine    26    0    0               00 
  54 Integer          1   38    0               00 r[38]=1
  55 OpenDup         23   16    0               00 
  56 Explain         56   28    0 SCAN SUBQUERY 5 00 
  57 InitCoroutine   26    0   35               00 
  58 Yield           26   81    0               00 next row of subquery_5
  59 Copy            27   40    0               00 r[40]=r[27]
  60 Copy            28   41    0               00 r[41]=r[28]
  61 Copy            29   42    0               00 r[42]=r[29]
  62 Copy            30   43    0               00 r[43]=r[30]
  63 Copy            31   44    0               00 r[44]=r[31]
  64 Copy            32   45    0               00 r[45]=r[32]
  65 Copy            33   46    0               00 r[46]=r[33]
  66 Copy            34   47    0               00 r[47]=r[34]
  67 Copy            35   48    0               00 r[48]=r[35]
  68 Copy            36   49    0               00 r[49]=r[36]
  69 Copy            37   50    0               00 r[50]=r[37]
  70 MakeRecord      40   11   51               00 r[51]=mkrec(r[40..50])
  71 NewRowid        17   52    0               00 r[52]=rowid
  72 Insert          17   51   52               00 intkey=r[52] data=r[51]
  73 Ne              38   78   52               00 if r[52]!=r[38] goto 78
  74 Null             0   24    0               00 r[24]=NULL
  75 Rewind          16    1    0               00 
  76 Rewind          19    1    0               00 
  77 Goto             0   80    0               00 
  78 Column          19   10   53               00 r[53]=
  79 Next            19   80    0               00 
  80 Goto             0   58    0               00 
  81 Rewind          17   94    0               00 
  82 Column          19   10   53               00 r[53]=
  83 Next            19   84    0               00 
  84 AggValue        24    1   25 lead(1)       00 r[25]=value N=1
  85 Null             0   25    0               00 r[25]=NULL
  86 Rowid           16   54    0               00 r[54]=rowid
  87 AddImm          54    1    0               00 r[54]=r[54]+1
  88 SeekRowid       23   90   54               00 intkey=r[54]
  89 Column          23   10   25               00 r[25]=
  90 Gosub           39   96    0               00 
  91 Next            16   93    0               00 
  92 Goto             0   94    0               00 
  93 Goto             0   84    0               00 
  94 ResetSorter     16    0    0               00 
  95 Goto             0  110    0               00 
  96 Noop             0    0    0               00 inner-loop subroutine
  97 Copy            25   55    0               00 r[55]=r[25]
  98 Column          16    0   56               00 r[56]=
  99 Column          16    1   57               00 r[57]=
 100 Column          16    2   58               00 r[58]=
 101 Column          16    3   59               00 r[59]=
 102 Column          16    4   60               00 r[60]=
 103 Column          16    5   61               00 r[61]=
 104 Column          16    6   62               00 r[62]=
 105 Column          16    7   63               00 r[63]=
 106 Column          16    8   64               00 r[64]=
 107 Integer          2   65    0               00 r[65]=2
 108 Yield           23    0    0               00 
 109 Return          39    0    0               00 end inner-loop subroutine
 110 EndCoroutine    23    0    0               00 
 111 Integer          1   66    0               00 r[66]=1
 112 Explain        112   21    0 SCAN SUBQUERY 4 00 
 113 InitCoroutine   23    0   28               00 
 114 Yield           23  139    0               00 next row of subquery_4
 115 Copy            55   68    0               00 r[68]=r[55]
 116 Copy            56   69    0               00 r[69]=r[56]
 117 Copy            57   70    0               00 r[70]=r[57]
 118 Copy            58   71    0               00 r[71]=r[58]
 119 Copy            59   72    0               00 r[72]=r[59]
 120 Copy            60   73    0               00 r[73]=r[60]
 121 Copy            61   74    0               00 r[74]=r[61]
 122 Copy            62   75    0               00 r[75]=r[62]
 123 Copy            63   76    0               00 r[76]=r[63]
 124 Copy            64   77    0               00 r[77]=r[64]
 125 Copy            65   78    0               00 r[78]=r[65]
 126 MakeRecord      68   11   79               00 r[79]=mkrec(r[68..78])
 127 NewRowid        12   80    0               00 r[80]=rowid
 128 Insert          12   79   80               00 intkey=r[80] data=r[79]
 129 Ne              66  135   80               00 if r[80]!=r[66] goto 135
 130 Null             0   21    0               00 r[21]=NULL
 131 Rewind          13    1    0               00 
 132 Rewind          11    1    0               00 
 133 Rewind          14    1    0               00 
 134 Goto             0  138    0               00 
 135 Column          14   10   81               00 r[81]=
 136 AggStep          0   81   21 ntile(1)      01 accum=r[21] step(r[81])
 137 Next            14  138    0               00 
 138 Goto             0  114    0               00 
 139 Rewind          12  152    0               00 
 140 Column          14   10   81               00 r[81]=
 141 AggStep          0   81   21 ntile(1)      01 accum=r[21] step(r[81])
 142 Next            14  143    0               00 
 143 AggValue        21    1   22 ntile(1)      00 r[22]=value N=1
 144 Gosub           67  154    0               00 
 145 Next            11  147    0               00 
 146 Goto             0  152    0               00 
 147 Column          13   10   81               00 r[81]=
 148 AggInverse       1   81   21 ntile(1)      01 accum=r[21] inverse(r[81])
 149 Delete          13    0    0               02 
 150 Next            13  151    0               00 
 151 Goto             0  143    0               00 
 152 ResetSorter     11    0    0               00 
 153 Goto             0  168    0               00 
 154 Noop             0    0    0               00 inner-loop subroutine
 155 Copy            22   82    0               00 r[82]=r[22]
 156 Column          11    0   83               00 r[83]=
 157 Column          11    1   84               00 r[84]=
 158 Column          11    2   85               00 r[85]=
 159 Column          11    3   86               00 r[86]=
 160 Column          11    4   87               00 r[87]=
 161 Column          11    5   88               00 r[88]=
 162 Column          11    6   89               00 r[89]=
 163 Integer          2   90    0               00 r[90]=2
 164 Column          11    7   91               00 r[91]=
 165 Column          11    8   92               00 r[92]=
 166 Yield           20    0    0               00 
 167 Return          67    0    0               00 end inner-loop subroutine
 168 EndCoroutine    20    0    0               00 
 169 Integer          1   93    0               00 r[93]=1
 170 OpenDup         24    6    0               00 
 171 OpenDup         25    6    0               00 
 172 Explain        172    8    0 SCAN SUBQUERY 3 00 
 173 InitCoroutine   20    0   21               00 
 174 Yield           20  261    0               00 next row of subquery_3
 175 Copy            82   99    0               00 r[99]=r[82]
 176 Copy            83  100    0               00 r[100]=r[83]
 177 Copy            84  101    0               00 r[101]=r[84]
 178 Copy            85  102    0               00 r[102]=r[85]
 179 Copy            86  103    0               00 r[103]=r[86]
 180 Copy            87  104    0               00 r[104]=r[87]
 181 Copy            88  105    0               00 r[105]=r[88]
 182 Copy            89  106    0               00 r[106]=r[89]
 183 Copy            90  107    0               00 r[107]=r[90]
 184 Copy            91  108    0               00 r[108]=r[91]
 185 Copy            92  109    0               00 r[109]=r[92]
 186 MakeRecord      99   11  110               00 r[110]=mkrec(r[99..109])
 187 NewRowid         7  111    0               00 r[111]=rowid
 188 Insert           7  110  111               00 intkey=r[111] data=r[110]
 189 Ne              93  208  111               00 if r[111]!=r[93] goto 208
 190 Null             0    6    0               00 r[6]=NULL
 191 Null             0    8    0               00 r[8]=NULL
 192 Null             0   10    0               00 r[10]=NULL
 193 Integer          0   94    0               00 r[94]=0
 194 Integer          0   95    0               00 r[95]=0
 195 Null             0   12    0               00 r[12]=NULL
 196 Null             0   14    0               00 r[14]=NULL
 197 Integer          0   96    0               00 r[96]=0
 198 Integer          0   97    0               00 r[97]=0
 199 Null             0   16    0               00 r[16]=NULL
 200 Null             0   18    0               00 r[18]=NULL
 201 Rewind           6    1    0               00 
 202 Rewind           9    1    0               00 
 203 Copy           103  112    0               00 r[112]=r[103]
 204 Copy           112  113    0               00 r[113]=r[112]
 205 Copy           112  114    0               00 r[114]=r[112]
 206 Copy           112  115    0               00 r[115]=r[112]
 207 Goto             0  260    0               00 
 208 Compare        112  103    1 k(1,B)        00 r[112] <-> r[103]
 209 Jump           210  260  210               00 
 210 Copy           103  112    0               00 r[112]=r[103]
 211 Column           9    5  116               00 r[116]=
 212 CollSeq          0    0    0 (BINARY)      00 
 213 AggStep          0  116    6 min(1)        01 accum=r[6] step(r[116])
 214 Column           9    6  116               00 r[116]=
 215 CollSeq          0    0    0 (BINARY)      00 
 216 AggStep          0  116    8 max(1)        01 accum=r[8] step(r[116])
 217 Column           9    7  116               00 r[116]=
 218 Column           6    8  117               00 r[117]=
 219 AddImm          95    1    0               00 r[95]=r[95]+1
 220 Column           9    9  116               00 r[116]=
 221 AggStep          0  116   12 last_value(1) 01 accum=r[12] step(r[116])
 222 Column           9   10  116               00 r[116]=
 223 AddImm          97    1    0               00 r[97]=r[97]+1
 224 AggStep          0  116   16 dense_rank(0) 00 accum=r[16] step(r[116])
 225 AggStep          0  116   18 rank(0)       00 accum=r[18] step(r[116])
 226 Next             9  228    0               00 
 227 Goto             0  232    0               00 
 228 Column           9    4  118               00 r[118]=
 229 Compare        115  118    1 k(1,B)        00 r[115] <-> r[118]
 230 Jump           231  211  231               00 
 231 Copy           118  115    0               00 r[115]=r[118]
 232 AggValue         6    1    7 min(1)        00 r[7]=value N=1
 233 AggValue         8    1    9 max(1)        00 r[9]=value N=1
 234 AggValue        12    1   13 last_value(1) 00 r[13]=value N=1
 235 AggValue        16    0   17 dense_rank(0) 00 r[17]=value N=0
 236 AggValue        18    0   19 rank(0)       00 r[19]=value N=0
 237 Null             0   11    0               00 r[11]=NULL
 238 Column           6    8  118               00 r[118]=
 239 Integer          0  119    0               00 r[119]=0
 240 MustBeInt      118  242    0               00 
 241 Gt             119  243  118               00 if r[118]>r[119] goto 243
 242 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
 243 Add            118   94  118               00 r[118]=r[118]+r[94]
 244 Gt              95  247  118               00 if r[118]>r[95] goto 247
 245 SeekRowid       24    0  118               00 intkey=r[118]
 246 Column          24    7   11               00 r[11]=
 247 Null             0   15    0               00 r[15]=NULL
 248 Integer          1  118    0               00 r[118]=1
 249 Add            118   96  118               00 r[118]=r[118]+r[96]
 250 Gt              97  253  118               00 if r[118]>r[97] goto 253
 251 SeekRowid       25    0  118               00 intkey=r[118]
 252 Column          25   10   15               00 r[15]=
 253 Gosub           98  314    0               00 
 254 Next             6  256    0               00 
 255 Goto             0  260    0               00 
 256 Column           6    4  118               00 r[118]=
 257 Compare        114  118    1 k(1,B)        00 r[114] <-> r[118]
 258 Jump           259  237  259               00 
 259 Copy           118  114    0               00 r[114]=r[118]
 260 Goto             0  174    0               00 
 261 Rewind           7  312    0               00 
 262 Column           9    5  116               00 r[116]=
 263 CollSeq          0    0    0 (BINARY)      00 
 264 AggStep          0  116    6 min(1)        01 accum=r[6] step(r[116])
 265 Column           9    6  116               00 r[116]=
 266 CollSeq          0    0    0 (BINARY)      00 
 267 AggStep          0  116    8 max(1)        01 accum=r[8] step(r[116])
 268 Column           9    7  116               00 r[116]=
 269 Column           6    8  117               00 r[117]=
 270 AddImm          95    1    0               00 r[95]=r[95]+1
 271 Column           9    9  116               00 r[116]=
 272 AggStep          0  116   12 last_value(1) 01 accum=r[12] step(r[116])
 273 Column           9   10  116               00 r[116]=
 274 AddImm          97    1    0               00 r[97]=r[97]+1
 275 AggStep          0  116   16 dense_rank(0) 00 accum=r[16] step(r[116])
 276 AggStep          0  116   18 rank(0)       00 accum=r[18] step(r[116])
 277 Next             9  279    0               00 
 278 Goto             0  283    0               00 
 279 Column           9    4  118               00 r[118]=
 280 Compare        115  118    1 k(1,B)        00 r[115] <-> r[118]
 281 Jump           282  262  282               00 
 282 Copy           118  115    0               00 r[115]=r[118]
 283 AggValue         6    1    7 min(1)        00 r[7]=value N=1
 284 AggValue         8    1    9 max(1)        00 r[9]=value N=1
 285 AggValue        12    1   13 last_value(1) 00 r[13]=value N=1
 286 AggValue        16    0   17 dense_rank(0) 00 r[17]=value N=0
 287 AggValue        18    0   19 rank(0)       00 r[19]=value N=0
 288 Null             0   11    0               00 r[11]=NULL
 289 Column           6    8  118               00 r[118]=
 290 Integer          0  119    0               00 r[119]=0
 291 MustBeInt      118  293    0               00 
 292 Gt             119  294  118               00 if r[118]>r[119] goto 294
 293 Halt             1    2    0 second argument to nth_value must be a positive integer 00 
 294 Add            118   94  118               00 r[118]=r[118]+r[94]
 295 Gt              95  298  118               00 if r[118]>r[95] goto 298
 296 SeekRowid       24    0  118               00 intkey=r[118]
 297 Column          24    7   11               00 r[11]=
 298 Null             0   15    0               00 r[15]=NULL
 299 Integer          1  118    0               00 r[118]=1
 300 Add            118   96  118               00 r[118]=r[118]+r[96]
 301 Gt              97  304  118               00 if r[118]>r[97] goto 304
 302 SeekRowid       25    0  118               00 intkey=r[118]
 303 Column          25   10   15               00 r[15]=
 304 Gosub           98  314    0               00 
 305 Next             6  307    0               00 
 306 Goto             0  312    0               00 
 307 Column           6    4  118               00 r[118]=
 308 Compare        114  118    1 k(1,B)        00 r[114] <-> r[118]
 309 Jump           310  288  310               00 
 310 Copy           118  114    0               00 r[114]=r[118]
 311 Goto             0  283    0               00 
 312 ResetSorter      6    0    0               00 
 313 Goto             0  328    0               00 
 314 Noop             0    0    0               00 inner-loop subroutine
 315 Copy            19  120    0               00 r[120]=r[19]
 316 Copy            17  121    0               00 r[121]=r[17]
 317 Column           6    0  122               00 r[122]=
 318 Copy            15  123    0               00 r[123]=r[15]
 319 Copy            13  124    0               00 r[124]=r[13]
 320 Copy            11  125    0               00 r[125]=r[11]
 321 Column           6    1  126               00 r[126]=
 322 Copy             9  127    0               00 r[127]=r[9]
 323 Copy             7  128    0               00 r[128]=r[7]
 324 Column           6    2  129               00 r[129]=
 325 Column           6    3  130               00 r[130]=
 326 Yield            5    0    0               00 
 327 Return          98    0    0               00 end inner-loop subroutine
 328 EndCoroutine     5    0    0               00 
 329 Integer          1  131    0               00 r[131]=1
 330 OpenDup         26    1    0               00 
 331 Explain        331    0    0 SCAN SUBQUERY 2 00 
 332 InitCoroutine    5    0    8               00 
 333 Yield            5  367    0               00 next row of subquery_2
 334 Copy           120  133    0               00 r[133]=r[120]
 335 Copy           121  134    0               00 r[134]=r[121]
 336 Copy           122  135    0               00 r[135]=r[122]
 337 Copy           123  136    0               00 r[136]=r[123]
 338 Copy           124  137    0               00 r[137]=r[124]
 339 Copy           125  138    0               00 r[138]=r[125]
 340 Copy           126  139    0               00 r[139]=r[126]
 341 Copy           127  140    0               00 r[140]=r[127]
 342 Copy           128  141    0               00 r[141]=r[128]
 343 Copy           129  142    0               00 r[142]=r[129]
 344 Copy           130  143    0               00 r[143]=r[130]
 345 MakeRecord     133   11  144               00 r[144]=mkrec(r[133..143])
 346 NewRowid         2  145    0               00 r[145]=rowid
 347 Insert           2  144  145               00 intkey=r[145] data=r[144]
 348 Ne             131  354  145               00 if r[145]!=r[131] goto 354
 349 Null             0    1    0               00 r[1]=NULL
 350 Null             0    3    0               00 r[3]=NULL
 351 Rewind           1    1    0               00 
 352 Rewind           4    1    0               00 
 353 Goto             0  366    0               00 
 354 Column           4   10  146               00 r[146]=
 355 AggStep          0  146    3 row_number(0) 00 accum=r[3] step(r[146])
 356 Next             4  357    0               00 
 357 AggValue         1    1    2 lag(1)        00 r[2]=value N=1
 358 AggValue         3    0    4 row_number(0) 00 r[4]=value N=0
 359 Null             0    2    0               00 r[2]=NULL
 360 Rowid            1  147    0               00 r[147]=rowid
 361 AddImm         147   -1    0               00 r[147]=r[147]+-1
 362 SeekRowid       26  364  147               00 intkey=r[147]
 363 Column          26   10    2               00 r[2]=
 364 Gosub          132  384    0               00 
 365 Next             1  366    0               00 
 366 Goto             0  333    0               00 
 367 Rewind           2  382    0               00 
 368 Column           4   10  146               00 r[146]=
 369 AggStep          0  146    3 row_number(0) 00 accum=r[3] step(r[146])
 370 Next             4  371    0               00 
 371 AggValue         1    1    2 lag(1)        00 r[2]=value N=1
 372 AggValue         3    0    4 row_number(0) 00 r[4]=value N=0
 373 Null             0    2    0               00 r[2]=NULL
 374 Rowid            1  147    0               00 r[147]=rowid
 375 AddImm         147   -1    0               00 r[147]=r[147]+-1
 376 SeekRowid       26  378  147               00 intkey=r[147]
 377 Column          26   10    2               00 r[2]=
 378 Gosub          132  384    0               00 
 379 Next             1  381    0               00 
 380 Goto             0  382    0               00 
 381 Goto             0  371    0               00 
 382 ResetSorter      1    0    0               00 
 383 Goto             0  398    0               00 
 384 Noop             0    0    0               00 inner-loop subroutine
 385 Copy             4  148    0               00 r[148]=r[4]
 386 Column           1    0  149               00 r[149]=
 387 Column           1    1  150               00 r[150]=
 388 Column           1    2  151               00 r[151]=
 389 Column           1    3  152               00 r[152]=
 390 Column           1    4  153               00 r[153]=
 391 Column           1    5  154               00 r[154]=
 392 Column           1    6  155               00 r[155]=
 393 Copy             2  156    0               00 r[156]=r[2]
 394 Column           1    7  157               00 r[157]=
 395 Column           1    8  158               00 r[158]=
 396 ResultRow      148   11    0               00 output=r[148..158]
 397 Return         132    0    0               00 end inner-loop subroutine
 398 Halt             0    0    0               00 
 399 Transaction      0    0    8 0             01 usesStmtJournal=0
 400 Goto             0    1    0               00 
SQL: [DROP TABLE IF EXISTS t2;]
VDBE Program Listing:
   0 Init             0    2    0               00 Start at 2
   1 Halt             0    0    0               00 
   2 Transaction      0    0    8 0             01 usesStmtJournal=0
   3 Transaction      1    0    0 0             01 usesStmtJournal=0
   4 Goto             0    1    0               00 
SQL: [SELECT dense_rank() OVER (PARTITION BY last_field) FROM test001

;]
VDBE Program Listing:
   0 Init             0   67    0               00 Start at 67
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    1    0               00 nColumn=1
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   16    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    3    0               00 
   9 OpenRead         0    8    0 0             00 root=8 iDb=0; test001
  10 Explain         10    7    0 SCAN TABLE test001 00 
  11 Rewind           0   15    0               00 
  12 Rowid            0    4    0               00 r[4]=rowid
  13 Yield            3    0    0               00 
  14 Next             0   12    0               01 
  15 EndCoroutine     3    0    0               00 
  16 Null             0    5    5               00 r[5..5]=NULL
  17 Integer          1    6    0               00 r[6]=1
  18 Explain         18    0    0 SCAN SUBQUERY 2 00 
  19 InitCoroutine    3    0    7               00 
  20 Yield            3   46    0               00 next row of subquery_2
  21 Copy             4    8    0               00 r[8]=r[4]
  22 MakeRecord       8    1    9               00 r[9]=mkrec(r[8])
  23 Compare          8    5    1 k(1,B)        00 r[8] <-> r[5]
  24 Jump            25   27   25               00 
  25 Gosub           11   47    0               00 call flush_partition
  26 Copy             8    5    0               00 r[5]=r[8]
  27 NewRowid         2   10    0               00 r[10]=rowid
  28 Insert           2    9   10               00 intkey=r[10] data=r[9]
  29 Ne               6   34   10               00 if r[10]!=r[6] goto 34
  30 Null             0    1    0               00 r[1]=NULL
  31 Rewind           1    1    0               00 
  32 Rewind           4    1    0               00 
  33 Goto             0   45    0               00 
  34 Goto             0   45    0               00 
  35 AggStep          0   12    1 dense_rank(0) 00 accum=r[1] step(r[12])
  36 Next             4   38    0               00 
  37 Goto             0   39    0               00 
  38 Goto             0   35    0               00 
  39 AggValue         1    0    2 dense_rank(0) 00 r[2]=value N=0
  40 Gosub            7   62    0               00 
  41 Delete           1    0    0               02 
  42 Next             1   44    0               00 
  43 Goto             0   45    0               00 
  44 Goto             0   40    0               00 
  45 Goto             0   20    0               00 
  46 Integer         60   11    0               00 r[11]=60
  47 Rewind           2   59    0               00 
  48 AggStep          0   12    1 dense_rank(0) 00 accum=r[1] step(r[12])
  49 Next             4   51    0               00 
  50 Goto             0   52    0               00 
  51 Goto             0   48    0               00 
  52 AggValue         1    0    2 dense_rank(0) 00 r[2]=value N=0
  53 Gosub            7   62    0               00 
  54 Delete           1    0    0               02 
  55 Next             1   57    0               00 
  56 Goto             0   59    0               00 
  57 Goto             0   53    0               00 
  58 Goto             0   52    0               00 
  59 ResetSorter      1    0    0               00 
  60 Return          11    0    0               00 
  61 Goto             0   66    0               00 
  62 Noop             0    0    0               00 inner-loop subroutine
  63 Copy             2   12    0               00 r[12]=r[2]
  64 ResultRow       12    1    0               00 output=r[12]
  65 Return           7    0    0               00 end inner-loop subroutine
  66 Halt             0    0    0               00 
  67 Transaction      0    0    8 0             01 usesStmtJournal=0
  68 Goto             0    1    0               00 
SQL: [SELECT test005, percent_rank() OVER (PARTITION BY test005 ORDER BY test005) FROM test003
;]
VDBE Program Listing:
   0 Init             0  100    0               00 Start at 100
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    3    0               00 nColumn=3
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   29    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    6    0 k(2,B,B)      00 
   9 OpenRead         0    9    0 4             00 root=9 iDb=0; test003
  10 Explain         10    7    0 SCAN TABLE test003 00 
  11 Rewind           0   19    0               00 
  12 Column           0    3    6               00 r[6]=test003.test005
  13 Column           0    3    7               00 r[7]=test003.test005
  14 Column           0    3    4               00 r[4]=test003.test005
  15 Column           0    3    5               00 r[5]=test003.test005
  16 MakeRecord       4    4    9               00 r[9]=mkrec(r[4..7])
  17 SorterInsert     6    9    4 4             00 key=r[9]
  18 Next             0   12    0               01 
  19 Explain         19    7    0 USE TEMP B-TREE FOR ORDER BY 00 
  20 OpenPseudo       7   10    6               00 6 columns in r[10]
  21 SorterSort       6   28    0               00 
  22 SorterData       6   10    7               00 r[10]=data
  23 Column           7    1    8               00 r[8]=
  24 Column           7    3    7               00 r[7]=
  25 Column           7    2    6               00 r[6]=
  26 Yield            3    0    0               00 
  27 SorterNext       6   22    0               00 
  28 EndCoroutine     3    0    0               00 
  29 Null             0   11   11               00 r[11..11]=NULL
  30 Integer          1   12    0               00 r[12]=1
  31 Explain         31    0    0 SCAN SUBQUERY 2 00 
  32 InitCoroutine    3    0    7               00 
  33 Yield            3   65    0               00 next row of subquery_2
  34 Copy             6   14    0               00 r[14]=r[6]
  35 Copy             7   15    0               00 r[15]=r[7]
  36 Copy             8   16    0               00 r[16]=r[8]
  37 MakeRecord      14    3   17               00 r[17]=mkrec(r[14..16])
  38 Compare         15   11    1 k(1,B)        00 r[15] <-> r[11]
  39 Jump            40   42   40               00 
  40 Gosub           23   66    0               00 call flush_partition
  41 Copy            15   11    0               00 r[11]=r[15]
  42 NewRowid         2   18    0               00 r[18]=rowid
  43 Insert           2   17   18               00 intkey=r[18] data=r[17]
  44 Ne              12   54   18               00 if r[18]!=r[12] goto 54
  45 Null             0    1    0               00 r[1]=NULL
  46 Rewind           3    1    0               00 
  47 Rewind           1    1    0               00 
  48 Rewind           4    1    0               00 
  49 Copy            16   19    0               00 r[19]=r[16]
  50 Copy            19   20    0               00 r[20]=r[19]
  51 Copy            19   21    0               00 r[21]=r[19]
  52 Copy            19   22    0               00 r[22]=r[19]
  53 Goto             0   64    0               00 
  54 Compare         19   16    1 k(1,B)        00 r[19] <-> r[16]
  55 Jump            56   64   56               00 
  56 Copy            16   19    0               00 r[19]=r[16]
  57 AggStep          0   24    1 percent_rank(0) 00 accum=r[1] step(r[24])
  58 Next             4   60    0               00 
  59 Goto             0   64    0               00 
  60 Column           4    2   24               00 r[24]=
  61 Compare         22   24    1 k(1,B)        00 r[22] <-> r[24]
  62 Jump            63   57   63               00 
  63 Copy            24   22    0               00 r[22]=r[24]
  64 Goto             0   33    0               00 
  65 Integer         92   23    0               00 r[23]=92
  66 Rewind           2   91    0               00 
  67 AggStep          0   24    1 percent_rank(0) 00 accum=r[1] step(r[24])
  68 Next             4   70    0               00 
  69 Goto             0   74    0               00 
  70 Column           4    2   24               00 r[24]=
  71 Compare         22   24    1 k(1,B)        00 r[22] <-> r[24]
  72 Jump            73   67   73               00 
  73 Copy            24   22    0               00 r[22]=r[24]
  74 AggValue         1    0    2 percent_rank(0) 00 r[2]=value N=0
  75 Gosub           13   94    0               00 
  76 Next             1   78    0               00 
  77 Goto             0   91    0               00 
  78 Column           1    2   24               00 r[24]=
  79 Compare         21   24    1 k(1,B)        00 r[21] <-> r[24]
  80 Jump            81   75   81               00 
  81 Copy            24   21    0               00 r[21]=r[24]
  82 AggInverse       1   24    1 percent_rank(0) 00 accum=r[1] inverse(r[24])
  83 Delete           3    0    0               02 
  84 Next             3   86    0               00 
  85 Goto             0   90    0               00 
  86 Column           3    2   24               00 r[24]=
  87 Compare         20   24    1 k(1,B)        00 r[20] <-> r[24]
  88 Jump            89   82   89               00 
  89 Copy            24   20    0               00 r[20]=r[24]
  90 Goto             0   74    0               00 
  91 ResetSorter      1    0    0               00 
  92 Return          23    0    0               00 
  93 Goto             0   99    0               00 
  94 Noop             0    0    0               00 inner-loop subroutine
  95 Column           1    0   25               00 r[25]=
  96 Copy             2   26    0               00 r[26]=r[2]
  97 ResultRow       25    2    0               00 output=r[25..26]
  98 Return          13    0    0               00 end inner-loop subroutine
  99 Halt             0    0    0               00 
 100 Transaction      0    0    8 0             01 usesStmtJournal=0
 101 Goto             0    1    0               00 
SQL: [SELECT following, rank() OVER (ORDER BY following) FROM v0 ORDER BY 1,2

;]
VDBE Program Listing:
   0 Init             0  181    0               00 Start at 181
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  105    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    4    0               00 nColumn=4
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   37   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    6    0 k(1,B)        00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   26    0               00 
  19 Column           0    1    8               00 r[8]=v0.following
  20 Column           0    1    9               00 r[9]=v0.following
  21 Column           0    1   10               00 r[10]=v0.following
  22 Column           0    1    7               00 r[7]=v0.following
  23 MakeRecord       7    4   12               00 r[12]=mkrec(r[7..10])
  24 SorterInsert    11   12    7 4             00 key=r[12]
  25 Next             0   19    0               01 
  26 Explain         26   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  27 OpenPseudo      12   13    6               00 6 columns in r[13]
  28 SorterSort      11   36    0               00 
  29 SorterData      11   13   12               00 r[13]=data
  30 Column          12    0   11               00 r[11]=
  31 Column          12    3   10               00 r[10]=
  32 Column          12    2    9               00 r[9]=
  33 Column          12    1    8               00 r[8]=
  34 Yield            6    0    0               00 
  35 SorterNext      11   29    0               00 
  36 EndCoroutine     6    0    0               00 
  37 Integer          1   14    0               00 r[14]=1
  38 Explain         38    7    0 SCAN SUBQUERY 3 00 
  39 InitCoroutine    6    0   14               00 
  40 Yield            6   77    0               00 next row of subquery_3
  41 Copy             8   16    0               00 r[16]=r[8]
  42 Copy             9   17    0               00 r[17]=r[9]
  43 Copy            10   18    0               00 r[18]=r[10]
  44 Copy            11   19    0               00 r[19]=r[11]
  45 MakeRecord      16    4   20               00 r[20]=mkrec(r[16..19])
  46 NewRowid         7   21    0               00 r[21]=rowid
  47 Insert           7   20   21               00 intkey=r[21] data=r[20]
  48 Ne              14   57   21               00 if r[21]!=r[14] goto 57
  49 Null             0    4    0               00 r[4]=NULL
  50 Rewind           6    1    0               00 
  51 Rewind           9    1    0               00 
  52 Copy            19   22    0               00 r[22]=r[19]
  53 Copy            22   23    0               00 r[23]=r[22]
  54 Copy            22   24    0               00 r[24]=r[22]
  55 Copy            22   25    0               00 r[25]=r[22]
  56 Goto             0   76    0               00 
  57 Compare         22   19    1 k(1,B)        00 r[22] <-> r[19]
  58 Jump            59   76   59               00 
  59 Copy            19   22    0               00 r[22]=r[19]
  60 AggStep          0   26    4 rank(0)       00 accum=r[4] step(r[26])
  61 Next             9   63    0               00 
  62 Goto             0   67    0               00 
  63 Column           9    3   26               00 r[26]=
  64 Compare         25   26    1 k(1,B)        00 r[25] <-> r[26]
  65 Jump            66   60   66               00 
  66 Copy            26   25    0               00 r[25]=r[26]
  67 AggValue         4    0    5 rank(0)       00 r[5]=value N=0
  68 Gosub           15   97    0               00 
  69 Delete           6    0    0               02 
  70 Next             6   72    0               00 
  71 Goto             0   76    0               00 
  72 Column           6    3   26               00 r[26]=
  73 Compare         24   26    1 k(1,B)        00 r[24] <-> r[26]
  74 Jump            75   68   75               00 
  75 Copy            26   24    0               00 r[24]=r[26]
  76 Goto             0   40    0               00 
  77 Rewind           7   95    0               00 
  78 AggStep          0   26    4 rank(0)       00 accum=r[4] step(r[26])
  79 Next             9   81    0               00 
  80 Goto             0   85    0               00 
  81 Column           9    3   26               00 r[26]=
  82 Compare         25   26    1 k(1,B)        00 r[25] <-> r[26]
  83 Jump            84   78   84               00 
  84 Copy            26   25    0               00 r[25]=r[26]
  85 AggValue         4    0    5 rank(0)       00 r[5]=value N=0
  86 Gosub           15   97    0               00 
  87 Delete           6    0    0               02 
  88 Next             6   90    0               00 
  89 Goto             0   95    0               00 
  90 Column           6    3   26               00 r[26]=
  91 Compare         24   26    1 k(1,B)        00 r[24] <-> r[26]
  92 Jump            93   86   93               00 
  93 Copy            26   24    0               00 r[24]=r[26]
  94 Goto             0   85    0               00 
  95 ResetSorter      6    0    0               00 
  96 Goto             0  104    0               00 
  97 Noop             0    0    0               00 inner-loop subroutine
  98 Column           6    0   27               00 r[27]=
  99 Column           6    1   28               00 r[28]=
 100 Copy             5   29    0               00 r[29]=r[5]
 101 Column           6    2   30               00 r[30]=
 102 Yield            3    0    0               00 
 103 Return          15    0    0               00 end inner-loop subroutine
 104 EndCoroutine     3    0    0               00 
 105 SorterOpen      13    5    0 k(2,B,B)      00 
 106 Integer          1   31    0               00 r[31]=1
 107 Explain        107    0    0 SCAN SUBQUERY 2 00 
 108 InitCoroutine    3    0    7               00 
 109 Yield            3  146    0               00 next row of subquery_2
 110 Copy            27   33    0               00 r[33]=r[27]
 111 Copy            28   34    0               00 r[34]=r[28]
 112 Copy            29   35    0               00 r[35]=r[29]
 113 Copy            30   36    0               00 r[36]=r[30]
 114 MakeRecord      33    4   37               00 r[37]=mkrec(r[33..36])
 115 NewRowid         2   38    0               00 r[38]=rowid
 116 Insert           2   37   38               00 intkey=r[38] data=r[37]
 117 Ne              31  126   38               00 if r[38]!=r[31] goto 126
 118 Null             0    1    0               00 r[1]=NULL
 119 Rewind           1    1    0               00 
 120 Rewind           4    1    0               00 
 121 Copy            36   39    0               00 r[39]=r[36]
 122 Copy            39   40    0               00 r[40]=r[39]
 123 Copy            39   41    0               00 r[41]=r[39]
 124 Copy            39   42    0               00 r[42]=r[39]
 125 Goto             0  145    0               00 
 126 Compare         39   36    1 k(1,B)        00 r[39] <-> r[36]
 127 Jump           128  145  128               00 
 128 Copy            36   39    0               00 r[39]=r[36]
 129 AggStep          0   43    1 rank(0)       00 accum=r[1] step(r[43])
 130 Next             4  132    0               00 
 131 Goto             0  136    0               00 
 132 Column           4    3   43               00 r[43]=
 133 Compare         42   43    1 k(1,B)        00 r[42] <-> r[43]
 134 Jump           135  129  135               00 
 135 Copy            43   42    0               00 r[42]=r[43]
 136 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
 137 Gosub           32  166    0               00 
 138 Delete           1    0    0               02 
 139 Next             1  141    0               00 
 140 Goto             0  145    0               00 
 141 Column           1    3   43               00 r[43]=
 142 Compare         41   43    1 k(1,B)        00 r[41] <-> r[43]
 143 Jump           144  137  144               00 
 144 Copy            43   41    0               00 r[41]=r[43]
 145 Goto             0  109    0               00 
 146 Rewind           2  164    0               00 
 147 AggStep          0   43    1 rank(0)       00 accum=r[1] step(r[43])
 148 Next             4  150    0               00 
 149 Goto             0  154    0               00 
 150 Column           4    3   43               00 r[43]=
 151 Compare         42   43    1 k(1,B)        00 r[42] <-> r[43]
 152 Jump           153  147  153               00 
 153 Copy            43   42    0               00 r[42]=r[43]
 154 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
 155 Gosub           32  166    0               00 
 156 Delete           1    0    0               02 
 157 Next             1  159    0               00 
 158 Goto             0  164    0               00 
 159 Column           1    3   43               00 r[43]=
 160 Compare         41   43    1 k(1,B)        00 r[41] <-> r[43]
 161 Jump           162  155  162               00 
 162 Copy            43   41    0               00 r[41]=r[43]
 163 Goto             0  154    0               00 
 164 ResetSorter      1    0    0               00 
 165 Goto             0  172    0               00 
 166 Noop             0    0    0               00 inner-loop subroutine
 167 Column           1    1   44               00 r[44]=
 168 Column           1    2   45               00 r[45]=
 169 MakeRecord      44    2   48               00 r[48]=mkrec(r[44..45])
 170 SorterInsert    13   48   44 2             00 key=r[48]
 171 Return          32    0    0               00 end inner-loop subroutine
 172 Explain        172    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 173 OpenPseudo      14   49    5               00 5 columns in r[49]
 174 SorterSort      13  180    0               00 
 175 SorterData      13   49   14               00 r[49]=data
 176 Column          14    1   47               00 r[47]=rank() OVER (ORDER BY following)
 177 Column          14    0   46               00 r[46]=following
 178 ResultRow       46    2    0               00 output=r[46..47]
 179 SorterNext      13  175    0               00 
 180 Halt             0    0    0               00 
 181 Transaction      0    0    8 0             01 usesStmtJournal=0
 182 Goto             0    1    0               00 
SQL: [SELECT DISTINCT following, rank() OVER (ORDER BY following) FROM v0 ORDER BY 1,2

;]
VDBE Program Listing:
   0 Init             0  188    0               00 Start at 188
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    4    0               00 nColumn=4
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3  105    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Null             0    4    0               00 r[4]=NULL
   9 OpenEphemeral    6    4    0               00 nColumn=4
  10 OpenDup          7    6    0               00 
  11 OpenDup          8    6    0               00 
  12 OpenDup          9    6    0               00 
  13 InitCoroutine    6   37   14               00 subquery_3
  14 Explain         14    7    0 CO-ROUTINE 3  00 
  15 SorterOpen      11    6    0 k(1,B)        00 
  16 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
  17 Explain         17   14    0 SCAN TABLE v0 00 
  18 Rewind           0   26    0               00 
  19 Column           0    1    8               00 r[8]=v0.following
  20 Column           0    1    9               00 r[9]=v0.following
  21 Column           0    1   10               00 r[10]=v0.following
  22 Column           0    1    7               00 r[7]=v0.following
  23 MakeRecord       7    4   12               00 r[12]=mkrec(r[7..10])
  24 SorterInsert    11   12    7 4             00 key=r[12]
  25 Next             0   19    0               01 
  26 Explain         26   14    0 USE TEMP B-TREE FOR ORDER BY 00 
  27 OpenPseudo      12   13    6               00 6 columns in r[13]
  28 SorterSort      11   36    0               00 
  29 SorterData      11   13   12               00 r[13]=data
  30 Column          12    0   11               00 r[11]=
  31 Column          12    3   10               00 r[10]=
  32 Column          12    2    9               00 r[9]=
  33 Column          12    1    8               00 r[8]=
  34 Yield            6    0    0               00 
  35 SorterNext      11   29    0               00 
  36 EndCoroutine     6    0    0               00 
  37 Integer          1   14    0               00 r[14]=1
  38 Explain         38    7    0 SCAN SUBQUERY 3 00 
  39 InitCoroutine    6    0   14               00 
  40 Yield            6   77    0               00 next row of subquery_3
  41 Copy             8   16    0               00 r[16]=r[8]
  42 Copy             9   17    0               00 r[17]=r[9]
  43 Copy            10   18    0               00 r[18]=r[10]
  44 Copy            11   19    0               00 r[19]=r[11]
  45 MakeRecord      16    4   20               00 r[20]=mkrec(r[16..19])
  46 NewRowid         7   21    0               00 r[21]=rowid
  47 Insert           7   20   21               00 intkey=r[21] data=r[20]
  48 Ne              14   57   21               00 if r[21]!=r[14] goto 57
  49 Null             0    4    0               00 r[4]=NULL
  50 Rewind           6    1    0               00 
  51 Rewind           9    1    0               00 
  52 Copy            19   22    0               00 r[22]=r[19]
  53 Copy            22   23    0               00 r[23]=r[22]
  54 Copy            22   24    0               00 r[24]=r[22]
  55 Copy            22   25    0               00 r[25]=r[22]
  56 Goto             0   76    0               00 
  57 Compare         22   19    1 k(1,B)        00 r[22] <-> r[19]
  58 Jump            59   76   59               00 
  59 Copy            19   22    0               00 r[22]=r[19]
  60 AggStep          0   26    4 rank(0)       00 accum=r[4] step(r[26])
  61 Next             9   63    0               00 
  62 Goto             0   67    0               00 
  63 Column           9    3   26               00 r[26]=
  64 Compare         25   26    1 k(1,B)        00 r[25] <-> r[26]
  65 Jump            66   60   66               00 
  66 Copy            26   25    0               00 r[25]=r[26]
  67 AggValue         4    0    5 rank(0)       00 r[5]=value N=0
  68 Gosub           15   97    0               00 
  69 Delete           6    0    0               02 
  70 Next             6   72    0               00 
  71 Goto             0   76    0               00 
  72 Column           6    3   26               00 r[26]=
  73 Compare         24   26    1 k(1,B)        00 r[24] <-> r[26]
  74 Jump            75   68   75               00 
  75 Copy            26   24    0               00 r[24]=r[26]
  76 Goto             0   40    0               00 
  77 Rewind           7   95    0               00 
  78 AggStep          0   26    4 rank(0)       00 accum=r[4] step(r[26])
  79 Next             9   81    0               00 
  80 Goto             0   85    0               00 
  81 Column           9    3   26               00 r[26]=
  82 Compare         25   26    1 k(1,B)        00 r[25] <-> r[26]
  83 Jump            84   78   84               00 
  84 Copy            26   25    0               00 r[25]=r[26]
  85 AggValue         4    0    5 rank(0)       00 r[5]=value N=0
  86 Gosub           15   97    0               00 
  87 Delete           6    0    0               02 
  88 Next             6   90    0               00 
  89 Goto             0   95    0               00 
  90 Column           6    3   26               00 r[26]=
  91 Compare         24   26    1 k(1,B)        00 r[24] <-> r[26]
  92 Jump            93   86   93               00 
  93 Copy            26   24    0               00 r[24]=r[26]
  94 Goto             0   85    0               00 
  95 ResetSorter      6    0    0               00 
  96 Goto             0  104    0               00 
  97 Noop             0    0    0               00 inner-loop subroutine
  98 Column           6    0   27               00 r[27]=
  99 Column           6    1   28               00 r[28]=
 100 Copy             5   29    0               00 r[29]=r[5]
 101 Column           6    2   30               00 r[30]=
 102 Yield            3    0    0               00 
 103 Return          15    0    0               00 end inner-loop subroutine
 104 EndCoroutine     3    0    0               00 
 105 SorterOpen      13    5    0 k(2,B,B)      00 
 106 OpenEphemeral   14    0    0 k(2,B,B)      08 nColumn=0
 107 Integer          1   31    0               00 r[31]=1
 108 Explain        108    0    0 SCAN SUBQUERY 2 00 
 109 InitCoroutine    3    0    7               00 
 110 Yield            3  147    0               00 next row of subquery_2
 111 Copy            27   33    0               00 r[33]=r[27]
 112 Copy            28   34    0               00 r[34]=r[28]
 113 Copy            29   35    0               00 r[35]=r[29]
 114 Copy            30   36    0               00 r[36]=r[30]
 115 MakeRecord      33    4   37               00 r[37]=mkrec(r[33..36])
 116 NewRowid         2   38    0               00 r[38]=rowid
 117 Insert           2   37   38               00 intkey=r[38] data=r[37]
 118 Ne              31  127   38               00 if r[38]!=r[31] goto 127
 119 Null             0    1    0               00 r[1]=NULL
 120 Rewind           1    1    0               00 
 121 Rewind           4    1    0               00 
 122 Copy            36   39    0               00 r[39]=r[36]
 123 Copy            39   40    0               00 r[40]=r[39]
 124 Copy            39   41    0               00 r[41]=r[39]
 125 Copy            39   42    0               00 r[42]=r[39]
 126 Goto             0  146    0               00 
 127 Compare         39   36    1 k(1,B)        00 r[39] <-> r[36]
 128 Jump           129  146  129               00 
 129 Copy            36   39    0               00 r[39]=r[36]
 130 AggStep          0   43    1 rank(0)       00 accum=r[1] step(r[43])
 131 Next             4  133    0               00 
 132 Goto             0  137    0               00 
 133 Column           4    3   43               00 r[43]=
 134 Compare         42   43    1 k(1,B)        00 r[42] <-> r[43]
 135 Jump           136  130  136               00 
 136 Copy            43   42    0               00 r[42]=r[43]
 137 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
 138 Gosub           32  167    0               00 
 139 Delete           1    0    0               02 
 140 Next             1  142    0               00 
 141 Goto             0  146    0               00 
 142 Column           1    3   43               00 r[43]=
 143 Compare         41   43    1 k(1,B)        00 r[41] <-> r[43]
 144 Jump           145  138  145               00 
 145 Copy            43   41    0               00 r[41]=r[43]
 146 Goto             0  110    0               00 
 147 Rewind           2  165    0               00 
 148 AggStep          0   43    1 rank(0)       00 accum=r[1] step(r[43])
 149 Next             4  151    0               00 
 150 Goto             0  155    0               00 
 151 Column           4    3   43               00 r[43]=
 152 Compare         42   43    1 k(1,B)        00 r[42] <-> r[43]
 153 Jump           154  148  154               00 
 154 Copy            43   42    0               00 r[42]=r[43]
 155 AggValue         1    0    2 rank(0)       00 r[2]=value N=0
 156 Gosub           32  167    0               00 
 157 Delete           1    0    0               02 
 158 Next             1  160    0               00 
 159 Goto             0  165    0               00 
 160 Column           1    3   43               00 r[43]=
 161 Compare         41   43    1 k(1,B)        00 r[41] <-> r[43]
 162 Jump           163  156  163               00 
 163 Copy            43   41    0               00 r[41]=r[43]
 164 Goto             0  155    0               00 
 165 ResetSorter      1    0    0               00 
 166 Goto             0  178    0               00 
 167 Noop             0    0    0               00 inner-loop subroutine
 168 Column           1    0   46               00 r[46]=
 169 Copy             2   47    0               00 r[47]=r[2]
 170 Found           14  177   46 2             00 key=r[46..47]
 171 MakeRecord      46    2   43               00 r[43]=mkrec(r[46..47])
 172 IdxInsert       14   43   46 2             10 key=r[43]
 173 Copy            46   44    0               00 r[44]=r[46]
 174 Copy            47   45    0               00 r[45]=r[47]
 175 MakeRecord      44    4   48               00 r[48]=mkrec(r[44..47])
 176 SorterInsert    13   48   44 4             00 key=r[48]
 177 Return          32    0    0               00 end inner-loop subroutine
 178 Explain        178    0    0 USE TEMP B-TREE FOR DISTINCT 00 
 179 Explain        179    0    0 USE TEMP B-TREE FOR ORDER BY 00 
 180 OpenPseudo      15   49    5               00 5 columns in r[49]
 181 SorterSort      13  187    0               00 
 182 SorterData      13   49   15               00 r[49]=data
 183 Column          15    3   47               00 r[47]=rank() OVER (ORDER BY following)
 184 Column          15    2   46               00 r[46]=following
 185 ResultRow       46    2    0               00 output=r[46..47]
 186 SorterNext      13  182    0               00 
 187 Halt             0    0    0               00 
 188 Transaction      0    0    8 0             01 usesStmtJournal=0
 189 Goto             0    1    0               00 
SQL: [;CREATE TABLE test008(field8 INTEGER PRIMARY KEY, field7 INTEGER, test009 INTEGER);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 test008       00 r[7]='test008'
  20 String8          0    8    0 test008       00 r[8]='test008'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE test008(field8 INTEGER PRIMARY KEY, field7 INTEGER, test009 INTEGER) 00 r[10]='CREATE TABLE test008(field8 INTEGER PRIMARY KEY, field7 INTEGER, test009 INTEGER)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    9               00 
  26 ParseSchema      0    0    0 tbl_name='test008' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    8 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    9 0             00 usesStmtJournal=0
  16 String8          0    2    0 test008       00 r[2]='test008'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;SELECT c0, lead(c0, -1) OVER (PARTITION BY c0 ORDER BY c0) FROM t0;]
VDBE Program Listing:
   0 Init             0   95    0               00 Start at 95
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    5    0               00 nColumn=5
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   43    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 SorterOpen       6    5    0 k(1,B)        00 
   9 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  10 Explain         10    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  11 Rewind           7   27    4 0             00 
  12 Column           7    0    6               00 r[6]=t0.c0
  13 Column           7    0    7               00 r[7]=t0.c0
  14 Column           7    0    8               00 r[8]=t0.c0
  15 Integer         -1    9    0               00 r[9]=-1
  16 Column           7    0    4               00 r[4]=t0.c0
  17 Column           7    0    5               00 r[5]=t0.c0
  18 MakeRecord       5    5   11               00 r[11]=mkrec(r[5..9])
  19 SequenceTest     6   24    0               00 if( cursor[6].ctr++ ) pc = 24
  20 Compare         12    4    1 k(2,B,B)      00 r[12] <-> r[4]
  21 Jump            22   25   22               00 
  22 Gosub           13   30    0               00 
  23 ResetSorter      6    0    0               00 
  24 Move             4   12    1               00 r[12]=r[4]
  25 SorterInsert     6   11    5 5             00 key=r[11]
  26 Next             7   12    0               01 
  27 Explain         27    7    0 USE TEMP B-TREE FOR RIGHT PART OF ORDER BY 00 
  28 Gosub           13   30    0               00 
  29 Goto             0   42    0               00 
  30 Once             0   32    0               00 
  31 OpenPseudo       8   14    7               00 7 columns in r[14]
  32 SorterSort       6   42    0               00 
  33 SorterData       6   14    8               00 r[14]=data
  34 Column           8    4   10               00 r[10]=
  35 Column           8    0    9               00 r[9]=
  36 Column           8    3    8               00 r[8]=
  37 Column           8    2    7               00 r[7]=
  38 Column           8    1    6               00 r[6]=
  39 Yield            3    0    0               00 
  40 SorterNext       6   33    0               00 
  41 Return          13    0    0               00 
  42 EndCoroutine     3    0    0               00 
  43 Null             0   15   15               00 r[15..15]=NULL
  44 Integer          1   16    0               00 r[16]=1
  45 OpenDup          9    1    0               00 
  46 Explain         46    0    0 SCAN SUBQUERY 2 00 
  47 InitCoroutine    3    0    7               00 
  48 Yield            3   70    0               00 next row of subquery_2
  49 Copy             6   18    0               00 r[18]=r[6]
  50 Copy             7   19    0               00 r[19]=r[7]
  51 Copy             8   20    0               00 r[20]=r[8]
  52 Copy             9   21    0               00 r[21]=r[9]
  53 Copy            10   22    0               00 r[22]=r[10]
  54 MakeRecord      18    5   23               00 r[23]=mkrec(r[18..22])
  55 Compare         19   15    1 k(1,B)        00 r[19] <-> r[15]
  56 Jump            57   59   57               00 
  57 Gosub           25   71    0               00 call flush_partition
  58 Copy            19   15    0               00 r[15]=r[19]
  59 NewRowid         2   24    0               00 r[24]=rowid
  60 Insert           2   23   24               00 intkey=r[24] data=r[23]
  61 Ne              16   66   24               00 if r[24]!=r[16] goto 66
  62 Null             0    1    0               00 r[1]=NULL
  63 Rewind           1    1    0               00 
  64 Rewind           4    1    0               00 
  65 Goto             0   69    0               00 
  66 Column           4    3   26               00 r[26]=
  67 Column           4    4   27               00 r[27]=
  68 Next             4   69    0               00 
  69 Goto             0   48    0               00 
  70 Integer         87   25    0               00 r[25]=87
  71 Rewind           2   86    0               00 
  72 Column           4    3   26               00 r[26]=
  73 Column           4    4   27               00 r[27]=
  74 Next             4   75    0               00 
  75 AggValue         1    2    2 lead(2)       00 r[2]=value N=2
  76 Null             0    2    0               00 r[2]=NULL
  77 Rowid            1   28    0               00 r[28]=rowid
  78 Column           1    4   29               00 r[29]=
  79 Add             29   28   28               00 r[28]=r[29]+r[28]
  80 SeekRowid        9   82   28               00 intkey=r[28]
  81 Column           9    3    2               00 r[2]=
  82 Gosub           17   89    0               00 
  83 Next             1   85    0               00 
  84 Goto             0   86    0               00 
  85 Goto             0   75    0               00 
  86 ResetSorter      1    0    0               00 
  87 Return          25    0    0               00 
  88 Goto             0   94    0               00 
  89 Noop             0    0    0               00 inner-loop subroutine
  90 Column           1    0   30               00 r[30]=
  91 Copy             2   31    0               00 r[31]=r[2]
  92 ResultRow       30    2    0               00 output=r[30..31]
  93 Return          17    0    0               00 end inner-loop subroutine
  94 Halt             0    0    0               00 
  95 Transaction      0    0    9 0             01 usesStmtJournal=0
  96 Goto             0    1    0               00 
SQL: [;
;CREATE VIEW test010 AS SELECT NTILE(256) OVER (ORDER BY c0) - 1 AS nt FROM t0;]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 Integer          0    2    0               00 r[2]=0
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 view          00 r[6]='view'
  19 String8          0    7    0 test010       00 r[7]='test010'
  20 String8          0    8    0 test010       00 r[8]='test010'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE VIEW test010 AS SELECT NTILE(256) OVER (ORDER BY c0) - 1 AS nt FROM t0 00 r[10]='CREATE VIEW test010 AS SELECT NTILE(256) OVER (ORDER BY c0) - 1 AS nt FROM t0'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1   10               00 
  26 ParseSchema      0    0    0 tbl_name='test010' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    9 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0   10 0             00 usesStmtJournal=0
  16 String8          0    2    0 test010       00 r[2]='test010'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;SELECT * FROM test010;]
VDBE Program Listing:
   0 Init             0   65    0               00 Start at 65
   1 InitCoroutine    1   58    2               00 test010
   2 Explain          2    0    0 CO-ROUTINE 1  00 
   3 Null             0    2    0               00 r[2]=NULL
   4 OpenEphemeral    2    2    0               00 nColumn=2
   5 OpenDup          3    2    0               00 
   6 OpenDup          4    2    0               00 
   7 OpenDup          5    2    0               00 
   8 InitCoroutine    4   19    9               00 subquery_2
   9 Explain          9    2    0 CO-ROUTINE 2  00 
  10 Noop             7    4    0               00 
  11 OpenRead         8    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  12 Explain         12    9    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  13 Rewind           8   18    5 0             00 
  14 Column           8    0    5               00 r[5]=t0.c0
  15 Integer        256    6    0               00 r[6]=256
  16 Yield            4    0    0               00 
  17 Next             8   14    0               01 
  18 EndCoroutine     4    0    0               00 
  19 Integer          1    7    0               00 r[7]=1
  20 Explain         20    2    0 SCAN SUBQUERY 2 00 
  21 InitCoroutine    4    0    9               00 
  22 Yield            4   38    0               00 next row of subquery_2
  23 Copy             5    9    0               00 r[9]=r[5]
  24 Copy             6   10    0               00 r[10]=r[6]
  25 MakeRecord       9    2   11               00 r[11]=mkrec(r[9..10])
  26 NewRowid         3   12    0               00 r[12]=rowid
  27 Insert           3   11   12               00 intkey=r[12] data=r[11]
  28 Ne               7   34   12               00 if r[12]!=r[7] goto 34
  29 Null             0    2    0               00 r[2]=NULL
  30 Rewind           4    1    0               00 
  31 Rewind           2    1    0               00 
  32 Rewind           5    1    0               00 
  33 Goto             0   37    0               00 
  34 Column           5    1   13               00 r[13]=
  35 AggStep          0   13    2 ntile(1)      01 accum=r[2] step(r[13])
  36 Next             5   37    0               00 
  37 Goto             0   22    0               00 
  38 Rewind           3   51    0               00 
  39 Column           5    1   13               00 r[13]=
  40 AggStep          0   13    2 ntile(1)      01 accum=r[2] step(r[13])
  41 Next             5   42    0               00 
  42 AggValue         2    1    3 ntile(1)      00 r[3]=value N=1
  43 Gosub            8   53    0               00 
  44 Next             2   46    0               00 
  45 Goto             0   51    0               00 
  46 Column           4    1   13               00 r[13]=
  47 AggInverse       1   13    2 ntile(1)      01 accum=r[2] inverse(r[13])
  48 Delete           4    0    0               02 
  49 Next             4   50    0               00 
  50 Goto             0   42    0               00 
  51 ResetSorter      2    0    0               00 
  52 Goto             0   57    0               00 
  53 Noop             0    0    0               00 inner-loop subroutine
  54 Subtract        16    3   14               00 r[14]=r[3]-r[16]
  55 Yield            1    0    0               00 
  56 Return           8    0    0               00 end inner-loop subroutine
  57 EndCoroutine     1    0    0               00 
  58 Explain         58    0    0 SCAN SUBQUERY 1 00 
  59 InitCoroutine    1    0    2               00 
  60 Yield            1   64    0               00 next row of test010
  61 Copy            14   17    0               00 r[17]=r[14]
  62 ResultRow       17    1    0               00 output=r[17]
  63 Goto             0   60    0               00 
  64 Halt             0    0    0               00 
  65 Transaction      0    0   10 0             01 usesStmtJournal=0
  66 Integer          1   16    0               00 r[16]=1
  67 Goto             0    1    0               00 
SQL: [;
;SELECT sum( max(c0) ) OVER () FROM t0 GROUP BY c0;]
VDBE Program Listing:
   0 Init             0   87    0               00 Start at 87
   1 Null             0    1    0               00 r[1]=NULL
   2 OpenEphemeral    1    1    0               00 nColumn=1
   3 OpenDup          2    1    0               00 
   4 OpenDup          3    1    0               00 
   5 OpenDup          4    1    0               00 
   6 InitCoroutine    3   41    7               00 subquery_2
   7 Explain          7    0    0 CO-ROUTINE 2  00 
   8 Noop             6    1    0               00 
   9 Integer          0    7    0               00 r[7]=0; clear abort flag
  10 Null             0   10   10               00 r[10..10]=NULL
  11 Gosub            9   37    0               00 
  12 OpenRead         7    3    0 k(2,,)        00 root=3 iDb=0; sqlite_autoindex_t0_1
  13 Explain         13    7    0 SCAN TABLE t0 USING COVERING INDEX sqlite_autoindex_t0_1 00 
  14 Rewind           7   27   12 0             00 
  15 Column           7    0   11               00 r[11]=t0.c0
  16 Compare         10   11    1 k(1,B)        00 r[10] <-> r[11]
  17 Jump            18   22   18               00 
  18 Move            11   10    1               00 r[10]=r[11]
  19 Gosub            8   31    0               00 output one row
  20 IfPos            7   40    0               00 if r[7]>0 then r[7]-=0, goto 40; check abort flag
  21 Gosub            9   37    0               00 reset accumulator
  22 Column           7    0   12               00 r[12]=t0.c0
  23 CollSeq          0    0    0 (BINARY)      00 
  24 AggStep          0   12    4 max(1)        01 accum=r[4] step(r[12])
  25 Integer          1    6    0               00 r[6]=1; indicate data in accumulator
  26 Next             7   15    0               01 
  27 Gosub            8   31    0               00 output final row
  28 Goto             0   40    0               00 
  29 Integer          1    7    0               00 r[7]=1; set abort flag
  30 Return           8    0    0               00 
  31 IfPos            6   33    0               00 if r[6]>0 then r[6]-=0, goto 33; Groupby result generator entry point
  32 Return           8    0    0               00 
  33 AggFinal         4    1    0 max(1)        00 accum=r[4] N=1
  34 Copy             4   13    0               00 r[13]=r[4]
  35 Yield            3    0    0               00 
  36 Return           8    0    0               00 end groupby result generator
  37 Null             0    4    5               00 r[4..5]=NULL
  38 Integer          0    6    0               00 r[6]=0; indicate accumulator empty
  39 Return           9    0    0               00 
  40 EndCoroutine     3    0    0               00 
  41 Integer          1   14    0               00 r[14]=1
  42 Explain         42    0    0 SCAN SUBQUERY 2 00 
  43 InitCoroutine    3    0    7               00 
  44 Yield            3   67    0               00 next row of subquery_2
  45 Copy            13   16    0               00 r[16]=r[13]
  46 MakeRecord      16    1   17               00 r[17]=mkrec(r[16])
  47 NewRowid         2   18    0               00 r[18]=rowid
  48 Insert           2   17   18               00 intkey=r[18] data=r[17]
  49 Ne              14   54   18               00 if r[18]!=r[14] goto 54
  50 Null             0    1    0               00 r[1]=NULL
  51 Rewind           1    1    0               00 
  52 Rewind           4    1    0               00 
  53 Goto             0   66    0               00 
  54 Goto             0   66    0               00 
  55 Column           4    0   19               00 r[19]=
  56 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  57 Next             4   59    0               00 
  58 Goto             0   60    0               00 
  59 Goto             0   55    0               00 
  60 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  61 Gosub           15   82    0               00 
  62 Delete           1    0    0               02 
  63 Next             1   65    0               00 
  64 Goto             0   66    0               00 
  65 Goto             0   61    0               00 
  66 Goto             0   44    0               00 
  67 Rewind           2   80    0               00 
  68 Column           4    0   19               00 r[19]=
  69 AggStep          0   19    1 sum(1)        01 accum=r[1] step(r[19])
  70 Next             4   72    0               00 
  71 Goto             0   73    0               00 
  72 Goto             0   68    0               00 
  73 AggValue         1    1    2 sum(1)        00 r[2]=value N=1
  74 Gosub           15   82    0               00 
  75 Delete           1    0    0               02 
  76 Next             1   78    0               00 
  77 Goto             0   80    0               00 
  78 Goto             0   74    0               00 
  79 Goto             0   73    0               00 
  80 ResetSorter      1    0    0               00 
  81 Goto             0   86    0               00 
  82 Noop             0    0    0               00 inner-loop subroutine
  83 Copy             2   20    0               00 r[20]=r[2]
  84 ResultRow       20    1    0               00 output=r[20]
  85 Return          15    0    0               00 end inner-loop subroutine
  86 Halt             0    0    0               00 
  87 Transaction      0    0   10 0             01 usesStmtJournal=0
  88 Goto             0    1    0               00 
SQL: [;
;SELECT (SELECT min(following) OVER ()) FROM v0

;]
VDBE Program Listing:
   0 Init             0   69    0               00 Start at 69
   1 OpenRead         0    4    0 2             00 root=4 iDb=0; v0
   2 Explain          2    0    0 SCAN TABLE v0 00 
   3 Rewind           0   68    0               00 
   4 Explain          4    0    0 CORRELATED SCALAR SUBQUERY 1 00 
   5 Null             0    2    2               00 r[2..2]=NULL; Init subquery result
   6 Null             0    3    0               00 r[3]=NULL
   7 OpenEphemeral    1    1    0               00 nColumn=1
   8 OpenDup          2    1    0               00 
   9 OpenDup          3    1    0               00 
  10 OpenDup          4    1    0               00 
  11 InitCoroutine    5   17   12               00 subquery_3
  12 Explain         12    4    0 CO-ROUTINE 3  00 
  13 Explain         13   12    0 SCAN CONSTANT ROW 00 
  14 Column           0    1    6               00 r[6]=v0.following
  15 Yield            5    0    0               00 
  16 EndCoroutine     5    0    0               00 
  17 Integer          1    7    0               00 r[7]=1; LIMIT counter
  18 Integer          1    8    0               00 r[8]=1
  19 Explain         19    4    0 SCAN SUBQUERY 3 00 
  20 InitCoroutine    5    0   12               00 
  21 Yield            5   45    0               00 next row of subquery_3
  22 Copy             6   10    0               00 r[10]=r[6]
  23 MakeRecord      10    1   11               00 r[11]=mkrec(r[10])
  24 NewRowid         2   12    0               00 r[12]=rowid
  25 Insert           2   11   12               00 intkey=r[12] data=r[11]
  26 Ne               8   31   12               00 if r[12]!=r[8] goto 31
  27 Null             0    3    0               00 r[3]=NULL
  28 Rewind           1    1    0               00 
  29 Rewind           4    1    0               00 
  30 Goto             0   44    0               00 
  31 Goto             0   44    0               00 
  32 Column           4    0   13               00 r[13]=
  33 CollSeq          0    0    0 (BINARY)      00 
  34 AggStep          0   13    3 min(1)        01 accum=r[3] step(r[13])
  35 Next             4   37    0               00 
  36 Goto             0   38    0               00 
  37 Goto             0   32    0               00 
  38 AggValue         3    1    4 min(1)        00 r[4]=value N=1
  39 Gosub            9   61    0               00 
  40 Delete           1    0    0               02 
  41 Next             1   43    0               00 
  42 Goto             0   44    0               00 
  43 Goto             0   39    0               00 
  44 Goto             0   21    0               00 
  45 Rewind           2   59    0               00 
  46 Column           4    0   13               00 r[13]=
  47 CollSeq          0    0    0 (BINARY)      00 
  48 AggStep          0   13    3 min(1)        01 accum=r[3] step(r[13])
  49 Next             4   51    0               00 
  50 Goto             0   52    0               00 
  51 Goto             0   46    0               00 
  52 AggValue         3    1    4 min(1)        00 r[4]=value N=1
  53 Gosub            9   61    0               00 
  54 Delete           1    0    0               02 
  55 Next             1   57    0               00 
  56 Goto             0   59    0               00 
  57 Goto             0   53    0               00 
  58 Goto             0   52    0               00 
  59 ResetSorter      1    0    0               00 
  60 Goto             0   65    0               00 
  61 Noop             0    0    0               00 inner-loop subroutine
  62 Copy             4    2    0               00 r[2]=r[4]
  63 DecrJumpZero     7   65    0               00 if (--r[7])==0 goto 65
  64 Return           9    0    0               00 end inner-loop subroutine
  65 Copy             2    1    0               00 r[1]=r[2]
  66 ResultRow        1    1    0               00 output=r[1]
  67 Next             0    4    0               01 
  68 Halt             0    0    0               00 
  69 Transaction      0    0   10 0             01 usesStmtJournal=0
  70 Goto             0    1    0               00 
SQL: [SELECT (SELECT avg(field2)) FROM test003 ORDER BY 1
;]
VDBE Program Listing:
   0 Init             0   19    0               00 Start at 19
   1 SorterOpen       1    3    0 k(1,B)        00 
   2 Null             0    1    2               00 r[1..2]=NULL
   3 OpenRead         0    9    0 0             00 root=9 iDb=0; test003
   4 Explain          4    0    0 SCAN TABLE test003 00 
   5 Rewind           0    9    0               00 
   6 Rowid            0    3    0               00 r[3]=rowid
   7 AggStep          0    3    1 avg(1)        01 accum=r[1] step(r[3])
   8 Next             0    6    0               01 
   9 AggFinal         1    1    0 avg(1)        00 accum=r[1] N=1
  10 Explain         10    0    0 CORRELATED SCALAR SUBQUERY 1 00 
  11 Null             0    5    5               00 r[5..5]=NULL; Init subquery result
  12 Integer          1    6    0               00 r[6]=1; LIMIT counter
  13 Explain         13   10    0 SCAN CONSTANT ROW 00 
  14 Copy             1    5    0               00 r[5]=r[1]
  15 DecrJumpZero     6   16    0               00 if (--r[6])==0 goto 16
  16 Copy             5    4    0               00 r[4]=r[5]
  17 ResultRow        4    1    0               00 output=r[4]
  18 Halt             0    0    0               00 
  19 Transaction      0    0   10 0             01 usesStmtJournal=0
  20 Goto             0    1    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f6e00193859 in __GI_abort () at abort.c:79
#2  0x00007f6e00193729 in __assert_fail_base (fmt=0x7f6e00329588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x211bd9 "pColExpr->op!=TK_AGG_COLUMN", file=0x22873d "sqlite3.c", line=126590, 
    function=<optimized out>) at assert.c:92
#3  0x00007f6e001a4fd6 in __GI___assert_fail (assertion=0x211bd9 "pColExpr->op!=TK_AGG_COLUMN", file=0x22873d "sqlite3.c", line=126590, 
    function=0x221122 "int sqlite3ColumnsFromExprList(Parse *, ExprList *, i16 *, Column **)") at assert.c:101
#4  0x000000000032d160 in sqlite3ColumnsFromExprList (pParse=0x7ffedaed2d60, pEList=0x10cae10, pnCol=0x10c7166, paCol=0x10c7128) at sqlite3.c:126590
#5  0x000000000033cf65 in sqlite3ExpandSubquery (pParse=0x7ffedaed2d60, pFrom=0x10c91f8) at sqlite3.c:129416
#6  0x00000000003a17f2 in sqlite3WindowRewrite (pParse=0x7ffedaed2d60, p=0x10ca960) at sqlite3.c:146385
#7  0x00000000002fc6de in sqlite3Select (pParse=0x7ffedaed2d60, p=0x10ca960, pDest=0x7ffedaed15d0) at sqlite3.c:130281
#8  0x00000000003a45ed in multiSelect (pParse=0x7ffedaed2d60, p=0x10ca960, pDest=0x7ffedaed19d8) at sqlite3.c:127314
#9  0x00000000002fccf5 in sqlite3Select (pParse=0x7ffedaed2d60, p=0x10ca960, pDest=0x7ffedaed19d8) at sqlite3.c:130384
#10 0x000000000034f659 in sqlite3CodeSubselect (pParse=0x7ffedaed2d60, pExpr=0x10ce1a0) at sqlite3.c:99820
#11 0x000000000034bbfd in sqlite3ExprCodeTarget (pParse=0x7ffedaed2d60, pExpr=0x10ce1a0, target=10) at sqlite3.c:100770
#12 0x000000000034e9ee in sqlite3ExprCodeExprList (pParse=0x7ffedaed2d60, pList=0x10c83e0, target=10, srcReg=0, flags=1 '\001') at sqlite3.c:101202
#13 0x00000000003ae220 in pushOntoSorter (pParse=0x7ffedaed2d60, pSort=0x7ffedaed1f88, pSelect=0x10dcc00, regData=11, regOrigData=0, nData=0, nPrefixReg=1) at sqlite3.c:125256
#14 0x00000000003a9edf in selectInnerLoop (pParse=0x7ffedaed2d60, p=0x10dcc00, srcTab=-1, pSort=0x7ffedaed1f88, pDistinct=0x7ffedaed2040, pDest=0x7ffedaed2150, iContinue=27, iBreak=24) at sqlite3.c:125809
#15 0x00000000002ff58c in sqlite3Select (pParse=0x7ffedaed2d60, p=0x10dcc00, pDest=0x7ffedaed2150) at sqlite3.c:131068
#16 0x00000000002ecaa8 in yy_reduce (yypParser=0x7ffedaed2380, yyruleno=79, yyLookahead=1, yyLookaheadToken=..., pParse=0x7ffedaed2d60) at sqlite3.c:151581
#17 0x00000000002e92f8 in sqlite3Parser (yyp=0x7ffedaed2380, yymajor=1, yyminor=...) at sqlite3.c:152877
#18 0x00000000002a68b3 in sqlite3RunParser (pParse=0x7ffedaed2d60, zSql=0x10c2b34 ";", pzErrMsg=0x7ffedaed2f40) at sqlite3.c:154013
#19 0x00000000002a1683 in sqlite3Prepare (db=0x10ae2b0, zSql=0x10bfffc "SELECT \n    (SELECT avg(over) UNION SELECT min(over) OVER ()) \n  FROM v0 GROUP BY over\n  ORDER BY 1\n;", nBytes=101, prepFlags=128, pReprepare=0x0, 
    ppStmt=0x7ffedaed3078, pzTail=0x7ffedaed3060) at sqlite3.c:124303
#20 0x00000000002a0d4e in sqlite3LockAndPrepare (db=0x10ae2b0, zSql=0x10bfffc "SELECT \n    (SELECT avg(over) UNION SELECT min(over) OVER ()) \n  FROM v0 GROUP BY over\n  ORDER BY 1\n;", nBytes=101, prepFlags=128, 
    pOld=0x0, ppStmt=0x7ffedaed3078, pzTail=0x7ffedaed3060) at sqlite3.c:124403
#21 0x000000000029247f in sqlite3_prepare_v2 (db=0x10ae2b0, zSql=0x10bfffc "SELECT \n    (SELECT avg(over) UNION SELECT min(over) OVER ()) \n  FROM v0 GROUP BY over\n  ORDER BY 1\n;", nBytes=101, ppStmt=0x7ffedaed3078, 
    pzTail=0x7ffedaed3060) at sqlite3.c:124487
#22 0x0000000000256bd0 in main (argc=1, argv=0x7ffedaed3228) at target.cc:106
(gdb) quit
A debugging session is active.

	Inferior 1 [process 55868] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
