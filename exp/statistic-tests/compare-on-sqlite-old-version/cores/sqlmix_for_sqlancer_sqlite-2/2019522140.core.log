GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /root/sqlite_driver_fast...
(gdb) Starting program: /root/sqlite_driver_fast < "/root/out/default/crashes/id:000153,sig:06,src:020730+020289,time:2064189,execs:274119,op:merge.so,pos:0"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
SQL: [;PRAGMA vdbe_listing=on;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 Expire           0    0    0               00 
   2 Halt             0    0    0               00 
VDBE Program Listing:
   0 Init             0   11    0               00 Start at 11
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   10    0               00 
   5 Column           0    1    1               00 r[1]=sqlite_master.name
   6 Column           0    3    2               00 r[2]=sqlite_master.rootpage
   7 Column           0    4    3               00 r[3]=sqlite_master.sql
   8 ResultRow        1    3    0               00 output=r[1..3]
   9 Next             0    5    0               01 
  10 Halt             0    0    0               00 
  11 Transaction      0    0    0 0             00 usesStmtJournal=0
  12 Goto             0    1    0               00 
SQL: [CREATE TABLE t0(c0 int, v0 int);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 t0            00 r[7]='t0'
  20 String8          0    8    0 t0            00 r[8]='t0'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE t0(c0 int, v0 int) 00 r[10]='CREATE TABLE t0(c0 int, v0 int)'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    1               00 
  26 ParseSchema      0    0    0 tbl_name='t0' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    0 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    1 0             00 usesStmtJournal=0
  16 String8          0    2    0 t0            00 r[2]='t0'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;
;INSERT INTO t0(v0) VALUES(123);]
VDBE Program Listing:
   0 Init             0    7    0               00 Start at 7
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t0
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer        123    3    0               00 r[3]=123
   4 MakeRecord       2    2    4 DD            00 r[4]=mkrec(r[2..3])
   5 Insert           0    4    1 t0            39 intkey=r[1] data=r[4]
   6 Halt             0    0    0               00 
   7 Transaction      0    1    1 0             01 usesStmtJournal=0
   8 Null             0    2    0               00 r[2]=NULL
   9 Goto             0    1    0               00 
SQL: [INSERT INTO t0 VALUES(24,7)
;]
VDBE Program Listing:
   0 Init             0    8    0               00 Start at 8
   1 OpenWrite        0    2    0 2             00 root=2 iDb=0; t0
   2 NewRowid         0    1    0               00 r[1]=rowid
   3 Integer         24    2    0               00 r[2]=24
   4 Integer          7    3    0               00 r[3]=7
   5 MakeRecord       2    2    4 DD            00 r[4]=mkrec(r[2..3])
   6 Insert           0    4    1 t0            39 intkey=r[1] data=r[4]
   7 Halt             0    0    0               00 
   8 Transaction      0    1    1 0             01 usesStmtJournal=0
   9 Goto             0    1    0               00 
SQL: [;SELECT *, 'x' FROM t0 WHERE (v0=1 OR v0=2) AND v0 = (
    SELECT v0 FROM (SELECT DISTINCT v0 FROM t0) WHERE v0=3
  );]
VDBE Program Listing:
   0 Init             0   55    0               00 Start at 55
   1 OpenRead         0    2    0 2             00 root=2 iDb=0; t0
   2 Explain          2    0    0 SCAN TABLE t0 00 
   3 Rewind           0   54    0               00 
   4 Column           0    1    1               00 r[1]=t0.v0
   5 Eq               2    8    1 (BINARY)      44 if r[1]==r[2] goto 8
   6 Column           0    1    1               00 r[1]=t0.v0
   7 Ne               3   53    1 (BINARY)      54 if r[1]!=r[3] goto 53
   8 Column           0    1    1               00 r[1]=t0.v0
   9 Integer         47    5    0               00 r[5]=47; return address
  10 Once             0   47    0               00 
  11 Explain         11    0    0 SCALAR SUBQUERY 2 00 
  12 Null             0    6    6               00 r[6..6]=NULL; Init subquery result
  13 InitCoroutine    7   27   14               00 subquery_1
  14 Explain         14   11    0 CO-ROUTINE 1  00 
  15 Null             1   11    0               08 r[11]=NULL
  16 OpenRead         2    2    0 2             00 root=2 iDb=0; t0
  17 Explain         17   14    0 SCAN TABLE t0 00 
  18 Rewind           2   26    0               00 
  19 Column           2    1    8               00 r[8]=t0.v0
  20 Ne               9   25    8 (BINARY)      54 if r[8]!=r[9] goto 25
  21 Column           2    1   10               00 r[10]=t0.v0
  22 Eq              10   25   11 (BINARY)      80 if r[11]==r[10] goto 25
  23 Copy            10   11    0               00 r[11]=r[10]
  24 Yield            7    0    0               00 
  25 Next             2   19    0               01 
  26 EndCoroutine     7    0    0               00 
  27 Integer          1   12    0               00 r[12]=1; LIMIT counter
  28 Once             0   40    0               00 
  29 OpenAutoindex    4    2    0 k(2,B,)       00 nColumn=2; for subquery_1
  30 Integer          0   15    0               00 r[15]=0
  31 InitCoroutine    7    0   14               00 
  32 Yield            7   40    0               00 next row of subquery_1
  33 Copy            10   13    0               00 r[13]=r[10]; subquery_1.v0
  34 Ne               9   39   13 (BINARY)      54 if r[13]!=r[9] goto 39
  35 Copy            10   14    0               00 r[14]=r[10]; subquery_1.v0
  36 AddImm          15    1    0               00 r[15]=r[15]+1
  37 MakeRecord      14    2   13               00 r[13]=mkrec(r[14..15])
  38 IdxInsert        4   13    0               10 key=r[13]
  39 Goto             0   32    0               03 
  40 Explain         40   11    0 SEARCH SUBQUERY 1 USING AUTOMATIC PARTIAL COVERING INDEX (v0=?) 00 
  41 Integer          3   16    0               00 r[16]=3
  42 SeekGE           4   47   16 1             00 key=r[16]
  43 IdxGT            4   47   16 1             00 key=r[16]
  44 Column           4    0    6               00 r[6]=subquery_1.v0
  45 DecrJumpZero    12   47    0               00 if (--r[12])==0 goto 47
  46 Next             4   43    0               00 
  47 Return           5    0    0               00 
  48 Ne               6   53    1 (BINARY)      53 if r[1]!=r[6] goto 53
  49 Column           0    0   17               00 r[17]=t0.c0
  50 Column           0    1   18               00 r[18]=t0.v0
  51 String8          0   19    0 x             00 r[19]='x'
  52 ResultRow       17    3    0               00 output=r[17..19]
  53 Next             0    4    0               01 
  54 Halt             0    0    0               00 
  55 Transaction      0    0    1 0             01 usesStmtJournal=0
  56 Integer          1    2    0               00 r[2]=1
  57 Integer          2    3    0               00 r[3]=2
  58 Integer          3    9    0               00 r[9]=3
  59 Goto             0    1    0               00 
SQL: [SELECT v0 FROM t0 ORDER BY v0+1 LIMIT -2, -5
;]
VDBE Program Listing:
   0 Init             0   27    0               00 Start at 27
   1 OpenEphemeral    1    3    0 k(1,B)        00 nColumn=3
   2 Integer         -5    1    0               00 r[1]=-5; LIMIT counter
   3 Integer         -2    2    0               00 r[2]=-2
   4 MustBeInt        2    0    0               00 OFFSET counter
   5 OffsetLimit      1    3    2               00 if r[1]>0 then r[3]=r[1]+max(0,r[2]) else r[3]=(-1); LIMIT+OFFSET
   6 OpenRead         0    2    0 2             00 root=2 iDb=0; t0
   7 Explain          7    0    0 SCAN TABLE t0 00 
   8 Rewind           0   20    0               00 
   9 Column           0    1    7               00 r[7]=t0.v0
  10 Add              8    7    4               00 r[4]=r[8]+r[7]
  11 Sequence         1    5    0               00 r[5]=cursor[1].ctr++
  12 IfNotZero        3   16    0               00 if r[3]!=0 then r[3]--, goto 16
  13 Last             1    0    0               00 
  14 IdxLE            1   19    4 1             00 key=r[4]
  15 Delete           1    0    0               00 
  16 Column           0    1    6               00 r[6]=t0.v0
  17 MakeRecord       4    3    9               00 r[9]=mkrec(r[4..6])
  18 IdxInsert        1    9    4 3             00 key=r[9]
  19 Next             0    9    0               01 
  20 Explain         20    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  21 Sort             1   26    0               00 
  22 IfPos            2   25    1               00 if r[2]>0 then r[2]-=1, goto 25; OFFSET
  23 Column           1    2    6               00 r[6]=v0
  24 ResultRow        6    1    0               00 output=r[6]
  25 Next             1   22    0               00 
  26 Halt             0    0    0               00 
  27 Transaction      0    0    1 0             01 usesStmtJournal=0
  28 Integer          1    8    0               00 r[8]=1
  29 Goto             0    1    0               00 
SQL: [SELECT v0 FROM t0 ORDER BY v0 LIMIT 2, 5
;]
VDBE Program Listing:
   0 Init             0   25    0               00 Start at 25
   1 OpenEphemeral    1    3    0 k(1,B)        00 nColumn=3
   2 Integer          5    1    0               00 r[1]=5; LIMIT counter
   3 Integer          2    2    0               00 r[2]=2
   4 MustBeInt        2    0    0               00 OFFSET counter
   5 OffsetLimit      1    3    2               00 if r[1]>0 then r[3]=r[1]+max(0,r[2]) else r[3]=(-1); LIMIT+OFFSET
   6 OpenRead         0    2    0 2             00 root=2 iDb=0; t0
   7 Explain          7    0    0 SCAN TABLE t0 00 
   8 Rewind           0   18    0               00 
   9 Column           0    1    4               00 r[4]=t0.v0
  10 Sequence         1    5    0               00 r[5]=cursor[1].ctr++
  11 IfNotZero        3   15    0               00 if r[3]!=0 then r[3]--, goto 15
  12 Last             1    0    0               00 
  13 IdxLE            1   17    4 1             00 key=r[4]
  14 Delete           1    0    0               00 
  15 MakeRecord       4    2    7               00 r[7]=mkrec(r[4..5])
  16 IdxInsert        1    7    4 2             00 key=r[7]
  17 Next             0    9    0               01 
  18 Explain         18    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  19 Sort             1   24    0               00 
  20 IfPos            2   23    1               00 if r[2]>0 then r[2]-=1, goto 23; OFFSET
  21 Column           1    0    6               00 r[6]=v0
  22 ResultRow        6    1    0               00 output=r[6]
  23 Next             1   20    0               00 
  24 Halt             0    0    0               00 
  25 Transaction      0    0    1 0             01 usesStmtJournal=0
  26 Goto             0    1    0               00 
SQL: [;CREATE TABLE over(following TEXT, CHECK(following BETWEEN +following AND 999999));]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 ReadCookie       0    3    2               00 
   2 If               3    5    0               00 
   3 SetCookie        0    2    4               00 
   4 SetCookie        0    5    1               00 
   5 CreateBtree      0    2    1               00 r[2]=root iDb=0 flags=1
   6 OpenWrite        0    1    0 5             00 root=1 iDb=0
   7 NewRowid         0    1    0               00 r[1]=rowid
   8 Blob             6    3    0              00 r[3]= (len=6)
   9 Insert           0    3    1               08 intkey=r[1] data=r[3]
  10 Close            0    0    0               00 
  11 Close            0    0    0               00 
  12 Null             0    4    5               00 r[4..5]=NULL
  13 OpenWrite        1    1    0 5             00 root=1 iDb=0; sqlite_master
  14 Explain         14    0    0 SEARCH TABLE sqlite_master USING INTEGER PRIMARY KEY (rowid=?) 00 
  15 SeekRowid        1   17    1               00 intkey=r[1]
  16 Rowid            1    5    0               00 r[5]=rowid
  17 IsNull           5   25    0               00 if r[5]==NULL goto 25
  18 String8          0    6    0 table         00 r[6]='table'
  19 String8          0    7    0 over          00 r[7]='over'
  20 String8          0    8    0 over          00 r[8]='over'
  21 Copy             2    9    0               00 r[9]=r[2]
  22 String8          0   10    0 CREATE TABLE over(following TEXT, CHECK(following BETWEEN +following AND 999999)) 00 r[10]='CREATE TABLE over(following TEXT, CHECK(following BETWEEN +following AND 999999))'
  23 MakeRecord       6    5   11 BBBDB         00 r[11]=mkrec(r[6..10])
  24 Insert           1   11    5               00 intkey=r[5] data=r[11]
  25 SetCookie        0    1    2               00 
  26 ParseSchema      0    0    0 tbl_name='over' AND type!='trigger' 00 
  27 Halt             0    0    0               00 
  28 Transaction      0    1    1 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
VDBE Program Listing:
   0 Init             0   15    0               00 Start at 15
   1 Noop             1    5    0               00 
   2 OpenRead         0    1    0 5             00 root=1 iDb=0; sqlite_master
   3 Explain          3    0    0 SCAN TABLE sqlite_master 00 
   4 Rewind           0   14    0               00 
   5 Column           0    2    1               00 r[1]=sqlite_master.tbl_name
   6 Ne               2   13    1 (BINARY)      52 if r[1]!=r[2] goto 13
   7 Column           0    0    1               00 r[1]=sqlite_master.type
   8 Eq               3   13    1 (BINARY)      52 if r[1]==r[3] goto 13
   9 Column           0    1    4               00 r[4]=sqlite_master.name
  10 Column           0    3    5               00 r[5]=sqlite_master.rootpage
  11 Column           0    4    6               00 r[6]=sqlite_master.sql
  12 ResultRow        4    3    0               00 output=r[4..6]
  13 Next             0    5    0               01 
  14 Halt             0    0    0               00 
  15 Transaction      0    0    2 0             00 usesStmtJournal=0
  16 String8          0    2    0 over          00 r[2]='over'
  17 String8          0    3    0 trigger       00 r[3]='trigger'
  18 Goto             0    1    0               00 
SQL: [;SELECT quote(v0) FROM t0 ORDER BY rowid;]
VDBE Program Listing:
   0 Init             0   10    0               00 Start at 10
   1 Noop             1    3    0               00 
   2 OpenRead         0    2    0 2             00 root=2 iDb=0; t0
   3 Explain          3    0    0 SCAN TABLE t0 00 
   4 Rewind           0    9    0               00 
   5 Column           0    1    2               00 r[2]=t0.v0
   6 Function0        0    2    1 quote(1)      01 r[1]=func(r[2])
   7 ResultRow        1    1    0               00 output=r[1]
   8 Next             0    5    0               01 
   9 Halt             0    0    0               00 
  10 Transaction      0    0    2 0             01 usesStmtJournal=0
  11 Goto             0    1    0               00 
SQL: [SELECT * FROM t0 AS a, t0 AS b ORDER BY a.c0, b.c0 LIMIT 5
;]
VDBE Program Listing:
   0 Init             0   31    0               00 Start at 31
   1 OpenEphemeral    2    7    0 k(2,B,B)      00 nColumn=7
   2 Integer          5    1    0               00 r[1]=5; LIMIT counter
   3 OpenRead         0    2    0 2             00 root=2 iDb=0; t0
   4 OpenRead         1    2    0 2             00 root=2 iDb=0; t0
   5 Explain          5    0    0 SCAN TABLE t0 AS a 00 
   6 Rewind           0   22    0               00 
   7 Explain          7    0    0 SCAN TABLE t0 AS b 00 
   8 Rewind           1   22    0               00 
   9 Column           0    0    2               00 r[2]=t0.c0
  10 Column           1    0    3               00 r[3]=t0.c0
  11 Sequence         2    4    0               00 r[4]=cursor[2].ctr++
  12 IfNotZero        1   16    0               00 if r[1]!=0 then r[1]--, goto 16
  13 Last             2    0    0               00 
  14 IdxLE            2   20    2 2             00 key=r[2..3]
  15 Delete           2    0    0               00 
  16 Column           0    1    5               00 r[5]=t0.v0
  17 Column           1    1    6               00 r[6]=t0.v0
  18 MakeRecord       2    5    9               00 r[9]=mkrec(r[2..6])
  19 IdxInsert        2    9    2 5             00 key=r[9]
  20 Next             1    9    0               01 
  21 Next             0    7    0               01 
  22 Explain         22    0    0 USE TEMP B-TREE FOR ORDER BY 00 
  23 Sort             2   30    0               00 
  24 Column           2    4    8               00 r[8]=v0
  25 Column           2    1    7               00 r[7]=c0
  26 Column           2    3    6               00 r[6]=v0
  27 Column           2    0    5               00 r[5]=c0
  28 ResultRow        5    4    0               00 output=r[5..8]
  29 Next             2   24    0               00 
  30 Halt             0    0    0               00 
  31 Transaction      0    0    2 0             01 usesStmtJournal=0
  32 Goto             0    1    0               00 
SQL: [;SELECT count(*) FROM over;]
VDBE Program Listing:
   0 Init             0    7    0               00 Start at 7
   1 OpenRead         1    3    0 1             00 root=3 iDb=0
   2 Count            1    1    0               00 r[1]=count()
   3 Close            1    0    0               00 
   4 Copy             1    2    0               00 r[2]=r[1]
   5 ResultRow        2    1    0               00 output=r[2]
   6 Halt             0    0    0               00 
   7 Transaction      0    0    2 0             01 usesStmtJournal=0
   8 Goto             0    1    0               00 
SQL: [;
;SELECT count(*) FROM over WHERE rowid IN (SELECT rowid FROM over LIMIT 2);]
VDBE Program Listing:
   0 Init             0   28    0               00 Start at 28
   1 Null             0    1    1               00 r[1..1]=NULL
   2 OpenRead         0    3    0 0             00 root=3 iDb=0; over
   3 Explain          3    0    0 SEARCH TABLE over USING INTEGER PRIMARY KEY (rowid=?) 00 
   4 Integer         17    3    0               00 r[3]=17; return address
   5 Once             0   17    0               00 
   6 OpenEphemeral    2    1    0 k(1,)         00 nColumn=1; Result of SELECT 1
   7 Explain          7    0    0 LIST SUBQUERY 1 00 
   8 Integer          2    4    0               00 r[4]=2; LIMIT counter
   9 OpenRead         1    3    0 0             00 root=3 iDb=0; over
  10 Explain         10    7    0 SCAN TABLE over 00 
  11 Rewind           1   17    0               00 
  12 Rowid            1    5    0               00 r[5]=rowid
  13 MakeRecord       5    1    6 C             00 r[6]=mkrec(r[5])
  14 IdxInsert        2    6    5 1             00 key=r[6]
  15 DecrJumpZero     4   17    0               00 if (--r[4])==0 goto 17
  16 Next             1   12    0               01 
  17 Return           3    0    0               00 
  18 Rewind           2   24    0               00 
  19 Column           2    0    2               00 r[2]=
  20 IsNull           2   23    0               00 if r[2]==NULL goto 23
  21 SeekRowid        0   23    2               00 intkey=r[2]
  22 AggStep          0    0    1 count(0)      00 accum=r[1] step(r[0])
  23 Next             2   19    0               00 
  24 AggFinal         1    0    0 count(0)      00 accum=r[1] N=0
  25 Copy             1    7    0               00 r[7]=r[1]
  26 ResultRow        7    1    0               00 output=r[7]
  27 Halt             0    0    0               00 
  28 Transaction      0    0    2 0             01 usesStmtJournal=0
  29 Goto             0    1    0               00 
SQL: [;
;BEGIN;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       0    0    0               00 
   2 Halt             0    0    0               00 
SQL: [;END;]
VDBE Program Listing:
   0 Init             0    1    0               00 Start at 1
   1 AutoCommit       1    0    0               00 
   2 Halt             0    0    0               00 
SQL: [SELECT * FROM over LIMIT -1 OFFSET 1
  
;]
VDBE Program Listing:
   0 Init             0   14    0               00 Start at 14
   1 Integer         -1    1    0               00 r[1]=-1; LIMIT counter
   2 Integer          1    2    0               00 r[2]=1
   3 MustBeInt        2    0    0               00 OFFSET counter
   4 OffsetLimit      1    3    2               00 if r[1]>0 then r[3]=r[1]+max(0,r[2]) else r[3]=(-1); LIMIT+OFFSET
   5 OpenRead         0    3    0 1             00 root=3 iDb=0; over
   6 Explain          6    0    0 SCAN TABLE over 00 
   7 Rewind           0   13    0               00 
   8 IfPos            2   12    1               00 if r[2]>0 then r[2]-=1, goto 12; OFFSET
   9 Column           0    0    4               00 r[4]=over.following
  10 ResultRow        4    1    0               00 output=r[4]
  11 DecrJumpZero     1   13    0               00 if (--r[1])==0 goto 13
  12 Next             0    8    0               01 
  13 Halt             0    0    0               00 
  14 Transaction      0    0    2 0             01 usesStmtJournal=0
  15 Goto             0    1    0               00 
SQL: [;SELECT v0 FROM t0 UNION ALL SELECT v0 FROM t0 LIMIT 5;]
VDBE Program Listing:
   0 Init             0   21    0               00 Start at 21
   1 Explain          1    0    0 COMPOUND QUERY 00 
   2 Explain          2    1    0 LEFT-MOST SUBQUERY 00 
   3 Integer          5    1    0               00 r[1]=5; LIMIT counter
   4 OpenRead         1    2    0 2             00 root=2 iDb=0; t0
   5 Explain          5    2    0 SCAN TABLE t0 00 
   6 Rewind           1   11    0               00 
   7 Column           1    1    2               00 r[2]=t0.v0
   8 ResultRow        2    1    0               00 output=r[2]
   9 DecrJumpZero     1   11    0               00 if (--r[1])==0 goto 11
  10 Next             1    7    0               01 
  11 IfNot            1   20    0               00 Jump ahead if LIMIT reached
  12 Explain         12    1    0 UNION ALL     00 
  13 OpenRead         0    2    0 2             00 root=2 iDb=0; t0
  14 Explain         14   12    0 SCAN TABLE t0 00 
  15 Rewind           0   20    0               00 
  16 Column           0    1    2               00 r[2]=t0.v0
  17 ResultRow        2    1    0               00 output=r[2]
  18 DecrJumpZero     1   20    0               00 if (--r[1])==0 goto 20
  19 Next             0   16    0               01 
  20 Halt             0    0    0               00 
  21 Transaction      0    0    2 0             01 usesStmtJournal=0
  22 Goto             0    1    0               00 
SQL: [;INSERT INTO over VALUES(1),(2);]
VDBE Program Listing:
   0 Init             0   19    0               00 Start at 19
   1 InitCoroutine    3    8    2               00 
   2 Explain          2    0    0 SCAN 2 CONSTANT ROWS 00 
   3 Integer          1    2    0               00 r[2]=1
   4 Yield            3    0    0               00 
   5 Integer          2    2    0               00 r[2]=2
   6 Yield            3    0    0               00 
   7 EndCoroutine     3    0    0               00 
   8 OpenWrite        0    3    0 1             00 root=3 iDb=0; over
   9 Yield            3   18    0               00 
  10 NewRowid         0    1    0               00 r[1]=rowid
  11 Abortable        0    0    0               00 
  12 Lt               2   14    2 (BINARY)      42 if r[2]<r[2] goto 14
  13 Le               5   15    2 (BINARY)      52 if r[2]<=r[5] goto 15
  14 Halt           275    2    0 over          03 
  15 MakeRecord       2    1    4 B             00 r[4]=mkrec(r[2])
  16 Insert           0    4    1 over          39 intkey=r[1] data=r[4]
  17 Goto             0    9    0               00 
  18 Halt             0    0    0               00 
  19 Transaction      0    1    2 0             01 usesStmtJournal=1
  20 Integer       999999    5    0               00 r[5]=999999
  21 Goto             0    1    0               00 

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
(gdb) #0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f9d52057859 in __GI_abort () at abort.c:79
#2  0x00007f9d52057729 in __assert_fail_base (fmt=0x7f9d521ed588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=<optimized out>) at assert.c:92
#3  0x00007f9d52068fd6 in __GI___assert_fail (assertion=0x21d368 "pIn1!=pIn3", file=0x22873d "sqlite3.c", line=85580, function=0x216524 "int sqlite3VdbeExec(Vdbe *)") at assert.c:101
#4  0x00000000003c5c6a in sqlite3VdbeExec (p=0x17ee3c0) at sqlite3.c:85580
#5  0x0000000000411104 in sqlite3Step (p=0x17ee3c0) at sqlite3.c:81930
#6  0x000000000029128d in sqlite3_step (pStmt=0x17ee3c0) at sqlite3.c:81995
#7  0x00000000002570b9 in main (argc=1, argv=0x7ffcd01513b8) at target.cc:139
(gdb) quit
A debugging session is active.

	Inferior 1 [process 56205] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
